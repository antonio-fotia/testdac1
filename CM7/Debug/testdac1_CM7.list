
testdac1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abbc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800ae58  0800ae58  0001ae58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b070  0800b070  0001b070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b078  0800b078  0001b078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b07c  0800b07c  0001b07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800b080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000384  20000014  0800b094  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000398  0800b094  00020398  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000244dd  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000363e  00000000  00000000  0004451f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016b0  00000000  00000000  00047b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001568  00000000  00000000  00049210  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c02f  00000000  00000000  0004a778  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000145f1  00000000  00000000  000867a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00197b5a  00000000  00000000  0009ad98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002328f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000063d4  00000000  00000000  00232970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ae3c 	.word	0x0800ae3c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	0800ae3c 	.word	0x0800ae3c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	2b07      	cmp	r3, #7
 800063c:	d907      	bls.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000
 800070c:	00000000 	.word	0x00000000

08000710 <get_sineval>:
int i=0;
int shift=0; //fattore che mi permette di traslare verticalmente il segnale generato
float scale=1; //fattore di scala

void get_sineval ()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	for (i=0;i<100;i++)
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <get_sineval+0xc8>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	e049      	b.n	80007b0 <get_sineval+0xa0>
	{
		sin_val[i] = ((sin(i*2*PI/100) + 1)*((4095+1)/2) + shift);
 800071c:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <get_sineval+0xc8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	ee07 3a90 	vmov	s15, r3
 8000726:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800072a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80007c0 <get_sineval+0xb0>
 800072e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000732:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80007c8 <get_sineval+0xb8>
 8000736:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800073a:	eeb0 0b45 	vmov.f64	d0, d5
 800073e:	f009 fd93 	bl	800a268 <sin>
 8000742:	eeb0 6b40 	vmov.f64	d6, d0
 8000746:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800074a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800074e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80007d0 <get_sineval+0xc0>
 8000752:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <get_sineval+0xcc>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	ee07 3a90 	vmov	s15, r3
 800075e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000762:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <get_sineval+0xc8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800076e:	ee17 1a90 	vmov	r1, s15
 8000772:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <get_sineval+0xd0>)
 8000774:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//sin_val[i] = ((sin(i*2*PI/100) + 1)*(4095+1/2)); //il secondo elemento è l'ampiezza *** attenzione, essendo valori interi, se <0 la sin appare tosata
		//il +1000 serve solo se applichiamo il fattore di scala e va modulato in base ad esso
		//1000 va bene per il fattore di scala 0.1, poichè mi fa uscire dal limite della risoluzione del DAC
		sin_val[i]=sin_val[i]*scale; //fattore di scala
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <get_sineval+0xc8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <get_sineval+0xd0>)
 800077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000782:	ee07 3a90 	vmov	s15, r3
 8000786:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <get_sineval+0xd4>)
 800078c:	edd3 7a00 	vldr	s15, [r3]
 8000790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <get_sineval+0xc8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800079c:	ee17 1a90 	vmov	r1, s15
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <get_sineval+0xd0>)
 80007a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<100;i++)
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <get_sineval+0xc8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <get_sineval+0xc8>)
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <get_sineval+0xc8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b63      	cmp	r3, #99	; 0x63
 80007b6:	ddb1      	ble.n	800071c <get_sineval+0xc>
	}

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	f3af 8000 	nop.w
 80007c0:	4d12d84a 	.word	0x4d12d84a
 80007c4:	400921fb 	.word	0x400921fb
 80007c8:	00000000 	.word	0x00000000
 80007cc:	40590000 	.word	0x40590000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	40a00000 	.word	0x40a00000
 80007d8:	20000030 	.word	0x20000030
 80007dc:	20000034 	.word	0x20000034
 80007e0:	200001b4 	.word	0x200001b4
 80007e4:	20000008 	.word	0x20000008

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b0a4      	sub	sp, #144	; 0x90
 80007ec:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	//unsigned int uiAnalogData[100];
	unsigned int uiAnalogData=0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	67bb      	str	r3, [r7, #120]	; 0x78
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007fa:	bf00      	nop
 80007fc:	4b54      	ldr	r3, [pc, #336]	; (8000950 <main+0x168>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000804:	2b00      	cmp	r3, #0
 8000806:	d006      	beq.n	8000816 <main+0x2e>
 8000808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800080c:	1e5a      	subs	r2, r3, #1
 800080e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000812:	2b00      	cmp	r3, #0
 8000814:	dcf2      	bgt.n	80007fc <main+0x14>
  if ( timeout < 0 )
 8000816:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800081a:	2b00      	cmp	r3, #0
 800081c:	da01      	bge.n	8000822 <main+0x3a>
  {
  Error_Handler();
 800081e:	f000 fbad 	bl	8000f7c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f000 fd69 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f000 f89f 	bl	8000968 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800082a:	4b49      	ldr	r3, [pc, #292]	; (8000950 <main+0x168>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	4a47      	ldr	r2, [pc, #284]	; (8000950 <main+0x168>)
 8000832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083a:	4b45      	ldr	r3, [pc, #276]	; (8000950 <main+0x168>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000844:	66bb      	str	r3, [r7, #104]	; 0x68
 8000846:	6ebb      	ldr	r3, [r7, #104]	; 0x68
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000848:	2000      	movs	r0, #0
 800084a:	f005 f8f1 	bl	8005a30 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800084e:	2100      	movs	r1, #0
 8000850:	2000      	movs	r0, #0
 8000852:	f005 f907 	bl	8005a64 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800085e:	bf00      	nop
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <main+0x168>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000868:	2b00      	cmp	r3, #0
 800086a:	d106      	bne.n	800087a <main+0x92>
 800086c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8000876:	2b00      	cmp	r3, #0
 8000878:	dcf2      	bgt.n	8000860 <main+0x78>
if ( timeout < 0 )
 800087a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800087e:	2b00      	cmp	r3, #0
 8000880:	da01      	bge.n	8000886 <main+0x9e>
{
Error_Handler();
 8000882:	f000 fb7b 	bl	8000f7c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 fab3 	bl	8000df0 <MX_GPIO_Init>
  MX_DMA_Init();
 800088a:	f000 fa91 	bl	8000db0 <MX_DMA_Init>
  MX_DAC1_Init();
 800088e:	f000 f9c3 	bl	8000c18 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000892:	f000 f9f3 	bl	8000c7c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000896:	f000 f947 	bl	8000b28 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800089a:	f000 fa3d 	bl	8000d18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


 HAL_TIM_Base_Start(&htim2);
 800089e:	482d      	ldr	r0, [pc, #180]	; (8000954 <main+0x16c>)
 80008a0:	f007 fffe 	bl	80088a0 <HAL_TIM_Base_Start>

 get_sineval();
 80008a4:	f7ff ff34 	bl	8000710 <get_sineval>

 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 80008a8:	2300      	movs	r3, #0
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	4a2a      	ldr	r2, [pc, #168]	; (8000958 <main+0x170>)
 80008b0:	2100      	movs	r1, #0
 80008b2:	482a      	ldr	r0, [pc, #168]	; (800095c <main+0x174>)
 80008b4:	f002 fb78 	bl	8002fa8 <HAL_DAC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  uint8_t buffertx[100]="";
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2260      	movs	r2, #96	; 0x60
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f009 fcc5 	bl	800a254 <memset>
int cont=0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
int j=0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	67fb      	str	r3, [r7, #124]	; 0x7c
int alfa=25000;
 80008d4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80008d8:	677b      	str	r3, [r7, #116]	; 0x74
int k=0;
 80008da:	2300      	movs	r3, #0
 80008dc:	673b      	str	r3, [r7, #112]	; 0x70
int cont2=0;
 80008de:	2300      	movs	r3, #0
 80008e0:	66fb      	str	r3, [r7, #108]	; 0x6c

        //DAC

		for (i=0;i<100;i++)
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <main+0x178>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e02c      	b.n	8000944 <main+0x15c>
           VEF+ is the input voltage reference (refer to the device datasheet)
         e.g. To set DAC_OUT1 to 0.7V, use
           Assuming that VREF+ = 3.3V, DAC_OUT1 = (3.3 * 868) / 4095 = 0.7V

		   */
      		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sin_val[i]);
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <main+0x178>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <main+0x170>)
 80008f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	4818      	ldr	r0, [pc, #96]	; (800095c <main+0x174>)
 80008fa:	f002 fc13 	bl	8003124 <HAL_DAC_SetValue>
     		for (j=0;j<alfa;j++)  //ritardo sintetico
 80008fe:	2300      	movs	r3, #0
 8000900:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000902:	e007      	b.n	8000914 <main+0x12c>
     		{
     			cont++;
 8000904:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000908:	3301      	adds	r3, #1
 800090a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
     		for (j=0;j<alfa;j++)  //ritardo sintetico
 800090e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000910:	3301      	adds	r3, #1
 8000912:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000914:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000918:	429a      	cmp	r2, r3
 800091a:	dbf3      	blt.n	8000904 <main+0x11c>
		  // HAL_ADC_Start(&hadc1);
		  //HAL_ADC_PollForConversion(&hadc1, 1000);
		  //uiAnalogData=HAL_ADC_GetValue(&hadc1);
		  //HAL_ADC_Stop(&hadc1);

		  HAL_ADC_Start(&hadc1);
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <main+0x17c>)
 800091e:	f001 f97d 	bl	8001c1c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000922:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000926:	480f      	ldr	r0, [pc, #60]	; (8000964 <main+0x17c>)
 8000928:	f001 fa76 	bl	8001e18 <HAL_ADC_PollForConversion>
		  //uiAnalogData[i]=HAL_ADC_GetValue(&hadc1);
		  uiAnalogData=HAL_ADC_GetValue(&hadc1);
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <main+0x17c>)
 800092e:	f001 fb5f 	bl	8001ff0 <HAL_ADC_GetValue>
 8000932:	67b8      	str	r0, [r7, #120]	; 0x78
		  HAL_ADC_Stop(&hadc1);
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <main+0x17c>)
 8000936:	f001 fa3b 	bl	8001db0 <HAL_ADC_Stop>
		for (i=0;i<100;i++)
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <main+0x178>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <main+0x178>)
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <main+0x178>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b63      	cmp	r3, #99	; 0x63
 800094a:	ddce      	ble.n	80008ea <main+0x102>
  {
 800094c:	e7b4      	b.n	80008b8 <main+0xd0>
 800094e:	bf00      	nop
 8000950:	58024400 	.word	0x58024400
 8000954:	20000348 	.word	0x20000348
 8000958:	200001b4 	.word	0x200001b4
 800095c:	20000038 	.word	0x20000038
 8000960:	20000030 	.word	0x20000030
 8000964:	20000150 	.word	0x20000150

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0cc      	sub	sp, #304	; 0x130
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000972:	224c      	movs	r2, #76	; 0x4c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f009 fc6c 	bl	800a254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000980:	2220      	movs	r2, #32
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f009 fc65 	bl	800a254 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4618      	mov	r0, r3
 8000990:	23bc      	movs	r3, #188	; 0xbc
 8000992:	461a      	mov	r2, r3
 8000994:	2100      	movs	r1, #0
 8000996:	f009 fc5d 	bl	800a254 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800099a:	2004      	movs	r0, #4
 800099c:	f005 f876 	bl	8005a8c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	4b5c      	ldr	r3, [pc, #368]	; (8000b18 <SystemClock_Config+0x1b0>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a5b      	ldr	r2, [pc, #364]	; (8000b18 <SystemClock_Config+0x1b0>)
 80009ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b59      	ldr	r3, [pc, #356]	; (8000b18 <SystemClock_Config+0x1b0>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	4b57      	ldr	r3, [pc, #348]	; (8000b1c <SystemClock_Config+0x1b4>)
 80009c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c2:	4a56      	ldr	r2, [pc, #344]	; (8000b1c <SystemClock_Config+0x1b4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009ca:	4b54      	ldr	r3, [pc, #336]	; (8000b1c <SystemClock_Config+0x1b4>)
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	f003 0201 	and.w	r2, r3, #1
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009da:	bf00      	nop
 80009dc:	4b4e      	ldr	r3, [pc, #312]	; (8000b18 <SystemClock_Config+0x1b0>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009e8:	d1f8      	bne.n	80009dc <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009ea:	4b4d      	ldr	r3, [pc, #308]	; (8000b20 <SystemClock_Config+0x1b8>)
 80009ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ee:	f023 0303 	bic.w	r3, r3, #3
 80009f2:	4a4b      	ldr	r2, [pc, #300]	; (8000b20 <SystemClock_Config+0x1b8>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a1a:	2378      	movs	r3, #120	; 0x78
 8000a1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a32:	230c      	movs	r3, #12
 8000a34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f005 f879 	bl	8005b40 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000a54:	f000 fa92 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	233f      	movs	r3, #63	; 0x3f
 8000a5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a70:	2340      	movs	r3, #64	; 0x40
 8000a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a76:	2340      	movs	r3, #64	; 0x40
 8000a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a84:	2340      	movs	r3, #64	; 0x40
 8000a86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f005 fc65 	bl	8006360 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000a9c:	f000 fa6e 	bl	8000f7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <SystemClock_Config+0x1bc>)
 8000aa6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	2201      	movs	r2, #1
 8000aae:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	2213      	movs	r2, #19
 8000ab6:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	2203      	movs	r2, #3
 8000abe:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2202      	movs	r2, #2
 8000ace:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	22c0      	movs	r2, #192	; 0xc0
 8000ad6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	2220      	movs	r2, #32
 8000ade:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2200      	movs	r2, #0
 8000aee:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2200      	movs	r2, #0
 8000af6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	4618      	mov	r0, r3
 8000b00:	f005 ffb2 	bl	8006a68 <HAL_RCCEx_PeriphCLKConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 8000b0a:	f000 fa37 	bl	8000f7c <Error_Handler>
  }
}
 8000b0e:	bf00      	nop
 8000b10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58024800 	.word	0x58024800
 8000b1c:	58000400 	.word	0x58000400
 8000b20:	58024400 	.word	0x58024400
 8000b24:	00080002 	.word	0x00080002

08000b28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	615a      	str	r2, [r3, #20]
 8000b4a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b4e:	4a30      	ldr	r2, [pc, #192]	; (8000c10 <MX_ADC1_Init+0xe8>)
 8000b50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b58:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba8:	4818      	ldr	r0, [pc, #96]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000baa:	f000 fe97 	bl	80018dc <HAL_ADC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bb4:	f000 f9e2 	bl	8000f7c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4812      	ldr	r0, [pc, #72]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000bc4:	f001 ffe4 	bl	8002b90 <HAL_ADCEx_MultiModeConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000bce:	f000 f9d5 	bl	8000f7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_ADC1_Init+0xec>)
 8000bd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bde:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000be2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be4:	2304      	movs	r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_ADC1_Init+0xe4>)
 8000bf6:	f001 fa09 	bl	800200c <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000c00:	f000 f9bc 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000150 	.word	0x20000150
 8000c10:	40022000 	.word	0x40022000
 8000c14:	3ef08000 	.word	0x3ef08000

08000c18 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2224      	movs	r2, #36	; 0x24
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f009 fb15 	bl	800a254 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_DAC1_Init+0x5c>)
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <MX_DAC1_Init+0x60>)
 8000c2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c30:	4810      	ldr	r0, [pc, #64]	; (8000c74 <MX_DAC1_Init+0x5c>)
 8000c32:	f002 f996 	bl	8002f62 <HAL_DAC_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c3c:	f000 f99e 	bl	8000f7c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000c44:	230a      	movs	r3, #10
 8000c46:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_DAC1_Init+0x5c>)
 8000c5c:	f002 faa6 	bl	80031ac <HAL_DAC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c66:	f000 f989 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000038 	.word	0x20000038
 8000c78:	40007400 	.word	0x40007400

08000c7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000c9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ca0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000ca4:	2259      	movs	r2, #89	; 0x59
 8000ca6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000cae:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cb0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000cb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cc4:	f007 fd94 	bl	80087f0 <HAL_TIM_Base_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cce:	f000 f955 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000ce0:	f007 ff2c 	bl	8008b3c <HAL_TIM_ConfigClockSource>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cea:	f000 f947 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cee:	2320      	movs	r3, #32
 8000cf0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <MX_TIM2_Init+0x98>)
 8000cfc:	f008 f958 	bl	8008fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d06:	f000 f939 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000348 	.word	0x20000348

08000d18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d1e:	4a23      	ldr	r2, [pc, #140]	; (8000dac <MX_USART3_UART_Init+0x94>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d62:	f008 f9cb 	bl	80090fc <HAL_UART_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d6c:	f000 f906 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d70:	2100      	movs	r1, #0
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d74:	f009 f965 	bl	800a042 <HAL_UARTEx_SetTxFifoThreshold>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d7e:	f000 f8fd 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d86:	f009 f99a 	bl	800a0be <HAL_UARTEx_SetRxFifoThreshold>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d90:	f000 f8f4 	bl	8000f7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d96:	f009 f91b 	bl	8009fd0 <HAL_UARTEx_DisableFifoMode>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000da0:	f000 f8ec 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000004c 	.word	0x2000004c
 8000dac:	40004800 	.word	0x40004800

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <MX_DMA_Init+0x3c>)
 8000db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2010      	movs	r0, #16
 8000dda:	f002 f88e 	bl	8002efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dde:	2010      	movs	r0, #16
 8000de0:	f002 f8a5 	bl	8002f2e <HAL_NVIC_EnableIRQ>

}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	58024400 	.word	0x58024400

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b58      	ldr	r3, [pc, #352]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	4a56      	ldr	r2, [pc, #344]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e16:	4b54      	ldr	r3, [pc, #336]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e24:	4b50      	ldr	r3, [pc, #320]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	4a4f      	ldr	r2, [pc, #316]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e34:	4b4c      	ldr	r3, [pc, #304]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	4a47      	ldr	r2, [pc, #284]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e52:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e60:	4b41      	ldr	r3, [pc, #260]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	4a40      	ldr	r2, [pc, #256]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e70:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a38      	ldr	r2, [pc, #224]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eac:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <MX_GPIO_Init+0x178>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eba:	2332      	movs	r3, #50	; 0x32
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4825      	ldr	r0, [pc, #148]	; (8000f6c <MX_GPIO_Init+0x17c>)
 8000ed6:	f004 fbfb 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000eda:	2386      	movs	r3, #134	; 0x86
 8000edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eea:	230b      	movs	r3, #11
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481e      	ldr	r0, [pc, #120]	; (8000f70 <MX_GPIO_Init+0x180>)
 8000ef6:	f004 fbeb 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000efa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0c:	230b      	movs	r3, #11
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <MX_GPIO_Init+0x184>)
 8000f18:	f004 fbda 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f1c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_GPIO_Init+0x180>)
 8000f3a:	f004 fbc9 	bl	80056d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f50:	230b      	movs	r3, #11
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <MX_GPIO_Init+0x188>)
 8000f5c:	f004 fbb8 	bl	80056d0 <HAL_GPIO_Init>

}
 8000f60:	bf00      	nop
 8000f62:	3730      	adds	r7, #48	; 0x30
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	58020800 	.word	0x58020800
 8000f70:	58020000 	.word	0x58020000
 8000f74:	58020400 	.word	0x58020400
 8000f78:	58021800 	.word	0x58021800

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_MspInit+0x30>)
 8000f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_MspInit+0x30>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_MspInit+0x30>)
 8000fa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	58024400 	.word	0x58024400

08000fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a18      	ldr	r2, [pc, #96]	; (8001040 <HAL_ADC_MspInit+0x80>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d129      	bne.n	8001036 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_ADC_MspInit+0x84>)
 8000fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fe8:	4a16      	ldr	r2, [pc, #88]	; (8001044 <HAL_ADC_MspInit+0x84>)
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_ADC_MspInit+0x84>)
 8000ff4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ff8:	f003 0320 	and.w	r3, r3, #32
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_ADC_MspInit+0x84>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_ADC_MspInit+0x84>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <HAL_ADC_MspInit+0x84>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800101e:	2308      	movs	r3, #8
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001022:	2303      	movs	r3, #3
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_ADC_MspInit+0x88>)
 8001032:	f004 fb4d 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40022000 	.word	0x40022000
 8001044:	58024400 	.word	0x58024400
 8001048:	58020000 	.word	0x58020000

0800104c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_DAC_MspInit+0xe0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d159      	bne.n	8001122 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800106e:	4b30      	ldr	r3, [pc, #192]	; (8001130 <HAL_DAC_MspInit+0xe4>)
 8001070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001074:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <HAL_DAC_MspInit+0xe4>)
 8001076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800107a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_DAC_MspInit+0xe4>)
 8001080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_DAC_MspInit+0xe4>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <HAL_DAC_MspInit+0xe4>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <HAL_DAC_MspInit+0xe4>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010aa:	2310      	movs	r3, #16
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	481d      	ldr	r0, [pc, #116]	; (8001134 <HAL_DAC_MspInit+0xe8>)
 80010be:	f004 fb07 	bl	80056d0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_DAC_MspInit+0xec>)
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <HAL_DAC_MspInit+0xf0>)
 80010c6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_DAC_MspInit+0xec>)
 80010ca:	2243      	movs	r2, #67	; 0x43
 80010cc:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_DAC_MspInit+0xec>)
 80010d0:	2240      	movs	r2, #64	; 0x40
 80010d2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_DAC_MspInit+0xec>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_DAC_MspInit+0xec>)
 80010dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_DAC_MspInit+0xec>)
 80010e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_DAC_MspInit+0xec>)
 80010ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_DAC_MspInit+0xec>)
 80010f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_DAC_MspInit+0xec>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_DAC_MspInit+0xec>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <HAL_DAC_MspInit+0xec>)
 8001108:	f002 fa0a 	bl	8003520 <HAL_DMA_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001112:	f7ff ff33 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_DAC_MspInit+0xec>)
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_DAC_MspInit+0xec>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40007400 	.word	0x40007400
 8001130:	58024400 	.word	0x58024400
 8001134:	58020000 	.word	0x58020000
 8001138:	200000d8 	.word	0x200000d8
 800113c:	40020088 	.word	0x40020088

08001140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001150:	d116      	bne.n	8001180 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_TIM_Base_MspInit+0x48>)
 8001154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <HAL_TIM_Base_MspInit+0x48>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_TIM_Base_MspInit+0x48>)
 8001164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	201c      	movs	r0, #28
 8001176:	f001 fec0 	bl	8002efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800117a:	201c      	movs	r0, #28
 800117c:	f001 fed7 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	58024400 	.word	0x58024400

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <HAL_UART_MspInit+0x88>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12e      	bne.n	800120c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_UART_MspInit+0x8c>)
 80011b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <HAL_UART_MspInit+0x8c>)
 80011b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_UART_MspInit+0x8c>)
 80011c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_UART_MspInit+0x8c>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_UART_MspInit+0x8c>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_UART_MspInit+0x8c>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011fc:	2307      	movs	r3, #7
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_UART_MspInit+0x90>)
 8001208:	f004 fa62 	bl	80056d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40004800 	.word	0x40004800
 8001218:	58024400 	.word	0x58024400
 800121c:	58020c00 	.word	0x58020c00

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <MemManage_Handler+0x4>

0800123a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <BusFault_Handler+0x4>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <UsageFault_Handler+0x4>

08001246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f8b2 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <DMA1_Stream5_IRQHandler+0x10>)
 8001282:	f002 ff13 	bl	80040ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000d8 	.word	0x200000d8

08001290 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <TIM2_IRQHandler+0x10>)
 8001296:	f007 fb31 	bl	80088fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000348 	.word	0x20000348

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012a8:	f7ff f996 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012ae:	e003      	b.n	80012b8 <LoopCopyDataInit>

080012b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80012b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012b6:	3104      	adds	r1, #4

080012b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80012bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012c0:	d3f6      	bcc.n	80012b0 <CopyDataInit>
  ldr  r2, =_sbss
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80012c4:	e002      	b.n	80012cc <LoopFillZerobss>

080012c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012c8:	f842 3b04 	str.w	r3, [r2], #4

080012cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80012ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012d0:	d3f9      	bcc.n	80012c6 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f008 ff9b 	bl	800a20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff fa87 	bl	80007e8 <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012e0:	0800b080 	.word	0x0800b080
  ldr  r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012e8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80012ec:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80012f0:	20000398 	.word	0x20000398

080012f4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC3_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fe:	2003      	movs	r0, #3
 8001300:	f001 fdf0 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001304:	f005 f9e2 	bl	80066cc <HAL_RCC_GetSysClockFreq>
 8001308:	4601      	mov	r1, r0
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_Init+0x68>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <HAL_Init+0x6c>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	fa21 f303 	lsr.w	r3, r1, r3
 8001320:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_Init+0x68>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_Init+0x6c>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_Init+0x70>)
 800133a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_Init+0x74>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001342:	2000      	movs	r0, #0
 8001344:	f000 f814 	bl	8001370 <HAL_InitTick>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e002      	b.n	8001358 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001352:	f7ff fe1b 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	58024400 	.word	0x58024400
 8001364:	0800ae68 	.word	0x0800ae68
 8001368:	20000004 	.word	0x20000004
 800136c:	20000000 	.word	0x20000000

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_InitTick+0x60>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e021      	b.n	80013c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_InitTick+0x64>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_InitTick+0x60>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fdd5 	bl	8002f4a <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f001 fd9f 	bl	8002efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x68>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000010 	.word	0x20000010
 80013d4:	20000000 	.word	0x20000000
 80013d8:	2000000c 	.word	0x2000000c

080013dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	; (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000010 	.word	0x20000010
 8001400:	20000394 	.word	0x20000394

08001404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000394 	.word	0x20000394

0800141c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_Delay+0x40>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000010 	.word	0x20000010

08001460 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetREVID+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0c1b      	lsrs	r3, r3, #16
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	5c001000 	.word	0x5c001000

08001478 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	609a      	str	r2, [r3, #8]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3360      	adds	r3, #96	; 0x60
 80014f2:	461a      	mov	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	430b      	orrs	r3, r1
 800150e:	431a      	orrs	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001514:	bf00      	nop
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	611a      	str	r2, [r3, #16]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001552:	b480      	push	{r7}
 8001554:	b087      	sub	sp, #28
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3360      	adds	r3, #96	; 0x60
 8001562:	461a      	mov	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	431a      	orrs	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	601a      	str	r2, [r3, #0]
  }
}
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3330      	adds	r3, #48	; 0x30
 80015be:	461a      	mov	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	4413      	add	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	211f      	movs	r1, #31
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0e9b      	lsrs	r3, r3, #26
 80015e6:	f003 011f 	and.w	r1, r3, #31
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015fa:	bf00      	nop
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001606:	b480      	push	{r7}
 8001608:	b087      	sub	sp, #28
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3314      	adds	r3, #20
 8001616:	461a      	mov	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	0e5b      	lsrs	r3, r3, #25
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	4413      	add	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	0d1b      	lsrs	r3, r3, #20
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2107      	movs	r1, #7
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	0d1b      	lsrs	r3, r3, #20
 8001640:	f003 031f 	and.w	r3, r3, #31
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	431a      	orrs	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001650:	bf00      	nop
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f003 0318 	and.w	r3, r3, #24
 800167e:	4908      	ldr	r1, [pc, #32]	; (80016a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001680:	40d9      	lsrs	r1, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	400b      	ands	r3, r1
 8001686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800168a:	431a      	orrs	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	000fffff 	.word	0x000fffff

080016a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 031f 	and.w	r3, r3, #31
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <LL_ADC_DisableDeepPowerDown+0x20>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6093      	str	r3, [r2, #8]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	5fffffc0 	.word	0x5fffffc0

08001700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001714:	d101      	bne.n	800171a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <LL_ADC_EnableInternalRegulator+0x24>)
 8001736:	4013      	ands	r3, r2
 8001738:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	6fffffc0 	.word	0x6fffffc0

08001750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001764:	d101      	bne.n	800176a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <LL_ADC_Enable+0x24>)
 8001786:	4013      	ands	r3, r2
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	7fffffc0 	.word	0x7fffffc0

080017a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <LL_ADC_Disable+0x24>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	f043 0202 	orr.w	r2, r3, #2
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	7fffffc0 	.word	0x7fffffc0

080017c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <LL_ADC_IsEnabled+0x18>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <LL_ADC_IsEnabled+0x1a>
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d101      	bne.n	8001806 <LL_ADC_IsDisableOngoing+0x18>
 8001802:	2301      	movs	r3, #1
 8001804:	e000      	b.n	8001808 <LL_ADC_IsDisableOngoing+0x1a>
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <LL_ADC_REG_StartConversion+0x24>)
 8001822:	4013      	ands	r3, r2
 8001824:	f043 0204 	orr.w	r2, r3, #4
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	7fffffc0 	.word	0x7fffffc0

0800183c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <LL_ADC_REG_StopConversion+0x24>)
 800184a:	4013      	ands	r3, r2
 800184c:	f043 0210 	orr.w	r2, r3, #16
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	7fffffc0 	.word	0x7fffffc0

08001864 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b04      	cmp	r3, #4
 8001876:	d101      	bne.n	800187c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <LL_ADC_INJ_StopConversion+0x24>)
 800189a:	4013      	ands	r3, r2
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	7fffffc0 	.word	0x7fffffc0

080018b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d101      	bne.n	80018cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e18e      	b.n	8001c14 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	2b00      	cmp	r3, #0
 8001902:	d109      	bne.n	8001918 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fb5b 	bl	8000fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff feef 	bl	8001700 <LL_ADC_IsDeepPowerDownEnabled>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d004      	beq.n	8001932 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fed5 	bl	80016dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff0a 	bl	8001750 <LL_ADC_IsInternalRegulatorEnabled>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d113      	bne.n	800196a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff feee 	bl	8001728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800194c:	4b9a      	ldr	r3, [pc, #616]	; (8001bb8 <HAL_ADC_Init+0x2dc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	099b      	lsrs	r3, r3, #6
 8001952:	4a9a      	ldr	r2, [pc, #616]	; (8001bbc <HAL_ADC_Init+0x2e0>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800195c:	e002      	b.n	8001964 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3b01      	subs	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f9      	bne.n	800195e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff feee 	bl	8001750 <LL_ADC_IsInternalRegulatorEnabled>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10d      	bne.n	8001996 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	f043 0210 	orr.w	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff62 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 80019a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 8129 	bne.w	8001c02 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 8125 	bne.w	8001c02 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019c0:	f043 0202 	orr.w	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fefb 	bl	80017c8 <LL_ADC_IsEnabled>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d136      	bne.n	8001a46 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a78      	ldr	r2, [pc, #480]	; (8001bc0 <HAL_ADC_Init+0x2e4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_ADC_Init+0x110>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a77      	ldr	r2, [pc, #476]	; (8001bc4 <HAL_ADC_Init+0x2e8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d10e      	bne.n	8001a0a <HAL_ADC_Init+0x12e>
 80019ec:	4874      	ldr	r0, [pc, #464]	; (8001bc0 <HAL_ADC_Init+0x2e4>)
 80019ee:	f7ff feeb 	bl	80017c8 <LL_ADC_IsEnabled>
 80019f2:	4604      	mov	r4, r0
 80019f4:	4873      	ldr	r0, [pc, #460]	; (8001bc4 <HAL_ADC_Init+0x2e8>)
 80019f6:	f7ff fee7 	bl	80017c8 <LL_ADC_IsEnabled>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4323      	orrs	r3, r4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf0c      	ite	eq
 8001a02:	2301      	moveq	r3, #1
 8001a04:	2300      	movne	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	e008      	b.n	8001a1c <HAL_ADC_Init+0x140>
 8001a0a:	486f      	ldr	r0, [pc, #444]	; (8001bc8 <HAL_ADC_Init+0x2ec>)
 8001a0c:	f7ff fedc 	bl	80017c8 <LL_ADC_IsEnabled>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d012      	beq.n	8001a46 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a66      	ldr	r2, [pc, #408]	; (8001bc0 <HAL_ADC_Init+0x2e4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d004      	beq.n	8001a34 <HAL_ADC_Init+0x158>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a65      	ldr	r2, [pc, #404]	; (8001bc4 <HAL_ADC_Init+0x2e8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_Init+0x15c>
 8001a34:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_ADC_Init+0x2f0>)
 8001a36:	e000      	b.n	8001a3a <HAL_ADC_Init+0x15e>
 8001a38:	4a65      	ldr	r2, [pc, #404]	; (8001bd0 <HAL_ADC_Init+0x2f4>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4610      	mov	r0, r2
 8001a42:	f7ff fd19 	bl	8001478 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a46:	f7ff fd0b 	bl	8001460 <HAL_GetREVID>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d914      	bls.n	8001a7e <HAL_ADC_Init+0x1a2>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d110      	bne.n	8001a7e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7d5b      	ldrb	r3, [r3, #21]
 8001a60:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a66:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a6c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7f1b      	ldrb	r3, [r3, #28]
 8001a72:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a74:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a76:	f043 030c 	orr.w	r3, r3, #12
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	e00d      	b.n	8001a9a <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7d5b      	ldrb	r3, [r3, #21]
 8001a82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a88:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a8e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7f1b      	ldrb	r3, [r3, #28]
 8001a94:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7f1b      	ldrb	r3, [r3, #28]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d106      	bne.n	8001ab0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	045b      	lsls	r3, r3, #17
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <HAL_ADC_Init+0x2f8>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff febd 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 8001aea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fedf 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 8001af6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d14a      	bne.n	8001b94 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d147      	bne.n	8001b94 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7d1b      	ldrb	r3, [r3, #20]
 8001b08:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_ADC_Init+0x2fc>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	69b9      	ldr	r1, [r7, #24]
 8001b22:	430b      	orrs	r3, r1
 8001b24:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d11b      	bne.n	8001b68 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_ADC_Init+0x300>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b44:	3a01      	subs	r2, #1
 8001b46:	0411      	lsls	r1, r2, #16
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	611a      	str	r2, [r3, #16]
 8001b66:	e007      	b.n	8001b78 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fee0 	bl	8002954 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d121      	bne.n	8001be0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f023 010f 	bic.w	r1, r3, #15
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	1e5a      	subs	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb4:	e01c      	b.n	8001bf0 <HAL_ADC_Init+0x314>
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	053e2d63 	.word	0x053e2d63
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	40022100 	.word	0x40022100
 8001bc8:	58026000 	.word	0x58026000
 8001bcc:	40022300 	.word	0x40022300
 8001bd0:	58026300 	.word	0x58026300
 8001bd4:	fff0c003 	.word	0xfff0c003
 8001bd8:	ffffbffc 	.word	0xffffbffc
 8001bdc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020f 	bic.w	r2, r2, #15
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	f023 0303 	bic.w	r3, r3, #3
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	655a      	str	r2, [r3, #84]	; 0x54
 8001c00:	e007      	b.n	8001c12 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c06:	f043 0210 	orr.w	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c12:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3724      	adds	r7, #36	; 0x24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd90      	pop	{r4, r7, pc}

08001c1c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5c      	ldr	r2, [pc, #368]	; (8001d9c <HAL_ADC_Start+0x180>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_ADC_Start+0x1c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a5b      	ldr	r2, [pc, #364]	; (8001da0 <HAL_ADC_Start+0x184>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_Start+0x20>
 8001c38:	4b5a      	ldr	r3, [pc, #360]	; (8001da4 <HAL_ADC_Start+0x188>)
 8001c3a:	e000      	b.n	8001c3e <HAL_ADC_Start+0x22>
 8001c3c:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <HAL_ADC_Start+0x18c>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fd30 	bl	80016a4 <LL_ADC_GetMultimode>
 8001c44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fe0a 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 809a 	bne.w	8001d8c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_Start+0x4a>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e095      	b.n	8001d92 <HAL_ADC_Start+0x176>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fd94 	bl	800279c <ADC_Enable>
 8001c74:	4603      	mov	r3, r0
 8001c76:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 8081 	bne.w	8001d82 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c84:	4b49      	ldr	r3, [pc, #292]	; (8001dac <HAL_ADC_Start+0x190>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a42      	ldr	r2, [pc, #264]	; (8001da0 <HAL_ADC_Start+0x184>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d002      	beq.n	8001ca0 <HAL_ADC_Start+0x84>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_Start+0x86>
 8001ca0:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <HAL_ADC_Start+0x180>)
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d002      	beq.n	8001cb0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc8:	d106      	bne.n	8001cd8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cce:	f023 0206 	bic.w	r2, r3, #6
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	659a      	str	r2, [r3, #88]	; 0x58
 8001cd6:	e002      	b.n	8001cde <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	221c      	movs	r2, #28
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <HAL_ADC_Start+0x184>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d002      	beq.n	8001cfe <HAL_ADC_Start+0xe2>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	e000      	b.n	8001d00 <HAL_ADC_Start+0xe4>
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_ADC_Start+0x180>)
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d008      	beq.n	8001d1a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d002      	beq.n	8001d1a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b09      	cmp	r3, #9
 8001d18:	d114      	bne.n	8001d44 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fd69 	bl	8001814 <LL_ADC_REG_StartConversion>
 8001d42:	e025      	b.n	8001d90 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <HAL_ADC_Start+0x184>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d002      	beq.n	8001d60 <HAL_ADC_Start+0x144>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_Start+0x146>
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_ADC_Start+0x180>)
 8001d62:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00f      	beq.n	8001d90 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d80:	e006      	b.n	8001d90 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001d8a:	e001      	b.n	8001d90 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40022100 	.word	0x40022100
 8001da4:	40022300 	.word	0x40022300
 8001da8:	58026300 	.word	0x58026300
 8001dac:	fffff0fe 	.word	0xfffff0fe

08001db0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Stop+0x16>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e021      	b.n	8001e0a <HAL_ADC_Stop+0x5a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001dce:	2103      	movs	r1, #3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fc2f 	bl	8002634 <ADC_ConversionStop>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10f      	bne.n	8001e00 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fd5f 	bl	80028a4 <ADC_Disable>
 8001de6:	4603      	mov	r3, r0
 8001de8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d107      	bne.n	8001e00 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_ADC_Stop+0x64>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	ffffeefe 	.word	0xffffeefe

08001e18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a6e      	ldr	r2, [pc, #440]	; (8001fe0 <HAL_ADC_PollForConversion+0x1c8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d004      	beq.n	8001e36 <HAL_ADC_PollForConversion+0x1e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a6c      	ldr	r2, [pc, #432]	; (8001fe4 <HAL_ADC_PollForConversion+0x1cc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_PollForConversion+0x22>
 8001e36:	4b6c      	ldr	r3, [pc, #432]	; (8001fe8 <HAL_ADC_PollForConversion+0x1d0>)
 8001e38:	e000      	b.n	8001e3c <HAL_ADC_PollForConversion+0x24>
 8001e3a:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <HAL_ADC_PollForConversion+0x1d4>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fc31 	bl	80016a4 <LL_ADC_GetMultimode>
 8001e42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d102      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	e037      	b.n	8001ec2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d002      	beq.n	8001e64 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	d111      	bne.n	8001e88 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f043 0220 	orr.w	r2, r3, #32
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0aa      	b.n	8001fd8 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e82:	2304      	movs	r3, #4
 8001e84:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001e86:	e01c      	b.n	8001ec2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a54      	ldr	r2, [pc, #336]	; (8001fe0 <HAL_ADC_PollForConversion+0x1c8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d004      	beq.n	8001e9c <HAL_ADC_PollForConversion+0x84>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a53      	ldr	r2, [pc, #332]	; (8001fe4 <HAL_ADC_PollForConversion+0x1cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_PollForConversion+0x88>
 8001e9c:	4b52      	ldr	r3, [pc, #328]	; (8001fe8 <HAL_ADC_PollForConversion+0x1d0>)
 8001e9e:	e000      	b.n	8001ea2 <HAL_ADC_PollForConversion+0x8a>
 8001ea0:	4b52      	ldr	r3, [pc, #328]	; (8001fec <HAL_ADC_PollForConversion+0x1d4>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fc0c 	bl	80016c0 <LL_ADC_GetMultiDMATransfer>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f043 0220 	orr.w	r2, r3, #32
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e08c      	b.n	8001fd8 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ec2:	f7ff fa9f 	bl	8001404 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ec8:	e01a      	b.n	8001f00 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d016      	beq.n	8001f00 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ed2:	f7ff fa97 	bl	8001404 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d302      	bcc.n	8001ee8 <HAL_ADC_PollForConversion+0xd0>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10b      	bne.n	8001f00 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	f043 0204 	orr.w	r2, r3, #4
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e06b      	b.n	8001fd8 <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0dd      	beq.n	8001eca <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff fb32 	bl	8001588 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d01c      	beq.n	8001f64 <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7d5b      	ldrb	r3, [r3, #21]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d118      	bne.n	8001f64 <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d111      	bne.n	8001f64 <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a1e      	ldr	r2, [pc, #120]	; (8001fe4 <HAL_ADC_PollForConversion+0x1cc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d002      	beq.n	8001f74 <HAL_ADC_PollForConversion+0x15c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	e000      	b.n	8001f76 <HAL_ADC_PollForConversion+0x15e>
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_ADC_PollForConversion+0x1c8>)
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d008      	beq.n	8001f90 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d002      	beq.n	8001f90 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b09      	cmp	r3, #9
 8001f8e:	d104      	bne.n	8001f9a <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	e00c      	b.n	8001fb4 <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_ADC_PollForConversion+0x1cc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d002      	beq.n	8001faa <HAL_ADC_PollForConversion+0x192>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	e000      	b.n	8001fac <HAL_ADC_PollForConversion+0x194>
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_ADC_PollForConversion+0x1c8>)
 8001fac:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d104      	bne.n	8001fc4 <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2208      	movs	r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	e008      	b.n	8001fd6 <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3720      	adds	r7, #32
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	40022100 	.word	0x40022100
 8001fe8:	40022300 	.word	0x40022300
 8001fec:	58026300 	.word	0x58026300

08001ff0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b099      	sub	sp, #100	; 0x64
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a99      	ldr	r2, [pc, #612]	; (800228c <HAL_ADC_ConfigChannel+0x280>)
 8002026:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x2a>
 8002032:	2302      	movs	r3, #2
 8002034:	e2e6      	b.n	8002604 <HAL_ADC_ConfigChannel+0x5f8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fc0e 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 82cb 	bne.w	80025e6 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002058:	2b00      	cmp	r3, #0
 800205a:	d108      	bne.n	800206e <HAL_ADC_ConfigChannel+0x62>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2201      	movs	r2, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	e00f      	b.n	800208e <HAL_ADC_ConfigChannel+0x82>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800207c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2201      	movs	r2, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	69d1      	ldr	r1, [r2, #28]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	430b      	orrs	r3, r1
 800209a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f7ff fa80 	bl	80015ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fbd6 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 80020b8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fbf8 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 80020c4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 80b3 	bne.w	8002234 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f040 80af 	bne.w	8002234 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6819      	ldr	r1, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	461a      	mov	r2, r3
 80020e4:	f7ff fa8f 	bl	8001606 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020e8:	4b69      	ldr	r3, [pc, #420]	; (8002290 <HAL_ADC_ConfigChannel+0x284>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80020f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020f4:	d10b      	bne.n	800210e <HAL_ADC_ConfigChannel+0x102>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	e01d      	b.n	800214a <HAL_ADC_ConfigChannel+0x13e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x128>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	e00a      	b.n	800214a <HAL_ADC_ConfigChannel+0x13e>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b04      	cmp	r3, #4
 8002152:	d027      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6919      	ldr	r1, [r3, #16]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002162:	f7ff f9bd 	bl	80014e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6919      	ldr	r1, [r3, #16]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	7e5b      	ldrb	r3, [r3, #25]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d102      	bne.n	800217c <HAL_ADC_ConfigChannel+0x170>
 8002176:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800217a:	e000      	b.n	800217e <HAL_ADC_ConfigChannel+0x172>
 800217c:	2300      	movs	r3, #0
 800217e:	461a      	mov	r2, r3
 8002180:	f7ff f9e7 	bl	8001552 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6919      	ldr	r1, [r3, #16]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	7e1b      	ldrb	r3, [r3, #24]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d102      	bne.n	800219a <HAL_ADC_ConfigChannel+0x18e>
 8002194:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002198:	e000      	b.n	800219c <HAL_ADC_ConfigChannel+0x190>
 800219a:	2300      	movs	r3, #0
 800219c:	461a      	mov	r2, r3
 800219e:	f7ff f9bf 	bl	8001520 <LL_ADC_SetDataRightShift>
 80021a2:	e047      	b.n	8002234 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	069b      	lsls	r3, r3, #26
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d107      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021c6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	069b      	lsls	r3, r3, #26
 80021d8:	429a      	cmp	r2, r3
 80021da:	d107      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ea:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	069b      	lsls	r3, r3, #26
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d107      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800220e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002216:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	069b      	lsls	r3, r3, #26
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002232:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fac5 	bl	80017c8 <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	f040 81d9 	bne.w	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6819      	ldr	r1, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	461a      	mov	r2, r3
 8002254:	f7ff fa02 	bl	800165c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_ADC_ConfigChannel+0x280>)
 800225e:	4293      	cmp	r3, r2
 8002260:	f040 8101 	bne.w	8002466 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10f      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x288>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0e9b      	lsrs	r3, r3, #26
 800227a:	3301      	adds	r3, #1
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	2b09      	cmp	r3, #9
 8002282:	bf94      	ite	ls
 8002284:	2301      	movls	r3, #1
 8002286:	2300      	movhi	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e016      	b.n	80022ba <HAL_ADC_ConfigChannel+0x2ae>
 800228c:	47ff0000 	.word	0x47ff0000
 8002290:	5c001000 	.word	0x5c001000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	bf94      	ite	ls
 80022b4:	2301      	movls	r3, #1
 80022b6:	2300      	movhi	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d064      	beq.n	8002388 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d107      	bne.n	80022da <HAL_ADC_ConfigChannel+0x2ce>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	3301      	adds	r3, #1
 80022d2:	069b      	lsls	r3, r3, #26
 80022d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d8:	e00e      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x2ec>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	069b      	lsls	r3, r3, #26
 80022f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x30c>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	3301      	adds	r3, #1
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2101      	movs	r1, #1
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	e010      	b.n	800233a <HAL_ADC_ConfigChannel+0x32e>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2101      	movs	r1, #1
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	ea42 0103 	orr.w	r1, r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x354>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	3301      	adds	r3, #1
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	051b      	lsls	r3, r3, #20
 800235e:	e011      	b.n	8002384 <HAL_ADC_ConfigChannel+0x378>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002384:	430b      	orrs	r3, r1
 8002386:	e069      	b.n	800245c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002390:	2b00      	cmp	r3, #0
 8002392:	d107      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x398>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	3301      	adds	r3, #1
 800239c:	069b      	lsls	r3, r3, #26
 800239e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a2:	e00e      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x3b6>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	61fb      	str	r3, [r7, #28]
  return result;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	069b      	lsls	r3, r3, #26
 80023be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x3d6>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	3301      	adds	r3, #1
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	e010      	b.n	8002404 <HAL_ADC_ConfigChannel+0x3f8>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	617b      	str	r3, [r7, #20]
  return result;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	ea42 0103 	orr.w	r1, r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10d      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x424>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	3b1e      	subs	r3, #30
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800242e:	e014      	b.n	800245a <HAL_ADC_ConfigChannel+0x44e>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	60fb      	str	r3, [r7, #12]
  return result;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	3301      	adds	r3, #1
 8002448:	f003 021f 	and.w	r2, r3, #31
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	3b1e      	subs	r3, #30
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245a:	430b      	orrs	r3, r1
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	6892      	ldr	r2, [r2, #8]
 8002460:	4619      	mov	r1, r3
 8002462:	f7ff f8d0 	bl	8001606 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f280 80c4 	bge.w	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a65      	ldr	r2, [pc, #404]	; (800260c <HAL_ADC_ConfigChannel+0x600>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d004      	beq.n	8002484 <HAL_ADC_ConfigChannel+0x478>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a64      	ldr	r2, [pc, #400]	; (8002610 <HAL_ADC_ConfigChannel+0x604>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x47c>
 8002484:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_ADC_ConfigChannel+0x608>)
 8002486:	e000      	b.n	800248a <HAL_ADC_ConfigChannel+0x47e>
 8002488:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_ADC_ConfigChannel+0x60c>)
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f81a 	bl	80014c4 <LL_ADC_GetCommonPathInternalCh>
 8002490:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5d      	ldr	r2, [pc, #372]	; (800260c <HAL_ADC_ConfigChannel+0x600>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x49a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a5b      	ldr	r2, [pc, #364]	; (8002610 <HAL_ADC_ConfigChannel+0x604>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d10e      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x4b8>
 80024a6:	4859      	ldr	r0, [pc, #356]	; (800260c <HAL_ADC_ConfigChannel+0x600>)
 80024a8:	f7ff f98e 	bl	80017c8 <LL_ADC_IsEnabled>
 80024ac:	4604      	mov	r4, r0
 80024ae:	4858      	ldr	r0, [pc, #352]	; (8002610 <HAL_ADC_ConfigChannel+0x604>)
 80024b0:	f7ff f98a 	bl	80017c8 <LL_ADC_IsEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4323      	orrs	r3, r4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e008      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x4ca>
 80024c4:	4855      	ldr	r0, [pc, #340]	; (800261c <HAL_ADC_ConfigChannel+0x610>)
 80024c6:	f7ff f97f 	bl	80017c8 <LL_ADC_IsEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf0c      	ite	eq
 80024d0:	2301      	moveq	r3, #1
 80024d2:	2300      	movne	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d07b      	beq.n	80025d2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a50      	ldr	r2, [pc, #320]	; (8002620 <HAL_ADC_ConfigChannel+0x614>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d12e      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x536>
 80024e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d129      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4a      	ldr	r2, [pc, #296]	; (800261c <HAL_ADC_ConfigChannel+0x610>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d17f      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a43      	ldr	r2, [pc, #268]	; (800260c <HAL_ADC_ConfigChannel+0x600>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_ADC_ConfigChannel+0x500>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a42      	ldr	r2, [pc, #264]	; (8002610 <HAL_ADC_ConfigChannel+0x604>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x504>
 800250c:	4a41      	ldr	r2, [pc, #260]	; (8002614 <HAL_ADC_ConfigChannel+0x608>)
 800250e:	e000      	b.n	8002512 <HAL_ADC_ConfigChannel+0x506>
 8002510:	4a41      	ldr	r2, [pc, #260]	; (8002618 <HAL_ADC_ConfigChannel+0x60c>)
 8002512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f7fe ffbf 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002520:	4b40      	ldr	r3, [pc, #256]	; (8002624 <HAL_ADC_ConfigChannel+0x618>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	4a40      	ldr	r2, [pc, #256]	; (8002628 <HAL_ADC_ConfigChannel+0x61c>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002532:	e002      	b.n	800253a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	3b01      	subs	r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f9      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002540:	e05a      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a39      	ldr	r2, [pc, #228]	; (800262c <HAL_ADC_ConfigChannel+0x620>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d11e      	bne.n	800258a <HAL_ADC_ConfigChannel+0x57e>
 800254c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a30      	ldr	r2, [pc, #192]	; (800261c <HAL_ADC_ConfigChannel+0x610>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d14b      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a29      	ldr	r2, [pc, #164]	; (800260c <HAL_ADC_ConfigChannel+0x600>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_ADC_ConfigChannel+0x568>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a28      	ldr	r2, [pc, #160]	; (8002610 <HAL_ADC_ConfigChannel+0x604>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x56c>
 8002574:	4a27      	ldr	r2, [pc, #156]	; (8002614 <HAL_ADC_ConfigChannel+0x608>)
 8002576:	e000      	b.n	800257a <HAL_ADC_ConfigChannel+0x56e>
 8002578:	4a27      	ldr	r2, [pc, #156]	; (8002618 <HAL_ADC_ConfigChannel+0x60c>)
 800257a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7fe ff8b 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002588:	e036      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a28      	ldr	r2, [pc, #160]	; (8002630 <HAL_ADC_ConfigChannel+0x624>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d131      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
 8002594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d12c      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1e      	ldr	r2, [pc, #120]	; (800261c <HAL_ADC_ConfigChannel+0x610>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d127      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a17      	ldr	r2, [pc, #92]	; (800260c <HAL_ADC_ConfigChannel+0x600>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x5b0>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a16      	ldr	r2, [pc, #88]	; (8002610 <HAL_ADC_ConfigChannel+0x604>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x5b4>
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <HAL_ADC_ConfigChannel+0x608>)
 80025be:	e000      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x5b6>
 80025c0:	4a15      	ldr	r2, [pc, #84]	; (8002618 <HAL_ADC_ConfigChannel+0x60c>)
 80025c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f7fe ff67 	bl	800149e <LL_ADC_SetCommonPathInternalCh>
 80025d0:	e012      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	f043 0220 	orr.w	r2, r3, #32
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80025e4:	e008      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002604:	4618      	mov	r0, r3
 8002606:	3764      	adds	r7, #100	; 0x64
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	40022000 	.word	0x40022000
 8002610:	40022100 	.word	0x40022100
 8002614:	40022300 	.word	0x40022300
 8002618:	58026300 	.word	0x58026300
 800261c:	58026000 	.word	0x58026000
 8002620:	cb840000 	.word	0xcb840000
 8002624:	20000000 	.word	0x20000000
 8002628:	053e2d63 	.word	0x053e2d63
 800262c:	c7520000 	.word	0xc7520000
 8002630:	cfb80000 	.word	0xcfb80000

08002634 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f90a 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 8002650:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f92c 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 800265c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8090 	beq.w	800278c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d02a      	beq.n	80026d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7d5b      	ldrb	r3, [r3, #21]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d126      	bne.n	80026d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7d1b      	ldrb	r3, [r3, #20]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d122      	bne.n	80026d0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800268a:	2301      	movs	r3, #1
 800268c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800268e:	e014      	b.n	80026ba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4a41      	ldr	r2, [pc, #260]	; (8002798 <ADC_ConversionStop+0x164>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d90d      	bls.n	80026b4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	f043 0210 	orr.w	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e06c      	b.n	800278e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	3301      	adds	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d1e3      	bne.n	8002690 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2240      	movs	r2, #64	; 0x40
 80026ce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d014      	beq.n	8002700 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff f8c2 	bl	8001864 <LL_ADC_REG_IsConversionOngoing>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00c      	beq.n	8002700 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f87f 	bl	80017ee <LL_ADC_IsDisableOngoing>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d104      	bne.n	8002700 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f89e 	bl	800183c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d014      	beq.n	8002730 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff f8d2 	bl	80018b4 <LL_ADC_INJ_IsConversionOngoing>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f867 	bl	80017ee <LL_ADC_IsDisableOngoing>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff f8ae 	bl	800188c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d004      	beq.n	8002740 <ADC_ConversionStop+0x10c>
 8002736:	2b03      	cmp	r3, #3
 8002738:	d105      	bne.n	8002746 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800273a:	230c      	movs	r3, #12
 800273c:	617b      	str	r3, [r7, #20]
        break;
 800273e:	e005      	b.n	800274c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002740:	2308      	movs	r3, #8
 8002742:	617b      	str	r3, [r7, #20]
        break;
 8002744:	e002      	b.n	800274c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002746:	2304      	movs	r3, #4
 8002748:	617b      	str	r3, [r7, #20]
        break;
 800274a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800274c:	f7fe fe5a 	bl	8001404 <HAL_GetTick>
 8002750:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002752:	e014      	b.n	800277e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002754:	f7fe fe56 	bl	8001404 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b05      	cmp	r3, #5
 8002760:	d90d      	bls.n	800277e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	f043 0210 	orr.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e007      	b.n	800278e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e3      	bne.n	8002754 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	000cdbff 	.word	0x000cdbff

0800279c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f80d 	bl	80017c8 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d167      	bne.n	8002884 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	4b35      	ldr	r3, [pc, #212]	; (8002890 <ADC_Enable+0xf4>)
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f043 0210 	orr.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e053      	b.n	8002886 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe ffc8 	bl	8001778 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fe0c 	bl	8001404 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a28      	ldr	r2, [pc, #160]	; (8002894 <ADC_Enable+0xf8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <ADC_Enable+0x66>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a26      	ldr	r2, [pc, #152]	; (8002898 <ADC_Enable+0xfc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <ADC_Enable+0x6a>
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <ADC_Enable+0x100>)
 8002804:	e000      	b.n	8002808 <ADC_Enable+0x6c>
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <ADC_Enable+0x104>)
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe ff4b 	bl	80016a4 <LL_ADC_GetMultimode>
 800280e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a20      	ldr	r2, [pc, #128]	; (8002898 <ADC_Enable+0xfc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d002      	beq.n	8002820 <ADC_Enable+0x84>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e000      	b.n	8002822 <ADC_Enable+0x86>
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <ADC_Enable+0xf8>)
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	4293      	cmp	r3, r2
 8002828:	d025      	beq.n	8002876 <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d129      	bne.n	8002884 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002830:	e021      	b.n	8002876 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe ffc6 	bl	80017c8 <LL_ADC_IsEnabled>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d104      	bne.n	800284c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe ff96 	bl	8001778 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800284c:	f7fe fdda 	bl	8001404 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d90d      	bls.n	8002876 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f043 0210 	orr.w	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	f043 0201 	orr.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d1d6      	bne.n	8002832 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	8000003f 	.word	0x8000003f
 8002894:	40022000 	.word	0x40022000
 8002898:	40022100 	.word	0x40022100
 800289c:	40022300 	.word	0x40022300
 80028a0:	58026300 	.word	0x58026300

080028a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe ff9c 	bl	80017ee <LL_ADC_IsDisableOngoing>
 80028b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe ff83 	bl	80017c8 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d040      	beq.n	800294a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d13d      	bne.n	800294a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030d 	and.w	r3, r3, #13
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10c      	bne.n	80028f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe ff5d 	bl	80017a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2203      	movs	r2, #3
 80028ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ee:	f7fe fd89 	bl	8001404 <HAL_GetTick>
 80028f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028f4:	e022      	b.n	800293c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e01c      	b.n	800294c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002912:	f7fe fd77 	bl	8001404 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d90d      	bls.n	800293c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	f043 0210 	orr.w	r2, r3, #16
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e007      	b.n	800294c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e3      	bne.n	8002912 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a70      	ldr	r2, [pc, #448]	; (8002b24 <ADC_ConfigureBoostMode+0x1d0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d004      	beq.n	8002970 <ADC_ConfigureBoostMode+0x1c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6f      	ldr	r2, [pc, #444]	; (8002b28 <ADC_ConfigureBoostMode+0x1d4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d109      	bne.n	8002984 <ADC_ConfigureBoostMode+0x30>
 8002970:	4b6e      	ldr	r3, [pc, #440]	; (8002b2c <ADC_ConfigureBoostMode+0x1d8>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e008      	b.n	8002996 <ADC_ConfigureBoostMode+0x42>
 8002984:	4b6a      	ldr	r3, [pc, #424]	; (8002b30 <ADC_ConfigureBoostMode+0x1dc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800299a:	f004 f809 	bl	80069b0 <HAL_RCC_GetHCLKFreq>
 800299e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a8:	d006      	beq.n	80029b8 <ADC_ConfigureBoostMode+0x64>
 80029aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029ae:	d00b      	beq.n	80029c8 <ADC_ConfigureBoostMode+0x74>
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d000      	beq.n	80029b8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80029b6:	e05d      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	60fb      	str	r3, [r7, #12]
        break;
 80029c6:	e055      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	60fb      	str	r3, [r7, #12]
        break;
 80029ce:	e051      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029d4:	f004 ff36 	bl	8007844 <HAL_RCCEx_GetPeriphCLKFreq>
 80029d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029e2:	d02a      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
 80029e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029e8:	d813      	bhi.n	8002a12 <ADC_ConfigureBoostMode+0xbe>
 80029ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029ee:	d024      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
 80029f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029f4:	d806      	bhi.n	8002a04 <ADC_ConfigureBoostMode+0xb0>
 80029f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029fa:	d01e      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
 80029fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a00:	d01b      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002a02:	e037      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a08:	d017      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
 8002a0a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a0e:	d014      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
        break;
 8002a10:	e030      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002a12:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a16:	d021      	beq.n	8002a5c <ADC_ConfigureBoostMode+0x108>
 8002a18:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a1c:	d806      	bhi.n	8002a2c <ADC_ConfigureBoostMode+0xd8>
 8002a1e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a22:	d013      	beq.n	8002a4c <ADC_ConfigureBoostMode+0xf8>
 8002a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a28:	d014      	beq.n	8002a54 <ADC_ConfigureBoostMode+0x100>
        break;
 8002a2a:	e023      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002a2c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a30:	d018      	beq.n	8002a64 <ADC_ConfigureBoostMode+0x110>
 8002a32:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a36:	d019      	beq.n	8002a6c <ADC_ConfigureBoostMode+0x118>
        break;
 8002a38:	e01c      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	60fb      	str	r3, [r7, #12]
        break;
 8002a4a:	e013      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	60fb      	str	r3, [r7, #12]
        break;
 8002a52:	e00f      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	60fb      	str	r3, [r7, #12]
        break;
 8002a5a:	e00b      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	60fb      	str	r3, [r7, #12]
        break;
 8002a62:	e007      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	09db      	lsrs	r3, r3, #7
 8002a68:	60fb      	str	r3, [r7, #12]
        break;
 8002a6a:	e003      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	60fb      	str	r3, [r7, #12]
        break;
 8002a72:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a74:	f7fe fcf4 	bl	8001460 <HAL_GetREVID>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d815      	bhi.n	8002aae <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a2b      	ldr	r2, [pc, #172]	; (8002b34 <ADC_ConfigureBoostMode+0x1e0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d908      	bls.n	8002a9c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a98:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a9a:	e03e      	b.n	8002b1a <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	e035      	b.n	8002b1a <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a20      	ldr	r2, [pc, #128]	; (8002b38 <ADC_ConfigureBoostMode+0x1e4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d808      	bhi.n	8002ace <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	e025      	b.n	8002b1a <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <ADC_ConfigureBoostMode+0x1e8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d80a      	bhi.n	8002aec <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae8:	609a      	str	r2, [r3, #8]
}
 8002aea:	e016      	b.n	8002b1a <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a14      	ldr	r2, [pc, #80]	; (8002b40 <ADC_ConfigureBoostMode+0x1ec>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d80a      	bhi.n	8002b0a <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	e007      	b.n	8002b1a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b18:	609a      	str	r2, [r3, #8]
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40022000 	.word	0x40022000
 8002b28:	40022100 	.word	0x40022100
 8002b2c:	40022300 	.word	0x40022300
 8002b30:	58026300 	.word	0x58026300
 8002b34:	01312d00 	.word	0x01312d00
 8002b38:	005f5e10 	.word	0x005f5e10
 8002b3c:	00bebc20 	.word	0x00bebc20
 8002b40:	017d7840 	.word	0x017d7840

08002b44 <LL_ADC_IsEnabled>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <LL_ADC_IsEnabled+0x18>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <LL_ADC_IsEnabled+0x1a>
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_ADC_REG_IsConversionOngoing>:
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d101      	bne.n	8002b82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b09f      	sub	sp, #124	; 0x7c
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0ba      	b.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5c      	ldr	r2, [pc, #368]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	e001      	b.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e09d      	b.n	8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ffbd 	bl	8002b6a <LL_ADC_REG_IsConversionOngoing>
 8002bf0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ffb7 	bl	8002b6a <LL_ADC_REG_IsConversionOngoing>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d17f      	bne.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d17c      	bne.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a47      	ldr	r2, [pc, #284]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d004      	beq.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a46      	ldr	r2, [pc, #280]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002c1c:	4b45      	ldr	r3, [pc, #276]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c1e:	e000      	b.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002c20:	4b45      	ldr	r3, [pc, #276]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c22:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d039      	beq.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a3a      	ldr	r2, [pc, #232]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a38      	ldr	r2, [pc, #224]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10e      	bne.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002c52:	4836      	ldr	r0, [pc, #216]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c54:	f7ff ff76 	bl	8002b44 <LL_ADC_IsEnabled>
 8002c58:	4604      	mov	r4, r0
 8002c5a:	4835      	ldr	r0, [pc, #212]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c5c:	f7ff ff72 	bl	8002b44 <LL_ADC_IsEnabled>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4323      	orrs	r3, r4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e008      	b.n	8002c82 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002c70:	4832      	ldr	r0, [pc, #200]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c72:	f7ff ff67 	bl	8002b44 <LL_ADC_IsEnabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d047      	beq.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	6811      	ldr	r1, [r2, #0]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	6892      	ldr	r2, [r2, #8]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c9e:	e03a      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002caa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d10e      	bne.n	8002cde <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002cc0:	481a      	ldr	r0, [pc, #104]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002cc2:	f7ff ff3f 	bl	8002b44 <LL_ADC_IsEnabled>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	4819      	ldr	r0, [pc, #100]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002cca:	f7ff ff3b 	bl	8002b44 <LL_ADC_IsEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4323      	orrs	r3, r4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf0c      	ite	eq
 8002cd6:	2301      	moveq	r3, #1
 8002cd8:	2300      	movne	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	e008      	b.n	8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002cde:	4817      	ldr	r0, [pc, #92]	; (8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ce0:	f7ff ff30 	bl	8002b44 <LL_ADC_IsEnabled>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf0c      	ite	eq
 8002cea:	2301      	moveq	r3, #1
 8002cec:	2300      	movne	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d010      	beq.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cfe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d00:	e009      	b.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	f043 0220 	orr.w	r2, r3, #32
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d14:	e000      	b.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d16:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d20:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	377c      	adds	r7, #124	; 0x7c
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	40022000 	.word	0x40022000
 8002d30:	40022100 	.word	0x40022100
 8002d34:	40022300 	.word	0x40022300
 8002d38:	58026300 	.word	0x58026300
 8002d3c:	58026000 	.word	0x58026000
 8002d40:	fffff0e0 	.word	0xfffff0e0

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <__NVIC_SetPriorityGrouping+0x40>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d72:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <__NVIC_SetPriorityGrouping+0x40>)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	60d3      	str	r3, [r2, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00
 8002d88:	05fa0000 	.word	0x05fa0000

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb0:	d301      	bcc.n	8002eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <SysTick_Config+0x40>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	f7ff ff8e 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <SysTick_Config+0x40>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <SysTick_Config+0x40>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff29 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f08:	f7ff ff40 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f7ff ff90 	bl	8002e38 <NVIC_EncodePriority>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5f 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff33 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ffa4 	bl	8002ea0 <SysTick_Config>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e014      	b.n	8002f9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	791b      	ldrb	r3, [r3, #4]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7fe f861 	bl	800104c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	795b      	ldrb	r3, [r3, #5]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DAC_Start_DMA+0x1e>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e09e      	b.n	8003104 <HAL_DAC_Start_DMA+0x15c>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d12a      	bne.n	800302e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a4b      	ldr	r2, [pc, #300]	; (800310c <HAL_DAC_Start_DMA+0x164>)
 8002fde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a4a      	ldr	r2, [pc, #296]	; (8003110 <HAL_DAC_Start_DMA+0x168>)
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	4a49      	ldr	r2, [pc, #292]	; (8003114 <HAL_DAC_Start_DMA+0x16c>)
 8002fee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	2b04      	cmp	r3, #4
 8003004:	d009      	beq.n	800301a <HAL_DAC_Start_DMA+0x72>
 8003006:	2b08      	cmp	r3, #8
 8003008:	d00c      	beq.n	8003024 <HAL_DAC_Start_DMA+0x7c>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d000      	beq.n	8003010 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800300e:	e039      	b.n	8003084 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3308      	adds	r3, #8
 8003016:	613b      	str	r3, [r7, #16]
        break;
 8003018:	e034      	b.n	8003084 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	613b      	str	r3, [r7, #16]
        break;
 8003022:	e02f      	b.n	8003084 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3310      	adds	r3, #16
 800302a:	613b      	str	r3, [r7, #16]
        break;
 800302c:	e02a      	b.n	8003084 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4a39      	ldr	r2, [pc, #228]	; (8003118 <HAL_DAC_Start_DMA+0x170>)
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a38      	ldr	r2, [pc, #224]	; (800311c <HAL_DAC_Start_DMA+0x174>)
 800303c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	4a37      	ldr	r2, [pc, #220]	; (8003120 <HAL_DAC_Start_DMA+0x178>)
 8003044:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003054:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	2b04      	cmp	r3, #4
 800305a:	d009      	beq.n	8003070 <HAL_DAC_Start_DMA+0xc8>
 800305c:	2b08      	cmp	r3, #8
 800305e:	d00c      	beq.n	800307a <HAL_DAC_Start_DMA+0xd2>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d000      	beq.n	8003066 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003064:	e00e      	b.n	8003084 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3314      	adds	r3, #20
 800306c:	613b      	str	r3, [r7, #16]
        break;
 800306e:	e009      	b.n	8003084 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3318      	adds	r3, #24
 8003076:	613b      	str	r3, [r7, #16]
        break;
 8003078:	e004      	b.n	8003084 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	331c      	adds	r3, #28
 8003080:	613b      	str	r3, [r7, #16]
        break;
 8003082:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d111      	bne.n	80030ae <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003098:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6898      	ldr	r0, [r3, #8]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	f000 fd98 	bl	8003bd8 <HAL_DMA_Start_IT>
 80030a8:	4603      	mov	r3, r0
 80030aa:	75fb      	strb	r3, [r7, #23]
 80030ac:	e010      	b.n	80030d0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68d8      	ldr	r0, [r3, #12]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	f000 fd86 	bl	8003bd8 <HAL_DMA_Start_IT>
 80030cc:	4603      	mov	r3, r0
 80030ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10c      	bne.n	80030f6 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2201      	movs	r2, #1
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e005      	b.n	8003102 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f043 0204 	orr.w	r2, r3, #4
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	0800340d 	.word	0x0800340d
 8003110:	0800342f 	.word	0x0800342f
 8003114:	0800344b 	.word	0x0800344b
 8003118:	080034b5 	.word	0x080034b5
 800311c:	080034d7 	.word	0x080034d7
 8003120:	080034f3 	.word	0x080034f3

08003124 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d105      	bne.n	800314e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	3308      	adds	r3, #8
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e004      	b.n	8003158 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	3314      	adds	r3, #20
 8003156:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	461a      	mov	r2, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	795b      	ldrb	r3, [r3, #5]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_DAC_ConfigChannel+0x18>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e11d      	b.n	8003400 <HAL_DAC_ConfigChannel+0x254>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2202      	movs	r2, #2
 80031ce:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d174      	bne.n	80032c2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80031d8:	f7fe f914 	bl	8001404 <HAL_GetTick>
 80031dc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d134      	bne.n	800324e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031e4:	e011      	b.n	800320a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031e6:	f7fe f90d 	bl	8001404 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d90a      	bls.n	800320a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f043 0208 	orr.w	r2, r3, #8
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2203      	movs	r2, #3
 8003204:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e0fa      	b.n	8003400 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003210:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_DAC_ConfigChannel+0x25c>)
 8003212:	4013      	ands	r3, r2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e6      	bne.n	80031e6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003218:	2001      	movs	r0, #1
 800321a:	f7fe f8ff 	bl	800141c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	6992      	ldr	r2, [r2, #24]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
 8003228:	e01e      	b.n	8003268 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800322a:	f7fe f8eb 	bl	8001404 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d90a      	bls.n	800324e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f043 0208 	orr.w	r2, r3, #8
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2203      	movs	r2, #3
 8003248:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e0d8      	b.n	8003400 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	2b00      	cmp	r3, #0
 8003256:	dbe8      	blt.n	800322a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003258:	2001      	movs	r0, #1
 800325a:	f7fe f8df 	bl	800141c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	6992      	ldr	r2, [r2, #24]
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	ea02 0103 	and.w	r1, r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	409a      	lsls	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	21ff      	movs	r1, #255	; 0xff
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	ea02 0103 	and.w	r1, r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6a1a      	ldr	r2, [r3, #32]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	409a      	lsls	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d11d      	bne.n	8003306 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	221f      	movs	r2, #31
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4013      	ands	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2207      	movs	r2, #7
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4013      	ands	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d102      	bne.n	8003330 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e00f      	b.n	8003350 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d102      	bne.n	800333e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003338:	2301      	movs	r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	e008      	b.n	8003350 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003346:	2301      	movs	r3, #1
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e001      	b.n	8003350 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4313      	orrs	r3, r2
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6819      	ldr	r1, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43da      	mvns	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	400a      	ands	r2, r1
 8003396:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4013      	ands	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	22c0      	movs	r2, #192	; 0xc0
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43da      	mvns	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	400a      	ands	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20008000 	.word	0x20008000

0800340c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fea7 	bl	800316e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	711a      	strb	r2, [r3, #4]
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f7ff fea0 	bl	8003182 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff fe96 	bl	8003196 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	711a      	strb	r2, [r3, #4]
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff ffd8 	bl	8003478 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	711a      	strb	r2, [r3, #4]
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7ff ffd1 	bl	800348c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80034ea:	bf00      	nop
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f043 0204 	orr.w	r2, r3, #4
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff ffc7 	bl	80034a0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	711a      	strb	r2, [r3, #4]
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7fd ff6c 	bl	8001404 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e316      	b.n	8003b66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a66      	ldr	r2, [pc, #408]	; (80036d8 <HAL_DMA_Init+0x1b8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d04a      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a65      	ldr	r2, [pc, #404]	; (80036dc <HAL_DMA_Init+0x1bc>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d045      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a63      	ldr	r2, [pc, #396]	; (80036e0 <HAL_DMA_Init+0x1c0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d040      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a62      	ldr	r2, [pc, #392]	; (80036e4 <HAL_DMA_Init+0x1c4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d03b      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a60      	ldr	r2, [pc, #384]	; (80036e8 <HAL_DMA_Init+0x1c8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d036      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a5f      	ldr	r2, [pc, #380]	; (80036ec <HAL_DMA_Init+0x1cc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d031      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5d      	ldr	r2, [pc, #372]	; (80036f0 <HAL_DMA_Init+0x1d0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d02c      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5c      	ldr	r2, [pc, #368]	; (80036f4 <HAL_DMA_Init+0x1d4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d027      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5a      	ldr	r2, [pc, #360]	; (80036f8 <HAL_DMA_Init+0x1d8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d022      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a59      	ldr	r2, [pc, #356]	; (80036fc <HAL_DMA_Init+0x1dc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d01d      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a57      	ldr	r2, [pc, #348]	; (8003700 <HAL_DMA_Init+0x1e0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a56      	ldr	r2, [pc, #344]	; (8003704 <HAL_DMA_Init+0x1e4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a54      	ldr	r2, [pc, #336]	; (8003708 <HAL_DMA_Init+0x1e8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a53      	ldr	r2, [pc, #332]	; (800370c <HAL_DMA_Init+0x1ec>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a51      	ldr	r2, [pc, #324]	; (8003710 <HAL_DMA_Init+0x1f0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_DMA_Init+0xb8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a50      	ldr	r2, [pc, #320]	; (8003714 <HAL_DMA_Init+0x1f4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_DMA_Init+0xbc>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_DMA_Init+0xbe>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 813b 	beq.w	800385a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a37      	ldr	r2, [pc, #220]	; (80036d8 <HAL_DMA_Init+0x1b8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d04a      	beq.n	8003694 <HAL_DMA_Init+0x174>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a36      	ldr	r2, [pc, #216]	; (80036dc <HAL_DMA_Init+0x1bc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d045      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a34      	ldr	r2, [pc, #208]	; (80036e0 <HAL_DMA_Init+0x1c0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d040      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a33      	ldr	r2, [pc, #204]	; (80036e4 <HAL_DMA_Init+0x1c4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d03b      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_DMA_Init+0x1c8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d036      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a30      	ldr	r2, [pc, #192]	; (80036ec <HAL_DMA_Init+0x1cc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d031      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2e      	ldr	r2, [pc, #184]	; (80036f0 <HAL_DMA_Init+0x1d0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d02c      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <HAL_DMA_Init+0x1d4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d027      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <HAL_DMA_Init+0x1d8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d022      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <HAL_DMA_Init+0x1dc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d01d      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a28      	ldr	r2, [pc, #160]	; (8003700 <HAL_DMA_Init+0x1e0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d018      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a27      	ldr	r2, [pc, #156]	; (8003704 <HAL_DMA_Init+0x1e4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d013      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a25      	ldr	r2, [pc, #148]	; (8003708 <HAL_DMA_Init+0x1e8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00e      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a24      	ldr	r2, [pc, #144]	; (800370c <HAL_DMA_Init+0x1ec>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d009      	beq.n	8003694 <HAL_DMA_Init+0x174>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a22      	ldr	r2, [pc, #136]	; (8003710 <HAL_DMA_Init+0x1f0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_Init+0x174>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a21      	ldr	r2, [pc, #132]	; (8003714 <HAL_DMA_Init+0x1f4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d108      	bne.n	80036a6 <HAL_DMA_Init+0x186>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e007      	b.n	80036b6 <HAL_DMA_Init+0x196>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036b6:	e02f      	b.n	8003718 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036b8:	f7fd fea4 	bl	8001404 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	d928      	bls.n	8003718 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2203      	movs	r2, #3
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e246      	b.n	8003b66 <HAL_DMA_Init+0x646>
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1c8      	bne.n	80036b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4b83      	ldr	r3, [pc, #524]	; (8003940 <HAL_DMA_Init+0x420>)
 8003732:	4013      	ands	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800373e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003756:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b04      	cmp	r3, #4
 800376a:	d107      	bne.n	800377c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	4313      	orrs	r3, r2
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800377c:	4b71      	ldr	r3, [pc, #452]	; (8003944 <HAL_DMA_Init+0x424>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b71      	ldr	r3, [pc, #452]	; (8003948 <HAL_DMA_Init+0x428>)
 8003782:	4013      	ands	r3, r2
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003788:	d328      	bcc.n	80037dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b28      	cmp	r3, #40	; 0x28
 8003790:	d903      	bls.n	800379a <HAL_DMA_Init+0x27a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b2e      	cmp	r3, #46	; 0x2e
 8003798:	d917      	bls.n	80037ca <HAL_DMA_Init+0x2aa>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b3e      	cmp	r3, #62	; 0x3e
 80037a0:	d903      	bls.n	80037aa <HAL_DMA_Init+0x28a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b42      	cmp	r3, #66	; 0x42
 80037a8:	d90f      	bls.n	80037ca <HAL_DMA_Init+0x2aa>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b46      	cmp	r3, #70	; 0x46
 80037b0:	d903      	bls.n	80037ba <HAL_DMA_Init+0x29a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b48      	cmp	r3, #72	; 0x48
 80037b8:	d907      	bls.n	80037ca <HAL_DMA_Init+0x2aa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b4e      	cmp	r3, #78	; 0x4e
 80037c0:	d905      	bls.n	80037ce <HAL_DMA_Init+0x2ae>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b52      	cmp	r3, #82	; 0x52
 80037c8:	d801      	bhi.n	80037ce <HAL_DMA_Init+0x2ae>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_DMA_Init+0x2b0>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f023 0307 	bic.w	r3, r3, #7
 80037f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	2b04      	cmp	r3, #4
 8003804:	d117      	bne.n	8003836 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f001 fdcf 	bl	80053bc <DMA_CheckFifoParam>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2240      	movs	r2, #64	; 0x40
 8003828:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e197      	b.n	8003b66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f001 fd0a 	bl	8005258 <DMA_CalcBaseAndBitshift>
 8003844:	4603      	mov	r3, r0
 8003846:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	223f      	movs	r2, #63	; 0x3f
 8003852:	409a      	lsls	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	e0cd      	b.n	80039f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a3b      	ldr	r2, [pc, #236]	; (800394c <HAL_DMA_Init+0x42c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a39      	ldr	r2, [pc, #228]	; (8003950 <HAL_DMA_Init+0x430>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01d      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a38      	ldr	r2, [pc, #224]	; (8003954 <HAL_DMA_Init+0x434>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d018      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a36      	ldr	r2, [pc, #216]	; (8003958 <HAL_DMA_Init+0x438>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d013      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a35      	ldr	r2, [pc, #212]	; (800395c <HAL_DMA_Init+0x43c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00e      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a33      	ldr	r2, [pc, #204]	; (8003960 <HAL_DMA_Init+0x440>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a32      	ldr	r2, [pc, #200]	; (8003964 <HAL_DMA_Init+0x444>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_DMA_Init+0x38a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a30      	ldr	r2, [pc, #192]	; (8003968 <HAL_DMA_Init+0x448>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_DMA_Init+0x38e>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_DMA_Init+0x390>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8097 	beq.w	80039e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a24      	ldr	r2, [pc, #144]	; (800394c <HAL_DMA_Init+0x42c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d021      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <HAL_DMA_Init+0x430>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01c      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_DMA_Init+0x434>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d017      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <HAL_DMA_Init+0x438>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d012      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_DMA_Init+0x43c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00d      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <HAL_DMA_Init+0x440>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d008      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_DMA_Init+0x444>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <HAL_DMA_Init+0x3e4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_DMA_Init+0x448>)
 8003902:	4293      	cmp	r3, r2
 8003904:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_DMA_Init+0x44c>)
 8003922:	4013      	ands	r3, r2
 8003924:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d020      	beq.n	8003970 <HAL_DMA_Init+0x450>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d102      	bne.n	800393c <HAL_DMA_Init+0x41c>
 8003936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800393a:	e01a      	b.n	8003972 <HAL_DMA_Init+0x452>
 800393c:	2300      	movs	r3, #0
 800393e:	e018      	b.n	8003972 <HAL_DMA_Init+0x452>
 8003940:	fe10803f 	.word	0xfe10803f
 8003944:	5c001000 	.word	0x5c001000
 8003948:	ffff0000 	.word	0xffff0000
 800394c:	58025408 	.word	0x58025408
 8003950:	5802541c 	.word	0x5802541c
 8003954:	58025430 	.word	0x58025430
 8003958:	58025444 	.word	0x58025444
 800395c:	58025458 	.word	0x58025458
 8003960:	5802546c 	.word	0x5802546c
 8003964:	58025480 	.word	0x58025480
 8003968:	58025494 	.word	0x58025494
 800396c:	fffe000f 	.word	0xfffe000f
 8003970:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68d2      	ldr	r2, [r2, #12]
 8003976:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b6e      	ldr	r3, [pc, #440]	; (8003b70 <HAL_DMA_Init+0x650>)
 80039b8:	4413      	add	r3, r2
 80039ba:	4a6e      	ldr	r2, [pc, #440]	; (8003b74 <HAL_DMA_Init+0x654>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	009a      	lsls	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f001 fc45 	bl	8005258 <DMA_CalcBaseAndBitshift>
 80039ce:	4603      	mov	r3, r0
 80039d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	2201      	movs	r2, #1
 80039dc:	409a      	lsls	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	e008      	b.n	80039f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2203      	movs	r2, #3
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0b7      	b.n	8003b66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a5f      	ldr	r2, [pc, #380]	; (8003b78 <HAL_DMA_Init+0x658>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d072      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a5d      	ldr	r2, [pc, #372]	; (8003b7c <HAL_DMA_Init+0x65c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d06d      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5c      	ldr	r2, [pc, #368]	; (8003b80 <HAL_DMA_Init+0x660>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d068      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5a      	ldr	r2, [pc, #360]	; (8003b84 <HAL_DMA_Init+0x664>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d063      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a59      	ldr	r2, [pc, #356]	; (8003b88 <HAL_DMA_Init+0x668>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d05e      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a57      	ldr	r2, [pc, #348]	; (8003b8c <HAL_DMA_Init+0x66c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d059      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a56      	ldr	r2, [pc, #344]	; (8003b90 <HAL_DMA_Init+0x670>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d054      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a54      	ldr	r2, [pc, #336]	; (8003b94 <HAL_DMA_Init+0x674>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d04f      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a53      	ldr	r2, [pc, #332]	; (8003b98 <HAL_DMA_Init+0x678>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04a      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a51      	ldr	r2, [pc, #324]	; (8003b9c <HAL_DMA_Init+0x67c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d045      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a50      	ldr	r2, [pc, #320]	; (8003ba0 <HAL_DMA_Init+0x680>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a4e      	ldr	r2, [pc, #312]	; (8003ba4 <HAL_DMA_Init+0x684>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d03b      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a4d      	ldr	r2, [pc, #308]	; (8003ba8 <HAL_DMA_Init+0x688>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d036      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a4b      	ldr	r2, [pc, #300]	; (8003bac <HAL_DMA_Init+0x68c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a4a      	ldr	r2, [pc, #296]	; (8003bb0 <HAL_DMA_Init+0x690>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a48      	ldr	r2, [pc, #288]	; (8003bb4 <HAL_DMA_Init+0x694>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a47      	ldr	r2, [pc, #284]	; (8003bb8 <HAL_DMA_Init+0x698>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d022      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a45      	ldr	r2, [pc, #276]	; (8003bbc <HAL_DMA_Init+0x69c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a44      	ldr	r2, [pc, #272]	; (8003bc0 <HAL_DMA_Init+0x6a0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d018      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a42      	ldr	r2, [pc, #264]	; (8003bc4 <HAL_DMA_Init+0x6a4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a41      	ldr	r2, [pc, #260]	; (8003bc8 <HAL_DMA_Init+0x6a8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a3f      	ldr	r2, [pc, #252]	; (8003bcc <HAL_DMA_Init+0x6ac>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a3e      	ldr	r2, [pc, #248]	; (8003bd0 <HAL_DMA_Init+0x6b0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_DMA_Init+0x5c6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3c      	ldr	r2, [pc, #240]	; (8003bd4 <HAL_DMA_Init+0x6b4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_DMA_Init+0x5ca>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_Init+0x5cc>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d032      	beq.n	8003b56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f001 fcdf 	bl	80054b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b80      	cmp	r3, #128	; 0x80
 8003afc:	d102      	bne.n	8003b04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d010      	beq.n	8003b44 <HAL_DMA_Init+0x624>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d80c      	bhi.n	8003b44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 fd5c 	bl	80055e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	e008      	b.n	8003b56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	a7fdabf8 	.word	0xa7fdabf8
 8003b74:	cccccccd 	.word	0xcccccccd
 8003b78:	40020010 	.word	0x40020010
 8003b7c:	40020028 	.word	0x40020028
 8003b80:	40020040 	.word	0x40020040
 8003b84:	40020058 	.word	0x40020058
 8003b88:	40020070 	.word	0x40020070
 8003b8c:	40020088 	.word	0x40020088
 8003b90:	400200a0 	.word	0x400200a0
 8003b94:	400200b8 	.word	0x400200b8
 8003b98:	40020410 	.word	0x40020410
 8003b9c:	40020428 	.word	0x40020428
 8003ba0:	40020440 	.word	0x40020440
 8003ba4:	40020458 	.word	0x40020458
 8003ba8:	40020470 	.word	0x40020470
 8003bac:	40020488 	.word	0x40020488
 8003bb0:	400204a0 	.word	0x400204a0
 8003bb4:	400204b8 	.word	0x400204b8
 8003bb8:	58025408 	.word	0x58025408
 8003bbc:	5802541c 	.word	0x5802541c
 8003bc0:	58025430 	.word	0x58025430
 8003bc4:	58025444 	.word	0x58025444
 8003bc8:	58025458 	.word	0x58025458
 8003bcc:	5802546c 	.word	0x5802546c
 8003bd0:	58025480 	.word	0x58025480
 8003bd4:	58025494 	.word	0x58025494

08003bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e226      	b.n	8004042 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_DMA_Start_IT+0x2a>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e21f      	b.n	8004042 <HAL_DMA_Start_IT+0x46a>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	f040 820a 	bne.w	800402c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a68      	ldr	r2, [pc, #416]	; (8003dcc <HAL_DMA_Start_IT+0x1f4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d04a      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a66      	ldr	r2, [pc, #408]	; (8003dd0 <HAL_DMA_Start_IT+0x1f8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d045      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a65      	ldr	r2, [pc, #404]	; (8003dd4 <HAL_DMA_Start_IT+0x1fc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d040      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a63      	ldr	r2, [pc, #396]	; (8003dd8 <HAL_DMA_Start_IT+0x200>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d03b      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a62      	ldr	r2, [pc, #392]	; (8003ddc <HAL_DMA_Start_IT+0x204>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d036      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a60      	ldr	r2, [pc, #384]	; (8003de0 <HAL_DMA_Start_IT+0x208>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d031      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a5f      	ldr	r2, [pc, #380]	; (8003de4 <HAL_DMA_Start_IT+0x20c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d02c      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5d      	ldr	r2, [pc, #372]	; (8003de8 <HAL_DMA_Start_IT+0x210>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d027      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5c      	ldr	r2, [pc, #368]	; (8003dec <HAL_DMA_Start_IT+0x214>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a5a      	ldr	r2, [pc, #360]	; (8003df0 <HAL_DMA_Start_IT+0x218>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01d      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a59      	ldr	r2, [pc, #356]	; (8003df4 <HAL_DMA_Start_IT+0x21c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d018      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a57      	ldr	r2, [pc, #348]	; (8003df8 <HAL_DMA_Start_IT+0x220>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a56      	ldr	r2, [pc, #344]	; (8003dfc <HAL_DMA_Start_IT+0x224>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a54      	ldr	r2, [pc, #336]	; (8003e00 <HAL_DMA_Start_IT+0x228>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d009      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a53      	ldr	r2, [pc, #332]	; (8003e04 <HAL_DMA_Start_IT+0x22c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d004      	beq.n	8003cc6 <HAL_DMA_Start_IT+0xee>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a51      	ldr	r2, [pc, #324]	; (8003e08 <HAL_DMA_Start_IT+0x230>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d108      	bne.n	8003cd8 <HAL_DMA_Start_IT+0x100>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e007      	b.n	8003ce8 <HAL_DMA_Start_IT+0x110>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f001 f906 	bl	8004f00 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a34      	ldr	r2, [pc, #208]	; (8003dcc <HAL_DMA_Start_IT+0x1f4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d04a      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a33      	ldr	r2, [pc, #204]	; (8003dd0 <HAL_DMA_Start_IT+0x1f8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d045      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <HAL_DMA_Start_IT+0x1fc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d040      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a30      	ldr	r2, [pc, #192]	; (8003dd8 <HAL_DMA_Start_IT+0x200>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d03b      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <HAL_DMA_Start_IT+0x204>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d036      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2d      	ldr	r2, [pc, #180]	; (8003de0 <HAL_DMA_Start_IT+0x208>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d031      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2b      	ldr	r2, [pc, #172]	; (8003de4 <HAL_DMA_Start_IT+0x20c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d02c      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <HAL_DMA_Start_IT+0x210>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d027      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a28      	ldr	r2, [pc, #160]	; (8003dec <HAL_DMA_Start_IT+0x214>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d022      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <HAL_DMA_Start_IT+0x218>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d01d      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a25      	ldr	r2, [pc, #148]	; (8003df4 <HAL_DMA_Start_IT+0x21c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d018      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a24      	ldr	r2, [pc, #144]	; (8003df8 <HAL_DMA_Start_IT+0x220>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <HAL_DMA_Start_IT+0x224>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00e      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	; (8003e00 <HAL_DMA_Start_IT+0x228>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <HAL_DMA_Start_IT+0x22c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_DMA_Start_IT+0x1bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <HAL_DMA_Start_IT+0x230>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_DMA_Start_IT+0x1c0>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <HAL_DMA_Start_IT+0x1c2>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d036      	beq.n	8003e0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 021e 	bic.w	r2, r3, #30
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0216 	orr.w	r2, r2, #22
 8003db0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d03e      	beq.n	8003e38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0208 	orr.w	r2, r2, #8
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e035      	b.n	8003e38 <HAL_DMA_Start_IT+0x260>
 8003dcc:	40020010 	.word	0x40020010
 8003dd0:	40020028 	.word	0x40020028
 8003dd4:	40020040 	.word	0x40020040
 8003dd8:	40020058 	.word	0x40020058
 8003ddc:	40020070 	.word	0x40020070
 8003de0:	40020088 	.word	0x40020088
 8003de4:	400200a0 	.word	0x400200a0
 8003de8:	400200b8 	.word	0x400200b8
 8003dec:	40020410 	.word	0x40020410
 8003df0:	40020428 	.word	0x40020428
 8003df4:	40020440 	.word	0x40020440
 8003df8:	40020458 	.word	0x40020458
 8003dfc:	40020470 	.word	0x40020470
 8003e00:	40020488 	.word	0x40020488
 8003e04:	400204a0 	.word	0x400204a0
 8003e08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 020e 	bic.w	r2, r3, #14
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 020a 	orr.w	r2, r2, #10
 8003e1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0204 	orr.w	r2, r2, #4
 8003e36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a83      	ldr	r2, [pc, #524]	; (800404c <HAL_DMA_Start_IT+0x474>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d072      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a82      	ldr	r2, [pc, #520]	; (8004050 <HAL_DMA_Start_IT+0x478>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d06d      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a80      	ldr	r2, [pc, #512]	; (8004054 <HAL_DMA_Start_IT+0x47c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d068      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7f      	ldr	r2, [pc, #508]	; (8004058 <HAL_DMA_Start_IT+0x480>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d063      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a7d      	ldr	r2, [pc, #500]	; (800405c <HAL_DMA_Start_IT+0x484>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d05e      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a7c      	ldr	r2, [pc, #496]	; (8004060 <HAL_DMA_Start_IT+0x488>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d059      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7a      	ldr	r2, [pc, #488]	; (8004064 <HAL_DMA_Start_IT+0x48c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d054      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a79      	ldr	r2, [pc, #484]	; (8004068 <HAL_DMA_Start_IT+0x490>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d04f      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a77      	ldr	r2, [pc, #476]	; (800406c <HAL_DMA_Start_IT+0x494>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d04a      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a76      	ldr	r2, [pc, #472]	; (8004070 <HAL_DMA_Start_IT+0x498>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d045      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a74      	ldr	r2, [pc, #464]	; (8004074 <HAL_DMA_Start_IT+0x49c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d040      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a73      	ldr	r2, [pc, #460]	; (8004078 <HAL_DMA_Start_IT+0x4a0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d03b      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a71      	ldr	r2, [pc, #452]	; (800407c <HAL_DMA_Start_IT+0x4a4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d036      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a70      	ldr	r2, [pc, #448]	; (8004080 <HAL_DMA_Start_IT+0x4a8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d031      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	; (8004084 <HAL_DMA_Start_IT+0x4ac>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d02c      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6d      	ldr	r2, [pc, #436]	; (8004088 <HAL_DMA_Start_IT+0x4b0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d027      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6b      	ldr	r2, [pc, #428]	; (800408c <HAL_DMA_Start_IT+0x4b4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d022      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a6a      	ldr	r2, [pc, #424]	; (8004090 <HAL_DMA_Start_IT+0x4b8>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d01d      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a68      	ldr	r2, [pc, #416]	; (8004094 <HAL_DMA_Start_IT+0x4bc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d018      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a67      	ldr	r2, [pc, #412]	; (8004098 <HAL_DMA_Start_IT+0x4c0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d013      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a65      	ldr	r2, [pc, #404]	; (800409c <HAL_DMA_Start_IT+0x4c4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00e      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a64      	ldr	r2, [pc, #400]	; (80040a0 <HAL_DMA_Start_IT+0x4c8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d009      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a62      	ldr	r2, [pc, #392]	; (80040a4 <HAL_DMA_Start_IT+0x4cc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d004      	beq.n	8003f28 <HAL_DMA_Start_IT+0x350>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a61      	ldr	r2, [pc, #388]	; (80040a8 <HAL_DMA_Start_IT+0x4d0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_DMA_Start_IT+0x354>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_DMA_Start_IT+0x356>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01a      	beq.n	8003f68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a37      	ldr	r2, [pc, #220]	; (800404c <HAL_DMA_Start_IT+0x474>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d04a      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a36      	ldr	r2, [pc, #216]	; (8004050 <HAL_DMA_Start_IT+0x478>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d045      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a34      	ldr	r2, [pc, #208]	; (8004054 <HAL_DMA_Start_IT+0x47c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d040      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a33      	ldr	r2, [pc, #204]	; (8004058 <HAL_DMA_Start_IT+0x480>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d03b      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a31      	ldr	r2, [pc, #196]	; (800405c <HAL_DMA_Start_IT+0x484>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d036      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a30      	ldr	r2, [pc, #192]	; (8004060 <HAL_DMA_Start_IT+0x488>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d031      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a2e      	ldr	r2, [pc, #184]	; (8004064 <HAL_DMA_Start_IT+0x48c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02c      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2d      	ldr	r2, [pc, #180]	; (8004068 <HAL_DMA_Start_IT+0x490>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d027      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	; (800406c <HAL_DMA_Start_IT+0x494>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <HAL_DMA_Start_IT+0x498>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01d      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a28      	ldr	r2, [pc, #160]	; (8004074 <HAL_DMA_Start_IT+0x49c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d018      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a27      	ldr	r2, [pc, #156]	; (8004078 <HAL_DMA_Start_IT+0x4a0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a25      	ldr	r2, [pc, #148]	; (800407c <HAL_DMA_Start_IT+0x4a4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a24      	ldr	r2, [pc, #144]	; (8004080 <HAL_DMA_Start_IT+0x4a8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a22      	ldr	r2, [pc, #136]	; (8004084 <HAL_DMA_Start_IT+0x4ac>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_DMA_Start_IT+0x430>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a21      	ldr	r2, [pc, #132]	; (8004088 <HAL_DMA_Start_IT+0x4b0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <HAL_DMA_Start_IT+0x442>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e012      	b.n	8004040 <HAL_DMA_Start_IT+0x468>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e009      	b.n	8004040 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800403a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004040:	7dfb      	ldrb	r3, [r7, #23]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40020010 	.word	0x40020010
 8004050:	40020028 	.word	0x40020028
 8004054:	40020040 	.word	0x40020040
 8004058:	40020058 	.word	0x40020058
 800405c:	40020070 	.word	0x40020070
 8004060:	40020088 	.word	0x40020088
 8004064:	400200a0 	.word	0x400200a0
 8004068:	400200b8 	.word	0x400200b8
 800406c:	40020410 	.word	0x40020410
 8004070:	40020428 	.word	0x40020428
 8004074:	40020440 	.word	0x40020440
 8004078:	40020458 	.word	0x40020458
 800407c:	40020470 	.word	0x40020470
 8004080:	40020488 	.word	0x40020488
 8004084:	400204a0 	.word	0x400204a0
 8004088:	400204b8 	.word	0x400204b8
 800408c:	58025408 	.word	0x58025408
 8004090:	5802541c 	.word	0x5802541c
 8004094:	58025430 	.word	0x58025430
 8004098:	58025444 	.word	0x58025444
 800409c:	58025458 	.word	0x58025458
 80040a0:	5802546c 	.word	0x5802546c
 80040a4:	58025480 	.word	0x58025480
 80040a8:	58025494 	.word	0x58025494

080040ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040b8:	4b67      	ldr	r3, [pc, #412]	; (8004258 <HAL_DMA_IRQHandler+0x1ac>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a67      	ldr	r2, [pc, #412]	; (800425c <HAL_DMA_IRQHandler+0x1b0>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0a9b      	lsrs	r3, r3, #10
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a5f      	ldr	r2, [pc, #380]	; (8004260 <HAL_DMA_IRQHandler+0x1b4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d04a      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a5d      	ldr	r2, [pc, #372]	; (8004264 <HAL_DMA_IRQHandler+0x1b8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d045      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a5c      	ldr	r2, [pc, #368]	; (8004268 <HAL_DMA_IRQHandler+0x1bc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d040      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a5a      	ldr	r2, [pc, #360]	; (800426c <HAL_DMA_IRQHandler+0x1c0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d03b      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a59      	ldr	r2, [pc, #356]	; (8004270 <HAL_DMA_IRQHandler+0x1c4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d036      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a57      	ldr	r2, [pc, #348]	; (8004274 <HAL_DMA_IRQHandler+0x1c8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d031      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a56      	ldr	r2, [pc, #344]	; (8004278 <HAL_DMA_IRQHandler+0x1cc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d02c      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a54      	ldr	r2, [pc, #336]	; (800427c <HAL_DMA_IRQHandler+0x1d0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d027      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a53      	ldr	r2, [pc, #332]	; (8004280 <HAL_DMA_IRQHandler+0x1d4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d022      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a51      	ldr	r2, [pc, #324]	; (8004284 <HAL_DMA_IRQHandler+0x1d8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d01d      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a50      	ldr	r2, [pc, #320]	; (8004288 <HAL_DMA_IRQHandler+0x1dc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d018      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a4e      	ldr	r2, [pc, #312]	; (800428c <HAL_DMA_IRQHandler+0x1e0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a4d      	ldr	r2, [pc, #308]	; (8004290 <HAL_DMA_IRQHandler+0x1e4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a4b      	ldr	r2, [pc, #300]	; (8004294 <HAL_DMA_IRQHandler+0x1e8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a4a      	ldr	r2, [pc, #296]	; (8004298 <HAL_DMA_IRQHandler+0x1ec>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_DMA_IRQHandler+0xd2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a48      	ldr	r2, [pc, #288]	; (800429c <HAL_DMA_IRQHandler+0x1f0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d101      	bne.n	8004182 <HAL_DMA_IRQHandler+0xd6>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_DMA_IRQHandler+0xd8>
 8004182:	2300      	movs	r3, #0
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 842b 	beq.w	80049e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2208      	movs	r2, #8
 8004194:	409a      	lsls	r2, r3
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80a2 	beq.w	80042e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a2e      	ldr	r2, [pc, #184]	; (8004260 <HAL_DMA_IRQHandler+0x1b4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d04a      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <HAL_DMA_IRQHandler+0x1b8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d045      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <HAL_DMA_IRQHandler+0x1bc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d040      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2a      	ldr	r2, [pc, #168]	; (800426c <HAL_DMA_IRQHandler+0x1c0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d03b      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a28      	ldr	r2, [pc, #160]	; (8004270 <HAL_DMA_IRQHandler+0x1c4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d036      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a27      	ldr	r2, [pc, #156]	; (8004274 <HAL_DMA_IRQHandler+0x1c8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d031      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <HAL_DMA_IRQHandler+0x1cc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d02c      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a24      	ldr	r2, [pc, #144]	; (800427c <HAL_DMA_IRQHandler+0x1d0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d027      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a22      	ldr	r2, [pc, #136]	; (8004280 <HAL_DMA_IRQHandler+0x1d4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d022      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a21      	ldr	r2, [pc, #132]	; (8004284 <HAL_DMA_IRQHandler+0x1d8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d01d      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1f      	ldr	r2, [pc, #124]	; (8004288 <HAL_DMA_IRQHandler+0x1dc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d018      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <HAL_DMA_IRQHandler+0x1e0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d013      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1c      	ldr	r2, [pc, #112]	; (8004290 <HAL_DMA_IRQHandler+0x1e4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00e      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <HAL_DMA_IRQHandler+0x1e8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d009      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <HAL_DMA_IRQHandler+0x1ec>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <HAL_DMA_IRQHandler+0x194>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a18      	ldr	r2, [pc, #96]	; (800429c <HAL_DMA_IRQHandler+0x1f0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d12f      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x1f4>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e02e      	b.n	80042b4 <HAL_DMA_IRQHandler+0x208>
 8004256:	bf00      	nop
 8004258:	20000000 	.word	0x20000000
 800425c:	1b4e81b5 	.word	0x1b4e81b5
 8004260:	40020010 	.word	0x40020010
 8004264:	40020028 	.word	0x40020028
 8004268:	40020040 	.word	0x40020040
 800426c:	40020058 	.word	0x40020058
 8004270:	40020070 	.word	0x40020070
 8004274:	40020088 	.word	0x40020088
 8004278:	400200a0 	.word	0x400200a0
 800427c:	400200b8 	.word	0x400200b8
 8004280:	40020410 	.word	0x40020410
 8004284:	40020428 	.word	0x40020428
 8004288:	40020440 	.word	0x40020440
 800428c:	40020458 	.word	0x40020458
 8004290:	40020470 	.word	0x40020470
 8004294:	40020488 	.word	0x40020488
 8004298:	400204a0 	.word	0x400204a0
 800429c:	400204b8 	.word	0x400204b8
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d015      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0204 	bic.w	r2, r2, #4
 80042c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2208      	movs	r2, #8
 80042d2:	409a      	lsls	r2, r3
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f043 0201 	orr.w	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	fa22 f303 	lsr.w	r3, r2, r3
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d06e      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a69      	ldr	r2, [pc, #420]	; (80044a4 <HAL_DMA_IRQHandler+0x3f8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d04a      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a67      	ldr	r2, [pc, #412]	; (80044a8 <HAL_DMA_IRQHandler+0x3fc>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d045      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a66      	ldr	r2, [pc, #408]	; (80044ac <HAL_DMA_IRQHandler+0x400>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d040      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a64      	ldr	r2, [pc, #400]	; (80044b0 <HAL_DMA_IRQHandler+0x404>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d03b      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a63      	ldr	r2, [pc, #396]	; (80044b4 <HAL_DMA_IRQHandler+0x408>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d036      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a61      	ldr	r2, [pc, #388]	; (80044b8 <HAL_DMA_IRQHandler+0x40c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d031      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a60      	ldr	r2, [pc, #384]	; (80044bc <HAL_DMA_IRQHandler+0x410>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d02c      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5e      	ldr	r2, [pc, #376]	; (80044c0 <HAL_DMA_IRQHandler+0x414>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d027      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a5d      	ldr	r2, [pc, #372]	; (80044c4 <HAL_DMA_IRQHandler+0x418>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5b      	ldr	r2, [pc, #364]	; (80044c8 <HAL_DMA_IRQHandler+0x41c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01d      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a5a      	ldr	r2, [pc, #360]	; (80044cc <HAL_DMA_IRQHandler+0x420>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a58      	ldr	r2, [pc, #352]	; (80044d0 <HAL_DMA_IRQHandler+0x424>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a57      	ldr	r2, [pc, #348]	; (80044d4 <HAL_DMA_IRQHandler+0x428>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a55      	ldr	r2, [pc, #340]	; (80044d8 <HAL_DMA_IRQHandler+0x42c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a54      	ldr	r2, [pc, #336]	; (80044dc <HAL_DMA_IRQHandler+0x430>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_DMA_IRQHandler+0x2ee>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a52      	ldr	r2, [pc, #328]	; (80044e0 <HAL_DMA_IRQHandler+0x434>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10a      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x304>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e003      	b.n	80043b8 <HAL_DMA_IRQHandler+0x30c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00d      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	f003 031f 	and.w	r3, r3, #31
 80043c4:	2201      	movs	r2, #1
 80043c6:	409a      	lsls	r2, r3
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	f043 0202 	orr.w	r2, r3, #2
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	2204      	movs	r2, #4
 80043e2:	409a      	lsls	r2, r3
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 808f 	beq.w	800450c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <HAL_DMA_IRQHandler+0x3f8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d04a      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2a      	ldr	r2, [pc, #168]	; (80044a8 <HAL_DMA_IRQHandler+0x3fc>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d045      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a29      	ldr	r2, [pc, #164]	; (80044ac <HAL_DMA_IRQHandler+0x400>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d040      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a27      	ldr	r2, [pc, #156]	; (80044b0 <HAL_DMA_IRQHandler+0x404>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d03b      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <HAL_DMA_IRQHandler+0x408>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d036      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a24      	ldr	r2, [pc, #144]	; (80044b8 <HAL_DMA_IRQHandler+0x40c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d031      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a23      	ldr	r2, [pc, #140]	; (80044bc <HAL_DMA_IRQHandler+0x410>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d02c      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a21      	ldr	r2, [pc, #132]	; (80044c0 <HAL_DMA_IRQHandler+0x414>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d027      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a20      	ldr	r2, [pc, #128]	; (80044c4 <HAL_DMA_IRQHandler+0x418>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1e      	ldr	r2, [pc, #120]	; (80044c8 <HAL_DMA_IRQHandler+0x41c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01d      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1d      	ldr	r2, [pc, #116]	; (80044cc <HAL_DMA_IRQHandler+0x420>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d018      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1b      	ldr	r2, [pc, #108]	; (80044d0 <HAL_DMA_IRQHandler+0x424>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d013      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1a      	ldr	r2, [pc, #104]	; (80044d4 <HAL_DMA_IRQHandler+0x428>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00e      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <HAL_DMA_IRQHandler+0x42c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a17      	ldr	r2, [pc, #92]	; (80044dc <HAL_DMA_IRQHandler+0x430>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_DMA_IRQHandler+0x3e2>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_DMA_IRQHandler+0x434>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d12a      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x438>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	e023      	b.n	80044ec <HAL_DMA_IRQHandler+0x440>
 80044a4:	40020010 	.word	0x40020010
 80044a8:	40020028 	.word	0x40020028
 80044ac:	40020040 	.word	0x40020040
 80044b0:	40020058 	.word	0x40020058
 80044b4:	40020070 	.word	0x40020070
 80044b8:	40020088 	.word	0x40020088
 80044bc:	400200a0 	.word	0x400200a0
 80044c0:	400200b8 	.word	0x400200b8
 80044c4:	40020410 	.word	0x40020410
 80044c8:	40020428 	.word	0x40020428
 80044cc:	40020440 	.word	0x40020440
 80044d0:	40020458 	.word	0x40020458
 80044d4:	40020470 	.word	0x40020470
 80044d8:	40020488 	.word	0x40020488
 80044dc:	400204a0 	.word	0x400204a0
 80044e0:	400204b8 	.word	0x400204b8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2204      	movs	r2, #4
 80044fa:	409a      	lsls	r2, r3
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f043 0204 	orr.w	r2, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2210      	movs	r2, #16
 8004516:	409a      	lsls	r2, r3
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a6 	beq.w	800466e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a85      	ldr	r2, [pc, #532]	; (800473c <HAL_DMA_IRQHandler+0x690>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d04a      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a83      	ldr	r2, [pc, #524]	; (8004740 <HAL_DMA_IRQHandler+0x694>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d045      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a82      	ldr	r2, [pc, #520]	; (8004744 <HAL_DMA_IRQHandler+0x698>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d040      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a80      	ldr	r2, [pc, #512]	; (8004748 <HAL_DMA_IRQHandler+0x69c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d03b      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7f      	ldr	r2, [pc, #508]	; (800474c <HAL_DMA_IRQHandler+0x6a0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d036      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a7d      	ldr	r2, [pc, #500]	; (8004750 <HAL_DMA_IRQHandler+0x6a4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d031      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a7c      	ldr	r2, [pc, #496]	; (8004754 <HAL_DMA_IRQHandler+0x6a8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d02c      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a7a      	ldr	r2, [pc, #488]	; (8004758 <HAL_DMA_IRQHandler+0x6ac>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d027      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a79      	ldr	r2, [pc, #484]	; (800475c <HAL_DMA_IRQHandler+0x6b0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d022      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a77      	ldr	r2, [pc, #476]	; (8004760 <HAL_DMA_IRQHandler+0x6b4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01d      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a76      	ldr	r2, [pc, #472]	; (8004764 <HAL_DMA_IRQHandler+0x6b8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d018      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a74      	ldr	r2, [pc, #464]	; (8004768 <HAL_DMA_IRQHandler+0x6bc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a73      	ldr	r2, [pc, #460]	; (800476c <HAL_DMA_IRQHandler+0x6c0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a71      	ldr	r2, [pc, #452]	; (8004770 <HAL_DMA_IRQHandler+0x6c4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d009      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a70      	ldr	r2, [pc, #448]	; (8004774 <HAL_DMA_IRQHandler+0x6c8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x516>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a6e      	ldr	r2, [pc, #440]	; (8004778 <HAL_DMA_IRQHandler+0x6cc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10a      	bne.n	80045d8 <HAL_DMA_IRQHandler+0x52c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e009      	b.n	80045ec <HAL_DMA_IRQHandler+0x540>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d03e      	beq.n	800466e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	2210      	movs	r2, #16
 80045fa:	409a      	lsls	r2, r3
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d018      	beq.n	8004640 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d108      	bne.n	800462e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d024      	beq.n	800466e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
 800462c:	e01f      	b.n	800466e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01b      	beq.n	800466e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
 800463e:	e016      	b.n	800466e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464a:	2b00      	cmp	r3, #0
 800464c:	d107      	bne.n	800465e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0208 	bic.w	r2, r2, #8
 800465c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2220      	movs	r2, #32
 8004678:	409a      	lsls	r2, r3
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8110 	beq.w	80048a4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a2c      	ldr	r2, [pc, #176]	; (800473c <HAL_DMA_IRQHandler+0x690>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d04a      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a2b      	ldr	r2, [pc, #172]	; (8004740 <HAL_DMA_IRQHandler+0x694>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d045      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a29      	ldr	r2, [pc, #164]	; (8004744 <HAL_DMA_IRQHandler+0x698>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d040      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a28      	ldr	r2, [pc, #160]	; (8004748 <HAL_DMA_IRQHandler+0x69c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d03b      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a26      	ldr	r2, [pc, #152]	; (800474c <HAL_DMA_IRQHandler+0x6a0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d036      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a25      	ldr	r2, [pc, #148]	; (8004750 <HAL_DMA_IRQHandler+0x6a4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d031      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a23      	ldr	r2, [pc, #140]	; (8004754 <HAL_DMA_IRQHandler+0x6a8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d02c      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a22      	ldr	r2, [pc, #136]	; (8004758 <HAL_DMA_IRQHandler+0x6ac>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d027      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a20      	ldr	r2, [pc, #128]	; (800475c <HAL_DMA_IRQHandler+0x6b0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1f      	ldr	r2, [pc, #124]	; (8004760 <HAL_DMA_IRQHandler+0x6b4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d01d      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <HAL_DMA_IRQHandler+0x6b8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <HAL_DMA_IRQHandler+0x6bc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1a      	ldr	r2, [pc, #104]	; (800476c <HAL_DMA_IRQHandler+0x6c0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a19      	ldr	r2, [pc, #100]	; (8004770 <HAL_DMA_IRQHandler+0x6c4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a17      	ldr	r2, [pc, #92]	; (8004774 <HAL_DMA_IRQHandler+0x6c8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_DMA_IRQHandler+0x678>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a16      	ldr	r2, [pc, #88]	; (8004778 <HAL_DMA_IRQHandler+0x6cc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d12b      	bne.n	800477c <HAL_DMA_IRQHandler+0x6d0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	bf14      	ite	ne
 8004732:	2301      	movne	r3, #1
 8004734:	2300      	moveq	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	e02a      	b.n	8004790 <HAL_DMA_IRQHandler+0x6e4>
 800473a:	bf00      	nop
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8087 	beq.w	80048a4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2220      	movs	r2, #32
 80047a0:	409a      	lsls	r2, r3
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d139      	bne.n	8004826 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0216 	bic.w	r2, r2, #22
 80047c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <HAL_DMA_IRQHandler+0x736>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0208 	bic.w	r2, r2, #8
 80047f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	f003 031f 	and.w	r3, r3, #31
 80047fa:	223f      	movs	r2, #63	; 0x3f
 80047fc:	409a      	lsls	r2, r3
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 834a 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	4798      	blx	r3
          }
          return;
 8004824:	e344      	b.n	8004eb0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d018      	beq.n	8004866 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	2b00      	cmp	r3, #0
 8004848:	d02c      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
 8004852:	e027      	b.n	80048a4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d023      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
 8004864:	e01e      	b.n	80048a4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10f      	bne.n	8004894 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0210 	bic.w	r2, r2, #16
 8004882:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8306 	beq.w	8004eba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8088 	beq.w	80049cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2204      	movs	r2, #4
 80048c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a7a      	ldr	r2, [pc, #488]	; (8004ab4 <HAL_DMA_IRQHandler+0xa08>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d04a      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a79      	ldr	r2, [pc, #484]	; (8004ab8 <HAL_DMA_IRQHandler+0xa0c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d045      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a77      	ldr	r2, [pc, #476]	; (8004abc <HAL_DMA_IRQHandler+0xa10>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d040      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a76      	ldr	r2, [pc, #472]	; (8004ac0 <HAL_DMA_IRQHandler+0xa14>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d03b      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a74      	ldr	r2, [pc, #464]	; (8004ac4 <HAL_DMA_IRQHandler+0xa18>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d036      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a73      	ldr	r2, [pc, #460]	; (8004ac8 <HAL_DMA_IRQHandler+0xa1c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d031      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a71      	ldr	r2, [pc, #452]	; (8004acc <HAL_DMA_IRQHandler+0xa20>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d02c      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a70      	ldr	r2, [pc, #448]	; (8004ad0 <HAL_DMA_IRQHandler+0xa24>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d027      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6e      	ldr	r2, [pc, #440]	; (8004ad4 <HAL_DMA_IRQHandler+0xa28>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d022      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6d      	ldr	r2, [pc, #436]	; (8004ad8 <HAL_DMA_IRQHandler+0xa2c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d01d      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6b      	ldr	r2, [pc, #428]	; (8004adc <HAL_DMA_IRQHandler+0xa30>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a6a      	ldr	r2, [pc, #424]	; (8004ae0 <HAL_DMA_IRQHandler+0xa34>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a68      	ldr	r2, [pc, #416]	; (8004ae4 <HAL_DMA_IRQHandler+0xa38>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a67      	ldr	r2, [pc, #412]	; (8004ae8 <HAL_DMA_IRQHandler+0xa3c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a65      	ldr	r2, [pc, #404]	; (8004aec <HAL_DMA_IRQHandler+0xa40>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_DMA_IRQHandler+0x8b8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a64      	ldr	r2, [pc, #400]	; (8004af0 <HAL_DMA_IRQHandler+0xa44>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d108      	bne.n	8004976 <HAL_DMA_IRQHandler+0x8ca>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	e007      	b.n	8004986 <HAL_DMA_IRQHandler+0x8da>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0201 	bic.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3301      	adds	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498e:	429a      	cmp	r2, r3
 8004990:	d307      	bcc.n	80049a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f2      	bne.n	8004986 <HAL_DMA_IRQHandler+0x8da>
 80049a0:	e000      	b.n	80049a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80049a2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d004      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2203      	movs	r2, #3
 80049be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80049c2:	e003      	b.n	80049cc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8272 	beq.w	8004eba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
 80049de:	e26c      	b.n	8004eba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a43      	ldr	r2, [pc, #268]	; (8004af4 <HAL_DMA_IRQHandler+0xa48>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d022      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x984>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a42      	ldr	r2, [pc, #264]	; (8004af8 <HAL_DMA_IRQHandler+0xa4c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d01d      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x984>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a40      	ldr	r2, [pc, #256]	; (8004afc <HAL_DMA_IRQHandler+0xa50>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d018      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x984>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a3f      	ldr	r2, [pc, #252]	; (8004b00 <HAL_DMA_IRQHandler+0xa54>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x984>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3d      	ldr	r2, [pc, #244]	; (8004b04 <HAL_DMA_IRQHandler+0xa58>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00e      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x984>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a3c      	ldr	r2, [pc, #240]	; (8004b08 <HAL_DMA_IRQHandler+0xa5c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x984>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3a      	ldr	r2, [pc, #232]	; (8004b0c <HAL_DMA_IRQHandler+0xa60>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x984>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a39      	ldr	r2, [pc, #228]	; (8004b10 <HAL_DMA_IRQHandler+0xa64>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <HAL_DMA_IRQHandler+0x988>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <HAL_DMA_IRQHandler+0x98a>
 8004a34:	2300      	movs	r3, #0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 823f 	beq.w	8004eba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80cd 	beq.w	8004bf4 <HAL_DMA_IRQHandler+0xb48>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80c7 	beq.w	8004bf4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	2204      	movs	r2, #4
 8004a70:	409a      	lsls	r2, r3
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d049      	beq.n	8004b14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 8210 	beq.w	8004eb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a9c:	e20a      	b.n	8004eb4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8206 	beq.w	8004eb4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ab0:	e200      	b.n	8004eb4 <HAL_DMA_IRQHandler+0xe08>
 8004ab2:	bf00      	nop
 8004ab4:	40020010 	.word	0x40020010
 8004ab8:	40020028 	.word	0x40020028
 8004abc:	40020040 	.word	0x40020040
 8004ac0:	40020058 	.word	0x40020058
 8004ac4:	40020070 	.word	0x40020070
 8004ac8:	40020088 	.word	0x40020088
 8004acc:	400200a0 	.word	0x400200a0
 8004ad0:	400200b8 	.word	0x400200b8
 8004ad4:	40020410 	.word	0x40020410
 8004ad8:	40020428 	.word	0x40020428
 8004adc:	40020440 	.word	0x40020440
 8004ae0:	40020458 	.word	0x40020458
 8004ae4:	40020470 	.word	0x40020470
 8004ae8:	40020488 	.word	0x40020488
 8004aec:	400204a0 	.word	0x400204a0
 8004af0:	400204b8 	.word	0x400204b8
 8004af4:	58025408 	.word	0x58025408
 8004af8:	5802541c 	.word	0x5802541c
 8004afc:	58025430 	.word	0x58025430
 8004b00:	58025444 	.word	0x58025444
 8004b04:	58025458 	.word	0x58025458
 8004b08:	5802546c 	.word	0x5802546c
 8004b0c:	58025480 	.word	0x58025480
 8004b10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d160      	bne.n	8004be0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a8c      	ldr	r2, [pc, #560]	; (8004d54 <HAL_DMA_IRQHandler+0xca8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d04a      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a8a      	ldr	r2, [pc, #552]	; (8004d58 <HAL_DMA_IRQHandler+0xcac>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d045      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a89      	ldr	r2, [pc, #548]	; (8004d5c <HAL_DMA_IRQHandler+0xcb0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d040      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a87      	ldr	r2, [pc, #540]	; (8004d60 <HAL_DMA_IRQHandler+0xcb4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d03b      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a86      	ldr	r2, [pc, #536]	; (8004d64 <HAL_DMA_IRQHandler+0xcb8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d036      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a84      	ldr	r2, [pc, #528]	; (8004d68 <HAL_DMA_IRQHandler+0xcbc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d031      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a83      	ldr	r2, [pc, #524]	; (8004d6c <HAL_DMA_IRQHandler+0xcc0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d02c      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a81      	ldr	r2, [pc, #516]	; (8004d70 <HAL_DMA_IRQHandler+0xcc4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d027      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a80      	ldr	r2, [pc, #512]	; (8004d74 <HAL_DMA_IRQHandler+0xcc8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7e      	ldr	r2, [pc, #504]	; (8004d78 <HAL_DMA_IRQHandler+0xccc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7d      	ldr	r2, [pc, #500]	; (8004d7c <HAL_DMA_IRQHandler+0xcd0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a7b      	ldr	r2, [pc, #492]	; (8004d80 <HAL_DMA_IRQHandler+0xcd4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a7a      	ldr	r2, [pc, #488]	; (8004d84 <HAL_DMA_IRQHandler+0xcd8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a78      	ldr	r2, [pc, #480]	; (8004d88 <HAL_DMA_IRQHandler+0xcdc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a77      	ldr	r2, [pc, #476]	; (8004d8c <HAL_DMA_IRQHandler+0xce0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_DMA_IRQHandler+0xb12>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a75      	ldr	r2, [pc, #468]	; (8004d90 <HAL_DMA_IRQHandler+0xce4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d108      	bne.n	8004bd0 <HAL_DMA_IRQHandler+0xb24>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0208 	bic.w	r2, r2, #8
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	e007      	b.n	8004be0 <HAL_DMA_IRQHandler+0xb34>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0204 	bic.w	r2, r2, #4
 8004bde:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8165 	beq.w	8004eb4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bf2:	e15f      	b.n	8004eb4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80c5 	beq.w	8004d94 <HAL_DMA_IRQHandler+0xce8>
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80bf 	beq.w	8004d94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2202      	movs	r2, #2
 8004c20:	409a      	lsls	r2, r3
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d018      	beq.n	8004c62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 813a 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c4c:	e134      	b.n	8004eb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8130 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c60:	e12a      	b.n	8004eb8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d168      	bne.n	8004d3e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a38      	ldr	r2, [pc, #224]	; (8004d54 <HAL_DMA_IRQHandler+0xca8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d04a      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a37      	ldr	r2, [pc, #220]	; (8004d58 <HAL_DMA_IRQHandler+0xcac>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d045      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a35      	ldr	r2, [pc, #212]	; (8004d5c <HAL_DMA_IRQHandler+0xcb0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d040      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a34      	ldr	r2, [pc, #208]	; (8004d60 <HAL_DMA_IRQHandler+0xcb4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d03b      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a32      	ldr	r2, [pc, #200]	; (8004d64 <HAL_DMA_IRQHandler+0xcb8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d036      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a31      	ldr	r2, [pc, #196]	; (8004d68 <HAL_DMA_IRQHandler+0xcbc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d031      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2f      	ldr	r2, [pc, #188]	; (8004d6c <HAL_DMA_IRQHandler+0xcc0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d02c      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2e      	ldr	r2, [pc, #184]	; (8004d70 <HAL_DMA_IRQHandler+0xcc4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d027      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2c      	ldr	r2, [pc, #176]	; (8004d74 <HAL_DMA_IRQHandler+0xcc8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a2b      	ldr	r2, [pc, #172]	; (8004d78 <HAL_DMA_IRQHandler+0xccc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d01d      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a29      	ldr	r2, [pc, #164]	; (8004d7c <HAL_DMA_IRQHandler+0xcd0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a28      	ldr	r2, [pc, #160]	; (8004d80 <HAL_DMA_IRQHandler+0xcd4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a26      	ldr	r2, [pc, #152]	; (8004d84 <HAL_DMA_IRQHandler+0xcd8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a25      	ldr	r2, [pc, #148]	; (8004d88 <HAL_DMA_IRQHandler+0xcdc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <HAL_DMA_IRQHandler+0xce0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_DMA_IRQHandler+0xc60>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a22      	ldr	r2, [pc, #136]	; (8004d90 <HAL_DMA_IRQHandler+0xce4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d108      	bne.n	8004d1e <HAL_DMA_IRQHandler+0xc72>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0214 	bic.w	r2, r2, #20
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	e007      	b.n	8004d2e <HAL_DMA_IRQHandler+0xc82>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 020a 	bic.w	r2, r2, #10
 8004d2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 80b8 	beq.w	8004eb8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d50:	e0b2      	b.n	8004eb8 <HAL_DMA_IRQHandler+0xe0c>
 8004d52:	bf00      	nop
 8004d54:	40020010 	.word	0x40020010
 8004d58:	40020028 	.word	0x40020028
 8004d5c:	40020040 	.word	0x40020040
 8004d60:	40020058 	.word	0x40020058
 8004d64:	40020070 	.word	0x40020070
 8004d68:	40020088 	.word	0x40020088
 8004d6c:	400200a0 	.word	0x400200a0
 8004d70:	400200b8 	.word	0x400200b8
 8004d74:	40020410 	.word	0x40020410
 8004d78:	40020428 	.word	0x40020428
 8004d7c:	40020440 	.word	0x40020440
 8004d80:	40020458 	.word	0x40020458
 8004d84:	40020470 	.word	0x40020470
 8004d88:	40020488 	.word	0x40020488
 8004d8c:	400204a0 	.word	0x400204a0
 8004d90:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8088 	beq.w	8004eba <HAL_DMA_IRQHandler+0xe0e>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8082 	beq.w	8004eba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a41      	ldr	r2, [pc, #260]	; (8004ec0 <HAL_DMA_IRQHandler+0xe14>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d04a      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a3f      	ldr	r2, [pc, #252]	; (8004ec4 <HAL_DMA_IRQHandler+0xe18>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d045      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3e      	ldr	r2, [pc, #248]	; (8004ec8 <HAL_DMA_IRQHandler+0xe1c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d040      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a3c      	ldr	r2, [pc, #240]	; (8004ecc <HAL_DMA_IRQHandler+0xe20>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d03b      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3b      	ldr	r2, [pc, #236]	; (8004ed0 <HAL_DMA_IRQHandler+0xe24>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d036      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a39      	ldr	r2, [pc, #228]	; (8004ed4 <HAL_DMA_IRQHandler+0xe28>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d031      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a38      	ldr	r2, [pc, #224]	; (8004ed8 <HAL_DMA_IRQHandler+0xe2c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d02c      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a36      	ldr	r2, [pc, #216]	; (8004edc <HAL_DMA_IRQHandler+0xe30>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d027      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <HAL_DMA_IRQHandler+0xe34>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d022      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a33      	ldr	r2, [pc, #204]	; (8004ee4 <HAL_DMA_IRQHandler+0xe38>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01d      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <HAL_DMA_IRQHandler+0xe3c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d018      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a30      	ldr	r2, [pc, #192]	; (8004eec <HAL_DMA_IRQHandler+0xe40>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2f      	ldr	r2, [pc, #188]	; (8004ef0 <HAL_DMA_IRQHandler+0xe44>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <HAL_DMA_IRQHandler+0xe48>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <HAL_DMA_IRQHandler+0xe4c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_DMA_IRQHandler+0xdaa>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a2a      	ldr	r2, [pc, #168]	; (8004efc <HAL_DMA_IRQHandler+0xe50>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <HAL_DMA_IRQHandler+0xdbc>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 021c 	bic.w	r2, r2, #28
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e007      	b.n	8004e78 <HAL_DMA_IRQHandler+0xdcc>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 020e 	bic.w	r2, r2, #14
 8004e76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2201      	movs	r2, #1
 8004e82:	409a      	lsls	r2, r3
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
 8004eae:	e004      	b.n	8004eba <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004eb0:	bf00      	nop
 8004eb2:	e002      	b.n	8004eba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb4:	bf00      	nop
 8004eb6:	e000      	b.n	8004eba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004eba:	3728      	adds	r7, #40	; 0x28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40020010 	.word	0x40020010
 8004ec4:	40020028 	.word	0x40020028
 8004ec8:	40020040 	.word	0x40020040
 8004ecc:	40020058 	.word	0x40020058
 8004ed0:	40020070 	.word	0x40020070
 8004ed4:	40020088 	.word	0x40020088
 8004ed8:	400200a0 	.word	0x400200a0
 8004edc:	400200b8 	.word	0x400200b8
 8004ee0:	40020410 	.word	0x40020410
 8004ee4:	40020428 	.word	0x40020428
 8004ee8:	40020440 	.word	0x40020440
 8004eec:	40020458 	.word	0x40020458
 8004ef0:	40020470 	.word	0x40020470
 8004ef4:	40020488 	.word	0x40020488
 8004ef8:	400204a0 	.word	0x400204a0
 8004efc:	400204b8 	.word	0x400204b8

08004f00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f12:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a84      	ldr	r2, [pc, #528]	; (8005130 <DMA_SetConfig+0x230>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d072      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a82      	ldr	r2, [pc, #520]	; (8005134 <DMA_SetConfig+0x234>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d06d      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a81      	ldr	r2, [pc, #516]	; (8005138 <DMA_SetConfig+0x238>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d068      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a7f      	ldr	r2, [pc, #508]	; (800513c <DMA_SetConfig+0x23c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d063      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a7e      	ldr	r2, [pc, #504]	; (8005140 <DMA_SetConfig+0x240>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d05e      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a7c      	ldr	r2, [pc, #496]	; (8005144 <DMA_SetConfig+0x244>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d059      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a7b      	ldr	r2, [pc, #492]	; (8005148 <DMA_SetConfig+0x248>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d054      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a79      	ldr	r2, [pc, #484]	; (800514c <DMA_SetConfig+0x24c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d04f      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a78      	ldr	r2, [pc, #480]	; (8005150 <DMA_SetConfig+0x250>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d04a      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a76      	ldr	r2, [pc, #472]	; (8005154 <DMA_SetConfig+0x254>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d045      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a75      	ldr	r2, [pc, #468]	; (8005158 <DMA_SetConfig+0x258>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d040      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a73      	ldr	r2, [pc, #460]	; (800515c <DMA_SetConfig+0x25c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d03b      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a72      	ldr	r2, [pc, #456]	; (8005160 <DMA_SetConfig+0x260>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d036      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a70      	ldr	r2, [pc, #448]	; (8005164 <DMA_SetConfig+0x264>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d031      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a6f      	ldr	r2, [pc, #444]	; (8005168 <DMA_SetConfig+0x268>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d02c      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a6d      	ldr	r2, [pc, #436]	; (800516c <DMA_SetConfig+0x26c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d027      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a6c      	ldr	r2, [pc, #432]	; (8005170 <DMA_SetConfig+0x270>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d022      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a6a      	ldr	r2, [pc, #424]	; (8005174 <DMA_SetConfig+0x274>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d01d      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a69      	ldr	r2, [pc, #420]	; (8005178 <DMA_SetConfig+0x278>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d018      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a67      	ldr	r2, [pc, #412]	; (800517c <DMA_SetConfig+0x27c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a66      	ldr	r2, [pc, #408]	; (8005180 <DMA_SetConfig+0x280>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00e      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a64      	ldr	r2, [pc, #400]	; (8005184 <DMA_SetConfig+0x284>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d009      	beq.n	800500a <DMA_SetConfig+0x10a>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a63      	ldr	r2, [pc, #396]	; (8005188 <DMA_SetConfig+0x288>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d004      	beq.n	800500a <DMA_SetConfig+0x10a>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a61      	ldr	r2, [pc, #388]	; (800518c <DMA_SetConfig+0x28c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d101      	bne.n	800500e <DMA_SetConfig+0x10e>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <DMA_SetConfig+0x110>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800501c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d004      	beq.n	8005030 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800502e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a3e      	ldr	r2, [pc, #248]	; (8005130 <DMA_SetConfig+0x230>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d04a      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a3d      	ldr	r2, [pc, #244]	; (8005134 <DMA_SetConfig+0x234>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d045      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3b      	ldr	r2, [pc, #236]	; (8005138 <DMA_SetConfig+0x238>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d040      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a3a      	ldr	r2, [pc, #232]	; (800513c <DMA_SetConfig+0x23c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d03b      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a38      	ldr	r2, [pc, #224]	; (8005140 <DMA_SetConfig+0x240>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d036      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a37      	ldr	r2, [pc, #220]	; (8005144 <DMA_SetConfig+0x244>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d031      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a35      	ldr	r2, [pc, #212]	; (8005148 <DMA_SetConfig+0x248>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d02c      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a34      	ldr	r2, [pc, #208]	; (800514c <DMA_SetConfig+0x24c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d027      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a32      	ldr	r2, [pc, #200]	; (8005150 <DMA_SetConfig+0x250>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d022      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a31      	ldr	r2, [pc, #196]	; (8005154 <DMA_SetConfig+0x254>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d01d      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2f      	ldr	r2, [pc, #188]	; (8005158 <DMA_SetConfig+0x258>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d018      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2e      	ldr	r2, [pc, #184]	; (800515c <DMA_SetConfig+0x25c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d013      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2c      	ldr	r2, [pc, #176]	; (8005160 <DMA_SetConfig+0x260>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00e      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2b      	ldr	r2, [pc, #172]	; (8005164 <DMA_SetConfig+0x264>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d009      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a29      	ldr	r2, [pc, #164]	; (8005168 <DMA_SetConfig+0x268>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <DMA_SetConfig+0x1d0>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a28      	ldr	r2, [pc, #160]	; (800516c <DMA_SetConfig+0x26c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <DMA_SetConfig+0x1d4>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <DMA_SetConfig+0x1d6>
 80050d4:	2300      	movs	r3, #0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d05a      	beq.n	8005190 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	223f      	movs	r2, #63	; 0x3f
 80050e4:	409a      	lsls	r2, r3
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050f8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d108      	bne.n	800511c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800511a:	e087      	b.n	800522c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	60da      	str	r2, [r3, #12]
}
 800512c:	e07e      	b.n	800522c <DMA_SetConfig+0x32c>
 800512e:	bf00      	nop
 8005130:	40020010 	.word	0x40020010
 8005134:	40020028 	.word	0x40020028
 8005138:	40020040 	.word	0x40020040
 800513c:	40020058 	.word	0x40020058
 8005140:	40020070 	.word	0x40020070
 8005144:	40020088 	.word	0x40020088
 8005148:	400200a0 	.word	0x400200a0
 800514c:	400200b8 	.word	0x400200b8
 8005150:	40020410 	.word	0x40020410
 8005154:	40020428 	.word	0x40020428
 8005158:	40020440 	.word	0x40020440
 800515c:	40020458 	.word	0x40020458
 8005160:	40020470 	.word	0x40020470
 8005164:	40020488 	.word	0x40020488
 8005168:	400204a0 	.word	0x400204a0
 800516c:	400204b8 	.word	0x400204b8
 8005170:	58025408 	.word	0x58025408
 8005174:	5802541c 	.word	0x5802541c
 8005178:	58025430 	.word	0x58025430
 800517c:	58025444 	.word	0x58025444
 8005180:	58025458 	.word	0x58025458
 8005184:	5802546c 	.word	0x5802546c
 8005188:	58025480 	.word	0x58025480
 800518c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a28      	ldr	r2, [pc, #160]	; (8005238 <DMA_SetConfig+0x338>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d022      	beq.n	80051e0 <DMA_SetConfig+0x2e0>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a27      	ldr	r2, [pc, #156]	; (800523c <DMA_SetConfig+0x33c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d01d      	beq.n	80051e0 <DMA_SetConfig+0x2e0>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a25      	ldr	r2, [pc, #148]	; (8005240 <DMA_SetConfig+0x340>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d018      	beq.n	80051e0 <DMA_SetConfig+0x2e0>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a24      	ldr	r2, [pc, #144]	; (8005244 <DMA_SetConfig+0x344>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <DMA_SetConfig+0x2e0>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a22      	ldr	r2, [pc, #136]	; (8005248 <DMA_SetConfig+0x348>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d00e      	beq.n	80051e0 <DMA_SetConfig+0x2e0>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a21      	ldr	r2, [pc, #132]	; (800524c <DMA_SetConfig+0x34c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d009      	beq.n	80051e0 <DMA_SetConfig+0x2e0>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <DMA_SetConfig+0x350>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d004      	beq.n	80051e0 <DMA_SetConfig+0x2e0>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <DMA_SetConfig+0x354>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d101      	bne.n	80051e4 <DMA_SetConfig+0x2e4>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <DMA_SetConfig+0x2e6>
 80051e4:	2300      	movs	r3, #0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d020      	beq.n	800522c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	2201      	movs	r2, #1
 80051f4:	409a      	lsls	r2, r3
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d108      	bne.n	800521c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	60da      	str	r2, [r3, #12]
}
 800521a:	e007      	b.n	800522c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	60da      	str	r2, [r3, #12]
}
 800522c:	bf00      	nop
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	58025408 	.word	0x58025408
 800523c:	5802541c 	.word	0x5802541c
 8005240:	58025430 	.word	0x58025430
 8005244:	58025444 	.word	0x58025444
 8005248:	58025458 	.word	0x58025458
 800524c:	5802546c 	.word	0x5802546c
 8005250:	58025480 	.word	0x58025480
 8005254:	58025494 	.word	0x58025494

08005258 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a42      	ldr	r2, [pc, #264]	; (8005370 <DMA_CalcBaseAndBitshift+0x118>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d04a      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a41      	ldr	r2, [pc, #260]	; (8005374 <DMA_CalcBaseAndBitshift+0x11c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d045      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a3f      	ldr	r2, [pc, #252]	; (8005378 <DMA_CalcBaseAndBitshift+0x120>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d040      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a3e      	ldr	r2, [pc, #248]	; (800537c <DMA_CalcBaseAndBitshift+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d03b      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a3c      	ldr	r2, [pc, #240]	; (8005380 <DMA_CalcBaseAndBitshift+0x128>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d036      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a3b      	ldr	r2, [pc, #236]	; (8005384 <DMA_CalcBaseAndBitshift+0x12c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d031      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a39      	ldr	r2, [pc, #228]	; (8005388 <DMA_CalcBaseAndBitshift+0x130>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d02c      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a38      	ldr	r2, [pc, #224]	; (800538c <DMA_CalcBaseAndBitshift+0x134>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d027      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a36      	ldr	r2, [pc, #216]	; (8005390 <DMA_CalcBaseAndBitshift+0x138>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d022      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a35      	ldr	r2, [pc, #212]	; (8005394 <DMA_CalcBaseAndBitshift+0x13c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d01d      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a33      	ldr	r2, [pc, #204]	; (8005398 <DMA_CalcBaseAndBitshift+0x140>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a32      	ldr	r2, [pc, #200]	; (800539c <DMA_CalcBaseAndBitshift+0x144>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a30      	ldr	r2, [pc, #192]	; (80053a0 <DMA_CalcBaseAndBitshift+0x148>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a2d      	ldr	r2, [pc, #180]	; (80053a8 <DMA_CalcBaseAndBitshift+0x150>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <DMA_CalcBaseAndBitshift+0xa8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <DMA_CalcBaseAndBitshift+0x154>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d101      	bne.n	8005304 <DMA_CalcBaseAndBitshift+0xac>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <DMA_CalcBaseAndBitshift+0xae>
 8005304:	2300      	movs	r3, #0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d024      	beq.n	8005354 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	3b10      	subs	r3, #16
 8005312:	4a27      	ldr	r2, [pc, #156]	; (80053b0 <DMA_CalcBaseAndBitshift+0x158>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005324:	5cd3      	ldrb	r3, [r2, r3]
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d908      	bls.n	8005344 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	4b1f      	ldr	r3, [pc, #124]	; (80053b8 <DMA_CalcBaseAndBitshift+0x160>)
 800533a:	4013      	ands	r3, r2
 800533c:	1d1a      	adds	r2, r3, #4
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	659a      	str	r2, [r3, #88]	; 0x58
 8005342:	e00d      	b.n	8005360 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <DMA_CalcBaseAndBitshift+0x160>)
 800534c:	4013      	ands	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6593      	str	r3, [r2, #88]	; 0x58
 8005352:	e005      	b.n	8005360 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	40020010 	.word	0x40020010
 8005374:	40020028 	.word	0x40020028
 8005378:	40020040 	.word	0x40020040
 800537c:	40020058 	.word	0x40020058
 8005380:	40020070 	.word	0x40020070
 8005384:	40020088 	.word	0x40020088
 8005388:	400200a0 	.word	0x400200a0
 800538c:	400200b8 	.word	0x400200b8
 8005390:	40020410 	.word	0x40020410
 8005394:	40020428 	.word	0x40020428
 8005398:	40020440 	.word	0x40020440
 800539c:	40020458 	.word	0x40020458
 80053a0:	40020470 	.word	0x40020470
 80053a4:	40020488 	.word	0x40020488
 80053a8:	400204a0 	.word	0x400204a0
 80053ac:	400204b8 	.word	0x400204b8
 80053b0:	aaaaaaab 	.word	0xaaaaaaab
 80053b4:	0800ae78 	.word	0x0800ae78
 80053b8:	fffffc00 	.word	0xfffffc00

080053bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d120      	bne.n	8005412 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d858      	bhi.n	800548a <DMA_CheckFifoParam+0xce>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <DMA_CheckFifoParam+0x24>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	08005403 	.word	0x08005403
 80053e8:	080053f1 	.word	0x080053f1
 80053ec:	0800548b 	.word	0x0800548b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d048      	beq.n	800548e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005400:	e045      	b.n	800548e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800540a:	d142      	bne.n	8005492 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005410:	e03f      	b.n	8005492 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541a:	d123      	bne.n	8005464 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	2b03      	cmp	r3, #3
 8005422:	d838      	bhi.n	8005496 <DMA_CheckFifoParam+0xda>
 8005424:	a201      	add	r2, pc, #4	; (adr r2, 800542c <DMA_CheckFifoParam+0x70>)
 8005426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542a:	bf00      	nop
 800542c:	0800543d 	.word	0x0800543d
 8005430:	08005443 	.word	0x08005443
 8005434:	0800543d 	.word	0x0800543d
 8005438:	08005455 	.word	0x08005455
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
        break;
 8005440:	e030      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d025      	beq.n	800549a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005452:	e022      	b.n	800549a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800545c:	d11f      	bne.n	800549e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005462:	e01c      	b.n	800549e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	2b02      	cmp	r3, #2
 800546a:	d902      	bls.n	8005472 <DMA_CheckFifoParam+0xb6>
 800546c:	2b03      	cmp	r3, #3
 800546e:	d003      	beq.n	8005478 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005470:	e018      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
        break;
 8005476:	e015      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00e      	beq.n	80054a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
    break;
 8005488:	e00b      	b.n	80054a2 <DMA_CheckFifoParam+0xe6>
        break;
 800548a:	bf00      	nop
 800548c:	e00a      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
        break;
 800548e:	bf00      	nop
 8005490:	e008      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005492:	bf00      	nop
 8005494:	e006      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005496:	bf00      	nop
 8005498:	e004      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
        break;
 800549a:	bf00      	nop
 800549c:	e002      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
        break;
 800549e:	bf00      	nop
 80054a0:	e000      	b.n	80054a4 <DMA_CheckFifoParam+0xe8>
    break;
 80054a2:	bf00      	nop
    }
  }

  return status;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop

080054b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a38      	ldr	r2, [pc, #224]	; (80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a36      	ldr	r2, [pc, #216]	; (80055ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d01d      	beq.n	8005512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a35      	ldr	r2, [pc, #212]	; (80055b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a33      	ldr	r2, [pc, #204]	; (80055b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a32      	ldr	r2, [pc, #200]	; (80055b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a30      	ldr	r2, [pc, #192]	; (80055bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a2f      	ldr	r2, [pc, #188]	; (80055c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2d      	ldr	r2, [pc, #180]	; (80055c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01a      	beq.n	8005552 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	3b08      	subs	r3, #8
 8005524:	4a28      	ldr	r2, [pc, #160]	; (80055c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	091b      	lsrs	r3, r3, #4
 800552c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4b26      	ldr	r3, [pc, #152]	; (80055cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a24      	ldr	r2, [pc, #144]	; (80055d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005540:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	2201      	movs	r2, #1
 800554a:	409a      	lsls	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005550:	e024      	b.n	800559c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	3b10      	subs	r3, #16
 800555a:	4a1e      	ldr	r2, [pc, #120]	; (80055d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4a1c      	ldr	r2, [pc, #112]	; (80055d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d806      	bhi.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a1b      	ldr	r2, [pc, #108]	; (80055dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d902      	bls.n	800557a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3308      	adds	r3, #8
 8005578:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4b18      	ldr	r3, [pc, #96]	; (80055e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800558c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	2201      	movs	r2, #1
 8005596:	409a      	lsls	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	58025408 	.word	0x58025408
 80055ac:	5802541c 	.word	0x5802541c
 80055b0:	58025430 	.word	0x58025430
 80055b4:	58025444 	.word	0x58025444
 80055b8:	58025458 	.word	0x58025458
 80055bc:	5802546c 	.word	0x5802546c
 80055c0:	58025480 	.word	0x58025480
 80055c4:	58025494 	.word	0x58025494
 80055c8:	cccccccd 	.word	0xcccccccd
 80055cc:	16009600 	.word	0x16009600
 80055d0:	58025880 	.word	0x58025880
 80055d4:	aaaaaaab 	.word	0xaaaaaaab
 80055d8:	400204b8 	.word	0x400204b8
 80055dc:	4002040f 	.word	0x4002040f
 80055e0:	10008200 	.word	0x10008200
 80055e4:	40020880 	.word	0x40020880

080055e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d04a      	beq.n	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b08      	cmp	r3, #8
 8005602:	d847      	bhi.n	8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a25      	ldr	r2, [pc, #148]	; (80056a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a24      	ldr	r2, [pc, #144]	; (80056a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01d      	beq.n	8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a22      	ldr	r2, [pc, #136]	; (80056a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a21      	ldr	r2, [pc, #132]	; (80056ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1f      	ldr	r2, [pc, #124]	; (80056b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1c      	ldr	r2, [pc, #112]	; (80056b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	461a      	mov	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005670:	671a      	str	r2, [r3, #112]	; 0x70
 8005672:	e009      	b.n	8005688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4b14      	ldr	r3, [pc, #80]	; (80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	461a      	mov	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a11      	ldr	r2, [pc, #68]	; (80056cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005686:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3b01      	subs	r3, #1
 800568c:	2201      	movs	r2, #1
 800568e:	409a      	lsls	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	58025408 	.word	0x58025408
 80056a4:	5802541c 	.word	0x5802541c
 80056a8:	58025430 	.word	0x58025430
 80056ac:	58025444 	.word	0x58025444
 80056b0:	58025458 	.word	0x58025458
 80056b4:	5802546c 	.word	0x5802546c
 80056b8:	58025480 	.word	0x58025480
 80056bc:	58025494 	.word	0x58025494
 80056c0:	1600963f 	.word	0x1600963f
 80056c4:	58025940 	.word	0x58025940
 80056c8:	1000823f 	.word	0x1000823f
 80056cc:	40020940 	.word	0x40020940

080056d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b089      	sub	sp, #36	; 0x24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80056de:	4b89      	ldr	r3, [pc, #548]	; (8005904 <HAL_GPIO_Init+0x234>)
 80056e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056e2:	e194      	b.n	8005a0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2101      	movs	r1, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8186 	beq.w	8005a08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d00b      	beq.n	800571c <HAL_GPIO_Init+0x4c>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d007      	beq.n	800571c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005710:	2b11      	cmp	r3, #17
 8005712:	d003      	beq.n	800571c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b12      	cmp	r3, #18
 800571a:	d130      	bne.n	800577e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	2203      	movs	r2, #3
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	43db      	mvns	r3, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4013      	ands	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005752:	2201      	movs	r2, #1
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	091b      	lsrs	r3, r3, #4
 8005768:	f003 0201 	and.w	r2, r3, #1
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	2203      	movs	r2, #3
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d003      	beq.n	80057be <HAL_GPIO_Init+0xee>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b12      	cmp	r3, #18
 80057bc:	d123      	bne.n	8005806 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	08da      	lsrs	r2, r3, #3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3208      	adds	r2, #8
 80057c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	220f      	movs	r2, #15
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43db      	mvns	r3, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4013      	ands	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	08da      	lsrs	r2, r3, #3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3208      	adds	r2, #8
 8005800:	69b9      	ldr	r1, [r7, #24]
 8005802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	2203      	movs	r2, #3
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	43db      	mvns	r3, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4013      	ands	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 0203 	and.w	r2, r3, #3
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80e0 	beq.w	8005a08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005848:	4b2f      	ldr	r3, [pc, #188]	; (8005908 <HAL_GPIO_Init+0x238>)
 800584a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800584e:	4a2e      	ldr	r2, [pc, #184]	; (8005908 <HAL_GPIO_Init+0x238>)
 8005850:	f043 0302 	orr.w	r3, r3, #2
 8005854:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005858:	4b2b      	ldr	r3, [pc, #172]	; (8005908 <HAL_GPIO_Init+0x238>)
 800585a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005866:	4a29      	ldr	r2, [pc, #164]	; (800590c <HAL_GPIO_Init+0x23c>)
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	089b      	lsrs	r3, r3, #2
 800586c:	3302      	adds	r3, #2
 800586e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	220f      	movs	r2, #15
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43db      	mvns	r3, r3
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4013      	ands	r3, r2
 8005888:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a20      	ldr	r2, [pc, #128]	; (8005910 <HAL_GPIO_Init+0x240>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d052      	beq.n	8005938 <HAL_GPIO_Init+0x268>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <HAL_GPIO_Init+0x244>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d031      	beq.n	80058fe <HAL_GPIO_Init+0x22e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <HAL_GPIO_Init+0x248>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d02b      	beq.n	80058fa <HAL_GPIO_Init+0x22a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1d      	ldr	r2, [pc, #116]	; (800591c <HAL_GPIO_Init+0x24c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d025      	beq.n	80058f6 <HAL_GPIO_Init+0x226>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <HAL_GPIO_Init+0x250>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01f      	beq.n	80058f2 <HAL_GPIO_Init+0x222>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1b      	ldr	r2, [pc, #108]	; (8005924 <HAL_GPIO_Init+0x254>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d019      	beq.n	80058ee <HAL_GPIO_Init+0x21e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1a      	ldr	r2, [pc, #104]	; (8005928 <HAL_GPIO_Init+0x258>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_GPIO_Init+0x21a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a19      	ldr	r2, [pc, #100]	; (800592c <HAL_GPIO_Init+0x25c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00d      	beq.n	80058e6 <HAL_GPIO_Init+0x216>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a18      	ldr	r2, [pc, #96]	; (8005930 <HAL_GPIO_Init+0x260>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <HAL_GPIO_Init+0x212>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a17      	ldr	r2, [pc, #92]	; (8005934 <HAL_GPIO_Init+0x264>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d101      	bne.n	80058de <HAL_GPIO_Init+0x20e>
 80058da:	2309      	movs	r3, #9
 80058dc:	e02d      	b.n	800593a <HAL_GPIO_Init+0x26a>
 80058de:	230a      	movs	r3, #10
 80058e0:	e02b      	b.n	800593a <HAL_GPIO_Init+0x26a>
 80058e2:	2308      	movs	r3, #8
 80058e4:	e029      	b.n	800593a <HAL_GPIO_Init+0x26a>
 80058e6:	2307      	movs	r3, #7
 80058e8:	e027      	b.n	800593a <HAL_GPIO_Init+0x26a>
 80058ea:	2306      	movs	r3, #6
 80058ec:	e025      	b.n	800593a <HAL_GPIO_Init+0x26a>
 80058ee:	2305      	movs	r3, #5
 80058f0:	e023      	b.n	800593a <HAL_GPIO_Init+0x26a>
 80058f2:	2304      	movs	r3, #4
 80058f4:	e021      	b.n	800593a <HAL_GPIO_Init+0x26a>
 80058f6:	2303      	movs	r3, #3
 80058f8:	e01f      	b.n	800593a <HAL_GPIO_Init+0x26a>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e01d      	b.n	800593a <HAL_GPIO_Init+0x26a>
 80058fe:	2301      	movs	r3, #1
 8005900:	e01b      	b.n	800593a <HAL_GPIO_Init+0x26a>
 8005902:	bf00      	nop
 8005904:	58000080 	.word	0x58000080
 8005908:	58024400 	.word	0x58024400
 800590c:	58000400 	.word	0x58000400
 8005910:	58020000 	.word	0x58020000
 8005914:	58020400 	.word	0x58020400
 8005918:	58020800 	.word	0x58020800
 800591c:	58020c00 	.word	0x58020c00
 8005920:	58021000 	.word	0x58021000
 8005924:	58021400 	.word	0x58021400
 8005928:	58021800 	.word	0x58021800
 800592c:	58021c00 	.word	0x58021c00
 8005930:	58022000 	.word	0x58022000
 8005934:	58022400 	.word	0x58022400
 8005938:	2300      	movs	r3, #0
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	f002 0203 	and.w	r2, r2, #3
 8005940:	0092      	lsls	r2, r2, #2
 8005942:	4093      	lsls	r3, r2
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800594a:	4938      	ldr	r1, [pc, #224]	; (8005a2c <HAL_GPIO_Init+0x35c>)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	089b      	lsrs	r3, r3, #2
 8005950:	3302      	adds	r3, #2
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	43db      	mvns	r3, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4013      	ands	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	4013      	ands	r3, r2
 80059ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f47f ae63 	bne.w	80056e4 <HAL_GPIO_Init+0x14>
  }
}
 8005a1e:	bf00      	nop
 8005a20:	3724      	adds	r7, #36	; 0x24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	58000400 	.word	0x58000400

08005a30 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005a38:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <HAL_HSEM_FastTake+0x2c>)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3320      	adds	r3, #32
 8005a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a42:	4a07      	ldr	r2, [pc, #28]	; (8005a60 <HAL_HSEM_FastTake+0x30>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e000      	b.n	8005a4e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	58026400 	.word	0x58026400
 8005a60:	80000300 	.word	0x80000300

08005a64 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005a6e:	4906      	ldr	r1, [pc, #24]	; (8005a88 <HAL_HSEM_Release+0x24>)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	58026400 	.word	0x58026400

08005a8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005a94:	4b29      	ldr	r3, [pc, #164]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	2b06      	cmp	r3, #6
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005aa0:	4b26      	ldr	r3, [pc, #152]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d001      	beq.n	8005ab2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e040      	b.n	8005b34 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e03e      	b.n	8005b34 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ab6:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005abe:	491f      	ldr	r1, [pc, #124]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ac6:	f7fb fc9d 	bl	8001404 <HAL_GetTick>
 8005aca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005acc:	e009      	b.n	8005ae2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ace:	f7fb fc99 	bl	8001404 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005adc:	d901      	bls.n	8005ae2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e028      	b.n	8005b34 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aee:	d1ee      	bne.n	8005ace <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b1e      	cmp	r3, #30
 8005af4:	d008      	beq.n	8005b08 <HAL_PWREx_ConfigSupply+0x7c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b2e      	cmp	r3, #46	; 0x2e
 8005afa:	d005      	beq.n	8005b08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b1d      	cmp	r3, #29
 8005b00:	d002      	beq.n	8005b08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b2d      	cmp	r3, #45	; 0x2d
 8005b06:	d114      	bne.n	8005b32 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005b08:	f7fb fc7c 	bl	8001404 <HAL_GetTick>
 8005b0c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b0e:	e009      	b.n	8005b24 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b10:	f7fb fc78 	bl	8001404 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b1e:	d901      	bls.n	8005b24 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e007      	b.n	8005b34 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b24:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b30:	d1ee      	bne.n	8005b10 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	58024800 	.word	0x58024800

08005b40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e3ff      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8087 	beq.w	8005c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b60:	4b99      	ldr	r3, [pc, #612]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b6a:	4b97      	ldr	r3, [pc, #604]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d007      	beq.n	8005b86 <HAL_RCC_OscConfig+0x46>
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b18      	cmp	r3, #24
 8005b7a:	d110      	bne.n	8005b9e <HAL_RCC_OscConfig+0x5e>
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d10b      	bne.n	8005b9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b86:	4b90      	ldr	r3, [pc, #576]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d06c      	beq.n	8005c6c <HAL_RCC_OscConfig+0x12c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d168      	bne.n	8005c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e3d9      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba6:	d106      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x76>
 8005ba8:	4b87      	ldr	r3, [pc, #540]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a86      	ldr	r2, [pc, #536]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	e02e      	b.n	8005c14 <HAL_RCC_OscConfig+0xd4>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x98>
 8005bbe:	4b82      	ldr	r3, [pc, #520]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a81      	ldr	r2, [pc, #516]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	4b7f      	ldr	r3, [pc, #508]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a7e      	ldr	r2, [pc, #504]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e01d      	b.n	8005c14 <HAL_RCC_OscConfig+0xd4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCC_OscConfig+0xbc>
 8005be2:	4b79      	ldr	r3, [pc, #484]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a78      	ldr	r2, [pc, #480]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4b76      	ldr	r3, [pc, #472]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a75      	ldr	r2, [pc, #468]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e00b      	b.n	8005c14 <HAL_RCC_OscConfig+0xd4>
 8005bfc:	4b72      	ldr	r3, [pc, #456]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a71      	ldr	r2, [pc, #452]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	4b6f      	ldr	r3, [pc, #444]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a6e      	ldr	r2, [pc, #440]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d013      	beq.n	8005c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1c:	f7fb fbf2 	bl	8001404 <HAL_GetTick>
 8005c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c24:	f7fb fbee 	bl	8001404 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	; 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e38d      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c36:	4b64      	ldr	r3, [pc, #400]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0xe4>
 8005c42:	e014      	b.n	8005c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fb fbde 	bl	8001404 <HAL_GetTick>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c4c:	f7fb fbda 	bl	8001404 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	; 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e379      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c5e:	4b5a      	ldr	r3, [pc, #360]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x10c>
 8005c6a:	e000      	b.n	8005c6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80ae 	beq.w	8005dd8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c7c:	4b52      	ldr	r3, [pc, #328]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c86:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x162>
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	2b18      	cmp	r3, #24
 8005c96:	d13a      	bne.n	8005d0e <HAL_RCC_OscConfig+0x1ce>
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d135      	bne.n	8005d0e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ca2:	4b49      	ldr	r3, [pc, #292]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <HAL_RCC_OscConfig+0x17a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e34b      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cba:	f7fb fbd1 	bl	8001460 <HAL_GetREVID>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d817      	bhi.n	8005cf8 <HAL_RCC_OscConfig+0x1b8>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b40      	cmp	r3, #64	; 0x40
 8005cce:	d108      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x1a2>
 8005cd0:	4b3d      	ldr	r3, [pc, #244]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005cd8:	4a3b      	ldr	r2, [pc, #236]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cde:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ce0:	e07a      	b.n	8005dd8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce2:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	031b      	lsls	r3, r3, #12
 8005cf0:	4935      	ldr	r1, [pc, #212]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cf6:	e06f      	b.n	8005dd8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf8:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	4930      	ldr	r1, [pc, #192]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d0c:	e064      	b.n	8005dd8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d045      	beq.n	8005da2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d16:	4b2c      	ldr	r3, [pc, #176]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 0219 	bic.w	r2, r3, #25
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4929      	ldr	r1, [pc, #164]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fb fb6c 	bl	8001404 <HAL_GetTick>
 8005d2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d30:	f7fb fb68 	bl	8001404 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e307      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d42:	4b21      	ldr	r3, [pc, #132]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d0f0      	beq.n	8005d30 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4e:	f7fb fb87 	bl	8001460 <HAL_GetREVID>
 8005d52:	4602      	mov	r2, r0
 8005d54:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d817      	bhi.n	8005d8c <HAL_RCC_OscConfig+0x24c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d108      	bne.n	8005d76 <HAL_RCC_OscConfig+0x236>
 8005d64:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005d6c:	4a16      	ldr	r2, [pc, #88]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d72:	6053      	str	r3, [r2, #4]
 8005d74:	e030      	b.n	8005dd8 <HAL_RCC_OscConfig+0x298>
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	031b      	lsls	r3, r3, #12
 8005d84:	4910      	ldr	r1, [pc, #64]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
 8005d8a:	e025      	b.n	8005dd8 <HAL_RCC_OscConfig+0x298>
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	061b      	lsls	r3, r3, #24
 8005d9a:	490b      	ldr	r1, [pc, #44]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	604b      	str	r3, [r1, #4]
 8005da0:	e01a      	b.n	8005dd8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <HAL_RCC_OscConfig+0x288>)
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dae:	f7fb fb29 	bl	8001404 <HAL_GetTick>
 8005db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005db4:	e00a      	b.n	8005dcc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005db6:	f7fb fb25 	bl	8001404 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d903      	bls.n	8005dcc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e2c4      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
 8005dc8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dcc:	4ba4      	ldr	r3, [pc, #656]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1ee      	bne.n	8005db6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80a9 	beq.w	8005f38 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de6:	4b9e      	ldr	r3, [pc, #632]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005df0:	4b9b      	ldr	r3, [pc, #620]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d007      	beq.n	8005e0c <HAL_RCC_OscConfig+0x2cc>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	2b18      	cmp	r3, #24
 8005e00:	d13a      	bne.n	8005e78 <HAL_RCC_OscConfig+0x338>
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d135      	bne.n	8005e78 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e0c:	4b94      	ldr	r3, [pc, #592]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_RCC_OscConfig+0x2e4>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2b80      	cmp	r3, #128	; 0x80
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e296      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e24:	f7fb fb1c 	bl	8001460 <HAL_GetREVID>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d817      	bhi.n	8005e62 <HAL_RCC_OscConfig+0x322>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d108      	bne.n	8005e4c <HAL_RCC_OscConfig+0x30c>
 8005e3a:	4b89      	ldr	r3, [pc, #548]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005e42:	4a87      	ldr	r2, [pc, #540]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e4a:	e075      	b.n	8005f38 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e4c:	4b84      	ldr	r3, [pc, #528]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	069b      	lsls	r3, r3, #26
 8005e5a:	4981      	ldr	r1, [pc, #516]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e60:	e06a      	b.n	8005f38 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e62:	4b7f      	ldr	r3, [pc, #508]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	497b      	ldr	r1, [pc, #492]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e76:	e05f      	b.n	8005f38 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d042      	beq.n	8005f06 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e80:	4b77      	ldr	r3, [pc, #476]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a76      	ldr	r2, [pc, #472]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8c:	f7fb faba 	bl	8001404 <HAL_GetTick>
 8005e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e94:	f7fb fab6 	bl	8001404 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e255      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ea6:	4b6e      	ldr	r3, [pc, #440]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f0      	beq.n	8005e94 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eb2:	f7fb fad5 	bl	8001460 <HAL_GetREVID>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d817      	bhi.n	8005ef0 <HAL_RCC_OscConfig+0x3b0>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d108      	bne.n	8005eda <HAL_RCC_OscConfig+0x39a>
 8005ec8:	4b65      	ldr	r3, [pc, #404]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ed0:	4a63      	ldr	r2, [pc, #396]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed6:	6053      	str	r3, [r2, #4]
 8005ed8:	e02e      	b.n	8005f38 <HAL_RCC_OscConfig+0x3f8>
 8005eda:	4b61      	ldr	r3, [pc, #388]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	069b      	lsls	r3, r3, #26
 8005ee8:	495d      	ldr	r1, [pc, #372]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	604b      	str	r3, [r1, #4]
 8005eee:	e023      	b.n	8005f38 <HAL_RCC_OscConfig+0x3f8>
 8005ef0:	4b5b      	ldr	r3, [pc, #364]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	061b      	lsls	r3, r3, #24
 8005efe:	4958      	ldr	r1, [pc, #352]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60cb      	str	r3, [r1, #12]
 8005f04:	e018      	b.n	8005f38 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f06:	4b56      	ldr	r3, [pc, #344]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a55      	ldr	r2, [pc, #340]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f12:	f7fb fa77 	bl	8001404 <HAL_GetTick>
 8005f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f1a:	f7fb fa73 	bl	8001404 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e212      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f2c:	4b4c      	ldr	r3, [pc, #304]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f0      	bne.n	8005f1a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d036      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d019      	beq.n	8005f80 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f4c:	4b44      	ldr	r3, [pc, #272]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f50:	4a43      	ldr	r2, [pc, #268]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fb fa54 	bl	8001404 <HAL_GetTick>
 8005f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f60:	f7fb fa50 	bl	8001404 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e1ef      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f72:	4b3b      	ldr	r3, [pc, #236]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0x420>
 8005f7e:	e018      	b.n	8005fb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f80:	4b37      	ldr	r3, [pc, #220]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f84:	4a36      	ldr	r2, [pc, #216]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8c:	f7fb fa3a 	bl	8001404 <HAL_GetTick>
 8005f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f94:	f7fb fa36 	bl	8001404 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e1d5      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fa6:	4b2e      	ldr	r3, [pc, #184]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d036      	beq.n	800602c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d019      	beq.n	8005ffa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fc6:	4b26      	ldr	r3, [pc, #152]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a25      	ldr	r2, [pc, #148]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fd2:	f7fb fa17 	bl	8001404 <HAL_GetTick>
 8005fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005fda:	f7fb fa13 	bl	8001404 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e1b2      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fec:	4b1c      	ldr	r3, [pc, #112]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x49a>
 8005ff8:	e018      	b.n	800602c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ffa:	4b19      	ldr	r3, [pc, #100]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a18      	ldr	r2, [pc, #96]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8006000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006004:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006006:	f7fb f9fd 	bl	8001404 <HAL_GetTick>
 800600a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800600e:	f7fb f9f9 	bl	8001404 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e198      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006020:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <HAL_RCC_OscConfig+0x520>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f0      	bne.n	800600e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8085 	beq.w	8006144 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800603a:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <HAL_RCC_OscConfig+0x524>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a09      	ldr	r2, [pc, #36]	; (8006064 <HAL_RCC_OscConfig+0x524>)
 8006040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006044:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006046:	f7fb f9dd 	bl	8001404 <HAL_GetTick>
 800604a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800604c:	e00c      	b.n	8006068 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800604e:	f7fb f9d9 	bl	8001404 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b64      	cmp	r3, #100	; 0x64
 800605a:	d905      	bls.n	8006068 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e178      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
 8006060:	58024400 	.word	0x58024400
 8006064:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006068:	4b96      	ldr	r3, [pc, #600]	; (80062c4 <HAL_RCC_OscConfig+0x784>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ec      	beq.n	800604e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d106      	bne.n	800608a <HAL_RCC_OscConfig+0x54a>
 800607c:	4b92      	ldr	r3, [pc, #584]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800607e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006080:	4a91      	ldr	r2, [pc, #580]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6713      	str	r3, [r2, #112]	; 0x70
 8006088:	e02d      	b.n	80060e6 <HAL_RCC_OscConfig+0x5a6>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10c      	bne.n	80060ac <HAL_RCC_OscConfig+0x56c>
 8006092:	4b8d      	ldr	r3, [pc, #564]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	4a8c      	ldr	r2, [pc, #560]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006098:	f023 0301 	bic.w	r3, r3, #1
 800609c:	6713      	str	r3, [r2, #112]	; 0x70
 800609e:	4b8a      	ldr	r3, [pc, #552]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a2:	4a89      	ldr	r2, [pc, #548]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060a4:	f023 0304 	bic.w	r3, r3, #4
 80060a8:	6713      	str	r3, [r2, #112]	; 0x70
 80060aa:	e01c      	b.n	80060e6 <HAL_RCC_OscConfig+0x5a6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b05      	cmp	r3, #5
 80060b2:	d10c      	bne.n	80060ce <HAL_RCC_OscConfig+0x58e>
 80060b4:	4b84      	ldr	r3, [pc, #528]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b8:	4a83      	ldr	r2, [pc, #524]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060ba:	f043 0304 	orr.w	r3, r3, #4
 80060be:	6713      	str	r3, [r2, #112]	; 0x70
 80060c0:	4b81      	ldr	r3, [pc, #516]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c4:	4a80      	ldr	r2, [pc, #512]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060c6:	f043 0301 	orr.w	r3, r3, #1
 80060ca:	6713      	str	r3, [r2, #112]	; 0x70
 80060cc:	e00b      	b.n	80060e6 <HAL_RCC_OscConfig+0x5a6>
 80060ce:	4b7e      	ldr	r3, [pc, #504]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	4a7d      	ldr	r2, [pc, #500]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	6713      	str	r3, [r2, #112]	; 0x70
 80060da:	4b7b      	ldr	r3, [pc, #492]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	4a7a      	ldr	r2, [pc, #488]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80060e0:	f023 0304 	bic.w	r3, r3, #4
 80060e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d015      	beq.n	800611a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ee:	f7fb f989 	bl	8001404 <HAL_GetTick>
 80060f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060f4:	e00a      	b.n	800610c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f6:	f7fb f985 	bl	8001404 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	f241 3288 	movw	r2, #5000	; 0x1388
 8006104:	4293      	cmp	r3, r2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e122      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610c:	4b6e      	ldr	r3, [pc, #440]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0ee      	beq.n	80060f6 <HAL_RCC_OscConfig+0x5b6>
 8006118:	e014      	b.n	8006144 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611a:	f7fb f973 	bl	8001404 <HAL_GetTick>
 800611e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006120:	e00a      	b.n	8006138 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006122:	f7fb f96f 	bl	8001404 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006130:	4293      	cmp	r3, r2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e10c      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006138:	4b63      	ldr	r3, [pc, #396]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1ee      	bne.n	8006122 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8101 	beq.w	8006350 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800614e:	4b5e      	ldr	r3, [pc, #376]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006156:	2b18      	cmp	r3, #24
 8006158:	f000 80bc 	beq.w	80062d4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b02      	cmp	r3, #2
 8006162:	f040 8095 	bne.w	8006290 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006166:	4b58      	ldr	r3, [pc, #352]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a57      	ldr	r2, [pc, #348]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800616c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006172:	f7fb f947 	bl	8001404 <HAL_GetTick>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800617a:	f7fb f943 	bl	8001404 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e0e2      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800618c:	4b4e      	ldr	r3, [pc, #312]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f0      	bne.n	800617a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006198:	4b4b      	ldr	r3, [pc, #300]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800619a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800619c:	4b4b      	ldr	r3, [pc, #300]	; (80062cc <HAL_RCC_OscConfig+0x78c>)
 800619e:	4013      	ands	r3, r2
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061a8:	0112      	lsls	r2, r2, #4
 80061aa:	430a      	orrs	r2, r1
 80061ac:	4946      	ldr	r1, [pc, #280]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	628b      	str	r3, [r1, #40]	; 0x28
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b6:	3b01      	subs	r3, #1
 80061b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c0:	3b01      	subs	r3, #1
 80061c2:	025b      	lsls	r3, r3, #9
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	3b01      	subs	r3, #1
 80061ce:	041b      	lsls	r3, r3, #16
 80061d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061da:	3b01      	subs	r3, #1
 80061dc:	061b      	lsls	r3, r3, #24
 80061de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061e2:	4939      	ldr	r1, [pc, #228]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80061e8:	4b37      	ldr	r3, [pc, #220]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	4a36      	ldr	r2, [pc, #216]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80061ee:	f023 0301 	bic.w	r3, r3, #1
 80061f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061f4:	4b34      	ldr	r3, [pc, #208]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80061f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061f8:	4b35      	ldr	r3, [pc, #212]	; (80062d0 <HAL_RCC_OscConfig+0x790>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006200:	00d2      	lsls	r2, r2, #3
 8006202:	4931      	ldr	r1, [pc, #196]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006204:	4313      	orrs	r3, r2
 8006206:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006208:	4b2f      	ldr	r3, [pc, #188]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620c:	f023 020c 	bic.w	r2, r3, #12
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	492c      	ldr	r1, [pc, #176]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006216:	4313      	orrs	r3, r2
 8006218:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800621a:	4b2b      	ldr	r3, [pc, #172]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	f023 0202 	bic.w	r2, r3, #2
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	4928      	ldr	r1, [pc, #160]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006228:	4313      	orrs	r3, r2
 800622a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800622c:	4b26      	ldr	r3, [pc, #152]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	4a25      	ldr	r2, [pc, #148]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006238:	4b23      	ldr	r3, [pc, #140]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800623e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006244:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	4a1f      	ldr	r2, [pc, #124]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800624a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800624e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006250:	4b1d      	ldr	r3, [pc, #116]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800625c:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a19      	ldr	r2, [pc, #100]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fb f8cc 	bl	8001404 <HAL_GetTick>
 800626c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006270:	f7fb f8c8 	bl	8001404 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e067      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006282:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0x730>
 800628e:	e05f      	b.n	8006350 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006290:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0c      	ldr	r2, [pc, #48]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 8006296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800629a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fb f8b2 	bl	8001404 <HAL_GetTick>
 80062a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a4:	f7fb f8ae 	bl	8001404 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e04d      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062b6:	4b04      	ldr	r3, [pc, #16]	; (80062c8 <HAL_RCC_OscConfig+0x788>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0x764>
 80062c2:	e045      	b.n	8006350 <HAL_RCC_OscConfig+0x810>
 80062c4:	58024800 	.word	0x58024800
 80062c8:	58024400 	.word	0x58024400
 80062cc:	fffffc0c 	.word	0xfffffc0c
 80062d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062d4:	4b21      	ldr	r3, [pc, #132]	; (800635c <HAL_RCC_OscConfig+0x81c>)
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062da:	4b20      	ldr	r3, [pc, #128]	; (800635c <HAL_RCC_OscConfig+0x81c>)
 80062dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d031      	beq.n	800634c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f003 0203 	and.w	r2, r3, #3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d12a      	bne.n	800634c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006302:	429a      	cmp	r2, r3
 8006304:	d122      	bne.n	800634c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006312:	429a      	cmp	r2, r3
 8006314:	d11a      	bne.n	800634c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	0a5b      	lsrs	r3, r3, #9
 800631a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006322:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d111      	bne.n	800634c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006336:	429a      	cmp	r2, r3
 8006338:	d108      	bne.n	800634c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	0e1b      	lsrs	r3, r3, #24
 800633e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3730      	adds	r7, #48	; 0x30
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	58024400 	.word	0x58024400

08006360 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e19c      	b.n	80066ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006374:	4b8a      	ldr	r3, [pc, #552]	; (80065a0 <HAL_RCC_ClockConfig+0x240>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d910      	bls.n	80063a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006382:	4b87      	ldr	r3, [pc, #540]	; (80065a0 <HAL_RCC_ClockConfig+0x240>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f023 020f 	bic.w	r2, r3, #15
 800638a:	4985      	ldr	r1, [pc, #532]	; (80065a0 <HAL_RCC_ClockConfig+0x240>)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	4313      	orrs	r3, r2
 8006390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006392:	4b83      	ldr	r3, [pc, #524]	; (80065a0 <HAL_RCC_ClockConfig+0x240>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e184      	b.n	80066ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d010      	beq.n	80063d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	4b7b      	ldr	r3, [pc, #492]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063bc:	429a      	cmp	r2, r3
 80063be:	d908      	bls.n	80063d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063c0:	4b78      	ldr	r3, [pc, #480]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	4975      	ldr	r1, [pc, #468]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d010      	beq.n	8006400 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695a      	ldr	r2, [r3, #20]
 80063e2:	4b70      	ldr	r3, [pc, #448]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d908      	bls.n	8006400 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063ee:	4b6d      	ldr	r3, [pc, #436]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	496a      	ldr	r1, [pc, #424]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b00      	cmp	r3, #0
 800640a:	d010      	beq.n	800642e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	4b64      	ldr	r3, [pc, #400]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006418:	429a      	cmp	r2, r3
 800641a:	d908      	bls.n	800642e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800641c:	4b61      	ldr	r3, [pc, #388]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	495e      	ldr	r1, [pc, #376]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 800642a:	4313      	orrs	r3, r2
 800642c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d010      	beq.n	800645c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69da      	ldr	r2, [r3, #28]
 800643e:	4b59      	ldr	r3, [pc, #356]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006446:	429a      	cmp	r2, r3
 8006448:	d908      	bls.n	800645c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800644a:	4b56      	ldr	r3, [pc, #344]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	4953      	ldr	r1, [pc, #332]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 8006458:	4313      	orrs	r3, r2
 800645a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d010      	beq.n	800648a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	4b4d      	ldr	r3, [pc, #308]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	429a      	cmp	r2, r3
 8006476:	d908      	bls.n	800648a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006478:	4b4a      	ldr	r3, [pc, #296]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f023 020f 	bic.w	r2, r3, #15
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4947      	ldr	r1, [pc, #284]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 8006486:	4313      	orrs	r3, r2
 8006488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d055      	beq.n	8006542 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006496:	4b43      	ldr	r3, [pc, #268]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	4940      	ldr	r1, [pc, #256]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d107      	bne.n	80064c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064b0:	4b3c      	ldr	r3, [pc, #240]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d121      	bne.n	8006500 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0f6      	b.n	80066ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d107      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064c8:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d115      	bne.n	8006500 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0ea      	b.n	80066ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d107      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064e0:	4b30      	ldr	r3, [pc, #192]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0de      	b.n	80066ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064f0:	4b2c      	ldr	r3, [pc, #176]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0d6      	b.n	80066ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006500:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	f023 0207 	bic.w	r2, r3, #7
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	4925      	ldr	r1, [pc, #148]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 800650e:	4313      	orrs	r3, r2
 8006510:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006512:	f7fa ff77 	bl	8001404 <HAL_GetTick>
 8006516:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006518:	e00a      	b.n	8006530 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800651a:	f7fa ff73 	bl	8001404 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	f241 3288 	movw	r2, #5000	; 0x1388
 8006528:	4293      	cmp	r3, r2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e0be      	b.n	80066ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006530:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	429a      	cmp	r2, r3
 8006540:	d1eb      	bne.n	800651a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d010      	beq.n	8006570 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	429a      	cmp	r2, r3
 800655c:	d208      	bcs.n	8006570 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800655e:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f023 020f 	bic.w	r2, r3, #15
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	490e      	ldr	r1, [pc, #56]	; (80065a4 <HAL_RCC_ClockConfig+0x244>)
 800656c:	4313      	orrs	r3, r2
 800656e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_RCC_ClockConfig+0x240>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d214      	bcs.n	80065a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657e:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <HAL_RCC_ClockConfig+0x240>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f023 020f 	bic.w	r2, r3, #15
 8006586:	4906      	ldr	r1, [pc, #24]	; (80065a0 <HAL_RCC_ClockConfig+0x240>)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	4313      	orrs	r3, r2
 800658c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <HAL_RCC_ClockConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e086      	b.n	80066ae <HAL_RCC_ClockConfig+0x34e>
 80065a0:	52002000 	.word	0x52002000
 80065a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d010      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	4b3f      	ldr	r3, [pc, #252]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d208      	bcs.n	80065d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065c4:	4b3c      	ldr	r3, [pc, #240]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	4939      	ldr	r1, [pc, #228]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d010      	beq.n	8006604 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	4b34      	ldr	r3, [pc, #208]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d208      	bcs.n	8006604 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065f2:	4b31      	ldr	r3, [pc, #196]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	492e      	ldr	r1, [pc, #184]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 8006600:	4313      	orrs	r3, r2
 8006602:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b00      	cmp	r3, #0
 800660e:	d010      	beq.n	8006632 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	699a      	ldr	r2, [r3, #24]
 8006614:	4b28      	ldr	r3, [pc, #160]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800661c:	429a      	cmp	r2, r3
 800661e:	d208      	bcs.n	8006632 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006620:	4b25      	ldr	r3, [pc, #148]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	4922      	ldr	r1, [pc, #136]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 800662e:	4313      	orrs	r3, r2
 8006630:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d010      	beq.n	8006660 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69da      	ldr	r2, [r3, #28]
 8006642:	4b1d      	ldr	r3, [pc, #116]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800664a:	429a      	cmp	r2, r3
 800664c:	d208      	bcs.n	8006660 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800664e:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	4917      	ldr	r1, [pc, #92]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 800665c:	4313      	orrs	r3, r2
 800665e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006660:	f000 f834 	bl	80066cc <HAL_RCC_GetSysClockFreq>
 8006664:	4601      	mov	r1, r0
 8006666:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	0a1b      	lsrs	r3, r3, #8
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	4a12      	ldr	r2, [pc, #72]	; (80066bc <HAL_RCC_ClockConfig+0x35c>)
 8006672:	5cd3      	ldrb	r3, [r2, r3]
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	fa21 f303 	lsr.w	r3, r1, r3
 800667c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800667e:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <HAL_RCC_ClockConfig+0x358>)
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <HAL_RCC_ClockConfig+0x35c>)
 8006688:	5cd3      	ldrb	r3, [r2, r3]
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	fa22 f303 	lsr.w	r3, r2, r3
 8006694:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <HAL_RCC_ClockConfig+0x360>)
 8006696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006698:	4a0a      	ldr	r2, [pc, #40]	; (80066c4 <HAL_RCC_ClockConfig+0x364>)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <HAL_RCC_ClockConfig+0x368>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fa fe64 	bl	8001370 <HAL_InitTick>
 80066a8:	4603      	mov	r3, r0
 80066aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	58024400 	.word	0x58024400
 80066bc:	0800ae68 	.word	0x0800ae68
 80066c0:	20000004 	.word	0x20000004
 80066c4:	20000000 	.word	0x20000000
 80066c8:	2000000c 	.word	0x2000000c

080066cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b089      	sub	sp, #36	; 0x24
 80066d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066d2:	4baf      	ldr	r3, [pc, #700]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066da:	2b18      	cmp	r3, #24
 80066dc:	f200 814e 	bhi.w	800697c <HAL_RCC_GetSysClockFreq+0x2b0>
 80066e0:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	0800674d 	.word	0x0800674d
 80066ec:	0800697d 	.word	0x0800697d
 80066f0:	0800697d 	.word	0x0800697d
 80066f4:	0800697d 	.word	0x0800697d
 80066f8:	0800697d 	.word	0x0800697d
 80066fc:	0800697d 	.word	0x0800697d
 8006700:	0800697d 	.word	0x0800697d
 8006704:	0800697d 	.word	0x0800697d
 8006708:	08006773 	.word	0x08006773
 800670c:	0800697d 	.word	0x0800697d
 8006710:	0800697d 	.word	0x0800697d
 8006714:	0800697d 	.word	0x0800697d
 8006718:	0800697d 	.word	0x0800697d
 800671c:	0800697d 	.word	0x0800697d
 8006720:	0800697d 	.word	0x0800697d
 8006724:	0800697d 	.word	0x0800697d
 8006728:	08006779 	.word	0x08006779
 800672c:	0800697d 	.word	0x0800697d
 8006730:	0800697d 	.word	0x0800697d
 8006734:	0800697d 	.word	0x0800697d
 8006738:	0800697d 	.word	0x0800697d
 800673c:	0800697d 	.word	0x0800697d
 8006740:	0800697d 	.word	0x0800697d
 8006744:	0800697d 	.word	0x0800697d
 8006748:	0800677f 	.word	0x0800677f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800674c:	4b90      	ldr	r3, [pc, #576]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b00      	cmp	r3, #0
 8006756:	d009      	beq.n	800676c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006758:	4b8d      	ldr	r3, [pc, #564]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	08db      	lsrs	r3, r3, #3
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	4a8c      	ldr	r2, [pc, #560]	; (8006994 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
 8006768:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800676a:	e10a      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800676c:	4b89      	ldr	r3, [pc, #548]	; (8006994 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800676e:	61bb      	str	r3, [r7, #24]
    break;
 8006770:	e107      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006772:	4b89      	ldr	r3, [pc, #548]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006774:	61bb      	str	r3, [r7, #24]
    break;
 8006776:	e104      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006778:	4b88      	ldr	r3, [pc, #544]	; (800699c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800677a:	61bb      	str	r3, [r7, #24]
    break;
 800677c:	e101      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800677e:	4b84      	ldr	r3, [pc, #528]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006788:	4b81      	ldr	r3, [pc, #516]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006792:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006794:	4b7e      	ldr	r3, [pc, #504]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800679e:	4b7c      	ldr	r3, [pc, #496]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	08db      	lsrs	r3, r3, #3
 80067a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 80da 	beq.w	8006976 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d05a      	beq.n	800687e <HAL_RCC_GetSysClockFreq+0x1b2>
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d302      	bcc.n	80067d2 <HAL_RCC_GetSysClockFreq+0x106>
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d078      	beq.n	80068c2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80067d0:	e099      	b.n	8006906 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067d2:	4b6f      	ldr	r3, [pc, #444]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02d      	beq.n	800683a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067de:	4b6c      	ldr	r3, [pc, #432]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	08db      	lsrs	r3, r3, #3
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	4a6a      	ldr	r2, [pc, #424]	; (8006994 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80067ea:	fa22 f303 	lsr.w	r3, r2, r3
 80067ee:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	ee07 3a90 	vmov	s15, r3
 8006800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006808:	4b61      	ldr	r3, [pc, #388]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006810:	ee07 3a90 	vmov	s15, r3
 8006814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006818:	ed97 6a02 	vldr	s12, [r7, #8]
 800681c:	eddf 5a60 	vldr	s11, [pc, #384]	; 80069a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800682c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006834:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006838:	e087      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006844:	eddf 6a57 	vldr	s13, [pc, #348]	; 80069a4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800684c:	4b50      	ldr	r3, [pc, #320]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800685c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006860:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80069a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800686c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800687c:	e065      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006888:	eddf 6a47 	vldr	s13, [pc, #284]	; 80069a8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800688c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006890:	4b3f      	ldr	r3, [pc, #252]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006898:	ee07 3a90 	vmov	s15, r3
 800689c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80068a4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80069a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80068a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068c0:	e043      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068cc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80069ac <HAL_RCC_GetSysClockFreq+0x2e0>
 80068d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d4:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068dc:	ee07 3a90 	vmov	s15, r3
 80068e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80068e8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80069a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80068ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006900:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006904:	e021      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006910:	eddf 6a25 	vldr	s13, [pc, #148]	; 80069a8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006914:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006918:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006920:	ee07 3a90 	vmov	s15, r3
 8006924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006928:	ed97 6a02 	vldr	s12, [r7, #8]
 800692c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80069a0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006930:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006934:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800693c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006944:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006948:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800694a:	4b11      	ldr	r3, [pc, #68]	; (8006990 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	0a5b      	lsrs	r3, r3, #9
 8006950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006954:	3301      	adds	r3, #1
 8006956:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006962:	edd7 6a07 	vldr	s13, [r7, #28]
 8006966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800696e:	ee17 3a90 	vmov	r3, s15
 8006972:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006974:	e005      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	61bb      	str	r3, [r7, #24]
    break;
 800697a:	e002      	b.n	8006982 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800697e:	61bb      	str	r3, [r7, #24]
    break;
 8006980:	bf00      	nop
  }

  return sysclockfreq;
 8006982:	69bb      	ldr	r3, [r7, #24]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3724      	adds	r7, #36	; 0x24
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	58024400 	.word	0x58024400
 8006994:	03d09000 	.word	0x03d09000
 8006998:	003d0900 	.word	0x003d0900
 800699c:	007a1200 	.word	0x007a1200
 80069a0:	46000000 	.word	0x46000000
 80069a4:	4c742400 	.word	0x4c742400
 80069a8:	4a742400 	.word	0x4a742400
 80069ac:	4af42400 	.word	0x4af42400

080069b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069b6:	f7ff fe89 	bl	80066cc <HAL_RCC_GetSysClockFreq>
 80069ba:	4601      	mov	r1, r0
 80069bc:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <HAL_RCC_GetHCLKFreq+0x50>)
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	0a1b      	lsrs	r3, r3, #8
 80069c2:	f003 030f 	and.w	r3, r3, #15
 80069c6:	4a0f      	ldr	r2, [pc, #60]	; (8006a04 <HAL_RCC_GetHCLKFreq+0x54>)
 80069c8:	5cd3      	ldrb	r3, [r2, r3]
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	fa21 f303 	lsr.w	r3, r1, r3
 80069d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069d4:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <HAL_RCC_GetHCLKFreq+0x50>)
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <HAL_RCC_GetHCLKFreq+0x54>)
 80069de:	5cd3      	ldrb	r3, [r2, r3]
 80069e0:	f003 031f 	and.w	r3, r3, #31
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ea:	4a07      	ldr	r2, [pc, #28]	; (8006a08 <HAL_RCC_GetHCLKFreq+0x58>)
 80069ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069ee:	4a07      	ldr	r2, [pc, #28]	; (8006a0c <HAL_RCC_GetHCLKFreq+0x5c>)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80069f4:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <HAL_RCC_GetHCLKFreq+0x58>)
 80069f6:	681b      	ldr	r3, [r3, #0]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	58024400 	.word	0x58024400
 8006a04:	0800ae68 	.word	0x0800ae68
 8006a08:	20000004 	.word	0x20000004
 8006a0c:	20000000 	.word	0x20000000

08006a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a14:	f7ff ffcc 	bl	80069b0 <HAL_RCC_GetHCLKFreq>
 8006a18:	4601      	mov	r1, r0
 8006a1a:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	091b      	lsrs	r3, r3, #4
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	4a04      	ldr	r2, [pc, #16]	; (8006a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a26:	5cd3      	ldrb	r3, [r2, r3]
 8006a28:	f003 031f 	and.w	r3, r3, #31
 8006a2c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	58024400 	.word	0x58024400
 8006a38:	0800ae68 	.word	0x0800ae68

08006a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006a40:	f7ff ffb6 	bl	80069b0 <HAL_RCC_GetHCLKFreq>
 8006a44:	4601      	mov	r1, r0
 8006a46:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	0a1b      	lsrs	r3, r3, #8
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	4a04      	ldr	r2, [pc, #16]	; (8006a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a52:	5cd3      	ldrb	r3, [r2, r3]
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	58024400 	.word	0x58024400
 8006a64:	0800ae68 	.word	0x0800ae68

08006a68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a70:	2300      	movs	r3, #0
 8006a72:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a74:	2300      	movs	r3, #0
 8006a76:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d03d      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a8c:	d013      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a92:	d802      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d007      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006a98:	e01f      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a9e:	d013      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006aa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006aa4:	d01c      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006aa6:	e018      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa8:	4baf      	ldr	r3, [pc, #700]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	4aae      	ldr	r2, [pc, #696]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ab4:	e015      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	2102      	movs	r1, #2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fd33 	bl	8008528 <RCCEx_PLL2_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ac6:	e00c      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3324      	adds	r3, #36	; 0x24
 8006acc:	2102      	movs	r1, #2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 fddc 	bl	800868c <RCCEx_PLL3_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ad8:	e003      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ade:	e000      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ae8:	4b9f      	ldr	r3, [pc, #636]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af4:	499c      	ldr	r1, [pc, #624]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	650b      	str	r3, [r1, #80]	; 0x50
 8006afa:	e001      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afc:	7dfb      	ldrb	r3, [r7, #23]
 8006afe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d03d      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d826      	bhi.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006b14:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b31 	.word	0x08006b31
 8006b20:	08006b3f 	.word	0x08006b3f
 8006b24:	08006b51 	.word	0x08006b51
 8006b28:	08006b69 	.word	0x08006b69
 8006b2c:	08006b69 	.word	0x08006b69
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b30:	4b8d      	ldr	r3, [pc, #564]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b34:	4a8c      	ldr	r2, [pc, #560]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b3c:	e015      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3304      	adds	r3, #4
 8006b42:	2100      	movs	r1, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	f001 fcef 	bl	8008528 <RCCEx_PLL2_Config>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b4e:	e00c      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3324      	adds	r3, #36	; 0x24
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f001 fd98 	bl	800868c <RCCEx_PLL3_Config>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b60:	e003      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	75fb      	strb	r3, [r7, #23]
      break;
 8006b66:	e000      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d109      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b70:	4b7d      	ldr	r3, [pc, #500]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	f023 0207 	bic.w	r2, r3, #7
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7c:	497a      	ldr	r1, [pc, #488]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	650b      	str	r3, [r1, #80]	; 0x50
 8006b82:	e001      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d03e      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b98:	2b80      	cmp	r3, #128	; 0x80
 8006b9a:	d01c      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006b9c:	2b80      	cmp	r3, #128	; 0x80
 8006b9e:	d804      	bhi.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d008      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ba4:	2b40      	cmp	r3, #64	; 0x40
 8006ba6:	d00d      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006ba8:	e01e      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006baa:	2bc0      	cmp	r3, #192	; 0xc0
 8006bac:	d01f      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb2:	d01e      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006bb4:	e018      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb6:	4b6c      	ldr	r3, [pc, #432]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	4a6b      	ldr	r2, [pc, #428]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006bc2:	e017      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	2100      	movs	r1, #0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f001 fcac 	bl	8008528 <RCCEx_PLL2_Config>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006bd4:	e00e      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3324      	adds	r3, #36	; 0x24
 8006bda:	2100      	movs	r1, #0
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 fd55 	bl	800868c <RCCEx_PLL3_Config>
 8006be2:	4603      	mov	r3, r0
 8006be4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006be6:	e005      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	75fb      	strb	r3, [r7, #23]
      break;
 8006bec:	e002      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e000      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006bfa:	4b5b      	ldr	r3, [pc, #364]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c06:	4958      	ldr	r1, [pc, #352]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	650b      	str	r3, [r1, #80]	; 0x50
 8006c0c:	e001      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d044      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c28:	d01f      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c2e:	d805      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c38:	d00e      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006c3a:	e01f      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006c3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c40:	d01f      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006c42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c46:	d01e      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006c48:	e018      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c4a:	4b47      	ldr	r3, [pc, #284]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	4a46      	ldr	r2, [pc, #280]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c56:	e017      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 fc62 	bl	8008528 <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006c68:	e00e      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3324      	adds	r3, #36	; 0x24
 8006c6e:	2100      	movs	r1, #0
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 fd0b 	bl	800868c <RCCEx_PLL3_Config>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c7a:	e005      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c80:	e002      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006c82:	bf00      	nop
 8006c84:	e000      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10a      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c8e:	4b36      	ldr	r3, [pc, #216]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c9c:	4932      	ldr	r1, [pc, #200]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ca2:	e001      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d044      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cbe:	d01f      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cc4:	d805      	bhi.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006cca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cce:	d00e      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006cd0:	e01f      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006cd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cd6:	d01f      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cdc:	d01e      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006cde:	e018      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce0:	4b21      	ldr	r3, [pc, #132]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cec:	e017      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 fc17 	bl	8008528 <RCCEx_PLL2_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006cfe:	e00e      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3324      	adds	r3, #36	; 0x24
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f001 fcc0 	bl	800868c <RCCEx_PLL3_Config>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d10:	e005      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
      break;
 8006d16:	e002      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006d18:	bf00      	nop
 8006d1a:	e000      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d24:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d32:	490d      	ldr	r1, [pc, #52]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	658b      	str	r3, [r1, #88]	; 0x58
 8006d38:	e001      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d035      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d4e:	2b10      	cmp	r3, #16
 8006d50:	d00c      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d802      	bhi.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01b      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006d5a:	e017      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006d5c:	2b20      	cmp	r3, #32
 8006d5e:	d00c      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006d60:	2b30      	cmp	r3, #48	; 0x30
 8006d62:	d018      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006d64:	e012      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006d66:	bf00      	nop
 8006d68:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d6c:	4baf      	ldr	r3, [pc, #700]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	4aae      	ldr	r2, [pc, #696]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006d78:	e00e      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	2102      	movs	r1, #2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f001 fbd1 	bl	8008528 <RCCEx_PLL2_Config>
 8006d86:	4603      	mov	r3, r0
 8006d88:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006d8a:	e005      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d90:	e002      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d9e:	4ba3      	ldr	r3, [pc, #652]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006daa:	49a0      	ldr	r1, [pc, #640]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006db0:	e001      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d042      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dca:	d01f      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd0:	d805      	bhi.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dda:	d00e      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006ddc:	e01f      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006dde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006de2:	d01f      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006de4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006de8:	d01e      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006dea:	e018      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dec:	4b8f      	ldr	r3, [pc, #572]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	4a8e      	ldr	r2, [pc, #568]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006df8:	e017      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 fb91 	bl	8008528 <RCCEx_PLL2_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e0a:	e00e      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3324      	adds	r3, #36	; 0x24
 8006e10:	2100      	movs	r1, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	f001 fc3a 	bl	800868c <RCCEx_PLL3_Config>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e1c:	e005      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	75fb      	strb	r3, [r7, #23]
      break;
 8006e22:	e002      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006e24:	bf00      	nop
 8006e26:	e000      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d109      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e30:	4b7e      	ldr	r3, [pc, #504]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3c:	497b      	ldr	r1, [pc, #492]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	650b      	str	r3, [r1, #80]	; 0x50
 8006e42:	e001      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d042      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e5c:	d01b      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e62:	d805      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d022      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e6c:	d00a      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e6e:	e01b      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006e70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e74:	d01d      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e7a:	d01c      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006e7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e80:	d01b      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006e82:	e011      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	2101      	movs	r1, #1
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f001 fb4c 	bl	8008528 <RCCEx_PLL2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006e94:	e012      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3324      	adds	r3, #36	; 0x24
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 fbf5 	bl	800868c <RCCEx_PLL3_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ea6:	e009      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006eac:	e006      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006eae:	bf00      	nop
 8006eb0:	e004      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006eb2:	bf00      	nop
 8006eb4:	e002      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006eb6:	bf00      	nop
 8006eb8:	e000      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ebc:	7dfb      	ldrb	r3, [r7, #23]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ec2:	4b5a      	ldr	r3, [pc, #360]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ece:	4957      	ldr	r1, [pc, #348]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	650b      	str	r3, [r1, #80]	; 0x50
 8006ed4:	e001      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
 8006ed8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d044      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef0:	d01b      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef6:	d805      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d022      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f00:	d00a      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006f02:	e01b      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f08:	d01d      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f0e:	d01c      	beq.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006f10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f14:	d01b      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006f16:	e011      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f001 fb02 	bl	8008528 <RCCEx_PLL2_Config>
 8006f24:	4603      	mov	r3, r0
 8006f26:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006f28:	e012      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3324      	adds	r3, #36	; 0x24
 8006f2e:	2101      	movs	r1, #1
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fbab 	bl	800868c <RCCEx_PLL3_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006f3a:	e009      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f40:	e006      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f42:	bf00      	nop
 8006f44:	e004      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f46:	bf00      	nop
 8006f48:	e002      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f4a:	bf00      	nop
 8006f4c:	e000      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f56:	4b35      	ldr	r3, [pc, #212]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f64:	4931      	ldr	r1, [pc, #196]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	658b      	str	r3, [r1, #88]	; 0x58
 8006f6a:	e001      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
 8006f6e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d02d      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f84:	d005      	beq.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f8a:	d009      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d013      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006f90:	e00f      	b.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f92:	4b26      	ldr	r3, [pc, #152]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	4a25      	ldr	r2, [pc, #148]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006f9e:	e00c      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 fabe 	bl	8008528 <RCCEx_PLL2_Config>
 8006fac:	4603      	mov	r3, r0
 8006fae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006fb0:	e003      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb6:	e000      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fcc:	4917      	ldr	r1, [pc, #92]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	650b      	str	r3, [r1, #80]	; 0x50
 8006fd2:	e001      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d035      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d81b      	bhi.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006fec:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff2:	bf00      	nop
 8006ff4:	08007031 	.word	0x08007031
 8006ff8:	08007005 	.word	0x08007005
 8006ffc:	08007013 	.word	0x08007013
 8007000:	08007031 	.word	0x08007031
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007004:	4b09      	ldr	r3, [pc, #36]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	4a08      	ldr	r2, [pc, #32]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800700a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800700e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007010:	e00f      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	2102      	movs	r1, #2
 8007018:	4618      	mov	r0, r3
 800701a:	f001 fa85 	bl	8008528 <RCCEx_PLL2_Config>
 800701e:	4603      	mov	r3, r0
 8007020:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007022:	e006      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
      break;
 8007028:	e003      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800702a:	bf00      	nop
 800702c:	58024400 	.word	0x58024400
      break;
 8007030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d109      	bne.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007038:	4bba      	ldr	r3, [pc, #744]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800703a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703c:	f023 0203 	bic.w	r2, r3, #3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007044:	49b7      	ldr	r1, [pc, #732]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007046:	4313      	orrs	r3, r2
 8007048:	64cb      	str	r3, [r1, #76]	; 0x4c
 800704a:	e001      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8086 	beq.w	800716a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800705e:	4bb2      	ldr	r3, [pc, #712]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4ab1      	ldr	r2, [pc, #708]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007068:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800706a:	f7fa f9cb 	bl	8001404 <HAL_GetTick>
 800706e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007070:	e009      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007072:	f7fa f9c7 	bl	8001404 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b64      	cmp	r3, #100	; 0x64
 800707e:	d902      	bls.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	75fb      	strb	r3, [r7, #23]
        break;
 8007084:	e005      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007086:	4ba8      	ldr	r3, [pc, #672]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0ef      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007092:	7dfb      	ldrb	r3, [r7, #23]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d166      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007098:	4ba2      	ldr	r3, [pc, #648]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800709a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070a2:	4053      	eors	r3, r2
 80070a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d013      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070ac:	4b9d      	ldr	r3, [pc, #628]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070b6:	4b9b      	ldr	r3, [pc, #620]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	4a9a      	ldr	r2, [pc, #616]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070c2:	4b98      	ldr	r3, [pc, #608]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c6:	4a97      	ldr	r2, [pc, #604]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070ce:	4a95      	ldr	r2, [pc, #596]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070de:	d115      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fa f990 	bl	8001404 <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070e6:	e00b      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e8:	f7fa f98c 	bl	8001404 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d902      	bls.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	75fb      	strb	r3, [r7, #23]
            break;
 80070fe:	e005      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007100:	4b88      	ldr	r3, [pc, #544]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0ed      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d126      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007120:	d10d      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007122:	4b80      	ldr	r3, [pc, #512]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007130:	0919      	lsrs	r1, r3, #4
 8007132:	4b7e      	ldr	r3, [pc, #504]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007134:	400b      	ands	r3, r1
 8007136:	497b      	ldr	r1, [pc, #492]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007138:	4313      	orrs	r3, r2
 800713a:	610b      	str	r3, [r1, #16]
 800713c:	e005      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800713e:	4b79      	ldr	r3, [pc, #484]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	4a78      	ldr	r2, [pc, #480]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007144:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007148:	6113      	str	r3, [r2, #16]
 800714a:	4b76      	ldr	r3, [pc, #472]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800714c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007158:	4972      	ldr	r1, [pc, #456]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800715a:	4313      	orrs	r3, r2
 800715c:	670b      	str	r3, [r1, #112]	; 0x70
 800715e:	e004      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	75bb      	strb	r3, [r7, #22]
 8007164:	e001      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d07d      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800717a:	2b28      	cmp	r3, #40	; 0x28
 800717c:	d866      	bhi.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	08007253 	.word	0x08007253
 8007188:	0800724d 	.word	0x0800724d
 800718c:	0800724d 	.word	0x0800724d
 8007190:	0800724d 	.word	0x0800724d
 8007194:	0800724d 	.word	0x0800724d
 8007198:	0800724d 	.word	0x0800724d
 800719c:	0800724d 	.word	0x0800724d
 80071a0:	0800724d 	.word	0x0800724d
 80071a4:	08007229 	.word	0x08007229
 80071a8:	0800724d 	.word	0x0800724d
 80071ac:	0800724d 	.word	0x0800724d
 80071b0:	0800724d 	.word	0x0800724d
 80071b4:	0800724d 	.word	0x0800724d
 80071b8:	0800724d 	.word	0x0800724d
 80071bc:	0800724d 	.word	0x0800724d
 80071c0:	0800724d 	.word	0x0800724d
 80071c4:	0800723b 	.word	0x0800723b
 80071c8:	0800724d 	.word	0x0800724d
 80071cc:	0800724d 	.word	0x0800724d
 80071d0:	0800724d 	.word	0x0800724d
 80071d4:	0800724d 	.word	0x0800724d
 80071d8:	0800724d 	.word	0x0800724d
 80071dc:	0800724d 	.word	0x0800724d
 80071e0:	0800724d 	.word	0x0800724d
 80071e4:	08007253 	.word	0x08007253
 80071e8:	0800724d 	.word	0x0800724d
 80071ec:	0800724d 	.word	0x0800724d
 80071f0:	0800724d 	.word	0x0800724d
 80071f4:	0800724d 	.word	0x0800724d
 80071f8:	0800724d 	.word	0x0800724d
 80071fc:	0800724d 	.word	0x0800724d
 8007200:	0800724d 	.word	0x0800724d
 8007204:	08007253 	.word	0x08007253
 8007208:	0800724d 	.word	0x0800724d
 800720c:	0800724d 	.word	0x0800724d
 8007210:	0800724d 	.word	0x0800724d
 8007214:	0800724d 	.word	0x0800724d
 8007218:	0800724d 	.word	0x0800724d
 800721c:	0800724d 	.word	0x0800724d
 8007220:	0800724d 	.word	0x0800724d
 8007224:	08007253 	.word	0x08007253
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3304      	adds	r3, #4
 800722c:	2101      	movs	r1, #1
 800722e:	4618      	mov	r0, r3
 8007230:	f001 f97a 	bl	8008528 <RCCEx_PLL2_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007238:	e00c      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3324      	adds	r3, #36	; 0x24
 800723e:	2101      	movs	r1, #1
 8007240:	4618      	mov	r0, r3
 8007242:	f001 fa23 	bl	800868c <RCCEx_PLL3_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800724a:	e003      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
      break;
 8007250:	e000      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d109      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800725a:	4b32      	ldr	r3, [pc, #200]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800725c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007266:	492f      	ldr	r1, [pc, #188]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007268:	4313      	orrs	r3, r2
 800726a:	654b      	str	r3, [r1, #84]	; 0x54
 800726c:	e001      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d037      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007282:	2b05      	cmp	r3, #5
 8007284:	d820      	bhi.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007286:	a201      	add	r2, pc, #4	; (adr r2, 800728c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	080072cf 	.word	0x080072cf
 8007290:	080072a5 	.word	0x080072a5
 8007294:	080072b7 	.word	0x080072b7
 8007298:	080072cf 	.word	0x080072cf
 800729c:	080072cf 	.word	0x080072cf
 80072a0:	080072cf 	.word	0x080072cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3304      	adds	r3, #4
 80072a8:	2101      	movs	r1, #1
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 f93c 	bl	8008528 <RCCEx_PLL2_Config>
 80072b0:	4603      	mov	r3, r0
 80072b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80072b4:	e00c      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	3324      	adds	r3, #36	; 0x24
 80072ba:	2101      	movs	r1, #1
 80072bc:	4618      	mov	r0, r3
 80072be:	f001 f9e5 	bl	800868c <RCCEx_PLL3_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80072c6:	e003      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	75fb      	strb	r3, [r7, #23]
      break;
 80072cc:	e000      	b.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80072ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072d6:	4b13      	ldr	r3, [pc, #76]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072da:	f023 0207 	bic.w	r2, r3, #7
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072e2:	4910      	ldr	r1, [pc, #64]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	654b      	str	r3, [r1, #84]	; 0x54
 80072e8:	e001      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ea:	7dfb      	ldrb	r3, [r7, #23]
 80072ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d040      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007300:	2b05      	cmp	r3, #5
 8007302:	d827      	bhi.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	0800735b 	.word	0x0800735b
 8007310:	08007331 	.word	0x08007331
 8007314:	08007343 	.word	0x08007343
 8007318:	0800735b 	.word	0x0800735b
 800731c:	0800735b 	.word	0x0800735b
 8007320:	0800735b 	.word	0x0800735b
 8007324:	58024400 	.word	0x58024400
 8007328:	58024800 	.word	0x58024800
 800732c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	2101      	movs	r1, #1
 8007336:	4618      	mov	r0, r3
 8007338:	f001 f8f6 	bl	8008528 <RCCEx_PLL2_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007340:	e00c      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3324      	adds	r3, #36	; 0x24
 8007346:	2101      	movs	r1, #1
 8007348:	4618      	mov	r0, r3
 800734a:	f001 f99f 	bl	800868c <RCCEx_PLL3_Config>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007352:	e003      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]
      break;
 8007358:	e000      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800735a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10a      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007362:	4bb2      	ldr	r3, [pc, #712]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007366:	f023 0207 	bic.w	r2, r3, #7
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007370:	49ae      	ldr	r1, [pc, #696]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007372:	4313      	orrs	r3, r2
 8007374:	658b      	str	r3, [r1, #88]	; 0x58
 8007376:	e001      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
 800737a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0320 	and.w	r3, r3, #32
 8007384:	2b00      	cmp	r3, #0
 8007386:	d044      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800738e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007392:	d01b      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007398:	d805      	bhi.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d022      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800739e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073a2:	d00a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x952>
 80073a4:	e01b      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x976>
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073aa:	d01d      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80073ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073b0:	d01c      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x984>
 80073b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073b6:	d01b      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80073b8:	e011      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3304      	adds	r3, #4
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 f8b1 	bl	8008528 <RCCEx_PLL2_Config>
 80073c6:	4603      	mov	r3, r0
 80073c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80073ca:	e012      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3324      	adds	r3, #36	; 0x24
 80073d0:	2102      	movs	r1, #2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 f95a 	bl	800868c <RCCEx_PLL3_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80073dc:	e009      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
      break;
 80073e2:	e006      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80073e4:	bf00      	nop
 80073e6:	e004      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80073e8:	bf00      	nop
 80073ea:	e002      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80073ec:	bf00      	nop
 80073ee:	e000      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80073f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073f8:	4b8c      	ldr	r3, [pc, #560]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80073fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007406:	4989      	ldr	r1, [pc, #548]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007408:	4313      	orrs	r3, r2
 800740a:	654b      	str	r3, [r1, #84]	; 0x54
 800740c:	e001      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d044      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007428:	d01b      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800742a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800742e:	d805      	bhi.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d022      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007438:	d00a      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800743a:	e01b      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800743c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007440:	d01d      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007442:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007446:	d01c      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800744c:	d01b      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800744e:	e011      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3304      	adds	r3, #4
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f001 f866 	bl	8008528 <RCCEx_PLL2_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007460:	e012      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3324      	adds	r3, #36	; 0x24
 8007466:	2102      	movs	r1, #2
 8007468:	4618      	mov	r0, r3
 800746a:	f001 f90f 	bl	800868c <RCCEx_PLL3_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007472:	e009      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	75fb      	strb	r3, [r7, #23]
      break;
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800747a:	bf00      	nop
 800747c:	e004      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800747e:	bf00      	nop
 8007480:	e002      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007482:	bf00      	nop
 8007484:	e000      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007488:	7dfb      	ldrb	r3, [r7, #23]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800748e:	4b67      	ldr	r3, [pc, #412]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007492:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800749c:	4963      	ldr	r1, [pc, #396]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	658b      	str	r3, [r1, #88]	; 0x58
 80074a2:	e001      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d044      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074be:	d01b      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80074c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c4:	d805      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d022      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80074ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80074d0:	e01b      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80074d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d6:	d01d      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80074d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074dc:	d01c      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80074de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074e2:	d01b      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80074e4:	e011      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3304      	adds	r3, #4
 80074ea:	2100      	movs	r1, #0
 80074ec:	4618      	mov	r0, r3
 80074ee:	f001 f81b 	bl	8008528 <RCCEx_PLL2_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80074f6:	e012      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	3324      	adds	r3, #36	; 0x24
 80074fc:	2102      	movs	r1, #2
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 f8c4 	bl	800868c <RCCEx_PLL3_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007508:	e009      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	75fb      	strb	r3, [r7, #23]
      break;
 800750e:	e006      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007510:	bf00      	nop
 8007512:	e004      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007514:	bf00      	nop
 8007516:	e002      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007518:	bf00      	nop
 800751a:	e000      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800751c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10a      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007524:	4b41      	ldr	r3, [pc, #260]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007528:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007532:	493e      	ldr	r1, [pc, #248]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007534:	4313      	orrs	r3, r2
 8007536:	658b      	str	r3, [r1, #88]	; 0x58
 8007538:	e001      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800753a:	7dfb      	ldrb	r3, [r7, #23]
 800753c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d01a      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007554:	d10a      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3324      	adds	r3, #36	; 0x24
 800755a:	2102      	movs	r1, #2
 800755c:	4618      	mov	r0, r3
 800755e:	f001 f895 	bl	800868c <RCCEx_PLL3_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800756c:	4b2f      	ldr	r3, [pc, #188]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800757a:	492c      	ldr	r1, [pc, #176]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800757c:	4313      	orrs	r3, r2
 800757e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b00      	cmp	r3, #0
 800758a:	d01a      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007596:	d10a      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3324      	adds	r3, #36	; 0x24
 800759c:	2102      	movs	r1, #2
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 f874 	bl	800868c <RCCEx_PLL3_Config>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075ae:	4b1f      	ldr	r3, [pc, #124]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075bc:	491b      	ldr	r1, [pc, #108]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d032      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d8:	d00d      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80075da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075de:	d016      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d111      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3304      	adds	r3, #4
 80075e8:	2100      	movs	r1, #0
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 ff9c 	bl	8008528 <RCCEx_PLL2_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80075f4:	e00c      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3324      	adds	r3, #36	; 0x24
 80075fa:	2102      	movs	r1, #2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f001 f845 	bl	800868c <RCCEx_PLL3_Config>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007606:	e003      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	75fb      	strb	r3, [r7, #23]
      break;
 800760c:	e000      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800760e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10c      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007616:	4b05      	ldr	r3, [pc, #20]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800761a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007624:	4901      	ldr	r1, [pc, #4]	; (800762c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007626:	4313      	orrs	r3, r2
 8007628:	658b      	str	r3, [r1, #88]	; 0x58
 800762a:	e003      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800762c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d02f      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800764a:	d00c      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800764c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007650:	d015      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007656:	d10f      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007658:	4b79      	ldr	r3, [pc, #484]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800765a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765c:	4a78      	ldr	r2, [pc, #480]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800765e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007664:	e00c      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3324      	adds	r3, #36	; 0x24
 800766a:	2101      	movs	r1, #1
 800766c:	4618      	mov	r0, r3
 800766e:	f001 f80d 	bl	800868c <RCCEx_PLL3_Config>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007676:	e003      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]
      break;
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800767e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007686:	4b6e      	ldr	r3, [pc, #440]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007694:	496a      	ldr	r1, [pc, #424]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007696:	4313      	orrs	r3, r2
 8007698:	654b      	str	r3, [r1, #84]	; 0x54
 800769a:	e001      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d029      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80076b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b8:	d007      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80076ba:	e00f      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076bc:	4b60      	ldr	r3, [pc, #384]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	4a5f      	ldr	r2, [pc, #380]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80076c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80076c8:	e00b      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3304      	adds	r3, #4
 80076ce:	2102      	movs	r1, #2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f000 ff29 	bl	8008528 <RCCEx_PLL2_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80076da:	e002      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]
      break;
 80076e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d109      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80076e8:	4b55      	ldr	r3, [pc, #340]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80076ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f4:	4952      	ldr	r1, [pc, #328]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80076fa:	e001      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3324      	adds	r3, #36	; 0x24
 8007710:	2102      	movs	r1, #2
 8007712:	4618      	mov	r0, r3
 8007714:	f000 ffba 	bl	800868c <RCCEx_PLL3_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d02f      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007736:	d00c      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773c:	d802      	bhi.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d011      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007742:	e00d      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007748:	d00f      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800774a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800774e:	d00e      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007750:	e006      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007752:	4b3b      	ldr	r3, [pc, #236]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	4a3a      	ldr	r2, [pc, #232]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800775c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800775e:	e007      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	75fb      	strb	r3, [r7, #23]
      break;
 8007764:	e004      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007766:	bf00      	nop
 8007768:	e002      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800776a:	bf00      	nop
 800776c:	e000      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800776e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007770:	7dfb      	ldrb	r3, [r7, #23]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007776:	4b32      	ldr	r3, [pc, #200]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007782:	492f      	ldr	r1, [pc, #188]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007784:	4313      	orrs	r3, r2
 8007786:	654b      	str	r3, [r1, #84]	; 0x54
 8007788:	e001      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d008      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800779a:	4b29      	ldr	r3, [pc, #164]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800779c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a6:	4926      	ldr	r1, [pc, #152]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d009      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80077b8:	4b21      	ldr	r3, [pc, #132]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80077c6:	491e      	ldr	r1, [pc, #120]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d008      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077d8:	4b19      	ldr	r3, [pc, #100]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e4:	4916      	ldr	r1, [pc, #88]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00d      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077f6:	4b12      	ldr	r3, [pc, #72]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	4a11      	ldr	r2, [pc, #68]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007800:	6113      	str	r3, [r2, #16]
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800780c:	490c      	ldr	r1, [pc, #48]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800780e:	4313      	orrs	r3, r2
 8007810:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	da08      	bge.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800781a:	4b09      	ldr	r3, [pc, #36]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800781c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007826:	4906      	ldr	r1, [pc, #24]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007828:	4313      	orrs	r3, r2
 800782a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800782c:	7dbb      	ldrb	r3, [r7, #22]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	e000      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	58024400 	.word	0x58024400

08007844 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b090      	sub	sp, #64	; 0x40
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007852:	d150      	bne.n	80078f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007854:	4ba1      	ldr	r3, [pc, #644]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	2b04      	cmp	r3, #4
 8007862:	d844      	bhi.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007864:	a201      	add	r2, pc, #4	; (adr r2, 800786c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	08007881 	.word	0x08007881
 8007870:	08007891 	.word	0x08007891
 8007874:	080078a1 	.word	0x080078a1
 8007878:	080078e9 	.word	0x080078e9
 800787c:	080078b1 	.word	0x080078b1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007884:	4618      	mov	r0, r3
 8007886:	f000 fd03 	bl	8008290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800788e:	e241      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007890:	f107 0318 	add.w	r3, r7, #24
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fa63 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800789e:	e239      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078a0:	f107 030c 	add.w	r3, r7, #12
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fba7 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ae:	e231      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078b0:	4b8a      	ldr	r3, [pc, #552]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80078ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80078c0:	4b87      	ldr	r3, [pc, #540]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80078c4:	e226      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078cc:	d102      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80078ce:	4b85      	ldr	r3, [pc, #532]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078d2:	e21f      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078da:	d102      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80078dc:	4b82      	ldr	r3, [pc, #520]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80078de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078e0:	e218      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078e6:	e215      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078e8:	4b80      	ldr	r3, [pc, #512]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ec:	e212      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80078ee:	2300      	movs	r3, #0
 80078f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078f2:	bf00      	nop
 80078f4:	e20e      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fc:	d14f      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80078fe:	4b77      	ldr	r3, [pc, #476]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007902:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007906:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	2b80      	cmp	r3, #128	; 0x80
 800790c:	d01c      	beq.n	8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800790e:	2b80      	cmp	r3, #128	; 0x80
 8007910:	d804      	bhi.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d00e      	beq.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800791a:	e03c      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800791c:	2bc0      	cmp	r3, #192	; 0xc0
 800791e:	d037      	beq.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007924:	d018      	beq.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007926:	e036      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fcaf 	bl	8008290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007936:	e1ed      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007938:	f107 0318 	add.w	r3, r7, #24
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fa0f 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007946:	e1e5      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007948:	f107 030c 	add.w	r3, r7, #12
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fb53 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007956:	e1dd      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007958:	4b60      	ldr	r3, [pc, #384]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800795a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007960:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007968:	4b5d      	ldr	r3, [pc, #372]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800796c:	e1d2      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800796e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007974:	d102      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007976:	4b5b      	ldr	r3, [pc, #364]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800797a:	e1cb      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800797c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007982:	d102      	bne.n	800798a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007984:	4b58      	ldr	r3, [pc, #352]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007988:	e1c4      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800798e:	e1c1      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007990:	4b56      	ldr	r3, [pc, #344]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007994:	e1be      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800799a:	bf00      	nop
 800799c:	e1ba      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079a4:	d153      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80079a6:	4b4d      	ldr	r3, [pc, #308]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079aa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80079ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b6:	d01f      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80079b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079bc:	d805      	bhi.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00a      	beq.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80079c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079c6:	d00f      	beq.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80079c8:	e03d      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80079ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079ce:	d037      	beq.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80079d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079d4:	d018      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80079d6:	e036      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fc57 	bl	8008290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079e6:	e195      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079e8:	f107 0318 	add.w	r3, r7, #24
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 f9b7 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079f6:	e18d      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079f8:	f107 030c 	add.w	r3, r7, #12
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fafb 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a06:	e185      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a08:	4b34      	ldr	r3, [pc, #208]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a10:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d102      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a18:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a1c:	e17a      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a24:	d102      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007a26:	4b2f      	ldr	r3, [pc, #188]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a2a:	e173      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a32:	d102      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007a34:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a38:	e16c      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a3e:	e169      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a40:	4b2a      	ldr	r3, [pc, #168]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a44:	e166      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007a46:	2300      	movs	r3, #0
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a4a:	bf00      	nop
 8007a4c:	e162      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a54:	d15d      	bne.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007a56:	4b21      	ldr	r3, [pc, #132]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007a5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a66:	d01f      	beq.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a6c:	d805      	bhi.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a76:	d00f      	beq.n	8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007a78:	e047      	b.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007a7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a7e:	d041      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a84:	d018      	beq.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007a86:	e040      	b.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fbff 	bl	8008290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a96:	e13d      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a98:	f107 0318 	add.w	r3, r7, #24
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 f95f 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aa6:	e135      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aa8:	f107 030c 	add.w	r3, r7, #12
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 faa3 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab6:	e12d      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ab8:	4b08      	ldr	r3, [pc, #32]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007abc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d102      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007acc:	e122      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ad4:	d10c      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007ad6:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ada:	e11b      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	03d09000 	.word	0x03d09000
 8007ae4:	003d0900 	.word	0x003d0900
 8007ae8:	007a1200 	.word	0x007a1200
 8007aec:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007af6:	d102      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007af8:	4b89      	ldr	r3, [pc, #548]	; (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007afa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007afc:	e10a      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007afe:	2300      	movs	r3, #0
 8007b00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b02:	e107      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b04:	4b87      	ldr	r3, [pc, #540]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b08:	e104      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b0e:	bf00      	nop
 8007b10:	e100      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b18:	d153      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007b1a:	4b83      	ldr	r3, [pc, #524]	; (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007b22:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2a:	d01f      	beq.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b30:	d805      	bhi.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3a:	d00f      	beq.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007b3c:	e03d      	b.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007b3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b42:	d037      	beq.n	8007bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b48:	d018      	beq.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007b4a:	e036      	b.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fb9d 	bl	8008290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b5a:	e0db      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b5c:	f107 0318 	add.w	r3, r7, #24
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 f8fd 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b6a:	e0d3      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b6c:	f107 030c 	add.w	r3, r7, #12
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fa41 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b7a:	e0cb      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b7c:	4b6a      	ldr	r3, [pc, #424]	; (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b8c:	4b67      	ldr	r3, [pc, #412]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b90:	e0c0      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b98:	d102      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007b9a:	4b65      	ldr	r3, [pc, #404]	; (8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b9e:	e0b9      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ba6:	d102      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007ba8:	4b5d      	ldr	r3, [pc, #372]	; (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bac:	e0b2      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bb2:	e0af      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bb4:	4b5b      	ldr	r3, [pc, #364]	; (8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bb8:	e0ac      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bbe:	bf00      	nop
 8007bc0:	e0a8      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007bc8:	d13d      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007bca:	4b57      	ldr	r3, [pc, #348]	; (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bd2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bda:	d00c      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007be0:	d011      	beq.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d12b      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be6:	f107 0318 	add.w	r3, r7, #24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 f8b8 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf4:	e08e      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf6:	f107 030c 	add.w	r3, r7, #12
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f9fc 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c04:	e086      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c06:	4b48      	ldr	r3, [pc, #288]	; (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d102      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c16:	4b45      	ldr	r3, [pc, #276]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c1a:	e07b      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c22:	d102      	bne.n	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007c24:	4b42      	ldr	r3, [pc, #264]	; (8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c28:	e074      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c30:	d102      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007c32:	4b3b      	ldr	r3, [pc, #236]	; (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c36:	e06d      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c3c:	e06a      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c42:	bf00      	nop
 8007c44:	e066      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4c:	d11f      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007c4e:	4b36      	ldr	r3, [pc, #216]	; (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c56:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c62:	d008      	beq.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007c64:	e00f      	b.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fb10 	bl	8008290 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c74:	e04e      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c76:	f107 0318 	add.w	r3, r7, #24
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f870 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c84:	e046      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c8a:	bf00      	nop
 8007c8c:	e042      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c94:	d13c      	bne.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007c96:	4b24      	ldr	r3, [pc, #144]	; (8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007c9e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca6:	d01e      	beq.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cac:	d805      	bhi.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00d      	beq.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cb6:	d00e      	beq.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007cb8:	e026      	b.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbe:	d01d      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cc4:	d01d      	beq.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cca:	d014      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007ccc:	e01c      	b.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007cce:	f000 f831 	bl	8007d34 <HAL_RCCEx_GetD3PCLK1Freq>
 8007cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007cd4:	e01e      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd6:	f107 0318 	add.w	r3, r7, #24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 f840 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ce4:	e016      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ce6:	f107 030c 	add.w	r3, r7, #12
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 f984 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cf4:	e00e      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cfa:	e00b      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d00:	e008      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007d02:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d06:	e005      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0c:	bf00      	nop
 8007d0e:	e001      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3740      	adds	r7, #64	; 0x40
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	007a1200 	.word	0x007a1200
 8007d24:	00bb8000 	.word	0x00bb8000
 8007d28:	58024400 	.word	0x58024400
 8007d2c:	03d09000 	.word	0x03d09000
 8007d30:	003d0900 	.word	0x003d0900

08007d34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d38:	f7fe fe3a 	bl	80069b0 <HAL_RCC_GetHCLKFreq>
 8007d3c:	4601      	mov	r1, r0
 8007d3e:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	091b      	lsrs	r3, r3, #4
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	4a04      	ldr	r2, [pc, #16]	; (8007d5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d4a:	5cd3      	ldrb	r3, [r2, r3]
 8007d4c:	f003 031f 	and.w	r3, r3, #31
 8007d50:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	58024400 	.word	0x58024400
 8007d5c:	0800ae68 	.word	0x0800ae68

08007d60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b089      	sub	sp, #36	; 0x24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d68:	4b9d      	ldr	r3, [pc, #628]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d72:	4b9b      	ldr	r3, [pc, #620]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	0b1b      	lsrs	r3, r3, #12
 8007d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d7e:	4b98      	ldr	r3, [pc, #608]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	091b      	lsrs	r3, r3, #4
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007d8a:	4b95      	ldr	r3, [pc, #596]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d8e:	08db      	lsrs	r3, r3, #3
 8007d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	fb02 f303 	mul.w	r3, r2, r3
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 810a 	beq.w	8007fc2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d05a      	beq.n	8007e6a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d302      	bcc.n	8007dbe <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d078      	beq.n	8007eae <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007dbc:	e099      	b.n	8007ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dbe:	4b88      	ldr	r3, [pc, #544]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d02d      	beq.n	8007e26 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dca:	4b85      	ldr	r3, [pc, #532]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	08db      	lsrs	r3, r3, #3
 8007dd0:	f003 0303 	and.w	r3, r3, #3
 8007dd4:	4a83      	ldr	r2, [pc, #524]	; (8007fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dda:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	ee07 3a90 	vmov	s15, r3
 8007dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df4:	4b7a      	ldr	r3, [pc, #488]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e08:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e20:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e24:	e087      	b.n	8007f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007fec <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e38:	4b69      	ldr	r3, [pc, #420]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e68:	e065      	b.n	8007f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007e78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7c:	4b58      	ldr	r3, [pc, #352]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e90:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eac:	e043      	b.n	8007f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007ebc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec0:	4b47      	ldr	r3, [pc, #284]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ef0:	e021      	b.n	8007f36 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	ee07 3a90 	vmov	s15, r3
 8007ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f04:	4b36      	ldr	r3, [pc, #216]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f18:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f34:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f36:	4b2a      	ldr	r3, [pc, #168]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	0a5b      	lsrs	r3, r3, #9
 8007f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f40:	ee07 3a90 	vmov	s15, r3
 8007f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f5c:	ee17 2a90 	vmov	r2, s15
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f64:	4b1e      	ldr	r3, [pc, #120]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f68:	0c1b      	lsrs	r3, r3, #16
 8007f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f8a:	ee17 2a90 	vmov	r2, s15
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007f92:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	0e1b      	lsrs	r3, r3, #24
 8007f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9c:	ee07 3a90 	vmov	s15, r3
 8007fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fb8:	ee17 2a90 	vmov	r2, s15
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	609a      	str	r2, [r3, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	3724      	adds	r7, #36	; 0x24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	58024400 	.word	0x58024400
 8007fe4:	03d09000 	.word	0x03d09000
 8007fe8:	46000000 	.word	0x46000000
 8007fec:	4c742400 	.word	0x4c742400
 8007ff0:	4a742400 	.word	0x4a742400
 8007ff4:	4af42400 	.word	0x4af42400

08007ff8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b089      	sub	sp, #36	; 0x24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008000:	4b9d      	ldr	r3, [pc, #628]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008004:	f003 0303 	and.w	r3, r3, #3
 8008008:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800800a:	4b9b      	ldr	r3, [pc, #620]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	0d1b      	lsrs	r3, r3, #20
 8008010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008014:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008016:	4b98      	ldr	r3, [pc, #608]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801a:	0a1b      	lsrs	r3, r3, #8
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008022:	4b95      	ldr	r3, [pc, #596]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008026:	08db      	lsrs	r3, r3, #3
 8008028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	fb02 f303 	mul.w	r3, r2, r3
 8008032:	ee07 3a90 	vmov	s15, r3
 8008036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800803a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 810a 	beq.w	800825a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d05a      	beq.n	8008102 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800804c:	2b01      	cmp	r3, #1
 800804e:	d302      	bcc.n	8008056 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008050:	2b02      	cmp	r3, #2
 8008052:	d078      	beq.n	8008146 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008054:	e099      	b.n	800818a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008056:	4b88      	ldr	r3, [pc, #544]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d02d      	beq.n	80080be <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008062:	4b85      	ldr	r3, [pc, #532]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	08db      	lsrs	r3, r3, #3
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	4a83      	ldr	r2, [pc, #524]	; (800827c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800806e:	fa22 f303 	lsr.w	r3, r2, r3
 8008072:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	ee07 3a90 	vmov	s15, r3
 8008084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800808c:	4b7a      	ldr	r3, [pc, #488]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800808e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008094:	ee07 3a90 	vmov	s15, r3
 8008098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800809c:	ed97 6a03 	vldr	s12, [r7, #12]
 80080a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80080a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080bc:	e087      	b.n	80081ce <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008284 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80080cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080d0:	4b69      	ldr	r3, [pc, #420]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80080e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80080e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008100:	e065      	b.n	80081ce <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	ee07 3a90 	vmov	s15, r3
 8008108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008114:	4b58      	ldr	r3, [pc, #352]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008124:	ed97 6a03 	vldr	s12, [r7, #12]
 8008128:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800812c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800813c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008140:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008144:	e043      	b.n	80081ce <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008150:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800828c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008158:	4b47      	ldr	r3, [pc, #284]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008160:	ee07 3a90 	vmov	s15, r3
 8008164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008168:	ed97 6a03 	vldr	s12, [r7, #12]
 800816c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800817c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008188:	e021      	b.n	80081ce <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	ee07 3a90 	vmov	s15, r3
 8008190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008194:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800819c:	4b36      	ldr	r3, [pc, #216]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800819e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a4:	ee07 3a90 	vmov	s15, r3
 80081a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80081b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80081b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081cc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80081ce:	4b2a      	ldr	r3, [pc, #168]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	0a5b      	lsrs	r3, r3, #9
 80081d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d8:	ee07 3a90 	vmov	s15, r3
 80081dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80081ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081f4:	ee17 2a90 	vmov	r2, s15
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80081fc:	4b1e      	ldr	r3, [pc, #120]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	0c1b      	lsrs	r3, r3, #16
 8008202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800820e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008216:	edd7 6a07 	vldr	s13, [r7, #28]
 800821a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800821e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008222:	ee17 2a90 	vmov	r2, s15
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800822a:	4b13      	ldr	r3, [pc, #76]	; (8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	0e1b      	lsrs	r3, r3, #24
 8008230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008234:	ee07 3a90 	vmov	s15, r3
 8008238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008244:	edd7 6a07 	vldr	s13, [r7, #28]
 8008248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800824c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008250:	ee17 2a90 	vmov	r2, s15
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008258:	e008      	b.n	800826c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	3724      	adds	r7, #36	; 0x24
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	58024400 	.word	0x58024400
 800827c:	03d09000 	.word	0x03d09000
 8008280:	46000000 	.word	0x46000000
 8008284:	4c742400 	.word	0x4c742400
 8008288:	4a742400 	.word	0x4a742400
 800828c:	4af42400 	.word	0x4af42400

08008290 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008290:	b480      	push	{r7}
 8008292:	b089      	sub	sp, #36	; 0x24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008298:	4b9d      	ldr	r3, [pc, #628]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	f003 0303 	and.w	r3, r3, #3
 80082a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80082a2:	4b9b      	ldr	r3, [pc, #620]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a6:	091b      	lsrs	r3, r3, #4
 80082a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80082ae:	4b98      	ldr	r3, [pc, #608]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80082b8:	4b95      	ldr	r3, [pc, #596]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082bc:	08db      	lsrs	r3, r3, #3
 80082be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	fb02 f303 	mul.w	r3, r2, r3
 80082c8:	ee07 3a90 	vmov	s15, r3
 80082cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 810a 	beq.w	80084f0 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d05a      	beq.n	8008398 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d302      	bcc.n	80082ec <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d078      	beq.n	80083dc <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80082ea:	e099      	b.n	8008420 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082ec:	4b88      	ldr	r3, [pc, #544]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d02d      	beq.n	8008354 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082f8:	4b85      	ldr	r3, [pc, #532]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	08db      	lsrs	r3, r3, #3
 80082fe:	f003 0303 	and.w	r3, r3, #3
 8008302:	4a84      	ldr	r2, [pc, #528]	; (8008514 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
 8008308:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	ee07 3a90 	vmov	s15, r3
 8008310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008322:	4b7b      	ldr	r3, [pc, #492]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008332:	ed97 6a03 	vldr	s12, [r7, #12]
 8008336:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800833a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008352:	e087      	b.n	8008464 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800851c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008366:	4b6a      	ldr	r3, [pc, #424]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008376:	ed97 6a03 	vldr	s12, [r7, #12]
 800837a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800837e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008396:	e065      	b.n	8008464 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008520 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80083a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083aa:	4b59      	ldr	r3, [pc, #356]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80083ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80083be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80083c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083da:	e043      	b.n	8008464 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008524 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80083ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ee:	4b48      	ldr	r3, [pc, #288]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008402:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800841e:	e021      	b.n	8008464 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008520 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800842e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008432:	4b37      	ldr	r3, [pc, #220]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008442:	ed97 6a03 	vldr	s12, [r7, #12]
 8008446:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008518 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800844a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800844e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008462:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008464:	4b2a      	ldr	r3, [pc, #168]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008468:	0a5b      	lsrs	r3, r3, #9
 800846a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800847a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800847e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800848a:	ee17 2a90 	vmov	r2, s15
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008492:	4b1f      	ldr	r3, [pc, #124]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008496:	0c1b      	lsrs	r3, r3, #16
 8008498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80084b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084b8:	ee17 2a90 	vmov	r2, s15
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80084c0:	4b13      	ldr	r3, [pc, #76]	; (8008510 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	0e1b      	lsrs	r3, r3, #24
 80084c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084da:	edd7 6a07 	vldr	s13, [r7, #28]
 80084de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084e6:	ee17 2a90 	vmov	r2, s15
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80084ee:	e008      	b.n	8008502 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	609a      	str	r2, [r3, #8]
}
 8008502:	bf00      	nop
 8008504:	3724      	adds	r7, #36	; 0x24
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	58024400 	.word	0x58024400
 8008514:	03d09000 	.word	0x03d09000
 8008518:	46000000 	.word	0x46000000
 800851c:	4c742400 	.word	0x4c742400
 8008520:	4a742400 	.word	0x4a742400
 8008524:	4af42400 	.word	0x4af42400

08008528 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008536:	4b53      	ldr	r3, [pc, #332]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b03      	cmp	r3, #3
 8008540:	d101      	bne.n	8008546 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e099      	b.n	800867a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008546:	4b4f      	ldr	r3, [pc, #316]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a4e      	ldr	r2, [pc, #312]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800854c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008552:	f7f8 ff57 	bl	8001404 <HAL_GetTick>
 8008556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008558:	e008      	b.n	800856c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800855a:	f7f8 ff53 	bl	8001404 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	2b02      	cmp	r3, #2
 8008566:	d901      	bls.n	800856c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e086      	b.n	800867a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800856c:	4b45      	ldr	r3, [pc, #276]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1f0      	bne.n	800855a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008578:	4b42      	ldr	r3, [pc, #264]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800857a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	031b      	lsls	r3, r3, #12
 8008586:	493f      	ldr	r1, [pc, #252]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 8008588:	4313      	orrs	r3, r2
 800858a:	628b      	str	r3, [r1, #40]	; 0x28
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	3b01      	subs	r3, #1
 8008592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	3b01      	subs	r3, #1
 800859c:	025b      	lsls	r3, r3, #9
 800859e:	b29b      	uxth	r3, r3
 80085a0:	431a      	orrs	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	041b      	lsls	r3, r3, #16
 80085aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085ae:	431a      	orrs	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	061b      	lsls	r3, r3, #24
 80085b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085bc:	4931      	ldr	r1, [pc, #196]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80085c2:	4b30      	ldr	r3, [pc, #192]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	492d      	ldr	r1, [pc, #180]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80085d4:	4b2b      	ldr	r3, [pc, #172]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	f023 0220 	bic.w	r2, r3, #32
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	4928      	ldr	r1, [pc, #160]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80085e6:	4b27      	ldr	r3, [pc, #156]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 80085e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ea:	4a26      	ldr	r2, [pc, #152]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 80085ec:	f023 0310 	bic.w	r3, r3, #16
 80085f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085f2:	4b24      	ldr	r3, [pc, #144]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 80085f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085f6:	4b24      	ldr	r3, [pc, #144]	; (8008688 <RCCEx_PLL2_Config+0x160>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	69d2      	ldr	r2, [r2, #28]
 80085fe:	00d2      	lsls	r2, r2, #3
 8008600:	4920      	ldr	r1, [pc, #128]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 8008602:	4313      	orrs	r3, r2
 8008604:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008606:	4b1f      	ldr	r3, [pc, #124]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 8008608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860a:	4a1e      	ldr	r2, [pc, #120]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800860c:	f043 0310 	orr.w	r3, r3, #16
 8008610:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008618:	4b1a      	ldr	r3, [pc, #104]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	4a19      	ldr	r2, [pc, #100]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800861e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008622:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008624:	e00f      	b.n	8008646 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d106      	bne.n	800863a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800862c:	4b15      	ldr	r3, [pc, #84]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	4a14      	ldr	r2, [pc, #80]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 8008632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008638:	e005      	b.n	8008646 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800863a:	4b12      	ldr	r3, [pc, #72]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	4a11      	ldr	r2, [pc, #68]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 8008640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008644:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008646:	4b0f      	ldr	r3, [pc, #60]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a0e      	ldr	r2, [pc, #56]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800864c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008652:	f7f8 fed7 	bl	8001404 <HAL_GetTick>
 8008656:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008658:	e008      	b.n	800866c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800865a:	f7f8 fed3 	bl	8001404 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b02      	cmp	r3, #2
 8008666:	d901      	bls.n	800866c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e006      	b.n	800867a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <RCCEx_PLL2_Config+0x15c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0f0      	beq.n	800865a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	58024400 	.word	0x58024400
 8008688:	ffff0007 	.word	0xffff0007

0800868c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800869a:	4b53      	ldr	r3, [pc, #332]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 800869c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869e:	f003 0303 	and.w	r3, r3, #3
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d101      	bne.n	80086aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e099      	b.n	80087de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80086aa:	4b4f      	ldr	r3, [pc, #316]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a4e      	ldr	r2, [pc, #312]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80086b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086b6:	f7f8 fea5 	bl	8001404 <HAL_GetTick>
 80086ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086bc:	e008      	b.n	80086d0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086be:	f7f8 fea1 	bl	8001404 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e086      	b.n	80087de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086d0:	4b45      	ldr	r3, [pc, #276]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1f0      	bne.n	80086be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80086dc:	4b42      	ldr	r3, [pc, #264]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	051b      	lsls	r3, r3, #20
 80086ea:	493f      	ldr	r1, [pc, #252]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	628b      	str	r3, [r1, #40]	; 0x28
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	3b01      	subs	r3, #1
 8008700:	025b      	lsls	r3, r3, #9
 8008702:	b29b      	uxth	r3, r3
 8008704:	431a      	orrs	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	3b01      	subs	r3, #1
 800870c:	041b      	lsls	r3, r3, #16
 800870e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008712:	431a      	orrs	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	3b01      	subs	r3, #1
 800871a:	061b      	lsls	r3, r3, #24
 800871c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008720:	4931      	ldr	r1, [pc, #196]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008722:	4313      	orrs	r3, r2
 8008724:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008726:	4b30      	ldr	r3, [pc, #192]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	492d      	ldr	r1, [pc, #180]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008734:	4313      	orrs	r3, r2
 8008736:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008738:	4b2b      	ldr	r3, [pc, #172]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	4928      	ldr	r1, [pc, #160]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008746:	4313      	orrs	r3, r2
 8008748:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800874a:	4b27      	ldr	r3, [pc, #156]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	4a26      	ldr	r2, [pc, #152]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008756:	4b24      	ldr	r3, [pc, #144]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800875a:	4b24      	ldr	r3, [pc, #144]	; (80087ec <RCCEx_PLL3_Config+0x160>)
 800875c:	4013      	ands	r3, r2
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	69d2      	ldr	r2, [r2, #28]
 8008762:	00d2      	lsls	r2, r2, #3
 8008764:	4920      	ldr	r1, [pc, #128]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008766:	4313      	orrs	r3, r2
 8008768:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800876a:	4b1f      	ldr	r3, [pc, #124]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	4a1e      	ldr	r2, [pc, #120]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d106      	bne.n	800878a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800877c:	4b1a      	ldr	r3, [pc, #104]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	4a19      	ldr	r2, [pc, #100]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008782:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008786:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008788:	e00f      	b.n	80087aa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d106      	bne.n	800879e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008790:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	4a14      	ldr	r2, [pc, #80]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 8008796:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800879a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800879c:	e005      	b.n	80087aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800879e:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	4a11      	ldr	r2, [pc, #68]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80087a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80087aa:	4b0f      	ldr	r3, [pc, #60]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a0e      	ldr	r2, [pc, #56]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80087b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087b6:	f7f8 fe25 	bl	8001404 <HAL_GetTick>
 80087ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087bc:	e008      	b.n	80087d0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80087be:	f7f8 fe21 	bl	8001404 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d901      	bls.n	80087d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e006      	b.n	80087de <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087d0:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <RCCEx_PLL3_Config+0x15c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d0f0      	beq.n	80087be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	58024400 	.word	0x58024400
 80087ec:	ffff0007 	.word	0xffff0007

080087f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e049      	b.n	8008896 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7f8 fc92 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	3304      	adds	r3, #4
 800882c:	4619      	mov	r1, r3
 800882e:	4610      	mov	r0, r2
 8008830:	f000 fa86 	bl	8008d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d001      	beq.n	80088b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e019      	b.n	80088ec <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2202      	movs	r2, #2
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <HAL_TIM_Base_Start+0x58>)
 80088c8:	4013      	ands	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b06      	cmp	r3, #6
 80088d0:	d00b      	beq.n	80088ea <HAL_TIM_Base_Start+0x4a>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d8:	d007      	beq.n	80088ea <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 0201 	orr.w	r2, r2, #1
 80088e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	00010007 	.word	0x00010007

080088fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b02      	cmp	r3, #2
 8008910:	d122      	bne.n	8008958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b02      	cmp	r3, #2
 800891e:	d11b      	bne.n	8008958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f06f 0202 	mvn.w	r2, #2
 8008928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f9e0 	bl	8008d04 <HAL_TIM_IC_CaptureCallback>
 8008944:	e005      	b.n	8008952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f9d2 	bl	8008cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f9e3 	bl	8008d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	2b04      	cmp	r3, #4
 8008964:	d122      	bne.n	80089ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f003 0304 	and.w	r3, r3, #4
 8008970:	2b04      	cmp	r3, #4
 8008972:	d11b      	bne.n	80089ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f06f 0204 	mvn.w	r2, #4
 800897c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2202      	movs	r2, #2
 8008982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f9b6 	bl	8008d04 <HAL_TIM_IC_CaptureCallback>
 8008998:	e005      	b.n	80089a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f9a8 	bl	8008cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f9b9 	bl	8008d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	f003 0308 	and.w	r3, r3, #8
 80089b6:	2b08      	cmp	r3, #8
 80089b8:	d122      	bne.n	8008a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f003 0308 	and.w	r3, r3, #8
 80089c4:	2b08      	cmp	r3, #8
 80089c6:	d11b      	bne.n	8008a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f06f 0208 	mvn.w	r2, #8
 80089d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2204      	movs	r2, #4
 80089d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f98c 	bl	8008d04 <HAL_TIM_IC_CaptureCallback>
 80089ec:	e005      	b.n	80089fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f97e 	bl	8008cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f98f 	bl	8008d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0310 	and.w	r3, r3, #16
 8008a0a:	2b10      	cmp	r3, #16
 8008a0c:	d122      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	2b10      	cmp	r3, #16
 8008a1a:	d11b      	bne.n	8008a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0210 	mvn.w	r2, #16
 8008a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2208      	movs	r2, #8
 8008a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f962 	bl	8008d04 <HAL_TIM_IC_CaptureCallback>
 8008a40:	e005      	b.n	8008a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f954 	bl	8008cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f965 	bl	8008d18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d10e      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d107      	bne.n	8008a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f06f 0201 	mvn.w	r2, #1
 8008a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f92e 	bl	8008cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8a:	2b80      	cmp	r3, #128	; 0x80
 8008a8c:	d10e      	bne.n	8008aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a98:	2b80      	cmp	r3, #128	; 0x80
 8008a9a:	d107      	bne.n	8008aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fb14 	bl	80090d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aba:	d10e      	bne.n	8008ada <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac6:	2b80      	cmp	r3, #128	; 0x80
 8008ac8:	d107      	bne.n	8008ada <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fb07 	bl	80090e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae4:	2b40      	cmp	r3, #64	; 0x40
 8008ae6:	d10e      	bne.n	8008b06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af2:	2b40      	cmp	r3, #64	; 0x40
 8008af4:	d107      	bne.n	8008b06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f913 	bl	8008d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	d10e      	bne.n	8008b32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	f003 0320 	and.w	r3, r3, #32
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d107      	bne.n	8008b32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f06f 0220 	mvn.w	r2, #32
 8008b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fac7 	bl	80090c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_TIM_ConfigClockSource+0x18>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e0b7      	b.n	8008cc4 <HAL_TIM_ConfigClockSource+0x188>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	4b57      	ldr	r3, [pc, #348]	; (8008ccc <HAL_TIM_ConfigClockSource+0x190>)
 8008b70:	4013      	ands	r3, r2
 8008b72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b70      	cmp	r3, #112	; 0x70
 8008b8a:	d02e      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0xae>
 8008b8c:	2b70      	cmp	r3, #112	; 0x70
 8008b8e:	d812      	bhi.n	8008bb6 <HAL_TIM_ConfigClockSource+0x7a>
 8008b90:	2b30      	cmp	r3, #48	; 0x30
 8008b92:	f000 8084 	beq.w	8008c9e <HAL_TIM_ConfigClockSource+0x162>
 8008b96:	2b30      	cmp	r3, #48	; 0x30
 8008b98:	d806      	bhi.n	8008ba8 <HAL_TIM_ConfigClockSource+0x6c>
 8008b9a:	2b10      	cmp	r3, #16
 8008b9c:	d07f      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x162>
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d07d      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x162>
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d07b      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008ba6:	e084      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008ba8:	2b50      	cmp	r3, #80	; 0x50
 8008baa:	d048      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x102>
 8008bac:	2b60      	cmp	r3, #96	; 0x60
 8008bae:	d056      	beq.n	8008c5e <HAL_TIM_ConfigClockSource+0x122>
 8008bb0:	2b40      	cmp	r3, #64	; 0x40
 8008bb2:	d064      	beq.n	8008c7e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008bb4:	e07d      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008bb6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bba:	d070      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x162>
 8008bbc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bc0:	d809      	bhi.n	8008bd6 <HAL_TIM_ConfigClockSource+0x9a>
 8008bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bc6:	d027      	beq.n	8008c18 <HAL_TIM_ConfigClockSource+0xdc>
 8008bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bcc:	d067      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x162>
 8008bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd2:	d06d      	beq.n	8008cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008bd4:	e06d      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008bd6:	4a3e      	ldr	r2, [pc, #248]	; (8008cd0 <HAL_TIM_ConfigClockSource+0x194>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d060      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x162>
 8008bdc:	4a3d      	ldr	r2, [pc, #244]	; (8008cd4 <HAL_TIM_ConfigClockSource+0x198>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d05d      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x162>
 8008be2:	4a3d      	ldr	r2, [pc, #244]	; (8008cd8 <HAL_TIM_ConfigClockSource+0x19c>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d05a      	beq.n	8008c9e <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008be8:	e063      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	6899      	ldr	r1, [r3, #8]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f000 f9b9 	bl	8008f70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	609a      	str	r2, [r3, #8]
      break;
 8008c16:	e04c      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	6899      	ldr	r1, [r3, #8]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f000 f9a2 	bl	8008f70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c3a:	609a      	str	r2, [r3, #8]
      break;
 8008c3c:	e039      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	6859      	ldr	r1, [r3, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f000 f912 	bl	8008e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2150      	movs	r1, #80	; 0x50
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 f96c 	bl	8008f34 <TIM_ITRx_SetConfig>
      break;
 8008c5c:	e029      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	6859      	ldr	r1, [r3, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f000 f931 	bl	8008ed2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2160      	movs	r1, #96	; 0x60
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f95c 	bl	8008f34 <TIM_ITRx_SetConfig>
      break;
 8008c7c:	e019      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	6859      	ldr	r1, [r3, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f000 f8f2 	bl	8008e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2140      	movs	r1, #64	; 0x40
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 f94c 	bl	8008f34 <TIM_ITRx_SetConfig>
      break;
 8008c9c:	e009      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f000 f943 	bl	8008f34 <TIM_ITRx_SetConfig>
      break;
 8008cae:	e000      	b.n	8008cb2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008cb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	ffceff88 	.word	0xffceff88
 8008cd0:	00100030 	.word	0x00100030
 8008cd4:	00100040 	.word	0x00100040
 8008cd8:	00100020 	.word	0x00100020

08008cdc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a40      	ldr	r2, [pc, #256]	; (8008e54 <TIM_Base_SetConfig+0x114>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d013      	beq.n	8008d80 <TIM_Base_SetConfig+0x40>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d5e:	d00f      	beq.n	8008d80 <TIM_Base_SetConfig+0x40>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a3d      	ldr	r2, [pc, #244]	; (8008e58 <TIM_Base_SetConfig+0x118>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d00b      	beq.n	8008d80 <TIM_Base_SetConfig+0x40>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a3c      	ldr	r2, [pc, #240]	; (8008e5c <TIM_Base_SetConfig+0x11c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d007      	beq.n	8008d80 <TIM_Base_SetConfig+0x40>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a3b      	ldr	r2, [pc, #236]	; (8008e60 <TIM_Base_SetConfig+0x120>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d003      	beq.n	8008d80 <TIM_Base_SetConfig+0x40>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a3a      	ldr	r2, [pc, #232]	; (8008e64 <TIM_Base_SetConfig+0x124>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d108      	bne.n	8008d92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a2f      	ldr	r2, [pc, #188]	; (8008e54 <TIM_Base_SetConfig+0x114>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d01f      	beq.n	8008dda <TIM_Base_SetConfig+0x9a>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da0:	d01b      	beq.n	8008dda <TIM_Base_SetConfig+0x9a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a2c      	ldr	r2, [pc, #176]	; (8008e58 <TIM_Base_SetConfig+0x118>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d017      	beq.n	8008dda <TIM_Base_SetConfig+0x9a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a2b      	ldr	r2, [pc, #172]	; (8008e5c <TIM_Base_SetConfig+0x11c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d013      	beq.n	8008dda <TIM_Base_SetConfig+0x9a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a2a      	ldr	r2, [pc, #168]	; (8008e60 <TIM_Base_SetConfig+0x120>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d00f      	beq.n	8008dda <TIM_Base_SetConfig+0x9a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a29      	ldr	r2, [pc, #164]	; (8008e64 <TIM_Base_SetConfig+0x124>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d00b      	beq.n	8008dda <TIM_Base_SetConfig+0x9a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a28      	ldr	r2, [pc, #160]	; (8008e68 <TIM_Base_SetConfig+0x128>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d007      	beq.n	8008dda <TIM_Base_SetConfig+0x9a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a27      	ldr	r2, [pc, #156]	; (8008e6c <TIM_Base_SetConfig+0x12c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d003      	beq.n	8008dda <TIM_Base_SetConfig+0x9a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a26      	ldr	r2, [pc, #152]	; (8008e70 <TIM_Base_SetConfig+0x130>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d108      	bne.n	8008dec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a10      	ldr	r2, [pc, #64]	; (8008e54 <TIM_Base_SetConfig+0x114>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00f      	beq.n	8008e38 <TIM_Base_SetConfig+0xf8>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a12      	ldr	r2, [pc, #72]	; (8008e64 <TIM_Base_SetConfig+0x124>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00b      	beq.n	8008e38 <TIM_Base_SetConfig+0xf8>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a11      	ldr	r2, [pc, #68]	; (8008e68 <TIM_Base_SetConfig+0x128>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d007      	beq.n	8008e38 <TIM_Base_SetConfig+0xf8>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <TIM_Base_SetConfig+0x12c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_Base_SetConfig+0xf8>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a0f      	ldr	r2, [pc, #60]	; (8008e70 <TIM_Base_SetConfig+0x130>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d103      	bne.n	8008e40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	615a      	str	r2, [r3, #20]
}
 8008e46:	bf00      	nop
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	40010000 	.word	0x40010000
 8008e58:	40000400 	.word	0x40000400
 8008e5c:	40000800 	.word	0x40000800
 8008e60:	40000c00 	.word	0x40000c00
 8008e64:	40010400 	.word	0x40010400
 8008e68:	40014000 	.word	0x40014000
 8008e6c:	40014400 	.word	0x40014400
 8008e70:	40014800 	.word	0x40014800

08008e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f023 0201 	bic.w	r2, r3, #1
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f023 030a 	bic.w	r3, r3, #10
 8008eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	621a      	str	r2, [r3, #32]
}
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b087      	sub	sp, #28
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f023 0210 	bic.w	r2, r3, #16
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	031b      	lsls	r3, r3, #12
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
	...

08008f34 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <TIM_ITRx_SetConfig+0x38>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	f043 0307 	orr.w	r3, r3, #7
 8008f56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	609a      	str	r2, [r3, #8]
}
 8008f5e:	bf00      	nop
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	ffcfff8f 	.word	0xffcfff8f

08008f70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	021a      	lsls	r2, r3, #8
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	609a      	str	r2, [r3, #8]
}
 8008fa4:	bf00      	nop
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d101      	bne.n	8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e068      	b.n	800909a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a2e      	ldr	r2, [pc, #184]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d004      	beq.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a2d      	ldr	r2, [pc, #180]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d108      	bne.n	800900e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009014:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4313      	orrs	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a1e      	ldr	r2, [pc, #120]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01d      	beq.n	800906e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800903a:	d018      	beq.n	800906e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a1b      	ldr	r2, [pc, #108]	; (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d013      	beq.n	800906e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a1a      	ldr	r2, [pc, #104]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00e      	beq.n	800906e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a18      	ldr	r2, [pc, #96]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d009      	beq.n	800906e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a13      	ldr	r2, [pc, #76]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d004      	beq.n	800906e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a14      	ldr	r2, [pc, #80]	; (80090bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d10c      	bne.n	8009088 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	4313      	orrs	r3, r2
 800907e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	40010000 	.word	0x40010000
 80090ac:	40010400 	.word	0x40010400
 80090b0:	40000400 	.word	0x40000400
 80090b4:	40000800 	.word	0x40000800
 80090b8:	40000c00 	.word	0x40000c00
 80090bc:	40001800 	.word	0x40001800

080090c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e042      	b.n	8009194 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009114:	2b00      	cmp	r3, #0
 8009116:	d106      	bne.n	8009126 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7f8 f833 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2224      	movs	r2, #36	; 0x24
 800912a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f022 0201 	bic.w	r2, r2, #1
 800913c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f82c 	bl	800919c <UART_SetConfig>
 8009144:	4603      	mov	r3, r0
 8009146:	2b01      	cmp	r3, #1
 8009148:	d101      	bne.n	800914e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e022      	b.n	8009194 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fdd0 	bl	8009cfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800916a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800917a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f042 0201 	orr.w	r2, r2, #1
 800918a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 fe57 	bl	8009e40 <UART_CheckIdleState>
 8009192:	4603      	mov	r3, r0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800919c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80091a0:	b08e      	sub	sp, #56	; 0x38
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091ca:	4313      	orrs	r3, r2
 80091cc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	4bc1      	ldr	r3, [pc, #772]	; (80094dc <UART_SetConfig+0x340>)
 80091d6:	4013      	ands	r3, r2
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	6812      	ldr	r2, [r2, #0]
 80091dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091de:	430b      	orrs	r3, r1
 80091e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4ab7      	ldr	r2, [pc, #732]	; (80094e0 <UART_SetConfig+0x344>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d004      	beq.n	8009212 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800920e:	4313      	orrs	r3, r2
 8009210:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689a      	ldr	r2, [r3, #8]
 8009218:	4bb2      	ldr	r3, [pc, #712]	; (80094e4 <UART_SetConfig+0x348>)
 800921a:	4013      	ands	r3, r2
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	6812      	ldr	r2, [r2, #0]
 8009220:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009222:	430b      	orrs	r3, r1
 8009224:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	f023 010f 	bic.w	r1, r3, #15
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4aa9      	ldr	r2, [pc, #676]	; (80094e8 <UART_SetConfig+0x34c>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d177      	bne.n	8009336 <UART_SetConfig+0x19a>
 8009246:	4ba9      	ldr	r3, [pc, #676]	; (80094ec <UART_SetConfig+0x350>)
 8009248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800924e:	2b28      	cmp	r3, #40	; 0x28
 8009250:	d86c      	bhi.n	800932c <UART_SetConfig+0x190>
 8009252:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <UART_SetConfig+0xbc>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	080092fd 	.word	0x080092fd
 800925c:	0800932d 	.word	0x0800932d
 8009260:	0800932d 	.word	0x0800932d
 8009264:	0800932d 	.word	0x0800932d
 8009268:	0800932d 	.word	0x0800932d
 800926c:	0800932d 	.word	0x0800932d
 8009270:	0800932d 	.word	0x0800932d
 8009274:	0800932d 	.word	0x0800932d
 8009278:	08009305 	.word	0x08009305
 800927c:	0800932d 	.word	0x0800932d
 8009280:	0800932d 	.word	0x0800932d
 8009284:	0800932d 	.word	0x0800932d
 8009288:	0800932d 	.word	0x0800932d
 800928c:	0800932d 	.word	0x0800932d
 8009290:	0800932d 	.word	0x0800932d
 8009294:	0800932d 	.word	0x0800932d
 8009298:	0800930d 	.word	0x0800930d
 800929c:	0800932d 	.word	0x0800932d
 80092a0:	0800932d 	.word	0x0800932d
 80092a4:	0800932d 	.word	0x0800932d
 80092a8:	0800932d 	.word	0x0800932d
 80092ac:	0800932d 	.word	0x0800932d
 80092b0:	0800932d 	.word	0x0800932d
 80092b4:	0800932d 	.word	0x0800932d
 80092b8:	08009315 	.word	0x08009315
 80092bc:	0800932d 	.word	0x0800932d
 80092c0:	0800932d 	.word	0x0800932d
 80092c4:	0800932d 	.word	0x0800932d
 80092c8:	0800932d 	.word	0x0800932d
 80092cc:	0800932d 	.word	0x0800932d
 80092d0:	0800932d 	.word	0x0800932d
 80092d4:	0800932d 	.word	0x0800932d
 80092d8:	0800931d 	.word	0x0800931d
 80092dc:	0800932d 	.word	0x0800932d
 80092e0:	0800932d 	.word	0x0800932d
 80092e4:	0800932d 	.word	0x0800932d
 80092e8:	0800932d 	.word	0x0800932d
 80092ec:	0800932d 	.word	0x0800932d
 80092f0:	0800932d 	.word	0x0800932d
 80092f4:	0800932d 	.word	0x0800932d
 80092f8:	08009325 	.word	0x08009325
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009302:	e233      	b.n	800976c <UART_SetConfig+0x5d0>
 8009304:	2304      	movs	r3, #4
 8009306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930a:	e22f      	b.n	800976c <UART_SetConfig+0x5d0>
 800930c:	2308      	movs	r3, #8
 800930e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009312:	e22b      	b.n	800976c <UART_SetConfig+0x5d0>
 8009314:	2310      	movs	r3, #16
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e227      	b.n	800976c <UART_SetConfig+0x5d0>
 800931c:	2320      	movs	r3, #32
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	e223      	b.n	800976c <UART_SetConfig+0x5d0>
 8009324:	2340      	movs	r3, #64	; 0x40
 8009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932a:	e21f      	b.n	800976c <UART_SetConfig+0x5d0>
 800932c:	2380      	movs	r3, #128	; 0x80
 800932e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009332:	bf00      	nop
 8009334:	e21a      	b.n	800976c <UART_SetConfig+0x5d0>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a6d      	ldr	r2, [pc, #436]	; (80094f0 <UART_SetConfig+0x354>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d132      	bne.n	80093a6 <UART_SetConfig+0x20a>
 8009340:	4b6a      	ldr	r3, [pc, #424]	; (80094ec <UART_SetConfig+0x350>)
 8009342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009344:	f003 0307 	and.w	r3, r3, #7
 8009348:	2b05      	cmp	r3, #5
 800934a:	d827      	bhi.n	800939c <UART_SetConfig+0x200>
 800934c:	a201      	add	r2, pc, #4	; (adr r2, 8009354 <UART_SetConfig+0x1b8>)
 800934e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009352:	bf00      	nop
 8009354:	0800936d 	.word	0x0800936d
 8009358:	08009375 	.word	0x08009375
 800935c:	0800937d 	.word	0x0800937d
 8009360:	08009385 	.word	0x08009385
 8009364:	0800938d 	.word	0x0800938d
 8009368:	08009395 	.word	0x08009395
 800936c:	2300      	movs	r3, #0
 800936e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009372:	e1fb      	b.n	800976c <UART_SetConfig+0x5d0>
 8009374:	2304      	movs	r3, #4
 8009376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937a:	e1f7      	b.n	800976c <UART_SetConfig+0x5d0>
 800937c:	2308      	movs	r3, #8
 800937e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009382:	e1f3      	b.n	800976c <UART_SetConfig+0x5d0>
 8009384:	2310      	movs	r3, #16
 8009386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938a:	e1ef      	b.n	800976c <UART_SetConfig+0x5d0>
 800938c:	2320      	movs	r3, #32
 800938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009392:	e1eb      	b.n	800976c <UART_SetConfig+0x5d0>
 8009394:	2340      	movs	r3, #64	; 0x40
 8009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800939a:	e1e7      	b.n	800976c <UART_SetConfig+0x5d0>
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093a2:	bf00      	nop
 80093a4:	e1e2      	b.n	800976c <UART_SetConfig+0x5d0>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a52      	ldr	r2, [pc, #328]	; (80094f4 <UART_SetConfig+0x358>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d132      	bne.n	8009416 <UART_SetConfig+0x27a>
 80093b0:	4b4e      	ldr	r3, [pc, #312]	; (80094ec <UART_SetConfig+0x350>)
 80093b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	2b05      	cmp	r3, #5
 80093ba:	d827      	bhi.n	800940c <UART_SetConfig+0x270>
 80093bc:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <UART_SetConfig+0x228>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	080093dd 	.word	0x080093dd
 80093c8:	080093e5 	.word	0x080093e5
 80093cc:	080093ed 	.word	0x080093ed
 80093d0:	080093f5 	.word	0x080093f5
 80093d4:	080093fd 	.word	0x080093fd
 80093d8:	08009405 	.word	0x08009405
 80093dc:	2300      	movs	r3, #0
 80093de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093e2:	e1c3      	b.n	800976c <UART_SetConfig+0x5d0>
 80093e4:	2304      	movs	r3, #4
 80093e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ea:	e1bf      	b.n	800976c <UART_SetConfig+0x5d0>
 80093ec:	2308      	movs	r3, #8
 80093ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093f2:	e1bb      	b.n	800976c <UART_SetConfig+0x5d0>
 80093f4:	2310      	movs	r3, #16
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e1b7      	b.n	800976c <UART_SetConfig+0x5d0>
 80093fc:	2320      	movs	r3, #32
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e1b3      	b.n	800976c <UART_SetConfig+0x5d0>
 8009404:	2340      	movs	r3, #64	; 0x40
 8009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940a:	e1af      	b.n	800976c <UART_SetConfig+0x5d0>
 800940c:	2380      	movs	r3, #128	; 0x80
 800940e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009412:	bf00      	nop
 8009414:	e1aa      	b.n	800976c <UART_SetConfig+0x5d0>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a37      	ldr	r2, [pc, #220]	; (80094f8 <UART_SetConfig+0x35c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d132      	bne.n	8009486 <UART_SetConfig+0x2ea>
 8009420:	4b32      	ldr	r3, [pc, #200]	; (80094ec <UART_SetConfig+0x350>)
 8009422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	2b05      	cmp	r3, #5
 800942a:	d827      	bhi.n	800947c <UART_SetConfig+0x2e0>
 800942c:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <UART_SetConfig+0x298>)
 800942e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009432:	bf00      	nop
 8009434:	0800944d 	.word	0x0800944d
 8009438:	08009455 	.word	0x08009455
 800943c:	0800945d 	.word	0x0800945d
 8009440:	08009465 	.word	0x08009465
 8009444:	0800946d 	.word	0x0800946d
 8009448:	08009475 	.word	0x08009475
 800944c:	2300      	movs	r3, #0
 800944e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009452:	e18b      	b.n	800976c <UART_SetConfig+0x5d0>
 8009454:	2304      	movs	r3, #4
 8009456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945a:	e187      	b.n	800976c <UART_SetConfig+0x5d0>
 800945c:	2308      	movs	r3, #8
 800945e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009462:	e183      	b.n	800976c <UART_SetConfig+0x5d0>
 8009464:	2310      	movs	r3, #16
 8009466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946a:	e17f      	b.n	800976c <UART_SetConfig+0x5d0>
 800946c:	2320      	movs	r3, #32
 800946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009472:	e17b      	b.n	800976c <UART_SetConfig+0x5d0>
 8009474:	2340      	movs	r3, #64	; 0x40
 8009476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947a:	e177      	b.n	800976c <UART_SetConfig+0x5d0>
 800947c:	2380      	movs	r3, #128	; 0x80
 800947e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009482:	bf00      	nop
 8009484:	e172      	b.n	800976c <UART_SetConfig+0x5d0>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a1c      	ldr	r2, [pc, #112]	; (80094fc <UART_SetConfig+0x360>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d144      	bne.n	800951a <UART_SetConfig+0x37e>
 8009490:	4b16      	ldr	r3, [pc, #88]	; (80094ec <UART_SetConfig+0x350>)
 8009492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009494:	f003 0307 	and.w	r3, r3, #7
 8009498:	2b05      	cmp	r3, #5
 800949a:	d839      	bhi.n	8009510 <UART_SetConfig+0x374>
 800949c:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <UART_SetConfig+0x308>)
 800949e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a2:	bf00      	nop
 80094a4:	080094bd 	.word	0x080094bd
 80094a8:	080094c5 	.word	0x080094c5
 80094ac:	080094cd 	.word	0x080094cd
 80094b0:	080094d5 	.word	0x080094d5
 80094b4:	08009501 	.word	0x08009501
 80094b8:	08009509 	.word	0x08009509
 80094bc:	2300      	movs	r3, #0
 80094be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c2:	e153      	b.n	800976c <UART_SetConfig+0x5d0>
 80094c4:	2304      	movs	r3, #4
 80094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ca:	e14f      	b.n	800976c <UART_SetConfig+0x5d0>
 80094cc:	2308      	movs	r3, #8
 80094ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d2:	e14b      	b.n	800976c <UART_SetConfig+0x5d0>
 80094d4:	2310      	movs	r3, #16
 80094d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094da:	e147      	b.n	800976c <UART_SetConfig+0x5d0>
 80094dc:	cfff69f3 	.word	0xcfff69f3
 80094e0:	58000c00 	.word	0x58000c00
 80094e4:	11fff4ff 	.word	0x11fff4ff
 80094e8:	40011000 	.word	0x40011000
 80094ec:	58024400 	.word	0x58024400
 80094f0:	40004400 	.word	0x40004400
 80094f4:	40004800 	.word	0x40004800
 80094f8:	40004c00 	.word	0x40004c00
 80094fc:	40005000 	.word	0x40005000
 8009500:	2320      	movs	r3, #32
 8009502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009506:	e131      	b.n	800976c <UART_SetConfig+0x5d0>
 8009508:	2340      	movs	r3, #64	; 0x40
 800950a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800950e:	e12d      	b.n	800976c <UART_SetConfig+0x5d0>
 8009510:	2380      	movs	r3, #128	; 0x80
 8009512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009516:	bf00      	nop
 8009518:	e128      	b.n	800976c <UART_SetConfig+0x5d0>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4ab6      	ldr	r2, [pc, #728]	; (80097f8 <UART_SetConfig+0x65c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d178      	bne.n	8009616 <UART_SetConfig+0x47a>
 8009524:	4bb5      	ldr	r3, [pc, #724]	; (80097fc <UART_SetConfig+0x660>)
 8009526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009528:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800952c:	2b28      	cmp	r3, #40	; 0x28
 800952e:	d86d      	bhi.n	800960c <UART_SetConfig+0x470>
 8009530:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <UART_SetConfig+0x39c>)
 8009532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009536:	bf00      	nop
 8009538:	080095dd 	.word	0x080095dd
 800953c:	0800960d 	.word	0x0800960d
 8009540:	0800960d 	.word	0x0800960d
 8009544:	0800960d 	.word	0x0800960d
 8009548:	0800960d 	.word	0x0800960d
 800954c:	0800960d 	.word	0x0800960d
 8009550:	0800960d 	.word	0x0800960d
 8009554:	0800960d 	.word	0x0800960d
 8009558:	080095e5 	.word	0x080095e5
 800955c:	0800960d 	.word	0x0800960d
 8009560:	0800960d 	.word	0x0800960d
 8009564:	0800960d 	.word	0x0800960d
 8009568:	0800960d 	.word	0x0800960d
 800956c:	0800960d 	.word	0x0800960d
 8009570:	0800960d 	.word	0x0800960d
 8009574:	0800960d 	.word	0x0800960d
 8009578:	080095ed 	.word	0x080095ed
 800957c:	0800960d 	.word	0x0800960d
 8009580:	0800960d 	.word	0x0800960d
 8009584:	0800960d 	.word	0x0800960d
 8009588:	0800960d 	.word	0x0800960d
 800958c:	0800960d 	.word	0x0800960d
 8009590:	0800960d 	.word	0x0800960d
 8009594:	0800960d 	.word	0x0800960d
 8009598:	080095f5 	.word	0x080095f5
 800959c:	0800960d 	.word	0x0800960d
 80095a0:	0800960d 	.word	0x0800960d
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	0800960d 	.word	0x0800960d
 80095ac:	0800960d 	.word	0x0800960d
 80095b0:	0800960d 	.word	0x0800960d
 80095b4:	0800960d 	.word	0x0800960d
 80095b8:	080095fd 	.word	0x080095fd
 80095bc:	0800960d 	.word	0x0800960d
 80095c0:	0800960d 	.word	0x0800960d
 80095c4:	0800960d 	.word	0x0800960d
 80095c8:	0800960d 	.word	0x0800960d
 80095cc:	0800960d 	.word	0x0800960d
 80095d0:	0800960d 	.word	0x0800960d
 80095d4:	0800960d 	.word	0x0800960d
 80095d8:	08009605 	.word	0x08009605
 80095dc:	2301      	movs	r3, #1
 80095de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e2:	e0c3      	b.n	800976c <UART_SetConfig+0x5d0>
 80095e4:	2304      	movs	r3, #4
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e0bf      	b.n	800976c <UART_SetConfig+0x5d0>
 80095ec:	2308      	movs	r3, #8
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e0bb      	b.n	800976c <UART_SetConfig+0x5d0>
 80095f4:	2310      	movs	r3, #16
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e0b7      	b.n	800976c <UART_SetConfig+0x5d0>
 80095fc:	2320      	movs	r3, #32
 80095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009602:	e0b3      	b.n	800976c <UART_SetConfig+0x5d0>
 8009604:	2340      	movs	r3, #64	; 0x40
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e0af      	b.n	800976c <UART_SetConfig+0x5d0>
 800960c:	2380      	movs	r3, #128	; 0x80
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	bf00      	nop
 8009614:	e0aa      	b.n	800976c <UART_SetConfig+0x5d0>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a79      	ldr	r2, [pc, #484]	; (8009800 <UART_SetConfig+0x664>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d132      	bne.n	8009686 <UART_SetConfig+0x4ea>
 8009620:	4b76      	ldr	r3, [pc, #472]	; (80097fc <UART_SetConfig+0x660>)
 8009622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009624:	f003 0307 	and.w	r3, r3, #7
 8009628:	2b05      	cmp	r3, #5
 800962a:	d827      	bhi.n	800967c <UART_SetConfig+0x4e0>
 800962c:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <UART_SetConfig+0x498>)
 800962e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009632:	bf00      	nop
 8009634:	0800964d 	.word	0x0800964d
 8009638:	08009655 	.word	0x08009655
 800963c:	0800965d 	.word	0x0800965d
 8009640:	08009665 	.word	0x08009665
 8009644:	0800966d 	.word	0x0800966d
 8009648:	08009675 	.word	0x08009675
 800964c:	2300      	movs	r3, #0
 800964e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009652:	e08b      	b.n	800976c <UART_SetConfig+0x5d0>
 8009654:	2304      	movs	r3, #4
 8009656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965a:	e087      	b.n	800976c <UART_SetConfig+0x5d0>
 800965c:	2308      	movs	r3, #8
 800965e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009662:	e083      	b.n	800976c <UART_SetConfig+0x5d0>
 8009664:	2310      	movs	r3, #16
 8009666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966a:	e07f      	b.n	800976c <UART_SetConfig+0x5d0>
 800966c:	2320      	movs	r3, #32
 800966e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009672:	e07b      	b.n	800976c <UART_SetConfig+0x5d0>
 8009674:	2340      	movs	r3, #64	; 0x40
 8009676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967a:	e077      	b.n	800976c <UART_SetConfig+0x5d0>
 800967c:	2380      	movs	r3, #128	; 0x80
 800967e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009682:	bf00      	nop
 8009684:	e072      	b.n	800976c <UART_SetConfig+0x5d0>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a5e      	ldr	r2, [pc, #376]	; (8009804 <UART_SetConfig+0x668>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d132      	bne.n	80096f6 <UART_SetConfig+0x55a>
 8009690:	4b5a      	ldr	r3, [pc, #360]	; (80097fc <UART_SetConfig+0x660>)
 8009692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009694:	f003 0307 	and.w	r3, r3, #7
 8009698:	2b05      	cmp	r3, #5
 800969a:	d827      	bhi.n	80096ec <UART_SetConfig+0x550>
 800969c:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <UART_SetConfig+0x508>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096bd 	.word	0x080096bd
 80096a8:	080096c5 	.word	0x080096c5
 80096ac:	080096cd 	.word	0x080096cd
 80096b0:	080096d5 	.word	0x080096d5
 80096b4:	080096dd 	.word	0x080096dd
 80096b8:	080096e5 	.word	0x080096e5
 80096bc:	2300      	movs	r3, #0
 80096be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c2:	e053      	b.n	800976c <UART_SetConfig+0x5d0>
 80096c4:	2304      	movs	r3, #4
 80096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ca:	e04f      	b.n	800976c <UART_SetConfig+0x5d0>
 80096cc:	2308      	movs	r3, #8
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d2:	e04b      	b.n	800976c <UART_SetConfig+0x5d0>
 80096d4:	2310      	movs	r3, #16
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096da:	e047      	b.n	800976c <UART_SetConfig+0x5d0>
 80096dc:	2320      	movs	r3, #32
 80096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e2:	e043      	b.n	800976c <UART_SetConfig+0x5d0>
 80096e4:	2340      	movs	r3, #64	; 0x40
 80096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ea:	e03f      	b.n	800976c <UART_SetConfig+0x5d0>
 80096ec:	2380      	movs	r3, #128	; 0x80
 80096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f2:	bf00      	nop
 80096f4:	e03a      	b.n	800976c <UART_SetConfig+0x5d0>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a43      	ldr	r2, [pc, #268]	; (8009808 <UART_SetConfig+0x66c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d132      	bne.n	8009766 <UART_SetConfig+0x5ca>
 8009700:	4b3e      	ldr	r3, [pc, #248]	; (80097fc <UART_SetConfig+0x660>)
 8009702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009704:	f003 0307 	and.w	r3, r3, #7
 8009708:	2b05      	cmp	r3, #5
 800970a:	d827      	bhi.n	800975c <UART_SetConfig+0x5c0>
 800970c:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <UART_SetConfig+0x578>)
 800970e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009712:	bf00      	nop
 8009714:	0800972d 	.word	0x0800972d
 8009718:	08009735 	.word	0x08009735
 800971c:	0800973d 	.word	0x0800973d
 8009720:	08009745 	.word	0x08009745
 8009724:	0800974d 	.word	0x0800974d
 8009728:	08009755 	.word	0x08009755
 800972c:	2302      	movs	r3, #2
 800972e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009732:	e01b      	b.n	800976c <UART_SetConfig+0x5d0>
 8009734:	2304      	movs	r3, #4
 8009736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973a:	e017      	b.n	800976c <UART_SetConfig+0x5d0>
 800973c:	2308      	movs	r3, #8
 800973e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009742:	e013      	b.n	800976c <UART_SetConfig+0x5d0>
 8009744:	2310      	movs	r3, #16
 8009746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974a:	e00f      	b.n	800976c <UART_SetConfig+0x5d0>
 800974c:	2320      	movs	r3, #32
 800974e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009752:	e00b      	b.n	800976c <UART_SetConfig+0x5d0>
 8009754:	2340      	movs	r3, #64	; 0x40
 8009756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975a:	e007      	b.n	800976c <UART_SetConfig+0x5d0>
 800975c:	2380      	movs	r3, #128	; 0x80
 800975e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009762:	bf00      	nop
 8009764:	e002      	b.n	800976c <UART_SetConfig+0x5d0>
 8009766:	2380      	movs	r3, #128	; 0x80
 8009768:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a25      	ldr	r2, [pc, #148]	; (8009808 <UART_SetConfig+0x66c>)
 8009772:	4293      	cmp	r3, r2
 8009774:	f040 80b8 	bne.w	80098e8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009778:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800977c:	2b08      	cmp	r3, #8
 800977e:	d019      	beq.n	80097b4 <UART_SetConfig+0x618>
 8009780:	2b08      	cmp	r3, #8
 8009782:	dc04      	bgt.n	800978e <UART_SetConfig+0x5f2>
 8009784:	2b02      	cmp	r3, #2
 8009786:	d009      	beq.n	800979c <UART_SetConfig+0x600>
 8009788:	2b04      	cmp	r3, #4
 800978a:	d00b      	beq.n	80097a4 <UART_SetConfig+0x608>
 800978c:	e042      	b.n	8009814 <UART_SetConfig+0x678>
 800978e:	2b20      	cmp	r3, #32
 8009790:	d02b      	beq.n	80097ea <UART_SetConfig+0x64e>
 8009792:	2b40      	cmp	r3, #64	; 0x40
 8009794:	d02c      	beq.n	80097f0 <UART_SetConfig+0x654>
 8009796:	2b10      	cmp	r3, #16
 8009798:	d014      	beq.n	80097c4 <UART_SetConfig+0x628>
 800979a:	e03b      	b.n	8009814 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800979c:	f7fe faca 	bl	8007d34 <HAL_RCCEx_GetD3PCLK1Freq>
 80097a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097a2:	e03d      	b.n	8009820 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097a4:	f107 0314 	add.w	r3, r7, #20
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe fad9 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097b2:	e035      	b.n	8009820 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097b4:	f107 0308 	add.w	r3, r7, #8
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe fc1d 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097c2:	e02d      	b.n	8009820 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097c4:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <UART_SetConfig+0x660>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0320 	and.w	r3, r3, #32
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d009      	beq.n	80097e4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097d0:	4b0a      	ldr	r3, [pc, #40]	; (80097fc <UART_SetConfig+0x660>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	08db      	lsrs	r3, r3, #3
 80097d6:	f003 0303 	and.w	r3, r3, #3
 80097da:	4a0c      	ldr	r2, [pc, #48]	; (800980c <UART_SetConfig+0x670>)
 80097dc:	fa22 f303 	lsr.w	r3, r2, r3
 80097e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097e2:	e01d      	b.n	8009820 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80097e4:	4b09      	ldr	r3, [pc, #36]	; (800980c <UART_SetConfig+0x670>)
 80097e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097e8:	e01a      	b.n	8009820 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <UART_SetConfig+0x674>)
 80097ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ee:	e017      	b.n	8009820 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097f6:	e013      	b.n	8009820 <UART_SetConfig+0x684>
 80097f8:	40011400 	.word	0x40011400
 80097fc:	58024400 	.word	0x58024400
 8009800:	40007800 	.word	0x40007800
 8009804:	40007c00 	.word	0x40007c00
 8009808:	58000c00 	.word	0x58000c00
 800980c:	03d09000 	.word	0x03d09000
 8009810:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009814:	2300      	movs	r3, #0
 8009816:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800981e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 824d 	beq.w	8009cc2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	4aad      	ldr	r2, [pc, #692]	; (8009ae4 <UART_SetConfig+0x948>)
 800982e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009832:	461a      	mov	r2, r3
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	fbb3 f3f2 	udiv	r3, r3, r2
 800983a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	4613      	mov	r3, r2
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	4413      	add	r3, r2
 8009846:	6a3a      	ldr	r2, [r7, #32]
 8009848:	429a      	cmp	r2, r3
 800984a:	d305      	bcc.n	8009858 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009852:	6a3a      	ldr	r2, [r7, #32]
 8009854:	429a      	cmp	r2, r3
 8009856:	d903      	bls.n	8009860 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800985e:	e230      	b.n	8009cc2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009862:	4618      	mov	r0, r3
 8009864:	f04f 0100 	mov.w	r1, #0
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	4a9d      	ldr	r2, [pc, #628]	; (8009ae4 <UART_SetConfig+0x948>)
 800986e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009872:	b29b      	uxth	r3, r3
 8009874:	f04f 0400 	mov.w	r4, #0
 8009878:	461a      	mov	r2, r3
 800987a:	4623      	mov	r3, r4
 800987c:	f7f6 fd2c 	bl	80002d8 <__aeabi_uldivmod>
 8009880:	4603      	mov	r3, r0
 8009882:	460c      	mov	r4, r1
 8009884:	4619      	mov	r1, r3
 8009886:	4622      	mov	r2, r4
 8009888:	f04f 0300 	mov.w	r3, #0
 800988c:	f04f 0400 	mov.w	r4, #0
 8009890:	0214      	lsls	r4, r2, #8
 8009892:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009896:	020b      	lsls	r3, r1, #8
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	6852      	ldr	r2, [r2, #4]
 800989c:	0852      	lsrs	r2, r2, #1
 800989e:	4611      	mov	r1, r2
 80098a0:	f04f 0200 	mov.w	r2, #0
 80098a4:	eb13 0b01 	adds.w	fp, r3, r1
 80098a8:	eb44 0c02 	adc.w	ip, r4, r2
 80098ac:	4658      	mov	r0, fp
 80098ae:	4661      	mov	r1, ip
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	f04f 0400 	mov.w	r4, #0
 80098b8:	461a      	mov	r2, r3
 80098ba:	4623      	mov	r3, r4
 80098bc:	f7f6 fd0c 	bl	80002d8 <__aeabi_uldivmod>
 80098c0:	4603      	mov	r3, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098cc:	d308      	bcc.n	80098e0 <UART_SetConfig+0x744>
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098d4:	d204      	bcs.n	80098e0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098dc:	60da      	str	r2, [r3, #12]
 80098de:	e1f0      	b.n	8009cc2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80098e6:	e1ec      	b.n	8009cc2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098f0:	f040 8100 	bne.w	8009af4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80098f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80098f8:	2b40      	cmp	r3, #64	; 0x40
 80098fa:	f200 80b7 	bhi.w	8009a6c <UART_SetConfig+0x8d0>
 80098fe:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <UART_SetConfig+0x768>)
 8009900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009904:	08009a09 	.word	0x08009a09
 8009908:	08009a11 	.word	0x08009a11
 800990c:	08009a6d 	.word	0x08009a6d
 8009910:	08009a6d 	.word	0x08009a6d
 8009914:	08009a19 	.word	0x08009a19
 8009918:	08009a6d 	.word	0x08009a6d
 800991c:	08009a6d 	.word	0x08009a6d
 8009920:	08009a6d 	.word	0x08009a6d
 8009924:	08009a29 	.word	0x08009a29
 8009928:	08009a6d 	.word	0x08009a6d
 800992c:	08009a6d 	.word	0x08009a6d
 8009930:	08009a6d 	.word	0x08009a6d
 8009934:	08009a6d 	.word	0x08009a6d
 8009938:	08009a6d 	.word	0x08009a6d
 800993c:	08009a6d 	.word	0x08009a6d
 8009940:	08009a6d 	.word	0x08009a6d
 8009944:	08009a39 	.word	0x08009a39
 8009948:	08009a6d 	.word	0x08009a6d
 800994c:	08009a6d 	.word	0x08009a6d
 8009950:	08009a6d 	.word	0x08009a6d
 8009954:	08009a6d 	.word	0x08009a6d
 8009958:	08009a6d 	.word	0x08009a6d
 800995c:	08009a6d 	.word	0x08009a6d
 8009960:	08009a6d 	.word	0x08009a6d
 8009964:	08009a6d 	.word	0x08009a6d
 8009968:	08009a6d 	.word	0x08009a6d
 800996c:	08009a6d 	.word	0x08009a6d
 8009970:	08009a6d 	.word	0x08009a6d
 8009974:	08009a6d 	.word	0x08009a6d
 8009978:	08009a6d 	.word	0x08009a6d
 800997c:	08009a6d 	.word	0x08009a6d
 8009980:	08009a6d 	.word	0x08009a6d
 8009984:	08009a5f 	.word	0x08009a5f
 8009988:	08009a6d 	.word	0x08009a6d
 800998c:	08009a6d 	.word	0x08009a6d
 8009990:	08009a6d 	.word	0x08009a6d
 8009994:	08009a6d 	.word	0x08009a6d
 8009998:	08009a6d 	.word	0x08009a6d
 800999c:	08009a6d 	.word	0x08009a6d
 80099a0:	08009a6d 	.word	0x08009a6d
 80099a4:	08009a6d 	.word	0x08009a6d
 80099a8:	08009a6d 	.word	0x08009a6d
 80099ac:	08009a6d 	.word	0x08009a6d
 80099b0:	08009a6d 	.word	0x08009a6d
 80099b4:	08009a6d 	.word	0x08009a6d
 80099b8:	08009a6d 	.word	0x08009a6d
 80099bc:	08009a6d 	.word	0x08009a6d
 80099c0:	08009a6d 	.word	0x08009a6d
 80099c4:	08009a6d 	.word	0x08009a6d
 80099c8:	08009a6d 	.word	0x08009a6d
 80099cc:	08009a6d 	.word	0x08009a6d
 80099d0:	08009a6d 	.word	0x08009a6d
 80099d4:	08009a6d 	.word	0x08009a6d
 80099d8:	08009a6d 	.word	0x08009a6d
 80099dc:	08009a6d 	.word	0x08009a6d
 80099e0:	08009a6d 	.word	0x08009a6d
 80099e4:	08009a6d 	.word	0x08009a6d
 80099e8:	08009a6d 	.word	0x08009a6d
 80099ec:	08009a6d 	.word	0x08009a6d
 80099f0:	08009a6d 	.word	0x08009a6d
 80099f4:	08009a6d 	.word	0x08009a6d
 80099f8:	08009a6d 	.word	0x08009a6d
 80099fc:	08009a6d 	.word	0x08009a6d
 8009a00:	08009a6d 	.word	0x08009a6d
 8009a04:	08009a65 	.word	0x08009a65
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a08:	f7fd f802 	bl	8006a10 <HAL_RCC_GetPCLK1Freq>
 8009a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a0e:	e033      	b.n	8009a78 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a10:	f7fd f814 	bl	8006a3c <HAL_RCC_GetPCLK2Freq>
 8009a14:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a16:	e02f      	b.n	8009a78 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a18:	f107 0314 	add.w	r3, r7, #20
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe f99f 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a26:	e027      	b.n	8009a78 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a28:	f107 0308 	add.w	r3, r7, #8
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fae3 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a36:	e01f      	b.n	8009a78 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a38:	4b2b      	ldr	r3, [pc, #172]	; (8009ae8 <UART_SetConfig+0x94c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0320 	and.w	r3, r3, #32
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d009      	beq.n	8009a58 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a44:	4b28      	ldr	r3, [pc, #160]	; (8009ae8 <UART_SetConfig+0x94c>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	08db      	lsrs	r3, r3, #3
 8009a4a:	f003 0303 	and.w	r3, r3, #3
 8009a4e:	4a27      	ldr	r2, [pc, #156]	; (8009aec <UART_SetConfig+0x950>)
 8009a50:	fa22 f303 	lsr.w	r3, r2, r3
 8009a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a56:	e00f      	b.n	8009a78 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009a58:	4b24      	ldr	r3, [pc, #144]	; (8009aec <UART_SetConfig+0x950>)
 8009a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a5c:	e00c      	b.n	8009a78 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a5e:	4b24      	ldr	r3, [pc, #144]	; (8009af0 <UART_SetConfig+0x954>)
 8009a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a62:	e009      	b.n	8009a78 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a6a:	e005      	b.n	8009a78 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009a76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 8121 	beq.w	8009cc2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	4a17      	ldr	r2, [pc, #92]	; (8009ae4 <UART_SetConfig+0x948>)
 8009a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a92:	005a      	lsls	r2, r3, #1
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	085b      	lsrs	r3, r3, #1
 8009a9a:	441a      	add	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	2b0f      	cmp	r3, #15
 8009aac:	d916      	bls.n	8009adc <UART_SetConfig+0x940>
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ab4:	d212      	bcs.n	8009adc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f023 030f 	bic.w	r3, r3, #15
 8009abe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	085b      	lsrs	r3, r3, #1
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f003 0307 	and.w	r3, r3, #7
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009ad8:	60da      	str	r2, [r3, #12]
 8009ada:	e0f2      	b.n	8009cc2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ae2:	e0ee      	b.n	8009cc2 <UART_SetConfig+0xb26>
 8009ae4:	0800ae80 	.word	0x0800ae80
 8009ae8:	58024400 	.word	0x58024400
 8009aec:	03d09000 	.word	0x03d09000
 8009af0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009af4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009af8:	2b40      	cmp	r3, #64	; 0x40
 8009afa:	f200 80b7 	bhi.w	8009c6c <UART_SetConfig+0xad0>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <UART_SetConfig+0x968>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009c09 	.word	0x08009c09
 8009b08:	08009c11 	.word	0x08009c11
 8009b0c:	08009c6d 	.word	0x08009c6d
 8009b10:	08009c6d 	.word	0x08009c6d
 8009b14:	08009c19 	.word	0x08009c19
 8009b18:	08009c6d 	.word	0x08009c6d
 8009b1c:	08009c6d 	.word	0x08009c6d
 8009b20:	08009c6d 	.word	0x08009c6d
 8009b24:	08009c29 	.word	0x08009c29
 8009b28:	08009c6d 	.word	0x08009c6d
 8009b2c:	08009c6d 	.word	0x08009c6d
 8009b30:	08009c6d 	.word	0x08009c6d
 8009b34:	08009c6d 	.word	0x08009c6d
 8009b38:	08009c6d 	.word	0x08009c6d
 8009b3c:	08009c6d 	.word	0x08009c6d
 8009b40:	08009c6d 	.word	0x08009c6d
 8009b44:	08009c39 	.word	0x08009c39
 8009b48:	08009c6d 	.word	0x08009c6d
 8009b4c:	08009c6d 	.word	0x08009c6d
 8009b50:	08009c6d 	.word	0x08009c6d
 8009b54:	08009c6d 	.word	0x08009c6d
 8009b58:	08009c6d 	.word	0x08009c6d
 8009b5c:	08009c6d 	.word	0x08009c6d
 8009b60:	08009c6d 	.word	0x08009c6d
 8009b64:	08009c6d 	.word	0x08009c6d
 8009b68:	08009c6d 	.word	0x08009c6d
 8009b6c:	08009c6d 	.word	0x08009c6d
 8009b70:	08009c6d 	.word	0x08009c6d
 8009b74:	08009c6d 	.word	0x08009c6d
 8009b78:	08009c6d 	.word	0x08009c6d
 8009b7c:	08009c6d 	.word	0x08009c6d
 8009b80:	08009c6d 	.word	0x08009c6d
 8009b84:	08009c5f 	.word	0x08009c5f
 8009b88:	08009c6d 	.word	0x08009c6d
 8009b8c:	08009c6d 	.word	0x08009c6d
 8009b90:	08009c6d 	.word	0x08009c6d
 8009b94:	08009c6d 	.word	0x08009c6d
 8009b98:	08009c6d 	.word	0x08009c6d
 8009b9c:	08009c6d 	.word	0x08009c6d
 8009ba0:	08009c6d 	.word	0x08009c6d
 8009ba4:	08009c6d 	.word	0x08009c6d
 8009ba8:	08009c6d 	.word	0x08009c6d
 8009bac:	08009c6d 	.word	0x08009c6d
 8009bb0:	08009c6d 	.word	0x08009c6d
 8009bb4:	08009c6d 	.word	0x08009c6d
 8009bb8:	08009c6d 	.word	0x08009c6d
 8009bbc:	08009c6d 	.word	0x08009c6d
 8009bc0:	08009c6d 	.word	0x08009c6d
 8009bc4:	08009c6d 	.word	0x08009c6d
 8009bc8:	08009c6d 	.word	0x08009c6d
 8009bcc:	08009c6d 	.word	0x08009c6d
 8009bd0:	08009c6d 	.word	0x08009c6d
 8009bd4:	08009c6d 	.word	0x08009c6d
 8009bd8:	08009c6d 	.word	0x08009c6d
 8009bdc:	08009c6d 	.word	0x08009c6d
 8009be0:	08009c6d 	.word	0x08009c6d
 8009be4:	08009c6d 	.word	0x08009c6d
 8009be8:	08009c6d 	.word	0x08009c6d
 8009bec:	08009c6d 	.word	0x08009c6d
 8009bf0:	08009c6d 	.word	0x08009c6d
 8009bf4:	08009c6d 	.word	0x08009c6d
 8009bf8:	08009c6d 	.word	0x08009c6d
 8009bfc:	08009c6d 	.word	0x08009c6d
 8009c00:	08009c6d 	.word	0x08009c6d
 8009c04:	08009c65 	.word	0x08009c65
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c08:	f7fc ff02 	bl	8006a10 <HAL_RCC_GetPCLK1Freq>
 8009c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c0e:	e033      	b.n	8009c78 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c10:	f7fc ff14 	bl	8006a3c <HAL_RCC_GetPCLK2Freq>
 8009c14:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c16:	e02f      	b.n	8009c78 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c18:	f107 0314 	add.w	r3, r7, #20
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe f89f 	bl	8007d60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c26:	e027      	b.n	8009c78 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c28:	f107 0308 	add.w	r3, r7, #8
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fe f9e3 	bl	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c36:	e01f      	b.n	8009c78 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c38:	4b2c      	ldr	r3, [pc, #176]	; (8009cec <UART_SetConfig+0xb50>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0320 	and.w	r3, r3, #32
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d009      	beq.n	8009c58 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c44:	4b29      	ldr	r3, [pc, #164]	; (8009cec <UART_SetConfig+0xb50>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	08db      	lsrs	r3, r3, #3
 8009c4a:	f003 0303 	and.w	r3, r3, #3
 8009c4e:	4a28      	ldr	r2, [pc, #160]	; (8009cf0 <UART_SetConfig+0xb54>)
 8009c50:	fa22 f303 	lsr.w	r3, r2, r3
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c56:	e00f      	b.n	8009c78 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8009c58:	4b25      	ldr	r3, [pc, #148]	; (8009cf0 <UART_SetConfig+0xb54>)
 8009c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c5c:	e00c      	b.n	8009c78 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c5e:	4b25      	ldr	r3, [pc, #148]	; (8009cf4 <UART_SetConfig+0xb58>)
 8009c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c62:	e009      	b.n	8009c78 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c6a:	e005      	b.n	8009c78 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c76:	bf00      	nop
    }

    if (pclk != 0U)
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d021      	beq.n	8009cc2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	4a1d      	ldr	r2, [pc, #116]	; (8009cf8 <UART_SetConfig+0xb5c>)
 8009c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	085b      	lsrs	r3, r3, #1
 8009c96:	441a      	add	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	2b0f      	cmp	r3, #15
 8009ca8:	d908      	bls.n	8009cbc <UART_SetConfig+0xb20>
 8009caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb0:	d204      	bcs.n	8009cbc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cb8:	60da      	str	r2, [r3, #12]
 8009cba:	e002      	b.n	8009cc2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009cde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3738      	adds	r7, #56	; 0x38
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009cec:	58024400 	.word	0x58024400
 8009cf0:	03d09000 	.word	0x03d09000
 8009cf4:	003d0900 	.word	0x003d0900
 8009cf8:	0800ae80 	.word	0x0800ae80

08009cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00a      	beq.n	8009d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	430a      	orrs	r2, r1
 8009d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2a:	f003 0302 	and.w	r3, r3, #2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	430a      	orrs	r2, r1
 8009d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00a      	beq.n	8009d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d6e:	f003 0308 	and.w	r3, r3, #8
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00a      	beq.n	8009d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	430a      	orrs	r2, r1
 8009d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d90:	f003 0310 	and.w	r3, r3, #16
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00a      	beq.n	8009dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	430a      	orrs	r2, r1
 8009dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00a      	beq.n	8009dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01a      	beq.n	8009e12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	430a      	orrs	r2, r1
 8009df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dfa:	d10a      	bne.n	8009e12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00a      	beq.n	8009e34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	605a      	str	r2, [r3, #4]
  }
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af02      	add	r7, sp, #8
 8009e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e50:	f7f7 fad8 	bl	8001404 <HAL_GetTick>
 8009e54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0308 	and.w	r3, r3, #8
 8009e60:	2b08      	cmp	r3, #8
 8009e62:	d10e      	bne.n	8009e82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f82c 	bl	8009ed0 <UART_WaitOnFlagUntilTimeout>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e022      	b.n	8009ec8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d10e      	bne.n	8009eae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f816 	bl	8009ed0 <UART_WaitOnFlagUntilTimeout>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d001      	beq.n	8009eae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e00c      	b.n	8009ec8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	4613      	mov	r3, r2
 8009ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ee0:	e062      	b.n	8009fa8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee8:	d05e      	beq.n	8009fa8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eea:	f7f7 fa8b 	bl	8001404 <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d302      	bcc.n	8009f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d11d      	bne.n	8009f3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f0e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 0201 	bic.w	r2, r2, #1
 8009f1e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2220      	movs	r2, #32
 8009f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e045      	b.n	8009fc8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0304 	and.w	r3, r3, #4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d02e      	beq.n	8009fa8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f58:	d126      	bne.n	8009fa8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f62:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f72:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 0201 	bic.w	r2, r2, #1
 8009f82:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2220      	movs	r2, #32
 8009f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2220      	movs	r2, #32
 8009f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2220      	movs	r2, #32
 8009f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e00f      	b.n	8009fc8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	69da      	ldr	r2, [r3, #28]
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	bf0c      	ite	eq
 8009fb8:	2301      	moveq	r3, #1
 8009fba:	2300      	movne	r3, #0
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	79fb      	ldrb	r3, [r7, #7]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d08d      	beq.n	8009ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d101      	bne.n	8009fe6 <HAL_UARTEx_DisableFifoMode+0x16>
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	e027      	b.n	800a036 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2224      	movs	r2, #36	; 0x24
 8009ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 0201 	bic.w	r2, r2, #1
 800a00c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a014:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2220      	movs	r2, #32
 800a028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr

0800a042 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a052:	2b01      	cmp	r3, #1
 800a054:	d101      	bne.n	800a05a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a056:	2302      	movs	r3, #2
 800a058:	e02d      	b.n	800a0b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2224      	movs	r2, #36	; 0x24
 800a066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f022 0201 	bic.w	r2, r2, #1
 800a080:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f850 	bl	800a13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d101      	bne.n	800a0d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	e02d      	b.n	800a132 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2224      	movs	r2, #36	; 0x24
 800a0e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0201 	bic.w	r2, r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f812 	bl	800a13c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2220      	movs	r2, #32
 800a124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b089      	sub	sp, #36	; 0x24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a144:	4a2f      	ldr	r2, [pc, #188]	; (800a204 <UARTEx_SetNbDataToProcess+0xc8>)
 800a146:	f107 0314 	add.w	r3, r7, #20
 800a14a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a14e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a152:	4a2d      	ldr	r2, [pc, #180]	; (800a208 <UARTEx_SetNbDataToProcess+0xcc>)
 800a154:	f107 030c 	add.w	r3, r7, #12
 800a158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a15c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a164:	2b00      	cmp	r3, #0
 800a166:	d108      	bne.n	800a17a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a178:	e03d      	b.n	800a1f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a17a:	2310      	movs	r3, #16
 800a17c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a17e:	2310      	movs	r3, #16
 800a180:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	0e5b      	lsrs	r3, r3, #25
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f003 0307 	and.w	r3, r3, #7
 800a190:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	0f5b      	lsrs	r3, r3, #29
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	f003 0307 	and.w	r3, r3, #7
 800a1a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a1a2:	7fbb      	ldrb	r3, [r7, #30]
 800a1a4:	7f3a      	ldrb	r2, [r7, #28]
 800a1a6:	f107 0120 	add.w	r1, r7, #32
 800a1aa:	440a      	add	r2, r1
 800a1ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	7f3a      	ldrb	r2, [r7, #28]
 800a1b6:	f107 0120 	add.w	r1, r7, #32
 800a1ba:	440a      	add	r2, r1
 800a1bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a1c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a1cc:	7ffb      	ldrb	r3, [r7, #31]
 800a1ce:	7f7a      	ldrb	r2, [r7, #29]
 800a1d0:	f107 0120 	add.w	r1, r7, #32
 800a1d4:	440a      	add	r2, r1
 800a1d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1da:	fb02 f303 	mul.w	r3, r2, r3
 800a1de:	7f7a      	ldrb	r2, [r7, #29]
 800a1e0:	f107 0120 	add.w	r1, r7, #32
 800a1e4:	440a      	add	r2, r1
 800a1e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a1ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a1f6:	bf00      	nop
 800a1f8:	3724      	adds	r7, #36	; 0x24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	0800ae58 	.word	0x0800ae58
 800a208:	0800ae60 	.word	0x0800ae60

0800a20c <__libc_init_array>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	4e0d      	ldr	r6, [pc, #52]	; (800a244 <__libc_init_array+0x38>)
 800a210:	4c0d      	ldr	r4, [pc, #52]	; (800a248 <__libc_init_array+0x3c>)
 800a212:	1ba4      	subs	r4, r4, r6
 800a214:	10a4      	asrs	r4, r4, #2
 800a216:	2500      	movs	r5, #0
 800a218:	42a5      	cmp	r5, r4
 800a21a:	d109      	bne.n	800a230 <__libc_init_array+0x24>
 800a21c:	4e0b      	ldr	r6, [pc, #44]	; (800a24c <__libc_init_array+0x40>)
 800a21e:	4c0c      	ldr	r4, [pc, #48]	; (800a250 <__libc_init_array+0x44>)
 800a220:	f000 fe0c 	bl	800ae3c <_init>
 800a224:	1ba4      	subs	r4, r4, r6
 800a226:	10a4      	asrs	r4, r4, #2
 800a228:	2500      	movs	r5, #0
 800a22a:	42a5      	cmp	r5, r4
 800a22c:	d105      	bne.n	800a23a <__libc_init_array+0x2e>
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a234:	4798      	blx	r3
 800a236:	3501      	adds	r5, #1
 800a238:	e7ee      	b.n	800a218 <__libc_init_array+0xc>
 800a23a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a23e:	4798      	blx	r3
 800a240:	3501      	adds	r5, #1
 800a242:	e7f2      	b.n	800a22a <__libc_init_array+0x1e>
 800a244:	0800b078 	.word	0x0800b078
 800a248:	0800b078 	.word	0x0800b078
 800a24c:	0800b078 	.word	0x0800b078
 800a250:	0800b07c 	.word	0x0800b07c

0800a254 <memset>:
 800a254:	4402      	add	r2, r0
 800a256:	4603      	mov	r3, r0
 800a258:	4293      	cmp	r3, r2
 800a25a:	d100      	bne.n	800a25e <memset+0xa>
 800a25c:	4770      	bx	lr
 800a25e:	f803 1b01 	strb.w	r1, [r3], #1
 800a262:	e7f9      	b.n	800a258 <memset+0x4>
 800a264:	0000      	movs	r0, r0
	...

0800a268 <sin>:
 800a268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a26a:	eeb0 7b40 	vmov.f64	d7, d0
 800a26e:	ee17 3a90 	vmov	r3, s15
 800a272:	4a19      	ldr	r2, [pc, #100]	; (800a2d8 <sin+0x70>)
 800a274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a278:	4293      	cmp	r3, r2
 800a27a:	dc05      	bgt.n	800a288 <sin+0x20>
 800a27c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800a2d0 <sin+0x68>
 800a280:	2000      	movs	r0, #0
 800a282:	f000 fc71 	bl	800ab68 <__kernel_sin>
 800a286:	e004      	b.n	800a292 <sin+0x2a>
 800a288:	4a14      	ldr	r2, [pc, #80]	; (800a2dc <sin+0x74>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	dd04      	ble.n	800a298 <sin+0x30>
 800a28e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a292:	b005      	add	sp, #20
 800a294:	f85d fb04 	ldr.w	pc, [sp], #4
 800a298:	4668      	mov	r0, sp
 800a29a:	f000 f821 	bl	800a2e0 <__ieee754_rem_pio2>
 800a29e:	f000 0003 	and.w	r0, r0, #3
 800a2a2:	2801      	cmp	r0, #1
 800a2a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2a8:	ed9d 0b00 	vldr	d0, [sp]
 800a2ac:	d004      	beq.n	800a2b8 <sin+0x50>
 800a2ae:	2802      	cmp	r0, #2
 800a2b0:	d005      	beq.n	800a2be <sin+0x56>
 800a2b2:	b950      	cbnz	r0, 800a2ca <sin+0x62>
 800a2b4:	2001      	movs	r0, #1
 800a2b6:	e7e4      	b.n	800a282 <sin+0x1a>
 800a2b8:	f000 f94e 	bl	800a558 <__kernel_cos>
 800a2bc:	e7e9      	b.n	800a292 <sin+0x2a>
 800a2be:	2001      	movs	r0, #1
 800a2c0:	f000 fc52 	bl	800ab68 <__kernel_sin>
 800a2c4:	eeb1 0b40 	vneg.f64	d0, d0
 800a2c8:	e7e3      	b.n	800a292 <sin+0x2a>
 800a2ca:	f000 f945 	bl	800a558 <__kernel_cos>
 800a2ce:	e7f9      	b.n	800a2c4 <sin+0x5c>
	...
 800a2d8:	3fe921fb 	.word	0x3fe921fb
 800a2dc:	7fefffff 	.word	0x7fefffff

0800a2e0 <__ieee754_rem_pio2>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	eeb0 7b40 	vmov.f64	d7, d0
 800a2e6:	ee17 5a90 	vmov	r5, s15
 800a2ea:	4b95      	ldr	r3, [pc, #596]	; (800a540 <__ieee754_rem_pio2+0x260>)
 800a2ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a2f0:	429e      	cmp	r6, r3
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	dc07      	bgt.n	800a308 <__ieee754_rem_pio2+0x28>
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	ed84 0b00 	vstr	d0, [r4]
 800a300:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a304:	2000      	movs	r0, #0
 800a306:	e01b      	b.n	800a340 <__ieee754_rem_pio2+0x60>
 800a308:	4b8e      	ldr	r3, [pc, #568]	; (800a544 <__ieee754_rem_pio2+0x264>)
 800a30a:	429e      	cmp	r6, r3
 800a30c:	dc3b      	bgt.n	800a386 <__ieee754_rem_pio2+0xa6>
 800a30e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800a312:	2d00      	cmp	r5, #0
 800a314:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800a500 <__ieee754_rem_pio2+0x220>
 800a318:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800a31c:	dd19      	ble.n	800a352 <__ieee754_rem_pio2+0x72>
 800a31e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a322:	429e      	cmp	r6, r3
 800a324:	d00e      	beq.n	800a344 <__ieee754_rem_pio2+0x64>
 800a326:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a508 <__ieee754_rem_pio2+0x228>
 800a32a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800a32e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a332:	ed84 5b00 	vstr	d5, [r4]
 800a336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a33a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a33e:	2001      	movs	r0, #1
 800a340:	b008      	add	sp, #32
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800a510 <__ieee754_rem_pio2+0x230>
 800a348:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a34c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800a518 <__ieee754_rem_pio2+0x238>
 800a350:	e7eb      	b.n	800a32a <__ieee754_rem_pio2+0x4a>
 800a352:	429e      	cmp	r6, r3
 800a354:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a358:	d00e      	beq.n	800a378 <__ieee754_rem_pio2+0x98>
 800a35a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800a508 <__ieee754_rem_pio2+0x228>
 800a35e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a362:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a366:	ed84 5b00 	vstr	d5, [r4]
 800a36a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a36e:	f04f 30ff 	mov.w	r0, #4294967295
 800a372:	ed84 7b02 	vstr	d7, [r4, #8]
 800a376:	e7e3      	b.n	800a340 <__ieee754_rem_pio2+0x60>
 800a378:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800a510 <__ieee754_rem_pio2+0x230>
 800a37c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a380:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800a518 <__ieee754_rem_pio2+0x238>
 800a384:	e7eb      	b.n	800a35e <__ieee754_rem_pio2+0x7e>
 800a386:	4b70      	ldr	r3, [pc, #448]	; (800a548 <__ieee754_rem_pio2+0x268>)
 800a388:	429e      	cmp	r6, r3
 800a38a:	dc6c      	bgt.n	800a466 <__ieee754_rem_pio2+0x186>
 800a38c:	f000 fc44 	bl	800ac18 <fabs>
 800a390:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a394:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800a520 <__ieee754_rem_pio2+0x240>
 800a398:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a39c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a3a0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a3a4:	ee17 0a90 	vmov	r0, s15
 800a3a8:	eeb1 5b44 	vneg.f64	d5, d4
 800a3ac:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800a500 <__ieee754_rem_pio2+0x220>
 800a3b0:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a3b4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800a508 <__ieee754_rem_pio2+0x228>
 800a3b8:	281f      	cmp	r0, #31
 800a3ba:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a3be:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a3c2:	dc08      	bgt.n	800a3d6 <__ieee754_rem_pio2+0xf6>
 800a3c4:	1e42      	subs	r2, r0, #1
 800a3c6:	4b61      	ldr	r3, [pc, #388]	; (800a54c <__ieee754_rem_pio2+0x26c>)
 800a3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3cc:	42b3      	cmp	r3, r6
 800a3ce:	d002      	beq.n	800a3d6 <__ieee754_rem_pio2+0xf6>
 800a3d0:	ed84 6b00 	vstr	d6, [r4]
 800a3d4:	e022      	b.n	800a41c <__ieee754_rem_pio2+0x13c>
 800a3d6:	ee16 3a90 	vmov	r3, s13
 800a3da:	1536      	asrs	r6, r6, #20
 800a3dc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a3e0:	1af3      	subs	r3, r6, r3
 800a3e2:	2b10      	cmp	r3, #16
 800a3e4:	ddf4      	ble.n	800a3d0 <__ieee754_rem_pio2+0xf0>
 800a3e6:	eeb0 6b40 	vmov.f64	d6, d0
 800a3ea:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800a510 <__ieee754_rem_pio2+0x230>
 800a3ee:	eea5 6b03 	vfma.f64	d6, d5, d3
 800a3f2:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a3f6:	eea5 7b03 	vfma.f64	d7, d5, d3
 800a3fa:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800a518 <__ieee754_rem_pio2+0x238>
 800a3fe:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800a402:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a406:	ee13 3a90 	vmov	r3, s7
 800a40a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a40e:	1af6      	subs	r6, r6, r3
 800a410:	2e31      	cmp	r6, #49	; 0x31
 800a412:	dc17      	bgt.n	800a444 <__ieee754_rem_pio2+0x164>
 800a414:	eeb0 0b46 	vmov.f64	d0, d6
 800a418:	ed84 3b00 	vstr	d3, [r4]
 800a41c:	ed94 6b00 	vldr	d6, [r4]
 800a420:	2d00      	cmp	r5, #0
 800a422:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a426:	ee30 7b47 	vsub.f64	d7, d0, d7
 800a42a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a42e:	da87      	bge.n	800a340 <__ieee754_rem_pio2+0x60>
 800a430:	eeb1 6b46 	vneg.f64	d6, d6
 800a434:	ed84 6b00 	vstr	d6, [r4]
 800a438:	eeb1 7b47 	vneg.f64	d7, d7
 800a43c:	4240      	negs	r0, r0
 800a43e:	ed84 7b02 	vstr	d7, [r4, #8]
 800a442:	e77d      	b.n	800a340 <__ieee754_rem_pio2+0x60>
 800a444:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800a528 <__ieee754_rem_pio2+0x248>
 800a448:	eeb0 0b46 	vmov.f64	d0, d6
 800a44c:	eea5 0b03 	vfma.f64	d0, d5, d3
 800a450:	ee36 7b40 	vsub.f64	d7, d6, d0
 800a454:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800a530 <__ieee754_rem_pio2+0x250>
 800a458:	eea5 7b03 	vfma.f64	d7, d5, d3
 800a45c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800a460:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a464:	e7b4      	b.n	800a3d0 <__ieee754_rem_pio2+0xf0>
 800a466:	4b3a      	ldr	r3, [pc, #232]	; (800a550 <__ieee754_rem_pio2+0x270>)
 800a468:	429e      	cmp	r6, r3
 800a46a:	dd06      	ble.n	800a47a <__ieee754_rem_pio2+0x19a>
 800a46c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a470:	ed80 7b02 	vstr	d7, [r0, #8]
 800a474:	ed80 7b00 	vstr	d7, [r0]
 800a478:	e744      	b.n	800a304 <__ieee754_rem_pio2+0x24>
 800a47a:	1532      	asrs	r2, r6, #20
 800a47c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800a480:	ee10 0a10 	vmov	r0, s0
 800a484:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800a488:	ec41 0b17 	vmov	d7, r0, r1
 800a48c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a490:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800a538 <__ieee754_rem_pio2+0x258>
 800a494:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a498:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a49c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a4a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a4a4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a4a8:	a908      	add	r1, sp, #32
 800a4aa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a4ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a4b2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a4b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a4ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4be:	2303      	movs	r3, #3
 800a4c0:	ed31 7b02 	vldmdb	r1!, {d7}
 800a4c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4cc:	f103 30ff 	add.w	r0, r3, #4294967295
 800a4d0:	d013      	beq.n	800a4fa <__ieee754_rem_pio2+0x21a>
 800a4d2:	4920      	ldr	r1, [pc, #128]	; (800a554 <__ieee754_rem_pio2+0x274>)
 800a4d4:	9101      	str	r1, [sp, #4]
 800a4d6:	2102      	movs	r1, #2
 800a4d8:	9100      	str	r1, [sp, #0]
 800a4da:	a802      	add	r0, sp, #8
 800a4dc:	4621      	mov	r1, r4
 800a4de:	f000 f8a7 	bl	800a630 <__kernel_rem_pio2>
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	f6bf af2c 	bge.w	800a340 <__ieee754_rem_pio2+0x60>
 800a4e8:	ed94 7b00 	vldr	d7, [r4]
 800a4ec:	eeb1 7b47 	vneg.f64	d7, d7
 800a4f0:	ed84 7b00 	vstr	d7, [r4]
 800a4f4:	ed94 7b02 	vldr	d7, [r4, #8]
 800a4f8:	e79e      	b.n	800a438 <__ieee754_rem_pio2+0x158>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	e7e0      	b.n	800a4c0 <__ieee754_rem_pio2+0x1e0>
 800a4fe:	bf00      	nop
 800a500:	54400000 	.word	0x54400000
 800a504:	3ff921fb 	.word	0x3ff921fb
 800a508:	1a626331 	.word	0x1a626331
 800a50c:	3dd0b461 	.word	0x3dd0b461
 800a510:	1a600000 	.word	0x1a600000
 800a514:	3dd0b461 	.word	0x3dd0b461
 800a518:	2e037073 	.word	0x2e037073
 800a51c:	3ba3198a 	.word	0x3ba3198a
 800a520:	6dc9c883 	.word	0x6dc9c883
 800a524:	3fe45f30 	.word	0x3fe45f30
 800a528:	2e000000 	.word	0x2e000000
 800a52c:	3ba3198a 	.word	0x3ba3198a
 800a530:	252049c1 	.word	0x252049c1
 800a534:	397b839a 	.word	0x397b839a
 800a538:	00000000 	.word	0x00000000
 800a53c:	41700000 	.word	0x41700000
 800a540:	3fe921fb 	.word	0x3fe921fb
 800a544:	4002d97b 	.word	0x4002d97b
 800a548:	413921fb 	.word	0x413921fb
 800a54c:	0800ae98 	.word	0x0800ae98
 800a550:	7fefffff 	.word	0x7fefffff
 800a554:	0800af18 	.word	0x0800af18

0800a558 <__kernel_cos>:
 800a558:	ee10 1a90 	vmov	r1, s1
 800a55c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a560:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a564:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800a568:	da05      	bge.n	800a576 <__kernel_cos+0x1e>
 800a56a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800a56e:	ee16 3a90 	vmov	r3, s13
 800a572:	2b00      	cmp	r3, #0
 800a574:	d03d      	beq.n	800a5f2 <__kernel_cos+0x9a>
 800a576:	ee20 4b00 	vmul.f64	d4, d0, d0
 800a57a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a57e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800a5f8 <__kernel_cos+0xa0>
 800a582:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800a586:	ee24 6b06 	vmul.f64	d6, d4, d6
 800a58a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800a600 <__kernel_cos+0xa8>
 800a58e:	eea4 5b03 	vfma.f64	d5, d4, d3
 800a592:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800a608 <__kernel_cos+0xb0>
 800a596:	eea5 3b04 	vfma.f64	d3, d5, d4
 800a59a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800a610 <__kernel_cos+0xb8>
 800a59e:	eea3 5b04 	vfma.f64	d5, d3, d4
 800a5a2:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800a618 <__kernel_cos+0xc0>
 800a5a6:	4b20      	ldr	r3, [pc, #128]	; (800a628 <__kernel_cos+0xd0>)
 800a5a8:	eea5 3b04 	vfma.f64	d3, d5, d4
 800a5ac:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800a620 <__kernel_cos+0xc8>
 800a5b0:	4299      	cmp	r1, r3
 800a5b2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800a5b6:	ee25 5b04 	vmul.f64	d5, d5, d4
 800a5ba:	eea4 1b05 	vfma.f64	d1, d4, d5
 800a5be:	dc04      	bgt.n	800a5ca <__kernel_cos+0x72>
 800a5c0:	ee36 6b41 	vsub.f64	d6, d6, d1
 800a5c4:	ee37 0b46 	vsub.f64	d0, d7, d6
 800a5c8:	4770      	bx	lr
 800a5ca:	4b18      	ldr	r3, [pc, #96]	; (800a62c <__kernel_cos+0xd4>)
 800a5cc:	4299      	cmp	r1, r3
 800a5ce:	dc0d      	bgt.n	800a5ec <__kernel_cos+0x94>
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800a5d6:	ec43 2b15 	vmov	d5, r2, r3
 800a5da:	ee37 0b45 	vsub.f64	d0, d7, d5
 800a5de:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5e2:	ee36 6b41 	vsub.f64	d6, d6, d1
 800a5e6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a5ea:	4770      	bx	lr
 800a5ec:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800a5f0:	e7f3      	b.n	800a5da <__kernel_cos+0x82>
 800a5f2:	eeb0 0b47 	vmov.f64	d0, d7
 800a5f6:	4770      	bx	lr
 800a5f8:	be8838d4 	.word	0xbe8838d4
 800a5fc:	bda8fae9 	.word	0xbda8fae9
 800a600:	bdb4b1c4 	.word	0xbdb4b1c4
 800a604:	3e21ee9e 	.word	0x3e21ee9e
 800a608:	809c52ad 	.word	0x809c52ad
 800a60c:	be927e4f 	.word	0xbe927e4f
 800a610:	19cb1590 	.word	0x19cb1590
 800a614:	3efa01a0 	.word	0x3efa01a0
 800a618:	16c15177 	.word	0x16c15177
 800a61c:	bf56c16c 	.word	0xbf56c16c
 800a620:	5555554c 	.word	0x5555554c
 800a624:	3fa55555 	.word	0x3fa55555
 800a628:	3fd33332 	.word	0x3fd33332
 800a62c:	3fe90000 	.word	0x3fe90000

0800a630 <__kernel_rem_pio2>:
 800a630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a634:	ed2d 8b06 	vpush	{d8-d10}
 800a638:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800a63c:	469b      	mov	fp, r3
 800a63e:	460e      	mov	r6, r1
 800a640:	4bc7      	ldr	r3, [pc, #796]	; (800a960 <__kernel_rem_pio2+0x330>)
 800a642:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a644:	9002      	str	r0, [sp, #8]
 800a646:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800a64a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800a64c:	1ed1      	subs	r1, r2, #3
 800a64e:	2318      	movs	r3, #24
 800a650:	f06f 0417 	mvn.w	r4, #23
 800a654:	fb91 f1f3 	sdiv	r1, r1, r3
 800a658:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800a65c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800a660:	fb01 4404 	mla	r4, r1, r4, r4
 800a664:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800a948 <__kernel_rem_pio2+0x318>
 800a668:	4414      	add	r4, r2
 800a66a:	eba1 050a 	sub.w	r5, r1, sl
 800a66e:	aa1a      	add	r2, sp, #104	; 0x68
 800a670:	eb09 070a 	add.w	r7, r9, sl
 800a674:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800a678:	4696      	mov	lr, r2
 800a67a:	2300      	movs	r3, #0
 800a67c:	42bb      	cmp	r3, r7
 800a67e:	dd0f      	ble.n	800a6a0 <__kernel_rem_pio2+0x70>
 800a680:	af6a      	add	r7, sp, #424	; 0x1a8
 800a682:	2200      	movs	r2, #0
 800a684:	454a      	cmp	r2, r9
 800a686:	dc28      	bgt.n	800a6da <__kernel_rem_pio2+0xaa>
 800a688:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800a68c:	eb0b 0302 	add.w	r3, fp, r2
 800a690:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800a694:	9d02      	ldr	r5, [sp, #8]
 800a696:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800a948 <__kernel_rem_pio2+0x318>
 800a69a:	f04f 0c00 	mov.w	ip, #0
 800a69e:	e016      	b.n	800a6ce <__kernel_rem_pio2+0x9e>
 800a6a0:	42dd      	cmn	r5, r3
 800a6a2:	d409      	bmi.n	800a6b8 <__kernel_rem_pio2+0x88>
 800a6a4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800a6a8:	ee07 2a90 	vmov	s15, r2
 800a6ac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a6b0:	ecae 7b02 	vstmia	lr!, {d7}
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	e7e1      	b.n	800a67c <__kernel_rem_pio2+0x4c>
 800a6b8:	eeb0 7b46 	vmov.f64	d7, d6
 800a6bc:	e7f8      	b.n	800a6b0 <__kernel_rem_pio2+0x80>
 800a6be:	ecb5 5b02 	vldmia	r5!, {d5}
 800a6c2:	ed33 6b02 	vldmdb	r3!, {d6}
 800a6c6:	f10c 0c01 	add.w	ip, ip, #1
 800a6ca:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a6ce:	45d4      	cmp	ip, sl
 800a6d0:	ddf5      	ble.n	800a6be <__kernel_rem_pio2+0x8e>
 800a6d2:	eca7 7b02 	vstmia	r7!, {d7}
 800a6d6:	3201      	adds	r2, #1
 800a6d8:	e7d4      	b.n	800a684 <__kernel_rem_pio2+0x54>
 800a6da:	ab06      	add	r3, sp, #24
 800a6dc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a6e0:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800a950 <__kernel_rem_pio2+0x320>
 800a6e4:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800a958 <__kernel_rem_pio2+0x328>
 800a6e8:	9304      	str	r3, [sp, #16]
 800a6ea:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800a6ee:	9303      	str	r3, [sp, #12]
 800a6f0:	464d      	mov	r5, r9
 800a6f2:	ab92      	add	r3, sp, #584	; 0x248
 800a6f4:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800a6f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6fc:	3f01      	subs	r7, #1
 800a6fe:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800a702:	00ff      	lsls	r7, r7, #3
 800a704:	ab92      	add	r3, sp, #584	; 0x248
 800a706:	19da      	adds	r2, r3, r7
 800a708:	3a98      	subs	r2, #152	; 0x98
 800a70a:	2300      	movs	r3, #0
 800a70c:	1ae9      	subs	r1, r5, r3
 800a70e:	2900      	cmp	r1, #0
 800a710:	dc4e      	bgt.n	800a7b0 <__kernel_rem_pio2+0x180>
 800a712:	4620      	mov	r0, r4
 800a714:	f000 fb04 	bl	800ad20 <scalbn>
 800a718:	eeb0 8b40 	vmov.f64	d8, d0
 800a71c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800a720:	ee28 0b00 	vmul.f64	d0, d8, d0
 800a724:	f000 fa84 	bl	800ac30 <floor>
 800a728:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800a72c:	eea0 8b47 	vfms.f64	d8, d0, d7
 800a730:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800a734:	2c00      	cmp	r4, #0
 800a736:	edcd 7a01 	vstr	s15, [sp, #4]
 800a73a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a73e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a742:	dd4a      	ble.n	800a7da <__kernel_rem_pio2+0x1aa>
 800a744:	1e69      	subs	r1, r5, #1
 800a746:	ab06      	add	r3, sp, #24
 800a748:	f1c4 0018 	rsb	r0, r4, #24
 800a74c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800a750:	9a01      	ldr	r2, [sp, #4]
 800a752:	fa4c f300 	asr.w	r3, ip, r0
 800a756:	441a      	add	r2, r3
 800a758:	4083      	lsls	r3, r0
 800a75a:	9201      	str	r2, [sp, #4]
 800a75c:	ebac 0203 	sub.w	r2, ip, r3
 800a760:	ab06      	add	r3, sp, #24
 800a762:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800a766:	f1c4 0317 	rsb	r3, r4, #23
 800a76a:	fa42 f803 	asr.w	r8, r2, r3
 800a76e:	f1b8 0f00 	cmp.w	r8, #0
 800a772:	dd43      	ble.n	800a7fc <__kernel_rem_pio2+0x1cc>
 800a774:	9b01      	ldr	r3, [sp, #4]
 800a776:	2000      	movs	r0, #0
 800a778:	3301      	adds	r3, #1
 800a77a:	9301      	str	r3, [sp, #4]
 800a77c:	4601      	mov	r1, r0
 800a77e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800a782:	4285      	cmp	r5, r0
 800a784:	dc6e      	bgt.n	800a864 <__kernel_rem_pio2+0x234>
 800a786:	2c00      	cmp	r4, #0
 800a788:	dd04      	ble.n	800a794 <__kernel_rem_pio2+0x164>
 800a78a:	2c01      	cmp	r4, #1
 800a78c:	d07f      	beq.n	800a88e <__kernel_rem_pio2+0x25e>
 800a78e:	2c02      	cmp	r4, #2
 800a790:	f000 8087 	beq.w	800a8a2 <__kernel_rem_pio2+0x272>
 800a794:	f1b8 0f02 	cmp.w	r8, #2
 800a798:	d130      	bne.n	800a7fc <__kernel_rem_pio2+0x1cc>
 800a79a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a79e:	ee30 8b48 	vsub.f64	d8, d0, d8
 800a7a2:	b359      	cbz	r1, 800a7fc <__kernel_rem_pio2+0x1cc>
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f000 fabb 	bl	800ad20 <scalbn>
 800a7aa:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a7ae:	e025      	b.n	800a7fc <__kernel_rem_pio2+0x1cc>
 800a7b0:	ee20 7b09 	vmul.f64	d7, d0, d9
 800a7b4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a7b8:	a806      	add	r0, sp, #24
 800a7ba:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800a7be:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800a7c2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a7c6:	ee10 1a10 	vmov	r1, s0
 800a7ca:	ed32 0b02 	vldmdb	r2!, {d0}
 800a7ce:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800a7d2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	e798      	b.n	800a70c <__kernel_rem_pio2+0xdc>
 800a7da:	d106      	bne.n	800a7ea <__kernel_rem_pio2+0x1ba>
 800a7dc:	1e6b      	subs	r3, r5, #1
 800a7de:	aa06      	add	r2, sp, #24
 800a7e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a7e4:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800a7e8:	e7c1      	b.n	800a76e <__kernel_rem_pio2+0x13e>
 800a7ea:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a7ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f6:	da32      	bge.n	800a85e <__kernel_rem_pio2+0x22e>
 800a7f8:	f04f 0800 	mov.w	r8, #0
 800a7fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a804:	f040 80b0 	bne.w	800a968 <__kernel_rem_pio2+0x338>
 800a808:	1e6b      	subs	r3, r5, #1
 800a80a:	4618      	mov	r0, r3
 800a80c:	2200      	movs	r2, #0
 800a80e:	4548      	cmp	r0, r9
 800a810:	da4e      	bge.n	800a8b0 <__kernel_rem_pio2+0x280>
 800a812:	2a00      	cmp	r2, #0
 800a814:	f000 8088 	beq.w	800a928 <__kernel_rem_pio2+0x2f8>
 800a818:	aa06      	add	r2, sp, #24
 800a81a:	3c18      	subs	r4, #24
 800a81c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a820:	2900      	cmp	r1, #0
 800a822:	f000 808e 	beq.w	800a942 <__kernel_rem_pio2+0x312>
 800a826:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a82a:	4620      	mov	r0, r4
 800a82c:	9302      	str	r3, [sp, #8]
 800a82e:	f000 fa77 	bl	800ad20 <scalbn>
 800a832:	9b02      	ldr	r3, [sp, #8]
 800a834:	aa6a      	add	r2, sp, #424	; 0x1a8
 800a836:	00d9      	lsls	r1, r3, #3
 800a838:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800a950 <__kernel_rem_pio2+0x320>
 800a83c:	1850      	adds	r0, r2, r1
 800a83e:	f100 0508 	add.w	r5, r0, #8
 800a842:	461c      	mov	r4, r3
 800a844:	2c00      	cmp	r4, #0
 800a846:	f280 80bd 	bge.w	800a9c4 <__kernel_rem_pio2+0x394>
 800a84a:	2500      	movs	r5, #0
 800a84c:	1b5c      	subs	r4, r3, r5
 800a84e:	2c00      	cmp	r4, #0
 800a850:	f2c0 80dd 	blt.w	800aa0e <__kernel_rem_pio2+0x3de>
 800a854:	4f43      	ldr	r7, [pc, #268]	; (800a964 <__kernel_rem_pio2+0x334>)
 800a856:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800a948 <__kernel_rem_pio2+0x318>
 800a85a:	2400      	movs	r4, #0
 800a85c:	e0cb      	b.n	800a9f6 <__kernel_rem_pio2+0x3c6>
 800a85e:	f04f 0802 	mov.w	r8, #2
 800a862:	e787      	b.n	800a774 <__kernel_rem_pio2+0x144>
 800a864:	ab06      	add	r3, sp, #24
 800a866:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a86a:	b949      	cbnz	r1, 800a880 <__kernel_rem_pio2+0x250>
 800a86c:	b12b      	cbz	r3, 800a87a <__kernel_rem_pio2+0x24a>
 800a86e:	aa06      	add	r2, sp, #24
 800a870:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a874:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a878:	2301      	movs	r3, #1
 800a87a:	3001      	adds	r0, #1
 800a87c:	4619      	mov	r1, r3
 800a87e:	e780      	b.n	800a782 <__kernel_rem_pio2+0x152>
 800a880:	aa06      	add	r2, sp, #24
 800a882:	ebac 0303 	sub.w	r3, ip, r3
 800a886:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a88a:	460b      	mov	r3, r1
 800a88c:	e7f5      	b.n	800a87a <__kernel_rem_pio2+0x24a>
 800a88e:	1e68      	subs	r0, r5, #1
 800a890:	ab06      	add	r3, sp, #24
 800a892:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a896:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a89a:	aa06      	add	r2, sp, #24
 800a89c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a8a0:	e778      	b.n	800a794 <__kernel_rem_pio2+0x164>
 800a8a2:	1e68      	subs	r0, r5, #1
 800a8a4:	ab06      	add	r3, sp, #24
 800a8a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a8aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a8ae:	e7f4      	b.n	800a89a <__kernel_rem_pio2+0x26a>
 800a8b0:	a906      	add	r1, sp, #24
 800a8b2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a8b6:	3801      	subs	r0, #1
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	e7a8      	b.n	800a80e <__kernel_rem_pio2+0x1de>
 800a8bc:	f10c 0c01 	add.w	ip, ip, #1
 800a8c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8c4:	2a00      	cmp	r2, #0
 800a8c6:	d0f9      	beq.n	800a8bc <__kernel_rem_pio2+0x28c>
 800a8c8:	eb0b 0305 	add.w	r3, fp, r5
 800a8cc:	aa1a      	add	r2, sp, #104	; 0x68
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	1898      	adds	r0, r3, r2
 800a8d2:	3008      	adds	r0, #8
 800a8d4:	1c69      	adds	r1, r5, #1
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	2200      	movs	r2, #0
 800a8da:	4465      	add	r5, ip
 800a8dc:	9005      	str	r0, [sp, #20]
 800a8de:	428d      	cmp	r5, r1
 800a8e0:	f6ff af07 	blt.w	800a6f2 <__kernel_rem_pio2+0xc2>
 800a8e4:	a81a      	add	r0, sp, #104	; 0x68
 800a8e6:	eb02 0c03 	add.w	ip, r2, r3
 800a8ea:	4484      	add	ip, r0
 800a8ec:	9803      	ldr	r0, [sp, #12]
 800a8ee:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a8f2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800a8f6:	9001      	str	r0, [sp, #4]
 800a8f8:	ee07 0a90 	vmov	s15, r0
 800a8fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a900:	9805      	ldr	r0, [sp, #20]
 800a902:	ed8c 7b00 	vstr	d7, [ip]
 800a906:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a948 <__kernel_rem_pio2+0x318>
 800a90a:	eb00 0802 	add.w	r8, r0, r2
 800a90e:	f04f 0c00 	mov.w	ip, #0
 800a912:	45d4      	cmp	ip, sl
 800a914:	dd0c      	ble.n	800a930 <__kernel_rem_pio2+0x300>
 800a916:	eb02 0c07 	add.w	ip, r2, r7
 800a91a:	a86a      	add	r0, sp, #424	; 0x1a8
 800a91c:	4484      	add	ip, r0
 800a91e:	ed8c 7b02 	vstr	d7, [ip, #8]
 800a922:	3101      	adds	r1, #1
 800a924:	3208      	adds	r2, #8
 800a926:	e7da      	b.n	800a8de <__kernel_rem_pio2+0x2ae>
 800a928:	9b04      	ldr	r3, [sp, #16]
 800a92a:	f04f 0c01 	mov.w	ip, #1
 800a92e:	e7c7      	b.n	800a8c0 <__kernel_rem_pio2+0x290>
 800a930:	ecbe 5b02 	vldmia	lr!, {d5}
 800a934:	ed38 6b02 	vldmdb	r8!, {d6}
 800a938:	f10c 0c01 	add.w	ip, ip, #1
 800a93c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a940:	e7e7      	b.n	800a912 <__kernel_rem_pio2+0x2e2>
 800a942:	3b01      	subs	r3, #1
 800a944:	e768      	b.n	800a818 <__kernel_rem_pio2+0x1e8>
 800a946:	bf00      	nop
	...
 800a954:	3e700000 	.word	0x3e700000
 800a958:	00000000 	.word	0x00000000
 800a95c:	41700000 	.word	0x41700000
 800a960:	0800b060 	.word	0x0800b060
 800a964:	0800b020 	.word	0x0800b020
 800a968:	4260      	negs	r0, r4
 800a96a:	eeb0 0b48 	vmov.f64	d0, d8
 800a96e:	f000 f9d7 	bl	800ad20 <scalbn>
 800a972:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800ab50 <__kernel_rem_pio2+0x520>
 800a976:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800a97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a97e:	db18      	blt.n	800a9b2 <__kernel_rem_pio2+0x382>
 800a980:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800ab58 <__kernel_rem_pio2+0x528>
 800a984:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a988:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a98c:	aa06      	add	r2, sp, #24
 800a98e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800a992:	eea5 0b46 	vfms.f64	d0, d5, d6
 800a996:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a99a:	a906      	add	r1, sp, #24
 800a99c:	ee10 3a10 	vmov	r3, s0
 800a9a0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a9a4:	1c6b      	adds	r3, r5, #1
 800a9a6:	ee17 2a10 	vmov	r2, s14
 800a9aa:	3418      	adds	r4, #24
 800a9ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a9b0:	e739      	b.n	800a826 <__kernel_rem_pio2+0x1f6>
 800a9b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a9b6:	aa06      	add	r2, sp, #24
 800a9b8:	ee10 3a10 	vmov	r3, s0
 800a9bc:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	e730      	b.n	800a826 <__kernel_rem_pio2+0x1f6>
 800a9c4:	aa06      	add	r2, sp, #24
 800a9c6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800a9ca:	9202      	str	r2, [sp, #8]
 800a9cc:	ee07 2a90 	vmov	s15, r2
 800a9d0:	3c01      	subs	r4, #1
 800a9d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a9d6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800a9da:	ee20 0b06 	vmul.f64	d0, d0, d6
 800a9de:	ed25 7b02 	vstmdb	r5!, {d7}
 800a9e2:	e72f      	b.n	800a844 <__kernel_rem_pio2+0x214>
 800a9e4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800a9e8:	ecb7 5b02 	vldmia	r7!, {d5}
 800a9ec:	ed9c 6b00 	vldr	d6, [ip]
 800a9f0:	3401      	adds	r4, #1
 800a9f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a9f6:	454c      	cmp	r4, r9
 800a9f8:	dc01      	bgt.n	800a9fe <__kernel_rem_pio2+0x3ce>
 800a9fa:	42a5      	cmp	r5, r4
 800a9fc:	daf2      	bge.n	800a9e4 <__kernel_rem_pio2+0x3b4>
 800a9fe:	aa42      	add	r2, sp, #264	; 0x108
 800aa00:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800aa04:	ed84 7b00 	vstr	d7, [r4]
 800aa08:	3501      	adds	r5, #1
 800aa0a:	3808      	subs	r0, #8
 800aa0c:	e71e      	b.n	800a84c <__kernel_rem_pio2+0x21c>
 800aa0e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800aa10:	2a03      	cmp	r2, #3
 800aa12:	d84e      	bhi.n	800aab2 <__kernel_rem_pio2+0x482>
 800aa14:	e8df f002 	tbb	[pc, r2]
 800aa18:	021f1f3e 	.word	0x021f1f3e
 800aa1c:	3108      	adds	r1, #8
 800aa1e:	aa42      	add	r2, sp, #264	; 0x108
 800aa20:	4411      	add	r1, r2
 800aa22:	4608      	mov	r0, r1
 800aa24:	461c      	mov	r4, r3
 800aa26:	2c00      	cmp	r4, #0
 800aa28:	dc61      	bgt.n	800aaee <__kernel_rem_pio2+0x4be>
 800aa2a:	4608      	mov	r0, r1
 800aa2c:	461c      	mov	r4, r3
 800aa2e:	2c01      	cmp	r4, #1
 800aa30:	dc6d      	bgt.n	800ab0e <__kernel_rem_pio2+0x4de>
 800aa32:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ab60 <__kernel_rem_pio2+0x530>
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	dc79      	bgt.n	800ab2e <__kernel_rem_pio2+0x4fe>
 800aa3a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800aa3e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800aa42:	f1b8 0f00 	cmp.w	r8, #0
 800aa46:	d178      	bne.n	800ab3a <__kernel_rem_pio2+0x50a>
 800aa48:	ed86 5b00 	vstr	d5, [r6]
 800aa4c:	ed86 6b02 	vstr	d6, [r6, #8]
 800aa50:	ed86 7b04 	vstr	d7, [r6, #16]
 800aa54:	e02d      	b.n	800aab2 <__kernel_rem_pio2+0x482>
 800aa56:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800ab60 <__kernel_rem_pio2+0x530>
 800aa5a:	3108      	adds	r1, #8
 800aa5c:	aa42      	add	r2, sp, #264	; 0x108
 800aa5e:	4411      	add	r1, r2
 800aa60:	4618      	mov	r0, r3
 800aa62:	2800      	cmp	r0, #0
 800aa64:	da34      	bge.n	800aad0 <__kernel_rem_pio2+0x4a0>
 800aa66:	f1b8 0f00 	cmp.w	r8, #0
 800aa6a:	d037      	beq.n	800aadc <__kernel_rem_pio2+0x4ac>
 800aa6c:	eeb1 7b46 	vneg.f64	d7, d6
 800aa70:	ed86 7b00 	vstr	d7, [r6]
 800aa74:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800aa78:	a844      	add	r0, sp, #272	; 0x110
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa80:	428b      	cmp	r3, r1
 800aa82:	da2e      	bge.n	800aae2 <__kernel_rem_pio2+0x4b2>
 800aa84:	f1b8 0f00 	cmp.w	r8, #0
 800aa88:	d001      	beq.n	800aa8e <__kernel_rem_pio2+0x45e>
 800aa8a:	eeb1 7b47 	vneg.f64	d7, d7
 800aa8e:	ed86 7b02 	vstr	d7, [r6, #8]
 800aa92:	e00e      	b.n	800aab2 <__kernel_rem_pio2+0x482>
 800aa94:	aa92      	add	r2, sp, #584	; 0x248
 800aa96:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800ab60 <__kernel_rem_pio2+0x530>
 800aa9a:	4411      	add	r1, r2
 800aa9c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	da0f      	bge.n	800aac4 <__kernel_rem_pio2+0x494>
 800aaa4:	f1b8 0f00 	cmp.w	r8, #0
 800aaa8:	d001      	beq.n	800aaae <__kernel_rem_pio2+0x47e>
 800aaaa:	eeb1 7b47 	vneg.f64	d7, d7
 800aaae:	ed86 7b00 	vstr	d7, [r6]
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	f003 0007 	and.w	r0, r3, #7
 800aab8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800aabc:	ecbd 8b06 	vpop	{d8-d10}
 800aac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac4:	ed31 6b02 	vldmdb	r1!, {d6}
 800aac8:	3b01      	subs	r3, #1
 800aaca:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aace:	e7e7      	b.n	800aaa0 <__kernel_rem_pio2+0x470>
 800aad0:	ed31 7b02 	vldmdb	r1!, {d7}
 800aad4:	3801      	subs	r0, #1
 800aad6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800aada:	e7c2      	b.n	800aa62 <__kernel_rem_pio2+0x432>
 800aadc:	eeb0 7b46 	vmov.f64	d7, d6
 800aae0:	e7c6      	b.n	800aa70 <__kernel_rem_pio2+0x440>
 800aae2:	ecb0 6b02 	vldmia	r0!, {d6}
 800aae6:	3101      	adds	r1, #1
 800aae8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aaec:	e7c8      	b.n	800aa80 <__kernel_rem_pio2+0x450>
 800aaee:	ed10 7b04 	vldr	d7, [r0, #-16]
 800aaf2:	ed30 5b02 	vldmdb	r0!, {d5}
 800aaf6:	3c01      	subs	r4, #1
 800aaf8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800aafc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ab00:	ed00 6b02 	vstr	d6, [r0, #-8]
 800ab04:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ab08:	ed80 7b00 	vstr	d7, [r0]
 800ab0c:	e78b      	b.n	800aa26 <__kernel_rem_pio2+0x3f6>
 800ab0e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800ab12:	ed30 5b02 	vldmdb	r0!, {d5}
 800ab16:	3c01      	subs	r4, #1
 800ab18:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ab1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ab20:	ed00 6b02 	vstr	d6, [r0, #-8]
 800ab24:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ab28:	ed80 7b00 	vstr	d7, [r0]
 800ab2c:	e77f      	b.n	800aa2e <__kernel_rem_pio2+0x3fe>
 800ab2e:	ed31 6b02 	vldmdb	r1!, {d6}
 800ab32:	3b01      	subs	r3, #1
 800ab34:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ab38:	e77d      	b.n	800aa36 <__kernel_rem_pio2+0x406>
 800ab3a:	eeb1 5b45 	vneg.f64	d5, d5
 800ab3e:	eeb1 6b46 	vneg.f64	d6, d6
 800ab42:	ed86 5b00 	vstr	d5, [r6]
 800ab46:	eeb1 7b47 	vneg.f64	d7, d7
 800ab4a:	ed86 6b02 	vstr	d6, [r6, #8]
 800ab4e:	e77f      	b.n	800aa50 <__kernel_rem_pio2+0x420>
 800ab50:	00000000 	.word	0x00000000
 800ab54:	41700000 	.word	0x41700000
 800ab58:	00000000 	.word	0x00000000
 800ab5c:	3e700000 	.word	0x3e700000
	...

0800ab68 <__kernel_sin>:
 800ab68:	ee10 3a90 	vmov	r3, s1
 800ab6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab70:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab74:	da04      	bge.n	800ab80 <__kernel_sin+0x18>
 800ab76:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ab7a:	ee17 3a90 	vmov	r3, s15
 800ab7e:	b35b      	cbz	r3, 800abd8 <__kernel_sin+0x70>
 800ab80:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ab84:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ab88:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800abe0 <__kernel_sin+0x78>
 800ab8c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800abe8 <__kernel_sin+0x80>
 800ab90:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ab94:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800abf0 <__kernel_sin+0x88>
 800ab98:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ab9c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800abf8 <__kernel_sin+0x90>
 800aba0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800aba4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ac00 <__kernel_sin+0x98>
 800aba8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800abac:	b930      	cbnz	r0, 800abbc <__kernel_sin+0x54>
 800abae:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ac08 <__kernel_sin+0xa0>
 800abb2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800abb6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800abba:	4770      	bx	lr
 800abbc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800abc0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800abc4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800abc8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800abcc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ac10 <__kernel_sin+0xa8>
 800abd0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800abd4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	f3af 8000 	nop.w
 800abe0:	5acfd57c 	.word	0x5acfd57c
 800abe4:	3de5d93a 	.word	0x3de5d93a
 800abe8:	8a2b9ceb 	.word	0x8a2b9ceb
 800abec:	be5ae5e6 	.word	0xbe5ae5e6
 800abf0:	57b1fe7d 	.word	0x57b1fe7d
 800abf4:	3ec71de3 	.word	0x3ec71de3
 800abf8:	19c161d5 	.word	0x19c161d5
 800abfc:	bf2a01a0 	.word	0xbf2a01a0
 800ac00:	1110f8a6 	.word	0x1110f8a6
 800ac04:	3f811111 	.word	0x3f811111
 800ac08:	55555549 	.word	0x55555549
 800ac0c:	bfc55555 	.word	0xbfc55555
 800ac10:	55555549 	.word	0x55555549
 800ac14:	3fc55555 	.word	0x3fc55555

0800ac18 <fabs>:
 800ac18:	ec51 0b10 	vmov	r0, r1, d0
 800ac1c:	ee10 2a10 	vmov	r2, s0
 800ac20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac24:	ec43 2b10 	vmov	d0, r2, r3
 800ac28:	4770      	bx	lr
 800ac2a:	0000      	movs	r0, r0
 800ac2c:	0000      	movs	r0, r0
	...

0800ac30 <floor>:
 800ac30:	ee10 1a90 	vmov	r1, s1
 800ac34:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac38:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ac3c:	2b13      	cmp	r3, #19
 800ac3e:	b530      	push	{r4, r5, lr}
 800ac40:	ee10 0a10 	vmov	r0, s0
 800ac44:	ee10 5a10 	vmov	r5, s0
 800ac48:	dc33      	bgt.n	800acb2 <floor+0x82>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	da17      	bge.n	800ac7e <floor+0x4e>
 800ac4e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ad10 <floor+0xe0>
 800ac52:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ac56:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5e:	dd09      	ble.n	800ac74 <floor+0x44>
 800ac60:	2900      	cmp	r1, #0
 800ac62:	da50      	bge.n	800ad06 <floor+0xd6>
 800ac64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac68:	4a2b      	ldr	r2, [pc, #172]	; (800ad18 <floor+0xe8>)
 800ac6a:	4303      	orrs	r3, r0
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	4283      	cmp	r3, r0
 800ac70:	bf18      	it	ne
 800ac72:	4611      	movne	r1, r2
 800ac74:	460b      	mov	r3, r1
 800ac76:	4602      	mov	r2, r0
 800ac78:	ec43 2b10 	vmov	d0, r2, r3
 800ac7c:	e020      	b.n	800acc0 <floor+0x90>
 800ac7e:	4a27      	ldr	r2, [pc, #156]	; (800ad1c <floor+0xec>)
 800ac80:	411a      	asrs	r2, r3
 800ac82:	ea01 0402 	and.w	r4, r1, r2
 800ac86:	4304      	orrs	r4, r0
 800ac88:	d01a      	beq.n	800acc0 <floor+0x90>
 800ac8a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ad10 <floor+0xe0>
 800ac8e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ac92:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9a:	ddeb      	ble.n	800ac74 <floor+0x44>
 800ac9c:	2900      	cmp	r1, #0
 800ac9e:	bfbe      	ittt	lt
 800aca0:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800aca4:	fa40 f303 	asrlt.w	r3, r0, r3
 800aca8:	18c9      	addlt	r1, r1, r3
 800acaa:	ea21 0102 	bic.w	r1, r1, r2
 800acae:	2000      	movs	r0, #0
 800acb0:	e7e0      	b.n	800ac74 <floor+0x44>
 800acb2:	2b33      	cmp	r3, #51	; 0x33
 800acb4:	dd05      	ble.n	800acc2 <floor+0x92>
 800acb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acba:	d101      	bne.n	800acc0 <floor+0x90>
 800acbc:	ee30 0b00 	vadd.f64	d0, d0, d0
 800acc0:	bd30      	pop	{r4, r5, pc}
 800acc2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800acc6:	f04f 32ff 	mov.w	r2, #4294967295
 800acca:	40e2      	lsrs	r2, r4
 800accc:	4202      	tst	r2, r0
 800acce:	d0f7      	beq.n	800acc0 <floor+0x90>
 800acd0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ad10 <floor+0xe0>
 800acd4:	ee30 0b07 	vadd.f64	d0, d0, d7
 800acd8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800acdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace0:	ddc8      	ble.n	800ac74 <floor+0x44>
 800ace2:	2900      	cmp	r1, #0
 800ace4:	da02      	bge.n	800acec <floor+0xbc>
 800ace6:	2b14      	cmp	r3, #20
 800ace8:	d103      	bne.n	800acf2 <floor+0xc2>
 800acea:	3101      	adds	r1, #1
 800acec:	ea20 0002 	bic.w	r0, r0, r2
 800acf0:	e7c0      	b.n	800ac74 <floor+0x44>
 800acf2:	2401      	movs	r4, #1
 800acf4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800acf8:	fa04 f303 	lsl.w	r3, r4, r3
 800acfc:	4418      	add	r0, r3
 800acfe:	42a8      	cmp	r0, r5
 800ad00:	bf38      	it	cc
 800ad02:	1909      	addcc	r1, r1, r4
 800ad04:	e7f2      	b.n	800acec <floor+0xbc>
 800ad06:	2000      	movs	r0, #0
 800ad08:	4601      	mov	r1, r0
 800ad0a:	e7b3      	b.n	800ac74 <floor+0x44>
 800ad0c:	f3af 8000 	nop.w
 800ad10:	8800759c 	.word	0x8800759c
 800ad14:	7e37e43c 	.word	0x7e37e43c
 800ad18:	bff00000 	.word	0xbff00000
 800ad1c:	000fffff 	.word	0x000fffff

0800ad20 <scalbn>:
 800ad20:	b500      	push	{lr}
 800ad22:	ed2d 8b02 	vpush	{d8}
 800ad26:	b083      	sub	sp, #12
 800ad28:	ed8d 0b00 	vstr	d0, [sp]
 800ad2c:	9b01      	ldr	r3, [sp, #4]
 800ad2e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ad32:	b9a2      	cbnz	r2, 800ad5e <scalbn+0x3e>
 800ad34:	9a00      	ldr	r2, [sp, #0]
 800ad36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	d03a      	beq.n	800adb4 <scalbn+0x94>
 800ad3e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800adf8 <scalbn+0xd8>
 800ad42:	4b35      	ldr	r3, [pc, #212]	; (800ae18 <scalbn+0xf8>)
 800ad44:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ad48:	4298      	cmp	r0, r3
 800ad4a:	ed8d 7b00 	vstr	d7, [sp]
 800ad4e:	da11      	bge.n	800ad74 <scalbn+0x54>
 800ad50:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800ae00 <scalbn+0xe0>
 800ad54:	ed9d 6b00 	vldr	d6, [sp]
 800ad58:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad5c:	e007      	b.n	800ad6e <scalbn+0x4e>
 800ad5e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ad62:	428a      	cmp	r2, r1
 800ad64:	d10a      	bne.n	800ad7c <scalbn+0x5c>
 800ad66:	ed9d 7b00 	vldr	d7, [sp]
 800ad6a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ad6e:	ed8d 7b00 	vstr	d7, [sp]
 800ad72:	e01f      	b.n	800adb4 <scalbn+0x94>
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ad7a:	3a36      	subs	r2, #54	; 0x36
 800ad7c:	4402      	add	r2, r0
 800ad7e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ad82:	428a      	cmp	r2, r1
 800ad84:	dd0a      	ble.n	800ad9c <scalbn+0x7c>
 800ad86:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800ae08 <scalbn+0xe8>
 800ad8a:	eeb0 0b48 	vmov.f64	d0, d8
 800ad8e:	ed9d 1b00 	vldr	d1, [sp]
 800ad92:	f000 f843 	bl	800ae1c <copysign>
 800ad96:	ee20 7b08 	vmul.f64	d7, d0, d8
 800ad9a:	e7e8      	b.n	800ad6e <scalbn+0x4e>
 800ad9c:	2a00      	cmp	r2, #0
 800ad9e:	dd10      	ble.n	800adc2 <scalbn+0xa2>
 800ada0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ada4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ada8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800adac:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800adb0:	e9cd 0100 	strd	r0, r1, [sp]
 800adb4:	ed9d 0b00 	vldr	d0, [sp]
 800adb8:	b003      	add	sp, #12
 800adba:	ecbd 8b02 	vpop	{d8}
 800adbe:	f85d fb04 	ldr.w	pc, [sp], #4
 800adc2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800adc6:	da06      	bge.n	800add6 <scalbn+0xb6>
 800adc8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800adcc:	4298      	cmp	r0, r3
 800adce:	dcda      	bgt.n	800ad86 <scalbn+0x66>
 800add0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800ae00 <scalbn+0xe0>
 800add4:	e7d9      	b.n	800ad8a <scalbn+0x6a>
 800add6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adde:	3236      	adds	r2, #54	; 0x36
 800ade0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ade4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ade8:	ec41 0b17 	vmov	d7, r0, r1
 800adec:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800ae10 <scalbn+0xf0>
 800adf0:	e7b2      	b.n	800ad58 <scalbn+0x38>
 800adf2:	bf00      	nop
 800adf4:	f3af 8000 	nop.w
 800adf8:	00000000 	.word	0x00000000
 800adfc:	43500000 	.word	0x43500000
 800ae00:	c2f8f359 	.word	0xc2f8f359
 800ae04:	01a56e1f 	.word	0x01a56e1f
 800ae08:	8800759c 	.word	0x8800759c
 800ae0c:	7e37e43c 	.word	0x7e37e43c
 800ae10:	00000000 	.word	0x00000000
 800ae14:	3c900000 	.word	0x3c900000
 800ae18:	ffff3cb0 	.word	0xffff3cb0

0800ae1c <copysign>:
 800ae1c:	ec51 0b10 	vmov	r0, r1, d0
 800ae20:	ee11 0a90 	vmov	r0, s3
 800ae24:	ee10 2a10 	vmov	r2, s0
 800ae28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ae30:	ea41 0300 	orr.w	r3, r1, r0
 800ae34:	ec43 2b10 	vmov	d0, r2, r3
 800ae38:	4770      	bx	lr
	...

0800ae3c <_init>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr

0800ae48 <_fini>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr
