
testdac1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800ae70  0800ae70  0001ae70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b088  0800b088  0001b088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b090  0800b090  0001b090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b094  0800b094  0001b094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800b098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000384  20000014  0800b0ac  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000398  0800b0ac  00020398  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000244d4  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000363e  00000000  00000000  00044516  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016b0  00000000  00000000  00047b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001568  00000000  00000000  00049208  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c02f  00000000  00000000  0004a770  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000145ef  00000000  00000000  0008679f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00197b54  00000000  00000000  0009ad8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002328e2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000063d8  00000000  00000000  00232960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ae54 	.word	0x0800ae54

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	0800ae54 	.word	0x0800ae54

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	2b07      	cmp	r3, #7
 800063c:	d907      	bls.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000
 800070c:	00000000 	.word	0x00000000

08000710 <get_sineval>:
             // traslo la curva per superare i limiti di risoluzione del DAC, soprattutto con fattori di scala bassi

float scale=1; //fattore di scala: posso modificare l'ampiezza dell'onda generata

void get_sineval ()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	for (i=0;i<100;i++)
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <get_sineval+0xc8>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	e049      	b.n	80007b0 <get_sineval+0xa0>
	{
		sin_val[i] = ((sin(i*2*PI/100) + 1)*((4095+1)/2) + shift);
 800071c:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <get_sineval+0xc8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	ee07 3a90 	vmov	s15, r3
 8000726:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800072a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80007c0 <get_sineval+0xb0>
 800072e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000732:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80007c8 <get_sineval+0xb8>
 8000736:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800073a:	eeb0 0b45 	vmov.f64	d0, d5
 800073e:	f009 fd9f 	bl	800a280 <sin>
 8000742:	eeb0 6b40 	vmov.f64	d6, d0
 8000746:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800074a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800074e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80007d0 <get_sineval+0xc0>
 8000752:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <get_sineval+0xcc>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	ee07 3a90 	vmov	s15, r3
 800075e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000762:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <get_sineval+0xc8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800076e:	ee17 1a90 	vmov	r1, s15
 8000772:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <get_sineval+0xd0>)
 8000774:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//sin_val[i] = ((sin(i*2*PI/100) + 1)*(4095+1/2)); //il secondo elemento è l'ampiezza *** attenzione, essendo valori interi, se <0 la sin appare tosata
		//il +1000 serve solo se applichiamo il fattore di scala e va modulato in base ad esso
		//1000 va bene per il fattore di scala 0.1, poichè mi fa uscire dal limite della risoluzione del DAC
		sin_val[i]=sin_val[i]*scale; //fattore di scala
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <get_sineval+0xc8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <get_sineval+0xd0>)
 800077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000782:	ee07 3a90 	vmov	s15, r3
 8000786:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800078a:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <get_sineval+0xd4>)
 800078c:	edd3 7a00 	vldr	s15, [r3]
 8000790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <get_sineval+0xc8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800079c:	ee17 1a90 	vmov	r1, s15
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <get_sineval+0xd0>)
 80007a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<100;i++)
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <get_sineval+0xc8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <get_sineval+0xc8>)
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <get_sineval+0xc8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b63      	cmp	r3, #99	; 0x63
 80007b6:	ddb1      	ble.n	800071c <get_sineval+0xc>
	}

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	f3af 8000 	nop.w
 80007c0:	4d12d84a 	.word	0x4d12d84a
 80007c4:	400921fb 	.word	0x400921fb
 80007c8:	00000000 	.word	0x00000000
 80007cc:	40590000 	.word	0x40590000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	40a00000 	.word	0x40a00000
 80007d8:	20000030 	.word	0x20000030
 80007dc:	20000034 	.word	0x20000034
 80007e0:	200001b4 	.word	0x200001b4
 80007e4:	20000008 	.word	0x20000008

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 80007ee:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007f8:	bf00      	nop
 80007fa:	4b5a      	ldr	r3, [pc, #360]	; (8000964 <main+0x17c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <main+0x2c>
 8000806:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800080a:	1e5a      	subs	r2, r3, #1
 800080c:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8000810:	2b00      	cmp	r3, #0
 8000812:	dcf2      	bgt.n	80007fa <main+0x12>
  if ( timeout < 0 )
 8000814:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000818:	2b00      	cmp	r3, #0
 800081a:	da01      	bge.n	8000820 <main+0x38>
  {
  Error_Handler();
 800081c:	f000 fbba 	bl	8000f94 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fd76 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f8ac 	bl	8000980 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000828:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <main+0x17c>)
 800082a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082e:	4a4d      	ldr	r2, [pc, #308]	; (8000964 <main+0x17c>)
 8000830:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000838:	4b4a      	ldr	r3, [pc, #296]	; (8000964 <main+0x17c>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000842:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800084c:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800084e:	2000      	movs	r0, #0
 8000850:	f005 f8fa 	bl	8005a48 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000854:	2100      	movs	r1, #0
 8000856:	2000      	movs	r0, #0
 8000858:	f005 f910 	bl	8005a7c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800085c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000860:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000864:	bf00      	nop
 8000866:	4b3f      	ldr	r3, [pc, #252]	; (8000964 <main+0x17c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d106      	bne.n	8000880 <main+0x98>
 8000872:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000876:	1e5a      	subs	r2, r3, #1
 8000878:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 800087c:	2b00      	cmp	r3, #0
 800087e:	dcf2      	bgt.n	8000866 <main+0x7e>
if ( timeout < 0 )
 8000880:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8000884:	2b00      	cmp	r3, #0
 8000886:	da01      	bge.n	800088c <main+0xa4>
{
Error_Handler();
 8000888:	f000 fb84 	bl	8000f94 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088c:	f000 fabc 	bl	8000e08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000890:	f000 fa9a 	bl	8000dc8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000894:	f000 f9cc 	bl	8000c30 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000898:	f000 f9fc 	bl	8000c94 <MX_TIM2_Init>
  MX_ADC1_Init();
 800089c:	f000 f950 	bl	8000b40 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80008a0:	f000 fa46 	bl	8000d30 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


 HAL_TIM_Base_Start(&htim2);
 80008a4:	4830      	ldr	r0, [pc, #192]	; (8000968 <main+0x180>)
 80008a6:	f008 f807 	bl	80088b8 <HAL_TIM_Base_Start>

 get_sineval();
 80008aa:	f7ff ff31 	bl	8000710 <get_sineval>

 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 80008ae:	2300      	movs	r3, #0
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	4a2d      	ldr	r2, [pc, #180]	; (800096c <main+0x184>)
 80008b6:	2100      	movs	r1, #0
 80008b8:	482d      	ldr	r0, [pc, #180]	; (8000970 <main+0x188>)
 80008ba:	f002 fb81 	bl	8002fc0 <HAL_DAC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  uint8_t buffertx[100]="";
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2260      	movs	r2, #96	; 0x60
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f009 fcce 	bl	800a26c <memset>
int cont=0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
int j=0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
int alfa=100000;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <main+0x18c>)
 80008de:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8


        //DAC

		for (i=0;i<100;i++)
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <main+0x190>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e036      	b.n	8000958 <main+0x170>
           VEF+ is the input voltage reference (refer to the device datasheet)
         e.g. To set DAC_OUT1 to 0.7V, use
           Assuming that VREF+ = 3.3V, DAC_OUT1 = (3.3 * 868) / 4095 = 0.7V

		   */
      		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sin_val[i]);
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <main+0x190>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <main+0x184>)
 80008f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	481d      	ldr	r0, [pc, #116]	; (8000970 <main+0x188>)
 80008fa:	f002 fc1f 	bl	800313c <HAL_DAC_SetValue>
     		for (j=0;j<alfa;j++)  //ritardo sintetico
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8000904:	e009      	b.n	800091a <main+0x132>
     		{
     			cont++;
 8000906:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800090a:	3301      	adds	r3, #1
 800090c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
     		for (j=0;j<alfa;j++)  //ritardo sintetico
 8000910:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8000914:	3301      	adds	r3, #1
 8000916:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800091a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800091e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000922:	429a      	cmp	r2, r3
 8000924:	dbef      	blt.n	8000906 <main+0x11e>
		  // HAL_ADC_Start(&hadc1);
		  //HAL_ADC_PollForConversion(&hadc1, 1000);
		  //uiAnalogData=HAL_ADC_GetValue(&hadc1);
		  //HAL_ADC_Stop(&hadc1);

		  HAL_ADC_Start(&hadc1);
 8000926:	4815      	ldr	r0, [pc, #84]	; (800097c <main+0x194>)
 8000928:	f001 f984 	bl	8001c34 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 800092c:	2164      	movs	r1, #100	; 0x64
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <main+0x194>)
 8000930:	f001 fa7e 	bl	8001e30 <HAL_ADC_PollForConversion>
		  uiAnalogData[i]=HAL_ADC_GetValue(&hadc1);
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <main+0x190>)
 8000936:	681c      	ldr	r4, [r3, #0]
 8000938:	4810      	ldr	r0, [pc, #64]	; (800097c <main+0x194>)
 800093a:	f001 fb65 	bl	8002008 <HAL_ADC_GetValue>
 800093e:	4602      	mov	r2, r0
 8000940:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000944:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		  //uiAnalogData=HAL_ADC_GetValue(&hadc1);
		  HAL_ADC_Stop(&hadc1);
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <main+0x194>)
 800094a:	f001 fa3d 	bl	8001dc8 <HAL_ADC_Stop>
		for (i=0;i<100;i++)
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <main+0x190>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <main+0x190>)
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <main+0x190>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b63      	cmp	r3, #99	; 0x63
 800095e:	ddc4      	ble.n	80008ea <main+0x102>
  {
 8000960:	e7ad      	b.n	80008be <main+0xd6>
 8000962:	bf00      	nop
 8000964:	58024400 	.word	0x58024400
 8000968:	20000348 	.word	0x20000348
 800096c:	200001b4 	.word	0x200001b4
 8000970:	20000038 	.word	0x20000038
 8000974:	000186a0 	.word	0x000186a0
 8000978:	20000030 	.word	0x20000030
 800097c:	20000150 	.word	0x20000150

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0cc      	sub	sp, #304	; 0x130
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800098a:	224c      	movs	r2, #76	; 0x4c
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f009 fc6c 	bl	800a26c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000998:	2220      	movs	r2, #32
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f009 fc65 	bl	800a26c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4618      	mov	r0, r3
 80009a8:	23bc      	movs	r3, #188	; 0xbc
 80009aa:	461a      	mov	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f009 fc5d 	bl	800a26c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009b2:	2004      	movs	r0, #4
 80009b4:	f005 f876 	bl	8005aa4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	4b5c      	ldr	r3, [pc, #368]	; (8000b30 <SystemClock_Config+0x1b0>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a5b      	ldr	r2, [pc, #364]	; (8000b30 <SystemClock_Config+0x1b0>)
 80009c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b59      	ldr	r3, [pc, #356]	; (8000b30 <SystemClock_Config+0x1b0>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	4b57      	ldr	r3, [pc, #348]	; (8000b34 <SystemClock_Config+0x1b4>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	4a56      	ldr	r2, [pc, #344]	; (8000b34 <SystemClock_Config+0x1b4>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009e2:	4b54      	ldr	r3, [pc, #336]	; (8000b34 <SystemClock_Config+0x1b4>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	f003 0201 	and.w	r2, r3, #1
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f2:	bf00      	nop
 80009f4:	4b4e      	ldr	r3, [pc, #312]	; (8000b30 <SystemClock_Config+0x1b0>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a00:	d1f8      	bne.n	80009f4 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a02:	4b4d      	ldr	r3, [pc, #308]	; (8000b38 <SystemClock_Config+0x1b8>)
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	f023 0303 	bic.w	r3, r3, #3
 8000a0a:	4a4b      	ldr	r2, [pc, #300]	; (8000b38 <SystemClock_Config+0x1b8>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a12:	2301      	movs	r3, #1
 8000a14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	2302      	movs	r3, #2
 8000a28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a32:	2378      	movs	r3, #120	; 0x78
 8000a34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a60:	4618      	mov	r0, r3
 8000a62:	f005 f879 	bl	8005b58 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000a6c:	f000 fa92 	bl	8000f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	233f      	movs	r3, #63	; 0x3f
 8000a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2303      	movs	r3, #3
 8000a78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a82:	2308      	movs	r3, #8
 8000a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a88:	2340      	movs	r3, #64	; 0x40
 8000a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a8e:	2340      	movs	r3, #64	; 0x40
 8000a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a9c:	2340      	movs	r3, #64	; 0x40
 8000a9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aa2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 fc65 	bl	8006378 <HAL_RCC_ClockConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000ab4:	f000 fa6e 	bl	8000f94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <SystemClock_Config+0x1bc>)
 8000abe:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2213      	movs	r2, #19
 8000ace:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	2202      	movs	r2, #2
 8000ade:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	22c0      	movs	r2, #192	; 0xc0
 8000aee:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2220      	movs	r2, #32
 8000af6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2200      	movs	r2, #0
 8000b06:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 ffb2 	bl	8006a80 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 8000b22:	f000 fa37 	bl	8000f94 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	58024800 	.word	0x58024800
 8000b34:	58000400 	.word	0x58000400
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	00080002 	.word	0x00080002

08000b40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b66:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <MX_ADC1_Init+0xe8>)
 8000b68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b70:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b76:	4b2b      	ldr	r3, [pc, #172]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000bc2:	f000 fe97 	bl	80018f4 <HAL_ADC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bcc:	f000 f9e2 	bl	8000f94 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4812      	ldr	r0, [pc, #72]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000bdc:	f001 ffe4 	bl	8002ba8 <HAL_ADCEx_MultiModeConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000be6:	f000 f9d5 	bl	8000f94 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_ADC1_Init+0xec>)
 8000bec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bee:	2306      	movs	r3, #6
 8000bf0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bf6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bfa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_ADC1_Init+0xe4>)
 8000c0e:	f001 fa09 	bl	8002024 <HAL_ADC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000c18:	f000 f9bc 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	; 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000150 	.word	0x20000150
 8000c28:	40022000 	.word	0x40022000
 8000c2c:	3ef08000 	.word	0x3ef08000

08000c30 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2224      	movs	r2, #36	; 0x24
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f009 fb15 	bl	800a26c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_DAC1_Init+0x5c>)
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <MX_DAC1_Init+0x60>)
 8000c46:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c48:	4810      	ldr	r0, [pc, #64]	; (8000c8c <MX_DAC1_Init+0x5c>)
 8000c4a:	f002 f996 	bl	8002f7a <HAL_DAC_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c54:	f000 f99e 	bl	8000f94 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c64:	2301      	movs	r3, #1
 8000c66:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_DAC1_Init+0x5c>)
 8000c74:	f002 faa6 	bl	80031c4 <HAL_DAC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f989 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000038 	.word	0x20000038
 8000c90:	40007400 	.word	0x40007400

08000c94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cbc:	2259      	movs	r2, #89	; 0x59
 8000cbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cc8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000ccc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cdc:	f007 fd94 	bl	8008808 <HAL_TIM_Base_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ce6:	f000 f955 	bl	8000f94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000cf8:	f007 ff2c 	bl	8008b54 <HAL_TIM_ConfigClockSource>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d02:	f000 f947 	bl	8000f94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d06:	2320      	movs	r3, #32
 8000d08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_TIM2_Init+0x98>)
 8000d14:	f008 f958 	bl	8008fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d1e:	f000 f939 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3720      	adds	r7, #32
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000348 	.word	0x20000348

08000d30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <MX_USART3_UART_Init+0x94>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d78:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d7a:	f008 f9cb 	bl	8009114 <HAL_UART_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d84:	f000 f906 	bl	8000f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d8c:	f009 f965 	bl	800a05a <HAL_UARTEx_SetTxFifoThreshold>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d96:	f000 f8fd 	bl	8000f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d9e:	f009 f99a 	bl	800a0d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000da8:	f000 f8f4 	bl	8000f94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000dae:	f009 f91b 	bl	8009fe8 <HAL_UARTEx_DisableFifoMode>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000db8:	f000 f8ec 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000004c 	.word	0x2000004c
 8000dc4:	40004800 	.word	0x40004800

08000dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_DMA_Init+0x3c>)
 8000dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <MX_DMA_Init+0x3c>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_DMA_Init+0x3c>)
 8000de0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2010      	movs	r0, #16
 8000df2:	f002 f88e 	bl	8002f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000df6:	2010      	movs	r0, #16
 8000df8:	f002 f8a5 	bl	8002f46 <HAL_NVIC_EnableIRQ>

}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58024400 	.word	0x58024400

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b58      	ldr	r3, [pc, #352]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	4a56      	ldr	r2, [pc, #344]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2e:	4b54      	ldr	r3, [pc, #336]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3c:	4b50      	ldr	r3, [pc, #320]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	4a4f      	ldr	r2, [pc, #316]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4c:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	4a47      	ldr	r2, [pc, #284]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6a:	4b45      	ldr	r3, [pc, #276]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b41      	ldr	r3, [pc, #260]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	4a40      	ldr	r2, [pc, #256]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e88:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000e9e:	f043 0308 	orr.w	r3, r3, #8
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea6:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb4:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	4a31      	ldr	r2, [pc, #196]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <MX_GPIO_Init+0x178>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ed2:	2332      	movs	r3, #50	; 0x32
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee2:	230b      	movs	r3, #11
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	4825      	ldr	r0, [pc, #148]	; (8000f84 <MX_GPIO_Init+0x17c>)
 8000eee:	f004 fbfb 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ef2:	2386      	movs	r3, #134	; 0x86
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f02:	230b      	movs	r3, #11
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481e      	ldr	r0, [pc, #120]	; (8000f88 <MX_GPIO_Init+0x180>)
 8000f0e:	f004 fbeb 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f24:	230b      	movs	r3, #11
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4817      	ldr	r0, [pc, #92]	; (8000f8c <MX_GPIO_Init+0x184>)
 8000f30:	f004 fbda 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f34:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f46:	230a      	movs	r3, #10
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_GPIO_Init+0x180>)
 8000f52:	f004 fbc9 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f68:	230b      	movs	r3, #11
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_GPIO_Init+0x188>)
 8000f74:	f004 fbb8 	bl	80056e8 <HAL_GPIO_Init>

}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	; 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020800 	.word	0x58020800
 8000f88:	58020000 	.word	0x58020000
 8000f8c:	58020400 	.word	0x58020400
 8000f90:	58021800 	.word	0x58021800

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_MspInit+0x30>)
 8000fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb0:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x30>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x30>)
 8000fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	58024400 	.word	0x58024400

08000fd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <HAL_ADC_MspInit+0x80>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d129      	bne.n	800104e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_ADC_MspInit+0x84>)
 8000ffc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001000:	4a16      	ldr	r2, [pc, #88]	; (800105c <HAL_ADC_MspInit+0x84>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_ADC_MspInit+0x84>)
 800100c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_ADC_MspInit+0x84>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a0f      	ldr	r2, [pc, #60]	; (800105c <HAL_ADC_MspInit+0x84>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HAL_ADC_MspInit+0x84>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001036:	2308      	movs	r3, #8
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103a:	2303      	movs	r3, #3
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_ADC_MspInit+0x88>)
 800104a:	f004 fb4d 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000
 800105c:	58024400 	.word	0x58024400
 8001060:	58020000 	.word	0x58020000

08001064 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a30      	ldr	r2, [pc, #192]	; (8001144 <HAL_DAC_MspInit+0xe0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d159      	bne.n	800113a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_DAC_MspInit+0xe4>)
 8001088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800108c:	4a2e      	ldr	r2, [pc, #184]	; (8001148 <HAL_DAC_MspInit+0xe4>)
 800108e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001092:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <HAL_DAC_MspInit+0xe4>)
 8001098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800109c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <HAL_DAC_MspInit+0xe4>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	4a27      	ldr	r2, [pc, #156]	; (8001148 <HAL_DAC_MspInit+0xe4>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_DAC_MspInit+0xe4>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010c2:	2310      	movs	r3, #16
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c6:	2303      	movs	r3, #3
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <HAL_DAC_MspInit+0xe8>)
 80010d6:	f004 fb07 	bl	80056e8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_DAC_MspInit+0xec>)
 80010dc:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <HAL_DAC_MspInit+0xf0>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_DAC_MspInit+0xec>)
 80010e2:	2243      	movs	r2, #67	; 0x43
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_DAC_MspInit+0xec>)
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_DAC_MspInit+0xec>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_DAC_MspInit+0xec>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_DAC_MspInit+0xec>)
 80010fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001100:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_DAC_MspInit+0xec>)
 8001104:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001108:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_DAC_MspInit+0xec>)
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_DAC_MspInit+0xec>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <HAL_DAC_MspInit+0xec>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <HAL_DAC_MspInit+0xec>)
 8001120:	f002 fa0a 	bl	8003538 <HAL_DMA_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800112a:	f7ff ff33 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_DAC_MspInit+0xec>)
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <HAL_DAC_MspInit+0xec>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40007400 	.word	0x40007400
 8001148:	58024400 	.word	0x58024400
 800114c:	58020000 	.word	0x58020000
 8001150:	200000d8 	.word	0x200000d8
 8001154:	40020088 	.word	0x40020088

08001158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001168:	d116      	bne.n	8001198 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_TIM_Base_MspInit+0x48>)
 800116c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_TIM_Base_MspInit+0x48>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_TIM_Base_MspInit+0x48>)
 800117c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	201c      	movs	r0, #28
 800118e:	f001 fec0 	bl	8002f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001192:	201c      	movs	r0, #28
 8001194:	f001 fed7 	bl	8002f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	58024400 	.word	0x58024400

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1a      	ldr	r2, [pc, #104]	; (800122c <HAL_UART_MspInit+0x88>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d12e      	bne.n	8001224 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011c6:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <HAL_UART_MspInit+0x8c>)
 80011c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011cc:	4a18      	ldr	r2, [pc, #96]	; (8001230 <HAL_UART_MspInit+0x8c>)
 80011ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_UART_MspInit+0x8c>)
 80011d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_UART_MspInit+0x8c>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	4a11      	ldr	r2, [pc, #68]	; (8001230 <HAL_UART_MspInit+0x8c>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_UART_MspInit+0x8c>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001202:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001214:	2307      	movs	r3, #7
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <HAL_UART_MspInit+0x90>)
 8001220:	f004 fa62 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	; 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40004800 	.word	0x40004800
 8001230:	58024400 	.word	0x58024400
 8001234:	58020c00 	.word	0x58020c00

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128c:	f000 f8b2 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <DMA1_Stream5_IRQHandler+0x10>)
 800129a:	f002 ff13 	bl	80040c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000d8 	.word	0x200000d8

080012a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM2_IRQHandler+0x10>)
 80012ae:	f007 fb31 	bl	8008914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000348 	.word	0x20000348

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012c0:	f7ff f98a 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012c6:	e003      	b.n	80012d0 <LoopCopyDataInit>

080012c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80012ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ce:	3104      	adds	r1, #4

080012d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012d0:	480a      	ldr	r0, [pc, #40]	; (80012fc <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80012d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012d8:	d3f6      	bcc.n	80012c8 <CopyDataInit>
  ldr  r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80012dc:	e002      	b.n	80012e4 <LoopFillZerobss>

080012de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012e0:	f842 3b04 	str.w	r3, [r2], #4

080012e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80012e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012e8:	d3f9      	bcc.n	80012de <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f008 ff9b 	bl	800a224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff fa7b 	bl	80007e8 <main>
  bx  lr    
 80012f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012f8:	0800b098 	.word	0x0800b098
  ldr  r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001300:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001304:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001308:	20000398 	.word	0x20000398

0800130c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC3_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001316:	2003      	movs	r0, #3
 8001318:	f001 fdf0 	bl	8002efc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800131c:	f005 f9e2 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 8001320:	4601      	mov	r1, r0
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_Init+0x68>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	4a13      	ldr	r2, [pc, #76]	; (800137c <HAL_Init+0x6c>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	fa21 f303 	lsr.w	r3, r1, r3
 8001338:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_Init+0x68>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_Init+0x6c>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
 8001350:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_Init+0x70>)
 8001352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_Init+0x74>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f814 	bl	8001388 <HAL_InitTick>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e002      	b.n	8001370 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800136a:	f7ff fe1b 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	58024400 	.word	0x58024400
 800137c:	0800ae80 	.word	0x0800ae80
 8001380:	20000004 	.word	0x20000004
 8001384:	20000000 	.word	0x20000000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_InitTick+0x60>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e021      	b.n	80013e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0x64>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_InitTick+0x60>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fdd5 	bl	8002f62 <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f001 fd9f 	bl	8002f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x68>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000010 	.word	0x20000010
 80013ec:	20000000 	.word	0x20000000
 80013f0:	2000000c 	.word	0x2000000c

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000010 	.word	0x20000010
 8001418:	20000394 	.word	0x20000394

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000394 	.word	0x20000394

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_Delay+0x40>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000010 	.word	0x20000010

08001478 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_GetREVID+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0c1b      	lsrs	r3, r3, #16
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	5c001000 	.word	0x5c001000

08001490 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	609a      	str	r2, [r3, #8]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3360      	adds	r3, #96	; 0x60
 800150a:	461a      	mov	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	430b      	orrs	r3, r1
 8001526:	431a      	orrs	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800152c:	bf00      	nop
 800152e:	371c      	adds	r7, #28
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 031f 	and.w	r3, r3, #31
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	fa01 f303 	lsl.w	r3, r1, r3
 8001558:	431a      	orrs	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	611a      	str	r2, [r3, #16]
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800156a:	b480      	push	{r7}
 800156c:	b087      	sub	sp, #28
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3360      	adds	r3, #96	; 0x60
 800157a:	461a      	mov	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	431a      	orrs	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	601a      	str	r2, [r3, #0]
  }
}
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3330      	adds	r3, #48	; 0x30
 80015d6:	461a      	mov	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	211f      	movs	r1, #31
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	401a      	ands	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	0e9b      	lsrs	r3, r3, #26
 80015fe:	f003 011f 	and.w	r1, r3, #31
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	431a      	orrs	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001612:	bf00      	nop
 8001614:	371c      	adds	r7, #28
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800161e:	b480      	push	{r7}
 8001620:	b087      	sub	sp, #28
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3314      	adds	r3, #20
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	0e5b      	lsrs	r3, r3, #25
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	0d1b      	lsrs	r3, r3, #20
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2107      	movs	r1, #7
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	0d1b      	lsrs	r3, r3, #20
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	431a      	orrs	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001668:	bf00      	nop
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800168c:	43db      	mvns	r3, r3
 800168e:	401a      	ands	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0318 	and.w	r3, r3, #24
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001698:	40d9      	lsrs	r1, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	400b      	ands	r3, r1
 800169e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016a2:	431a      	orrs	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	000fffff 	.word	0x000fffff

080016bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 031f 	and.w	r3, r3, #31
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6093      	str	r3, [r2, #8]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	5fffffc0 	.word	0x5fffffc0

08001718 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800172c:	d101      	bne.n	8001732 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <LL_ADC_EnableInternalRegulator+0x24>)
 800174e:	4013      	ands	r3, r2
 8001750:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	6fffffc0 	.word	0x6fffffc0

08001768 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800177c:	d101      	bne.n	8001782 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_ADC_Enable+0x24>)
 800179e:	4013      	ands	r3, r2
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	7fffffc0 	.word	0x7fffffc0

080017b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <LL_ADC_Disable+0x24>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	f043 0202 	orr.w	r2, r3, #2
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	7fffffc0 	.word	0x7fffffc0

080017e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <LL_ADC_IsEnabled+0x18>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <LL_ADC_IsEnabled+0x1a>
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d101      	bne.n	800181e <LL_ADC_IsDisableOngoing+0x18>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <LL_ADC_IsDisableOngoing+0x1a>
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <LL_ADC_REG_StartConversion+0x24>)
 800183a:	4013      	ands	r3, r2
 800183c:	f043 0204 	orr.w	r2, r3, #4
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	7fffffc0 	.word	0x7fffffc0

08001854 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <LL_ADC_REG_StopConversion+0x24>)
 8001862:	4013      	ands	r3, r2
 8001864:	f043 0210 	orr.w	r2, r3, #16
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	7fffffc0 	.word	0x7fffffc0

0800187c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b04      	cmp	r3, #4
 800188e:	d101      	bne.n	8001894 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <LL_ADC_INJ_StopConversion+0x24>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	f043 0220 	orr.w	r2, r3, #32
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	7fffffc0 	.word	0x7fffffc0

080018cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d101      	bne.n	80018e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e18e      	b.n	8001c2c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fb5b 	bl	8000fd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff feef 	bl	8001718 <LL_ADC_IsDeepPowerDownEnabled>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fed5 	bl	80016f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff0a 	bl	8001768 <LL_ADC_IsInternalRegulatorEnabled>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d113      	bne.n	8001982 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff feee 	bl	8001740 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001964:	4b9a      	ldr	r3, [pc, #616]	; (8001bd0 <HAL_ADC_Init+0x2dc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	4a9a      	ldr	r2, [pc, #616]	; (8001bd4 <HAL_ADC_Init+0x2e0>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001974:	e002      	b.n	800197c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3b01      	subs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff feee 	bl	8001768 <LL_ADC_IsInternalRegulatorEnabled>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10d      	bne.n	80019ae <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	f043 0210 	orr.w	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff62 	bl	800187c <LL_ADC_REG_IsConversionOngoing>
 80019b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 8129 	bne.w	8001c1a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 8125 	bne.w	8001c1a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019d8:	f043 0202 	orr.w	r2, r3, #2
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fefb 	bl	80017e0 <LL_ADC_IsEnabled>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d136      	bne.n	8001a5e <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a78      	ldr	r2, [pc, #480]	; (8001bd8 <HAL_ADC_Init+0x2e4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d004      	beq.n	8001a04 <HAL_ADC_Init+0x110>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a77      	ldr	r2, [pc, #476]	; (8001bdc <HAL_ADC_Init+0x2e8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d10e      	bne.n	8001a22 <HAL_ADC_Init+0x12e>
 8001a04:	4874      	ldr	r0, [pc, #464]	; (8001bd8 <HAL_ADC_Init+0x2e4>)
 8001a06:	f7ff feeb 	bl	80017e0 <LL_ADC_IsEnabled>
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	4873      	ldr	r0, [pc, #460]	; (8001bdc <HAL_ADC_Init+0x2e8>)
 8001a0e:	f7ff fee7 	bl	80017e0 <LL_ADC_IsEnabled>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4323      	orrs	r3, r4
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bf0c      	ite	eq
 8001a1a:	2301      	moveq	r3, #1
 8001a1c:	2300      	movne	r3, #0
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	e008      	b.n	8001a34 <HAL_ADC_Init+0x140>
 8001a22:	486f      	ldr	r0, [pc, #444]	; (8001be0 <HAL_ADC_Init+0x2ec>)
 8001a24:	f7ff fedc 	bl	80017e0 <LL_ADC_IsEnabled>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d012      	beq.n	8001a5e <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a66      	ldr	r2, [pc, #408]	; (8001bd8 <HAL_ADC_Init+0x2e4>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_ADC_Init+0x158>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a65      	ldr	r2, [pc, #404]	; (8001bdc <HAL_ADC_Init+0x2e8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_Init+0x15c>
 8001a4c:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_ADC_Init+0x2f0>)
 8001a4e:	e000      	b.n	8001a52 <HAL_ADC_Init+0x15e>
 8001a50:	4a65      	ldr	r2, [pc, #404]	; (8001be8 <HAL_ADC_Init+0x2f4>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f7ff fd19 	bl	8001490 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001a5e:	f7ff fd0b 	bl	8001478 <HAL_GetREVID>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d914      	bls.n	8001a96 <HAL_ADC_Init+0x1a2>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b10      	cmp	r3, #16
 8001a72:	d110      	bne.n	8001a96 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7d5b      	ldrb	r3, [r3, #21]
 8001a78:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a7e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001a84:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7f1b      	ldrb	r3, [r3, #28]
 8001a8a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001a8c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a8e:	f043 030c 	orr.w	r3, r3, #12
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	e00d      	b.n	8001ab2 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7d5b      	ldrb	r3, [r3, #21]
 8001a9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aa0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001aa6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7f1b      	ldrb	r3, [r3, #28]
 8001aac:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7f1b      	ldrb	r3, [r3, #28]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	045b      	lsls	r3, r3, #17
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d009      	beq.n	8001ae4 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_ADC_Init+0x2f8>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff febd 	bl	800187c <LL_ADC_REG_IsConversionOngoing>
 8001b02:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fedf 	bl	80018cc <LL_ADC_INJ_IsConversionOngoing>
 8001b0e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d14a      	bne.n	8001bac <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d147      	bne.n	8001bac <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7d1b      	ldrb	r3, [r3, #20]
 8001b20:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_ADC_Init+0x2fc>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	69b9      	ldr	r1, [r7, #24]
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d11b      	bne.n	8001b80 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_ADC_Init+0x300>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	0411      	lsls	r1, r2, #16
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b64:	4311      	orrs	r1, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b70:	430a      	orrs	r2, r1
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	e007      	b.n	8001b90 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fee0 	bl	800296c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d121      	bne.n	8001bf8 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f023 010f 	bic.w	r1, r3, #15
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	1e5a      	subs	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
 8001bcc:	e01c      	b.n	8001c08 <HAL_ADC_Init+0x314>
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	053e2d63 	.word	0x053e2d63
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40022100 	.word	0x40022100
 8001be0:	58026000 	.word	0x58026000
 8001be4:	40022300 	.word	0x40022300
 8001be8:	58026300 	.word	0x58026300
 8001bec:	fff0c003 	.word	0xfff0c003
 8001bf0:	ffffbffc 	.word	0xffffbffc
 8001bf4:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 020f 	bic.w	r2, r2, #15
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	f023 0303 	bic.w	r3, r3, #3
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54
 8001c18:	e007      	b.n	8001c2a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3724      	adds	r7, #36	; 0x24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd90      	pop	{r4, r7, pc}

08001c34 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a5c      	ldr	r2, [pc, #368]	; (8001db4 <HAL_ADC_Start+0x180>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_ADC_Start+0x1c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a5b      	ldr	r2, [pc, #364]	; (8001db8 <HAL_ADC_Start+0x184>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_Start+0x20>
 8001c50:	4b5a      	ldr	r3, [pc, #360]	; (8001dbc <HAL_ADC_Start+0x188>)
 8001c52:	e000      	b.n	8001c56 <HAL_ADC_Start+0x22>
 8001c54:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <HAL_ADC_Start+0x18c>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fd30 	bl	80016bc <LL_ADC_GetMultimode>
 8001c5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fe0a 	bl	800187c <LL_ADC_REG_IsConversionOngoing>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 809a 	bne.w	8001da4 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_Start+0x4a>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e095      	b.n	8001daa <HAL_ADC_Start+0x176>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fd94 	bl	80027b4 <ADC_Enable>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 8081 	bne.w	8001d9a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c9c:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HAL_ADC_Start+0x190>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a42      	ldr	r2, [pc, #264]	; (8001db8 <HAL_ADC_Start+0x184>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d002      	beq.n	8001cb8 <HAL_ADC_Start+0x84>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e000      	b.n	8001cba <HAL_ADC_Start+0x86>
 8001cb8:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <HAL_ADC_Start+0x180>)
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d002      	beq.n	8001cc8 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ccc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce0:	d106      	bne.n	8001cf0 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f023 0206 	bic.w	r2, r3, #6
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	659a      	str	r2, [r3, #88]	; 0x58
 8001cee:	e002      	b.n	8001cf6 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	221c      	movs	r2, #28
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_ADC_Start+0x184>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d002      	beq.n	8001d16 <HAL_ADC_Start+0xe2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	e000      	b.n	8001d18 <HAL_ADC_Start+0xe4>
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_ADC_Start+0x180>)
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d008      	beq.n	8001d32 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d002      	beq.n	8001d32 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	d114      	bne.n	8001d5c <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fd69 	bl	800182c <LL_ADC_REG_StartConversion>
 8001d5a:	e025      	b.n	8001da8 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_ADC_Start+0x184>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d002      	beq.n	8001d78 <HAL_ADC_Start+0x144>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	e000      	b.n	8001d7a <HAL_ADC_Start+0x146>
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_ADC_Start+0x180>)
 8001d7a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00f      	beq.n	8001da8 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
 8001d98:	e006      	b.n	8001da8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001da2:	e001      	b.n	8001da8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
 8001da6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40022100 	.word	0x40022100
 8001dbc:	40022300 	.word	0x40022300
 8001dc0:	58026300 	.word	0x58026300
 8001dc4:	fffff0fe 	.word	0xfffff0fe

08001dc8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Stop+0x16>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e021      	b.n	8001e22 <HAL_ADC_Stop+0x5a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001de6:	2103      	movs	r1, #3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fc2f 	bl	800264c <ADC_ConversionStop>
 8001dee:	4603      	mov	r3, r0
 8001df0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10f      	bne.n	8001e18 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fd5f 	bl	80028bc <ADC_Disable>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_ADC_Stop+0x64>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	ffffeefe 	.word	0xffffeefe

08001e30 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_ADC_PollForConversion+0x1c8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_ADC_PollForConversion+0x1e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6c      	ldr	r2, [pc, #432]	; (8001ffc <HAL_ADC_PollForConversion+0x1cc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_PollForConversion+0x22>
 8001e4e:	4b6c      	ldr	r3, [pc, #432]	; (8002000 <HAL_ADC_PollForConversion+0x1d0>)
 8001e50:	e000      	b.n	8001e54 <HAL_ADC_PollForConversion+0x24>
 8001e52:	4b6c      	ldr	r3, [pc, #432]	; (8002004 <HAL_ADC_PollForConversion+0x1d4>)
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fc31 	bl	80016bc <LL_ADC_GetMultimode>
 8001e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d102      	bne.n	8001e6a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e64:	2308      	movs	r3, #8
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	e037      	b.n	8001eda <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d002      	beq.n	8001e7c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b09      	cmp	r3, #9
 8001e7a:	d111      	bne.n	8001ea0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d007      	beq.n	8001e9a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8e:	f043 0220 	orr.w	r2, r3, #32
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0aa      	b.n	8001ff0 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001e9e:	e01c      	b.n	8001eda <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a54      	ldr	r2, [pc, #336]	; (8001ff8 <HAL_ADC_PollForConversion+0x1c8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_ADC_PollForConversion+0x84>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a53      	ldr	r2, [pc, #332]	; (8001ffc <HAL_ADC_PollForConversion+0x1cc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0x88>
 8001eb4:	4b52      	ldr	r3, [pc, #328]	; (8002000 <HAL_ADC_PollForConversion+0x1d0>)
 8001eb6:	e000      	b.n	8001eba <HAL_ADC_PollForConversion+0x8a>
 8001eb8:	4b52      	ldr	r3, [pc, #328]	; (8002004 <HAL_ADC_PollForConversion+0x1d4>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fc0c 	bl	80016d8 <LL_ADC_GetMultiDMATransfer>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e08c      	b.n	8001ff0 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001eda:	f7ff fa9f 	bl	800141c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ee0:	e01a      	b.n	8001f18 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d016      	beq.n	8001f18 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001eea:	f7ff fa97 	bl	800141c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d302      	bcc.n	8001f00 <HAL_ADC_PollForConversion+0xd0>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	f043 0204 	orr.w	r2, r3, #4
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e06b      	b.n	8001ff0 <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0dd      	beq.n	8001ee2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fb32 	bl	80015a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01c      	beq.n	8001f7c <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7d5b      	ldrb	r3, [r3, #21]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d118      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d111      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_ADC_PollForConversion+0x1cc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d002      	beq.n	8001f8c <HAL_ADC_PollForConversion+0x15c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e000      	b.n	8001f8e <HAL_ADC_PollForConversion+0x15e>
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <HAL_ADC_PollForConversion+0x1c8>)
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d008      	beq.n	8001fa8 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d002      	beq.n	8001fa8 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b09      	cmp	r3, #9
 8001fa6:	d104      	bne.n	8001fb2 <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	e00c      	b.n	8001fcc <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <HAL_ADC_PollForConversion+0x1cc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d002      	beq.n	8001fc2 <HAL_ADC_PollForConversion+0x192>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	e000      	b.n	8001fc4 <HAL_ADC_PollForConversion+0x194>
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_ADC_PollForConversion+0x1c8>)
 8001fc4:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d104      	bne.n	8001fdc <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e008      	b.n	8001fee <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	220c      	movs	r2, #12
 8001fec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40022100 	.word	0x40022100
 8002000:	40022300 	.word	0x40022300
 8002004:	58026300 	.word	0x58026300

08002008 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b099      	sub	sp, #100	; 0x64
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a99      	ldr	r2, [pc, #612]	; (80022a4 <HAL_ADC_ConfigChannel+0x280>)
 800203e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x2a>
 800204a:	2302      	movs	r3, #2
 800204c:	e2e6      	b.n	800261c <HAL_ADC_ConfigChannel+0x5f8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fc0e 	bl	800187c <LL_ADC_REG_IsConversionOngoing>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 82cb 	bne.w	80025fe <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002070:	2b00      	cmp	r3, #0
 8002072:	d108      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x62>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2201      	movs	r2, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	e00f      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x82>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	2201      	movs	r2, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	69d1      	ldr	r1, [r2, #28]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	f7ff fa80 	bl	80015c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fbd6 	bl	800187c <LL_ADC_REG_IsConversionOngoing>
 80020d0:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fbf8 	bl	80018cc <LL_ADC_INJ_IsConversionOngoing>
 80020dc:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 80b3 	bne.w	800224c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 80af 	bne.w	800224c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f7ff fa8f 	bl	800161e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <HAL_ADC_ConfigChannel+0x284>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800210c:	d10b      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x102>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	e01d      	b.n	8002162 <HAL_ADC_ConfigChannel+0x13e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_ADC_ConfigChannel+0x128>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	e00a      	b.n	8002162 <HAL_ADC_ConfigChannel+0x13e>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d027      	beq.n	80021bc <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6919      	ldr	r1, [r3, #16]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800217a:	f7ff f9bd 	bl	80014f8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6919      	ldr	r1, [r3, #16]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	7e5b      	ldrb	r3, [r3, #25]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x170>
 800218e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002192:	e000      	b.n	8002196 <HAL_ADC_ConfigChannel+0x172>
 8002194:	2300      	movs	r3, #0
 8002196:	461a      	mov	r2, r3
 8002198:	f7ff f9e7 	bl	800156a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	7e1b      	ldrb	r3, [r3, #24]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d102      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x18e>
 80021ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b0:	e000      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x190>
 80021b2:	2300      	movs	r3, #0
 80021b4:	461a      	mov	r2, r3
 80021b6:	f7ff f9bf 	bl	8001538 <LL_ADC_SetDataRightShift>
 80021ba:	e047      	b.n	800224c <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	069b      	lsls	r3, r3, #26
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d107      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021de:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	069b      	lsls	r3, r3, #26
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002202:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800220a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	069b      	lsls	r3, r3, #26
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002226:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	069b      	lsls	r3, r3, #26
 8002238:	429a      	cmp	r2, r3
 800223a:	d107      	bne.n	800224c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800224a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fac5 	bl	80017e0 <LL_ADC_IsEnabled>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 81d9 	bne.w	8002610 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6819      	ldr	r1, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	461a      	mov	r2, r3
 800226c:	f7ff fa02 	bl	8001674 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <HAL_ADC_ConfigChannel+0x280>)
 8002276:	4293      	cmp	r3, r2
 8002278:	f040 8101 	bne.w	800247e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10f      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x288>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	3301      	adds	r3, #1
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2b09      	cmp	r3, #9
 800229a:	bf94      	ite	ls
 800229c:	2301      	movls	r3, #1
 800229e:	2300      	movhi	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	e016      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x2ae>
 80022a4:	47ff0000 	.word	0x47ff0000
 80022a8:	5c001000 	.word	0x5c001000
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d064      	beq.n	80023a0 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x2ce>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	3301      	adds	r3, #1
 80022ea:	069b      	lsls	r3, r3, #26
 80022ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f0:	e00e      	b.n	8002310 <HAL_ADC_ConfigChannel+0x2ec>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x30c>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2101      	movs	r1, #1
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	e010      	b.n	8002352 <HAL_ADC_ConfigChannel+0x32e>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	ea42 0103 	orr.w	r1, r2, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10a      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x354>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	3301      	adds	r3, #1
 800236a:	f003 021f 	and.w	r2, r3, #31
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	051b      	lsls	r3, r3, #20
 8002376:	e011      	b.n	800239c <HAL_ADC_ConfigChannel+0x378>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800239c:	430b      	orrs	r3, r1
 800239e:	e069      	b.n	8002474 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x398>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	3301      	adds	r3, #1
 80023b4:	069b      	lsls	r3, r3, #26
 80023b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ba:	e00e      	b.n	80023da <HAL_ADC_ConfigChannel+0x3b6>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	61fb      	str	r3, [r7, #28]
  return result;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	069b      	lsls	r3, r3, #26
 80023d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x3d6>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	3301      	adds	r3, #1
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2101      	movs	r1, #1
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	e010      	b.n	800241c <HAL_ADC_ConfigChannel+0x3f8>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	617b      	str	r3, [r7, #20]
  return result;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	ea42 0103 	orr.w	r1, r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x424>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	3b1e      	subs	r3, #30
 8002440:	051b      	lsls	r3, r3, #20
 8002442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002446:	e014      	b.n	8002472 <HAL_ADC_ConfigChannel+0x44e>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	60fb      	str	r3, [r7, #12]
  return result;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	3301      	adds	r3, #1
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3b1e      	subs	r3, #30
 800246c:	051b      	lsls	r3, r3, #20
 800246e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002472:	430b      	orrs	r3, r1
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	6892      	ldr	r2, [r2, #8]
 8002478:	4619      	mov	r1, r3
 800247a:	f7ff f8d0 	bl	800161e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f280 80c4 	bge.w	8002610 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a65      	ldr	r2, [pc, #404]	; (8002624 <HAL_ADC_ConfigChannel+0x600>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_ADC_ConfigChannel+0x478>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a64      	ldr	r2, [pc, #400]	; (8002628 <HAL_ADC_ConfigChannel+0x604>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x47c>
 800249c:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_ADC_ConfigChannel+0x608>)
 800249e:	e000      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x47e>
 80024a0:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_ADC_ConfigChannel+0x60c>)
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff f81a 	bl	80014dc <LL_ADC_GetCommonPathInternalCh>
 80024a8:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a5d      	ldr	r2, [pc, #372]	; (8002624 <HAL_ADC_ConfigChannel+0x600>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d004      	beq.n	80024be <HAL_ADC_ConfigChannel+0x49a>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a5b      	ldr	r2, [pc, #364]	; (8002628 <HAL_ADC_ConfigChannel+0x604>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10e      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x4b8>
 80024be:	4859      	ldr	r0, [pc, #356]	; (8002624 <HAL_ADC_ConfigChannel+0x600>)
 80024c0:	f7ff f98e 	bl	80017e0 <LL_ADC_IsEnabled>
 80024c4:	4604      	mov	r4, r0
 80024c6:	4858      	ldr	r0, [pc, #352]	; (8002628 <HAL_ADC_ConfigChannel+0x604>)
 80024c8:	f7ff f98a 	bl	80017e0 <LL_ADC_IsEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4323      	orrs	r3, r4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e008      	b.n	80024ee <HAL_ADC_ConfigChannel+0x4ca>
 80024dc:	4855      	ldr	r0, [pc, #340]	; (8002634 <HAL_ADC_ConfigChannel+0x610>)
 80024de:	f7ff f97f 	bl	80017e0 <LL_ADC_IsEnabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d07b      	beq.n	80025ea <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a50      	ldr	r2, [pc, #320]	; (8002638 <HAL_ADC_ConfigChannel+0x614>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d12e      	bne.n	800255a <HAL_ADC_ConfigChannel+0x536>
 80024fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d129      	bne.n	800255a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a4a      	ldr	r2, [pc, #296]	; (8002634 <HAL_ADC_ConfigChannel+0x610>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d17f      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a43      	ldr	r2, [pc, #268]	; (8002624 <HAL_ADC_ConfigChannel+0x600>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x500>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a42      	ldr	r2, [pc, #264]	; (8002628 <HAL_ADC_ConfigChannel+0x604>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x504>
 8002524:	4a41      	ldr	r2, [pc, #260]	; (800262c <HAL_ADC_ConfigChannel+0x608>)
 8002526:	e000      	b.n	800252a <HAL_ADC_ConfigChannel+0x506>
 8002528:	4a41      	ldr	r2, [pc, #260]	; (8002630 <HAL_ADC_ConfigChannel+0x60c>)
 800252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002530:	4619      	mov	r1, r3
 8002532:	4610      	mov	r0, r2
 8002534:	f7fe ffbf 	bl	80014b6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002538:	4b40      	ldr	r3, [pc, #256]	; (800263c <HAL_ADC_ConfigChannel+0x618>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	4a40      	ldr	r2, [pc, #256]	; (8002640 <HAL_ADC_ConfigChannel+0x61c>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800254a:	e002      	b.n	8002552 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3b01      	subs	r3, #1
 8002550:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002558:	e05a      	b.n	8002610 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a39      	ldr	r2, [pc, #228]	; (8002644 <HAL_ADC_ConfigChannel+0x620>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d11e      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x57e>
 8002564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a30      	ldr	r2, [pc, #192]	; (8002634 <HAL_ADC_ConfigChannel+0x610>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d14b      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a29      	ldr	r2, [pc, #164]	; (8002624 <HAL_ADC_ConfigChannel+0x600>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_ADC_ConfigChannel+0x568>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a28      	ldr	r2, [pc, #160]	; (8002628 <HAL_ADC_ConfigChannel+0x604>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x56c>
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_ADC_ConfigChannel+0x608>)
 800258e:	e000      	b.n	8002592 <HAL_ADC_ConfigChannel+0x56e>
 8002590:	4a27      	ldr	r2, [pc, #156]	; (8002630 <HAL_ADC_ConfigChannel+0x60c>)
 8002592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f7fe ff8b 	bl	80014b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a0:	e036      	b.n	8002610 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a28      	ldr	r2, [pc, #160]	; (8002648 <HAL_ADC_ConfigChannel+0x624>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d131      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x5ec>
 80025ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d12c      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1e      	ldr	r2, [pc, #120]	; (8002634 <HAL_ADC_ConfigChannel+0x610>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d127      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_ADC_ConfigChannel+0x600>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d004      	beq.n	80025d4 <HAL_ADC_ConfigChannel+0x5b0>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a16      	ldr	r2, [pc, #88]	; (8002628 <HAL_ADC_ConfigChannel+0x604>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x5b4>
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <HAL_ADC_ConfigChannel+0x608>)
 80025d6:	e000      	b.n	80025da <HAL_ADC_ConfigChannel+0x5b6>
 80025d8:	4a15      	ldr	r2, [pc, #84]	; (8002630 <HAL_ADC_ConfigChannel+0x60c>)
 80025da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f7fe ff67 	bl	80014b6 <LL_ADC_SetCommonPathInternalCh>
 80025e8:	e012      	b.n	8002610 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f043 0220 	orr.w	r2, r3, #32
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80025fc:	e008      	b.n	8002610 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f043 0220 	orr.w	r2, r3, #32
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800261c:	4618      	mov	r0, r3
 800261e:	3764      	adds	r7, #100	; 0x64
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	40022000 	.word	0x40022000
 8002628:	40022100 	.word	0x40022100
 800262c:	40022300 	.word	0x40022300
 8002630:	58026300 	.word	0x58026300
 8002634:	58026000 	.word	0x58026000
 8002638:	cb840000 	.word	0xcb840000
 800263c:	20000000 	.word	0x20000000
 8002640:	053e2d63 	.word	0x053e2d63
 8002644:	c7520000 	.word	0xc7520000
 8002648:	cfb80000 	.word	0xcfb80000

0800264c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f90a 	bl	800187c <LL_ADC_REG_IsConversionOngoing>
 8002668:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff f92c 	bl	80018cc <LL_ADC_INJ_IsConversionOngoing>
 8002674:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8090 	beq.w	80027a4 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d02a      	beq.n	80026e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7d5b      	ldrb	r3, [r3, #21]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d126      	bne.n	80026e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7d1b      	ldrb	r3, [r3, #20]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d122      	bne.n	80026e8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80026a6:	e014      	b.n	80026d2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4a41      	ldr	r2, [pc, #260]	; (80027b0 <ADC_ConversionStop+0x164>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d90d      	bls.n	80026cc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f043 0210 	orr.w	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e06c      	b.n	80027a6 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	3301      	adds	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d1e3      	bne.n	80026a8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d014      	beq.n	8002718 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff f8c2 	bl	800187c <LL_ADC_REG_IsConversionOngoing>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f87f 	bl	8001806 <LL_ADC_IsDisableOngoing>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f89e 	bl	8001854 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d014      	beq.n	8002748 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f8d2 	bl	80018cc <LL_ADC_INJ_IsConversionOngoing>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff f867 	bl	8001806 <LL_ADC_IsDisableOngoing>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f8ae 	bl	80018a4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d004      	beq.n	8002758 <ADC_ConversionStop+0x10c>
 800274e:	2b03      	cmp	r3, #3
 8002750:	d105      	bne.n	800275e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002752:	230c      	movs	r3, #12
 8002754:	617b      	str	r3, [r7, #20]
        break;
 8002756:	e005      	b.n	8002764 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002758:	2308      	movs	r3, #8
 800275a:	617b      	str	r3, [r7, #20]
        break;
 800275c:	e002      	b.n	8002764 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800275e:	2304      	movs	r3, #4
 8002760:	617b      	str	r3, [r7, #20]
        break;
 8002762:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002764:	f7fe fe5a 	bl	800141c <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800276a:	e014      	b.n	8002796 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800276c:	f7fe fe56 	bl	800141c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b05      	cmp	r3, #5
 8002778:	d90d      	bls.n	8002796 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e007      	b.n	80027a6 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e3      	bne.n	800276c <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3720      	adds	r7, #32
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	000cdbff 	.word	0x000cdbff

080027b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff f80d 	bl	80017e0 <LL_ADC_IsEnabled>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d167      	bne.n	800289c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <ADC_Enable+0xf4>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00d      	beq.n	80027f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	f043 0210 	orr.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e053      	b.n	800289e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe ffc8 	bl	8001790 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002800:	f7fe fe0c 	bl	800141c <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a28      	ldr	r2, [pc, #160]	; (80028ac <ADC_Enable+0xf8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d004      	beq.n	800281a <ADC_Enable+0x66>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <ADC_Enable+0xfc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <ADC_Enable+0x6a>
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <ADC_Enable+0x100>)
 800281c:	e000      	b.n	8002820 <ADC_Enable+0x6c>
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <ADC_Enable+0x104>)
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe ff4b 	bl	80016bc <LL_ADC_GetMultimode>
 8002826:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a20      	ldr	r2, [pc, #128]	; (80028b0 <ADC_Enable+0xfc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d002      	beq.n	8002838 <ADC_Enable+0x84>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	e000      	b.n	800283a <ADC_Enable+0x86>
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <ADC_Enable+0xf8>)
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	4293      	cmp	r3, r2
 8002840:	d025      	beq.n	800288e <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d129      	bne.n	800289c <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002848:	e021      	b.n	800288e <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe ffc6 	bl	80017e0 <LL_ADC_IsEnabled>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d104      	bne.n	8002864 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7fe ff96 	bl	8001790 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002864:	f7fe fdda 	bl	800141c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d90d      	bls.n	800288e <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f043 0210 	orr.w	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f043 0201 	orr.w	r2, r3, #1
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e007      	b.n	800289e <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d1d6      	bne.n	800284a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	8000003f 	.word	0x8000003f
 80028ac:	40022000 	.word	0x40022000
 80028b0:	40022100 	.word	0x40022100
 80028b4:	40022300 	.word	0x40022300
 80028b8:	58026300 	.word	0x58026300

080028bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe ff9c 	bl	8001806 <LL_ADC_IsDisableOngoing>
 80028ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe ff83 	bl	80017e0 <LL_ADC_IsEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d040      	beq.n	8002962 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d13d      	bne.n	8002962 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030d 	and.w	r3, r3, #13
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10c      	bne.n	800290e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe ff5d 	bl	80017b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2203      	movs	r2, #3
 8002904:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002906:	f7fe fd89 	bl	800141c <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800290c:	e022      	b.n	8002954 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e01c      	b.n	8002964 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800292a:	f7fe fd77 	bl	800141c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d90d      	bls.n	8002954 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f043 0210 	orr.w	r2, r3, #16
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e3      	bne.n	800292a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a70      	ldr	r2, [pc, #448]	; (8002b3c <ADC_ConfigureBoostMode+0x1d0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <ADC_ConfigureBoostMode+0x1c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a6f      	ldr	r2, [pc, #444]	; (8002b40 <ADC_ConfigureBoostMode+0x1d4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d109      	bne.n	800299c <ADC_ConfigureBoostMode+0x30>
 8002988:	4b6e      	ldr	r3, [pc, #440]	; (8002b44 <ADC_ConfigureBoostMode+0x1d8>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e008      	b.n	80029ae <ADC_ConfigureBoostMode+0x42>
 800299c:	4b6a      	ldr	r3, [pc, #424]	; (8002b48 <ADC_ConfigureBoostMode+0x1dc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01a      	beq.n	80029e8 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80029b2:	f004 f809 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 80029b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029c0:	d006      	beq.n	80029d0 <ADC_ConfigureBoostMode+0x64>
 80029c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029c6:	d00b      	beq.n	80029e0 <ADC_ConfigureBoostMode+0x74>
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d000      	beq.n	80029d0 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80029ce:	e05d      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	60fb      	str	r3, [r7, #12]
        break;
 80029de:	e055      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	60fb      	str	r3, [r7, #12]
        break;
 80029e6:	e051      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029ec:	f004 ff36 	bl	800785c <HAL_RCCEx_GetPeriphCLKFreq>
 80029f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029fa:	d02a      	beq.n	8002a52 <ADC_ConfigureBoostMode+0xe6>
 80029fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a00:	d813      	bhi.n	8002a2a <ADC_ConfigureBoostMode+0xbe>
 8002a02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a06:	d024      	beq.n	8002a52 <ADC_ConfigureBoostMode+0xe6>
 8002a08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a0c:	d806      	bhi.n	8002a1c <ADC_ConfigureBoostMode+0xb0>
 8002a0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a12:	d01e      	beq.n	8002a52 <ADC_ConfigureBoostMode+0xe6>
 8002a14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a18:	d01b      	beq.n	8002a52 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002a1a:	e037      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a20:	d017      	beq.n	8002a52 <ADC_ConfigureBoostMode+0xe6>
 8002a22:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a26:	d014      	beq.n	8002a52 <ADC_ConfigureBoostMode+0xe6>
        break;
 8002a28:	e030      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002a2a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a2e:	d021      	beq.n	8002a74 <ADC_ConfigureBoostMode+0x108>
 8002a30:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a34:	d806      	bhi.n	8002a44 <ADC_ConfigureBoostMode+0xd8>
 8002a36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a3a:	d013      	beq.n	8002a64 <ADC_ConfigureBoostMode+0xf8>
 8002a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a40:	d014      	beq.n	8002a6c <ADC_ConfigureBoostMode+0x100>
        break;
 8002a42:	e023      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002a44:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a48:	d018      	beq.n	8002a7c <ADC_ConfigureBoostMode+0x110>
 8002a4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a4e:	d019      	beq.n	8002a84 <ADC_ConfigureBoostMode+0x118>
        break;
 8002a50:	e01c      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0c9b      	lsrs	r3, r3, #18
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	60fb      	str	r3, [r7, #12]
        break;
 8002a62:	e013      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	60fb      	str	r3, [r7, #12]
        break;
 8002a6a:	e00f      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	60fb      	str	r3, [r7, #12]
        break;
 8002a72:	e00b      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	60fb      	str	r3, [r7, #12]
        break;
 8002a7a:	e007      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	09db      	lsrs	r3, r3, #7
 8002a80:	60fb      	str	r3, [r7, #12]
        break;
 8002a82:	e003      	b.n	8002a8c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	60fb      	str	r3, [r7, #12]
        break;
 8002a8a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a8c:	f7fe fcf4 	bl	8001478 <HAL_GetREVID>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d815      	bhi.n	8002ac6 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <ADC_ConfigureBoostMode+0x1e0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d908      	bls.n	8002ab4 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ab2:	e03e      	b.n	8002b32 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	e035      	b.n	8002b32 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <ADC_ConfigureBoostMode+0x1e4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d808      	bhi.n	8002ae6 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	e025      	b.n	8002b32 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a1a      	ldr	r2, [pc, #104]	; (8002b54 <ADC_ConfigureBoostMode+0x1e8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d80a      	bhi.n	8002b04 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	e016      	b.n	8002b32 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <ADC_ConfigureBoostMode+0x1ec>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d80a      	bhi.n	8002b22 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	e007      	b.n	8002b32 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b30:	609a      	str	r2, [r3, #8]
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40022100 	.word	0x40022100
 8002b44:	40022300 	.word	0x40022300
 8002b48:	58026300 	.word	0x58026300
 8002b4c:	01312d00 	.word	0x01312d00
 8002b50:	005f5e10 	.word	0x005f5e10
 8002b54:	00bebc20 	.word	0x00bebc20
 8002b58:	017d7840 	.word	0x017d7840

08002b5c <LL_ADC_IsEnabled>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <LL_ADC_IsEnabled+0x18>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_ADC_IsEnabled+0x1a>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d101      	bne.n	8002b9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b09f      	sub	sp, #124	; 0x7c
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e0ba      	b.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5c      	ldr	r2, [pc, #368]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d102      	bne.n	8002bde <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002bd8:	4b5b      	ldr	r3, [pc, #364]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	e001      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e09d      	b.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ffbd 	bl	8002b82 <LL_ADC_REG_IsConversionOngoing>
 8002c08:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ffb7 	bl	8002b82 <LL_ADC_REG_IsConversionOngoing>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d17f      	bne.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d17c      	bne.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a47      	ldr	r2, [pc, #284]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d101      	bne.n	8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002c34:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c36:	e000      	b.n	8002c3a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002c38:	4b45      	ldr	r3, [pc, #276]	; (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c3a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d039      	beq.n	8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c54:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3a      	ldr	r2, [pc, #232]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a38      	ldr	r2, [pc, #224]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10e      	bne.n	8002c88 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002c6a:	4836      	ldr	r0, [pc, #216]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c6c:	f7ff ff76 	bl	8002b5c <LL_ADC_IsEnabled>
 8002c70:	4604      	mov	r4, r0
 8002c72:	4835      	ldr	r0, [pc, #212]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c74:	f7ff ff72 	bl	8002b5c <LL_ADC_IsEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4323      	orrs	r3, r4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e008      	b.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002c88:	4832      	ldr	r0, [pc, #200]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c8a:	f7ff ff67 	bl	8002b5c <LL_ADC_IsEnabled>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d047      	beq.n	8002d2e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	6811      	ldr	r1, [r2, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	6892      	ldr	r2, [r2, #8]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cb6:	e03a      	b.n	8002d2e <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002cd8:	481a      	ldr	r0, [pc, #104]	; (8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002cda:	f7ff ff3f 	bl	8002b5c <LL_ADC_IsEnabled>
 8002cde:	4604      	mov	r4, r0
 8002ce0:	4819      	ldr	r0, [pc, #100]	; (8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002ce2:	f7ff ff3b 	bl	8002b5c <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4323      	orrs	r3, r4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf0c      	ite	eq
 8002cee:	2301      	moveq	r3, #1
 8002cf0:	2300      	movne	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e008      	b.n	8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002cf6:	4817      	ldr	r0, [pc, #92]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002cf8:	f7ff ff30 	bl	8002b5c <LL_ADC_IsEnabled>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d16:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d18:	e009      	b.n	8002d2e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d2c:	e000      	b.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d2e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	377c      	adds	r7, #124	; 0x7c
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd90      	pop	{r4, r7, pc}
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40022100 	.word	0x40022100
 8002d4c:	40022300 	.word	0x40022300
 8002d50:	58026300 	.word	0x58026300
 8002d54:	58026000 	.word	0x58026000
 8002d58:	fffff0e0 	.word	0xfffff0e0

08002d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <__NVIC_SetPriorityGrouping+0x40>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8a:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <__NVIC_SetPriorityGrouping+0x40>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	60d3      	str	r3, [r2, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00
 8002da0:	05fa0000 	.word	0x05fa0000

08002da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <__NVIC_GetPriorityGrouping+0x18>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 0307 	and.w	r3, r3, #7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db0b      	blt.n	8002dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4907      	ldr	r1, [pc, #28]	; (8002df8 <__NVIC_EnableIRQ+0x38>)
 8002dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	db0a      	blt.n	8002e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	490c      	ldr	r1, [pc, #48]	; (8002e48 <__NVIC_SetPriority+0x4c>)
 8002e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e24:	e00a      	b.n	8002e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4908      	ldr	r1, [pc, #32]	; (8002e4c <__NVIC_SetPriority+0x50>)
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	3b04      	subs	r3, #4
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	440b      	add	r3, r1
 8002e3a:	761a      	strb	r2, [r3, #24]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f1c3 0307 	rsb	r3, r3, #7
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	bf28      	it	cs
 8002e6e:	2304      	movcs	r3, #4
 8002e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3304      	adds	r3, #4
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d902      	bls.n	8002e80 <NVIC_EncodePriority+0x30>
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3b03      	subs	r3, #3
 8002e7e:	e000      	b.n	8002e82 <NVIC_EncodePriority+0x32>
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e84:	f04f 32ff 	mov.w	r2, #4294967295
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	401a      	ands	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	43d9      	mvns	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	4313      	orrs	r3, r2
         );
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ec8:	d301      	bcc.n	8002ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e00f      	b.n	8002eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <SysTick_Config+0x40>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8002edc:	f7ff ff8e 	bl	8002dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <SysTick_Config+0x40>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <SysTick_Config+0x40>)
 8002ee8:	2207      	movs	r2, #7
 8002eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	e000e010 	.word	0xe000e010

08002efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff ff29 	bl	8002d5c <__NVIC_SetPriorityGrouping>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b086      	sub	sp, #24
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f20:	f7ff ff40 	bl	8002da4 <__NVIC_GetPriorityGrouping>
 8002f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	6978      	ldr	r0, [r7, #20]
 8002f2c:	f7ff ff90 	bl	8002e50 <NVIC_EncodePriority>
 8002f30:	4602      	mov	r2, r0
 8002f32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f36:	4611      	mov	r1, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ff5f 	bl	8002dfc <__NVIC_SetPriority>
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff33 	bl	8002dc0 <__NVIC_EnableIRQ>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ffa4 	bl	8002eb8 <SysTick_Config>
 8002f70:	4603      	mov	r3, r0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e014      	b.n	8002fb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	791b      	ldrb	r3, [r3, #4]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fe f861 	bl	8001064 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	795b      	ldrb	r3, [r3, #5]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_DAC_Start_DMA+0x1e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e09e      	b.n	800311c <HAL_DAC_Start_DMA+0x15c>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d12a      	bne.n	8003046 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a4b      	ldr	r2, [pc, #300]	; (8003124 <HAL_DAC_Start_DMA+0x164>)
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a4a      	ldr	r2, [pc, #296]	; (8003128 <HAL_DAC_Start_DMA+0x168>)
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	4a49      	ldr	r2, [pc, #292]	; (800312c <HAL_DAC_Start_DMA+0x16c>)
 8003006:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003016:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	2b04      	cmp	r3, #4
 800301c:	d009      	beq.n	8003032 <HAL_DAC_Start_DMA+0x72>
 800301e:	2b08      	cmp	r3, #8
 8003020:	d00c      	beq.n	800303c <HAL_DAC_Start_DMA+0x7c>
 8003022:	2b00      	cmp	r3, #0
 8003024:	d000      	beq.n	8003028 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003026:	e039      	b.n	800309c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3308      	adds	r3, #8
 800302e:	613b      	str	r3, [r7, #16]
        break;
 8003030:	e034      	b.n	800309c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	613b      	str	r3, [r7, #16]
        break;
 800303a:	e02f      	b.n	800309c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3310      	adds	r3, #16
 8003042:	613b      	str	r3, [r7, #16]
        break;
 8003044:	e02a      	b.n	800309c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	4a39      	ldr	r2, [pc, #228]	; (8003130 <HAL_DAC_Start_DMA+0x170>)
 800304c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_DAC_Start_DMA+0x174>)
 8003054:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a37      	ldr	r2, [pc, #220]	; (8003138 <HAL_DAC_Start_DMA+0x178>)
 800305c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800306c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d009      	beq.n	8003088 <HAL_DAC_Start_DMA+0xc8>
 8003074:	2b08      	cmp	r3, #8
 8003076:	d00c      	beq.n	8003092 <HAL_DAC_Start_DMA+0xd2>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d000      	beq.n	800307e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800307c:	e00e      	b.n	800309c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3314      	adds	r3, #20
 8003084:	613b      	str	r3, [r7, #16]
        break;
 8003086:	e009      	b.n	800309c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3318      	adds	r3, #24
 800308e:	613b      	str	r3, [r7, #16]
        break;
 8003090:	e004      	b.n	800309c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	331c      	adds	r3, #28
 8003098:	613b      	str	r3, [r7, #16]
        break;
 800309a:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d111      	bne.n	80030c6 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b0:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6898      	ldr	r0, [r3, #8]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	f000 fd98 	bl	8003bf0 <HAL_DMA_Start_IT>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]
 80030c4:	e010      	b.n	80030e8 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030d4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	68d8      	ldr	r0, [r3, #12]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	f000 fd86 	bl	8003bf0 <HAL_DMA_Start_IT>
 80030e4:	4603      	mov	r3, r0
 80030e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10c      	bne.n	800310e <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2201      	movs	r2, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e005      	b.n	800311a <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f043 0204 	orr.w	r2, r3, #4
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800311a:	7dfb      	ldrb	r3, [r7, #23]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	08003425 	.word	0x08003425
 8003128:	08003447 	.word	0x08003447
 800312c:	08003463 	.word	0x08003463
 8003130:	080034cd 	.word	0x080034cd
 8003134:	080034ef 	.word	0x080034ef
 8003138:	0800350b 	.word	0x0800350b

0800313c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	3308      	adds	r3, #8
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e004      	b.n	8003170 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3314      	adds	r3, #20
 800316e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	461a      	mov	r2, r3
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	795b      	ldrb	r3, [r3, #5]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_DAC_ConfigChannel+0x18>
 80031d8:	2302      	movs	r3, #2
 80031da:	e11d      	b.n	8003418 <HAL_DAC_ConfigChannel+0x254>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2202      	movs	r2, #2
 80031e6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d174      	bne.n	80032da <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80031f0:	f7fe f914 	bl	800141c <HAL_GetTick>
 80031f4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d134      	bne.n	8003266 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031fc:	e011      	b.n	8003222 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031fe:	f7fe f90d 	bl	800141c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d90a      	bls.n	8003222 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f043 0208 	orr.w	r2, r3, #8
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2203      	movs	r2, #3
 800321c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0fa      	b.n	8003418 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003228:	4b7d      	ldr	r3, [pc, #500]	; (8003420 <HAL_DAC_ConfigChannel+0x25c>)
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e6      	bne.n	80031fe <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003230:	2001      	movs	r0, #1
 8003232:	f7fe f8ff 	bl	8001434 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	6992      	ldr	r2, [r2, #24]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
 8003240:	e01e      	b.n	8003280 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003242:	f7fe f8eb 	bl	800141c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d90a      	bls.n	8003266 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f043 0208 	orr.w	r2, r3, #8
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2203      	movs	r2, #3
 8003260:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0d8      	b.n	8003418 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800326c:	2b00      	cmp	r3, #0
 800326e:	dbe8      	blt.n	8003242 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003270:	2001      	movs	r0, #1
 8003272:	f7fe f8df 	bl	8001434 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	6992      	ldr	r2, [r2, #24]
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	ea02 0103 	and.w	r1, r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	21ff      	movs	r1, #255	; 0xff
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	ea02 0103 	and.w	r1, r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d11d      	bne.n	800331e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	221f      	movs	r2, #31
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4013      	ands	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003324:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2207      	movs	r2, #7
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4013      	ands	r3, r2
 8003338:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e00f      	b.n	8003368 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d102      	bne.n	8003356 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003350:	2301      	movs	r3, #1
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	e008      	b.n	8003368 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800335e:	2301      	movs	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	e001      	b.n	8003368 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4313      	orrs	r3, r2
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	400a      	ands	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4013      	ands	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	22c0      	movs	r2, #192	; 0xc0
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43da      	mvns	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	400a      	ands	r2, r1
 8003408:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20008000 	.word	0x20008000

08003424 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7ff fea7 	bl	8003186 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	711a      	strb	r2, [r3, #4]
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f7ff fea0 	bl	800319a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f7ff fe96 	bl	80031ae <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	711a      	strb	r2, [r3, #4]
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff ffd8 	bl	8003490 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	711a      	strb	r2, [r3, #4]
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff ffd1 	bl	80034a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f043 0204 	orr.w	r2, r3, #4
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ffc7 	bl	80034b8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	711a      	strb	r2, [r3, #4]
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003540:	f7fd ff6c 	bl	800141c <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e316      	b.n	8003b7e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a66      	ldr	r2, [pc, #408]	; (80036f0 <HAL_DMA_Init+0x1b8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d04a      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a65      	ldr	r2, [pc, #404]	; (80036f4 <HAL_DMA_Init+0x1bc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d045      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a63      	ldr	r2, [pc, #396]	; (80036f8 <HAL_DMA_Init+0x1c0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d040      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a62      	ldr	r2, [pc, #392]	; (80036fc <HAL_DMA_Init+0x1c4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d03b      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a60      	ldr	r2, [pc, #384]	; (8003700 <HAL_DMA_Init+0x1c8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d036      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a5f      	ldr	r2, [pc, #380]	; (8003704 <HAL_DMA_Init+0x1cc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d031      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5d      	ldr	r2, [pc, #372]	; (8003708 <HAL_DMA_Init+0x1d0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d02c      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5c      	ldr	r2, [pc, #368]	; (800370c <HAL_DMA_Init+0x1d4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d027      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a5a      	ldr	r2, [pc, #360]	; (8003710 <HAL_DMA_Init+0x1d8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d022      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a59      	ldr	r2, [pc, #356]	; (8003714 <HAL_DMA_Init+0x1dc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d01d      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a57      	ldr	r2, [pc, #348]	; (8003718 <HAL_DMA_Init+0x1e0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d018      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a56      	ldr	r2, [pc, #344]	; (800371c <HAL_DMA_Init+0x1e4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a54      	ldr	r2, [pc, #336]	; (8003720 <HAL_DMA_Init+0x1e8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00e      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a53      	ldr	r2, [pc, #332]	; (8003724 <HAL_DMA_Init+0x1ec>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a51      	ldr	r2, [pc, #324]	; (8003728 <HAL_DMA_Init+0x1f0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_DMA_Init+0xb8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a50      	ldr	r2, [pc, #320]	; (800372c <HAL_DMA_Init+0x1f4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_DMA_Init+0xbc>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_DMA_Init+0xbe>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 813b 	beq.w	8003872 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a37      	ldr	r2, [pc, #220]	; (80036f0 <HAL_DMA_Init+0x1b8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d04a      	beq.n	80036ac <HAL_DMA_Init+0x174>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a36      	ldr	r2, [pc, #216]	; (80036f4 <HAL_DMA_Init+0x1bc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d045      	beq.n	80036ac <HAL_DMA_Init+0x174>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a34      	ldr	r2, [pc, #208]	; (80036f8 <HAL_DMA_Init+0x1c0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d040      	beq.n	80036ac <HAL_DMA_Init+0x174>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a33      	ldr	r2, [pc, #204]	; (80036fc <HAL_DMA_Init+0x1c4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d03b      	beq.n	80036ac <HAL_DMA_Init+0x174>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a31      	ldr	r2, [pc, #196]	; (8003700 <HAL_DMA_Init+0x1c8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d036      	beq.n	80036ac <HAL_DMA_Init+0x174>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a30      	ldr	r2, [pc, #192]	; (8003704 <HAL_DMA_Init+0x1cc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d031      	beq.n	80036ac <HAL_DMA_Init+0x174>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2e      	ldr	r2, [pc, #184]	; (8003708 <HAL_DMA_Init+0x1d0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d02c      	beq.n	80036ac <HAL_DMA_Init+0x174>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2d      	ldr	r2, [pc, #180]	; (800370c <HAL_DMA_Init+0x1d4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d027      	beq.n	80036ac <HAL_DMA_Init+0x174>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <HAL_DMA_Init+0x1d8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d022      	beq.n	80036ac <HAL_DMA_Init+0x174>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <HAL_DMA_Init+0x1dc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d01d      	beq.n	80036ac <HAL_DMA_Init+0x174>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a28      	ldr	r2, [pc, #160]	; (8003718 <HAL_DMA_Init+0x1e0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d018      	beq.n	80036ac <HAL_DMA_Init+0x174>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a27      	ldr	r2, [pc, #156]	; (800371c <HAL_DMA_Init+0x1e4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <HAL_DMA_Init+0x174>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a25      	ldr	r2, [pc, #148]	; (8003720 <HAL_DMA_Init+0x1e8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00e      	beq.n	80036ac <HAL_DMA_Init+0x174>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a24      	ldr	r2, [pc, #144]	; (8003724 <HAL_DMA_Init+0x1ec>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_DMA_Init+0x174>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a22      	ldr	r2, [pc, #136]	; (8003728 <HAL_DMA_Init+0x1f0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_DMA_Init+0x174>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a21      	ldr	r2, [pc, #132]	; (800372c <HAL_DMA_Init+0x1f4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <HAL_DMA_Init+0x186>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e007      	b.n	80036ce <HAL_DMA_Init+0x196>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036ce:	e02f      	b.n	8003730 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036d0:	f7fd fea4 	bl	800141c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b05      	cmp	r3, #5
 80036dc:	d928      	bls.n	8003730 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2203      	movs	r2, #3
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e246      	b.n	8003b7e <HAL_DMA_Init+0x646>
 80036f0:	40020010 	.word	0x40020010
 80036f4:	40020028 	.word	0x40020028
 80036f8:	40020040 	.word	0x40020040
 80036fc:	40020058 	.word	0x40020058
 8003700:	40020070 	.word	0x40020070
 8003704:	40020088 	.word	0x40020088
 8003708:	400200a0 	.word	0x400200a0
 800370c:	400200b8 	.word	0x400200b8
 8003710:	40020410 	.word	0x40020410
 8003714:	40020428 	.word	0x40020428
 8003718:	40020440 	.word	0x40020440
 800371c:	40020458 	.word	0x40020458
 8003720:	40020470 	.word	0x40020470
 8003724:	40020488 	.word	0x40020488
 8003728:	400204a0 	.word	0x400204a0
 800372c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1c8      	bne.n	80036d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4b83      	ldr	r3, [pc, #524]	; (8003958 <HAL_DMA_Init+0x420>)
 800374a:	4013      	ands	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003756:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003762:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2b04      	cmp	r3, #4
 8003782:	d107      	bne.n	8003794 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	4313      	orrs	r3, r2
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003794:	4b71      	ldr	r3, [pc, #452]	; (800395c <HAL_DMA_Init+0x424>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b71      	ldr	r3, [pc, #452]	; (8003960 <HAL_DMA_Init+0x428>)
 800379a:	4013      	ands	r3, r2
 800379c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037a0:	d328      	bcc.n	80037f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b28      	cmp	r3, #40	; 0x28
 80037a8:	d903      	bls.n	80037b2 <HAL_DMA_Init+0x27a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b2e      	cmp	r3, #46	; 0x2e
 80037b0:	d917      	bls.n	80037e2 <HAL_DMA_Init+0x2aa>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b3e      	cmp	r3, #62	; 0x3e
 80037b8:	d903      	bls.n	80037c2 <HAL_DMA_Init+0x28a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b42      	cmp	r3, #66	; 0x42
 80037c0:	d90f      	bls.n	80037e2 <HAL_DMA_Init+0x2aa>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b46      	cmp	r3, #70	; 0x46
 80037c8:	d903      	bls.n	80037d2 <HAL_DMA_Init+0x29a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b48      	cmp	r3, #72	; 0x48
 80037d0:	d907      	bls.n	80037e2 <HAL_DMA_Init+0x2aa>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b4e      	cmp	r3, #78	; 0x4e
 80037d8:	d905      	bls.n	80037e6 <HAL_DMA_Init+0x2ae>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b52      	cmp	r3, #82	; 0x52
 80037e0:	d801      	bhi.n	80037e6 <HAL_DMA_Init+0x2ae>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_DMA_Init+0x2b0>
 80037e6:	2300      	movs	r3, #0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0307 	bic.w	r3, r3, #7
 800380a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b04      	cmp	r3, #4
 800381c:	d117      	bne.n	800384e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f001 fdcf 	bl	80053d4 <DMA_CheckFifoParam>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e197      	b.n	8003b7e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f001 fd0a 	bl	8005270 <DMA_CalcBaseAndBitshift>
 800385c:	4603      	mov	r3, r0
 800385e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	223f      	movs	r2, #63	; 0x3f
 800386a:	409a      	lsls	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	e0cd      	b.n	8003a0e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3b      	ldr	r2, [pc, #236]	; (8003964 <HAL_DMA_Init+0x42c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d022      	beq.n	80038c2 <HAL_DMA_Init+0x38a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a39      	ldr	r2, [pc, #228]	; (8003968 <HAL_DMA_Init+0x430>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d01d      	beq.n	80038c2 <HAL_DMA_Init+0x38a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a38      	ldr	r2, [pc, #224]	; (800396c <HAL_DMA_Init+0x434>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d018      	beq.n	80038c2 <HAL_DMA_Init+0x38a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a36      	ldr	r2, [pc, #216]	; (8003970 <HAL_DMA_Init+0x438>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_DMA_Init+0x38a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a35      	ldr	r2, [pc, #212]	; (8003974 <HAL_DMA_Init+0x43c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_DMA_Init+0x38a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a33      	ldr	r2, [pc, #204]	; (8003978 <HAL_DMA_Init+0x440>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_DMA_Init+0x38a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a32      	ldr	r2, [pc, #200]	; (800397c <HAL_DMA_Init+0x444>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_DMA_Init+0x38a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a30      	ldr	r2, [pc, #192]	; (8003980 <HAL_DMA_Init+0x448>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_DMA_Init+0x38e>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_DMA_Init+0x390>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 8097 	beq.w	80039fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a24      	ldr	r2, [pc, #144]	; (8003964 <HAL_DMA_Init+0x42c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d021      	beq.n	800391c <HAL_DMA_Init+0x3e4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a22      	ldr	r2, [pc, #136]	; (8003968 <HAL_DMA_Init+0x430>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01c      	beq.n	800391c <HAL_DMA_Init+0x3e4>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a21      	ldr	r2, [pc, #132]	; (800396c <HAL_DMA_Init+0x434>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d017      	beq.n	800391c <HAL_DMA_Init+0x3e4>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <HAL_DMA_Init+0x438>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d012      	beq.n	800391c <HAL_DMA_Init+0x3e4>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <HAL_DMA_Init+0x43c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00d      	beq.n	800391c <HAL_DMA_Init+0x3e4>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <HAL_DMA_Init+0x440>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d008      	beq.n	800391c <HAL_DMA_Init+0x3e4>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1b      	ldr	r2, [pc, #108]	; (800397c <HAL_DMA_Init+0x444>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <HAL_DMA_Init+0x3e4>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a19      	ldr	r2, [pc, #100]	; (8003980 <HAL_DMA_Init+0x448>)
 800391a:	4293      	cmp	r3, r2
 800391c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_DMA_Init+0x44c>)
 800393a:	4013      	ands	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d020      	beq.n	8003988 <HAL_DMA_Init+0x450>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	d102      	bne.n	8003954 <HAL_DMA_Init+0x41c>
 800394e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003952:	e01a      	b.n	800398a <HAL_DMA_Init+0x452>
 8003954:	2300      	movs	r3, #0
 8003956:	e018      	b.n	800398a <HAL_DMA_Init+0x452>
 8003958:	fe10803f 	.word	0xfe10803f
 800395c:	5c001000 	.word	0x5c001000
 8003960:	ffff0000 	.word	0xffff0000
 8003964:	58025408 	.word	0x58025408
 8003968:	5802541c 	.word	0x5802541c
 800396c:	58025430 	.word	0x58025430
 8003970:	58025444 	.word	0x58025444
 8003974:	58025458 	.word	0x58025458
 8003978:	5802546c 	.word	0x5802546c
 800397c:	58025480 	.word	0x58025480
 8003980:	58025494 	.word	0x58025494
 8003984:	fffe000f 	.word	0xfffe000f
 8003988:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b6e      	ldr	r3, [pc, #440]	; (8003b88 <HAL_DMA_Init+0x650>)
 80039d0:	4413      	add	r3, r2
 80039d2:	4a6e      	ldr	r2, [pc, #440]	; (8003b8c <HAL_DMA_Init+0x654>)
 80039d4:	fba2 2303 	umull	r2, r3, r2, r3
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	009a      	lsls	r2, r3, #2
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f001 fc45 	bl	8005270 <DMA_CalcBaseAndBitshift>
 80039e6:	4603      	mov	r3, r0
 80039e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	2201      	movs	r2, #1
 80039f4:	409a      	lsls	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	605a      	str	r2, [r3, #4]
 80039fa:	e008      	b.n	8003a0e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2240      	movs	r2, #64	; 0x40
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2203      	movs	r2, #3
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e0b7      	b.n	8003b7e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a5f      	ldr	r2, [pc, #380]	; (8003b90 <HAL_DMA_Init+0x658>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d072      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a5d      	ldr	r2, [pc, #372]	; (8003b94 <HAL_DMA_Init+0x65c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d06d      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_DMA_Init+0x660>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d068      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a5a      	ldr	r2, [pc, #360]	; (8003b9c <HAL_DMA_Init+0x664>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d063      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a59      	ldr	r2, [pc, #356]	; (8003ba0 <HAL_DMA_Init+0x668>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d05e      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a57      	ldr	r2, [pc, #348]	; (8003ba4 <HAL_DMA_Init+0x66c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d059      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a56      	ldr	r2, [pc, #344]	; (8003ba8 <HAL_DMA_Init+0x670>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d054      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_DMA_Init+0x674>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d04f      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a53      	ldr	r2, [pc, #332]	; (8003bb0 <HAL_DMA_Init+0x678>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a51      	ldr	r2, [pc, #324]	; (8003bb4 <HAL_DMA_Init+0x67c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a50      	ldr	r2, [pc, #320]	; (8003bb8 <HAL_DMA_Init+0x680>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a4e      	ldr	r2, [pc, #312]	; (8003bbc <HAL_DMA_Init+0x684>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a4d      	ldr	r2, [pc, #308]	; (8003bc0 <HAL_DMA_Init+0x688>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a4b      	ldr	r2, [pc, #300]	; (8003bc4 <HAL_DMA_Init+0x68c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a4a      	ldr	r2, [pc, #296]	; (8003bc8 <HAL_DMA_Init+0x690>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a48      	ldr	r2, [pc, #288]	; (8003bcc <HAL_DMA_Init+0x694>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a47      	ldr	r2, [pc, #284]	; (8003bd0 <HAL_DMA_Init+0x698>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a45      	ldr	r2, [pc, #276]	; (8003bd4 <HAL_DMA_Init+0x69c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a44      	ldr	r2, [pc, #272]	; (8003bd8 <HAL_DMA_Init+0x6a0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a42      	ldr	r2, [pc, #264]	; (8003bdc <HAL_DMA_Init+0x6a4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a41      	ldr	r2, [pc, #260]	; (8003be0 <HAL_DMA_Init+0x6a8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3f      	ldr	r2, [pc, #252]	; (8003be4 <HAL_DMA_Init+0x6ac>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a3e      	ldr	r2, [pc, #248]	; (8003be8 <HAL_DMA_Init+0x6b0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_Init+0x5c6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3c      	ldr	r2, [pc, #240]	; (8003bec <HAL_DMA_Init+0x6b4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <HAL_DMA_Init+0x5ca>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_DMA_Init+0x5cc>
 8003b02:	2300      	movs	r3, #0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d032      	beq.n	8003b6e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f001 fcdf 	bl	80054cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b80      	cmp	r3, #128	; 0x80
 8003b14:	d102      	bne.n	8003b1c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b30:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d010      	beq.n	8003b5c <HAL_DMA_Init+0x624>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d80c      	bhi.n	8003b5c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f001 fd5c 	bl	8005600 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	e008      	b.n	8003b6e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	a7fdabf8 	.word	0xa7fdabf8
 8003b8c:	cccccccd 	.word	0xcccccccd
 8003b90:	40020010 	.word	0x40020010
 8003b94:	40020028 	.word	0x40020028
 8003b98:	40020040 	.word	0x40020040
 8003b9c:	40020058 	.word	0x40020058
 8003ba0:	40020070 	.word	0x40020070
 8003ba4:	40020088 	.word	0x40020088
 8003ba8:	400200a0 	.word	0x400200a0
 8003bac:	400200b8 	.word	0x400200b8
 8003bb0:	40020410 	.word	0x40020410
 8003bb4:	40020428 	.word	0x40020428
 8003bb8:	40020440 	.word	0x40020440
 8003bbc:	40020458 	.word	0x40020458
 8003bc0:	40020470 	.word	0x40020470
 8003bc4:	40020488 	.word	0x40020488
 8003bc8:	400204a0 	.word	0x400204a0
 8003bcc:	400204b8 	.word	0x400204b8
 8003bd0:	58025408 	.word	0x58025408
 8003bd4:	5802541c 	.word	0x5802541c
 8003bd8:	58025430 	.word	0x58025430
 8003bdc:	58025444 	.word	0x58025444
 8003be0:	58025458 	.word	0x58025458
 8003be4:	5802546c 	.word	0x5802546c
 8003be8:	58025480 	.word	0x58025480
 8003bec:	58025494 	.word	0x58025494

08003bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e226      	b.n	800405a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_DMA_Start_IT+0x2a>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e21f      	b.n	800405a <HAL_DMA_Start_IT+0x46a>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	f040 820a 	bne.w	8004044 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a68      	ldr	r2, [pc, #416]	; (8003de4 <HAL_DMA_Start_IT+0x1f4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04a      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a66      	ldr	r2, [pc, #408]	; (8003de8 <HAL_DMA_Start_IT+0x1f8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d045      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a65      	ldr	r2, [pc, #404]	; (8003dec <HAL_DMA_Start_IT+0x1fc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d040      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a63      	ldr	r2, [pc, #396]	; (8003df0 <HAL_DMA_Start_IT+0x200>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d03b      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a62      	ldr	r2, [pc, #392]	; (8003df4 <HAL_DMA_Start_IT+0x204>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d036      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a60      	ldr	r2, [pc, #384]	; (8003df8 <HAL_DMA_Start_IT+0x208>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d031      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5f      	ldr	r2, [pc, #380]	; (8003dfc <HAL_DMA_Start_IT+0x20c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d02c      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5d      	ldr	r2, [pc, #372]	; (8003e00 <HAL_DMA_Start_IT+0x210>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d027      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5c      	ldr	r2, [pc, #368]	; (8003e04 <HAL_DMA_Start_IT+0x214>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5a      	ldr	r2, [pc, #360]	; (8003e08 <HAL_DMA_Start_IT+0x218>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a59      	ldr	r2, [pc, #356]	; (8003e0c <HAL_DMA_Start_IT+0x21c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a57      	ldr	r2, [pc, #348]	; (8003e10 <HAL_DMA_Start_IT+0x220>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a56      	ldr	r2, [pc, #344]	; (8003e14 <HAL_DMA_Start_IT+0x224>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a54      	ldr	r2, [pc, #336]	; (8003e18 <HAL_DMA_Start_IT+0x228>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a53      	ldr	r2, [pc, #332]	; (8003e1c <HAL_DMA_Start_IT+0x22c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_DMA_Start_IT+0xee>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a51      	ldr	r2, [pc, #324]	; (8003e20 <HAL_DMA_Start_IT+0x230>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <HAL_DMA_Start_IT+0x100>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0201 	bic.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e007      	b.n	8003d00 <HAL_DMA_Start_IT+0x110>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f001 f906 	bl	8004f18 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a34      	ldr	r2, [pc, #208]	; (8003de4 <HAL_DMA_Start_IT+0x1f4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d04a      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a33      	ldr	r2, [pc, #204]	; (8003de8 <HAL_DMA_Start_IT+0x1f8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d045      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a31      	ldr	r2, [pc, #196]	; (8003dec <HAL_DMA_Start_IT+0x1fc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d040      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a30      	ldr	r2, [pc, #192]	; (8003df0 <HAL_DMA_Start_IT+0x200>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d03b      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2e      	ldr	r2, [pc, #184]	; (8003df4 <HAL_DMA_Start_IT+0x204>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d036      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2d      	ldr	r2, [pc, #180]	; (8003df8 <HAL_DMA_Start_IT+0x208>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d031      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_DMA_Start_IT+0x20c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d02c      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2a      	ldr	r2, [pc, #168]	; (8003e00 <HAL_DMA_Start_IT+0x210>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d027      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a28      	ldr	r2, [pc, #160]	; (8003e04 <HAL_DMA_Start_IT+0x214>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d022      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a27      	ldr	r2, [pc, #156]	; (8003e08 <HAL_DMA_Start_IT+0x218>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d01d      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <HAL_DMA_Start_IT+0x21c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d018      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_DMA_Start_IT+0x220>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <HAL_DMA_Start_IT+0x224>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00e      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <HAL_DMA_Start_IT+0x228>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d009      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <HAL_DMA_Start_IT+0x22c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_DMA_Start_IT+0x1bc>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_DMA_Start_IT+0x230>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_DMA_Start_IT+0x1c0>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <HAL_DMA_Start_IT+0x1c2>
 8003db0:	2300      	movs	r3, #0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d036      	beq.n	8003e24 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 021e 	bic.w	r2, r3, #30
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0216 	orr.w	r2, r2, #22
 8003dc8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d03e      	beq.n	8003e50 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0208 	orr.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e035      	b.n	8003e50 <HAL_DMA_Start_IT+0x260>
 8003de4:	40020010 	.word	0x40020010
 8003de8:	40020028 	.word	0x40020028
 8003dec:	40020040 	.word	0x40020040
 8003df0:	40020058 	.word	0x40020058
 8003df4:	40020070 	.word	0x40020070
 8003df8:	40020088 	.word	0x40020088
 8003dfc:	400200a0 	.word	0x400200a0
 8003e00:	400200b8 	.word	0x400200b8
 8003e04:	40020410 	.word	0x40020410
 8003e08:	40020428 	.word	0x40020428
 8003e0c:	40020440 	.word	0x40020440
 8003e10:	40020458 	.word	0x40020458
 8003e14:	40020470 	.word	0x40020470
 8003e18:	40020488 	.word	0x40020488
 8003e1c:	400204a0 	.word	0x400204a0
 8003e20:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 020e 	bic.w	r2, r3, #14
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 020a 	orr.w	r2, r2, #10
 8003e36:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0204 	orr.w	r2, r2, #4
 8003e4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a83      	ldr	r2, [pc, #524]	; (8004064 <HAL_DMA_Start_IT+0x474>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d072      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a82      	ldr	r2, [pc, #520]	; (8004068 <HAL_DMA_Start_IT+0x478>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d06d      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a80      	ldr	r2, [pc, #512]	; (800406c <HAL_DMA_Start_IT+0x47c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d068      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7f      	ldr	r2, [pc, #508]	; (8004070 <HAL_DMA_Start_IT+0x480>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d063      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a7d      	ldr	r2, [pc, #500]	; (8004074 <HAL_DMA_Start_IT+0x484>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d05e      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a7c      	ldr	r2, [pc, #496]	; (8004078 <HAL_DMA_Start_IT+0x488>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d059      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a7a      	ldr	r2, [pc, #488]	; (800407c <HAL_DMA_Start_IT+0x48c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d054      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a79      	ldr	r2, [pc, #484]	; (8004080 <HAL_DMA_Start_IT+0x490>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d04f      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a77      	ldr	r2, [pc, #476]	; (8004084 <HAL_DMA_Start_IT+0x494>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d04a      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a76      	ldr	r2, [pc, #472]	; (8004088 <HAL_DMA_Start_IT+0x498>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d045      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a74      	ldr	r2, [pc, #464]	; (800408c <HAL_DMA_Start_IT+0x49c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d040      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a73      	ldr	r2, [pc, #460]	; (8004090 <HAL_DMA_Start_IT+0x4a0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d03b      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a71      	ldr	r2, [pc, #452]	; (8004094 <HAL_DMA_Start_IT+0x4a4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d036      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a70      	ldr	r2, [pc, #448]	; (8004098 <HAL_DMA_Start_IT+0x4a8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d031      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6e      	ldr	r2, [pc, #440]	; (800409c <HAL_DMA_Start_IT+0x4ac>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d02c      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a6d      	ldr	r2, [pc, #436]	; (80040a0 <HAL_DMA_Start_IT+0x4b0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d027      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6b      	ldr	r2, [pc, #428]	; (80040a4 <HAL_DMA_Start_IT+0x4b4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d022      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_DMA_Start_IT+0x4b8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d01d      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a68      	ldr	r2, [pc, #416]	; (80040ac <HAL_DMA_Start_IT+0x4bc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d018      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a67      	ldr	r2, [pc, #412]	; (80040b0 <HAL_DMA_Start_IT+0x4c0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a65      	ldr	r2, [pc, #404]	; (80040b4 <HAL_DMA_Start_IT+0x4c4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00e      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a64      	ldr	r2, [pc, #400]	; (80040b8 <HAL_DMA_Start_IT+0x4c8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a62      	ldr	r2, [pc, #392]	; (80040bc <HAL_DMA_Start_IT+0x4cc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d004      	beq.n	8003f40 <HAL_DMA_Start_IT+0x350>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a61      	ldr	r2, [pc, #388]	; (80040c0 <HAL_DMA_Start_IT+0x4d0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d101      	bne.n	8003f44 <HAL_DMA_Start_IT+0x354>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_DMA_Start_IT+0x356>
 8003f44:	2300      	movs	r3, #0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d01a      	beq.n	8003f80 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a37      	ldr	r2, [pc, #220]	; (8004064 <HAL_DMA_Start_IT+0x474>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d04a      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a36      	ldr	r2, [pc, #216]	; (8004068 <HAL_DMA_Start_IT+0x478>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d045      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a34      	ldr	r2, [pc, #208]	; (800406c <HAL_DMA_Start_IT+0x47c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d040      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a33      	ldr	r2, [pc, #204]	; (8004070 <HAL_DMA_Start_IT+0x480>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d03b      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a31      	ldr	r2, [pc, #196]	; (8004074 <HAL_DMA_Start_IT+0x484>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d036      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a30      	ldr	r2, [pc, #192]	; (8004078 <HAL_DMA_Start_IT+0x488>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d031      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2e      	ldr	r2, [pc, #184]	; (800407c <HAL_DMA_Start_IT+0x48c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02c      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2d      	ldr	r2, [pc, #180]	; (8004080 <HAL_DMA_Start_IT+0x490>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d027      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <HAL_DMA_Start_IT+0x494>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d022      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <HAL_DMA_Start_IT+0x498>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d01d      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a28      	ldr	r2, [pc, #160]	; (800408c <HAL_DMA_Start_IT+0x49c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d018      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <HAL_DMA_Start_IT+0x4a0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a25      	ldr	r2, [pc, #148]	; (8004094 <HAL_DMA_Start_IT+0x4a4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00e      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a24      	ldr	r2, [pc, #144]	; (8004098 <HAL_DMA_Start_IT+0x4a8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <HAL_DMA_Start_IT+0x4ac>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_DMA_Start_IT+0x430>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <HAL_DMA_Start_IT+0x4b0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d108      	bne.n	8004032 <HAL_DMA_Start_IT+0x442>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e012      	b.n	8004058 <HAL_DMA_Start_IT+0x468>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e009      	b.n	8004058 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004052:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004058:	7dfb      	ldrb	r3, [r7, #23]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40020010 	.word	0x40020010
 8004068:	40020028 	.word	0x40020028
 800406c:	40020040 	.word	0x40020040
 8004070:	40020058 	.word	0x40020058
 8004074:	40020070 	.word	0x40020070
 8004078:	40020088 	.word	0x40020088
 800407c:	400200a0 	.word	0x400200a0
 8004080:	400200b8 	.word	0x400200b8
 8004084:	40020410 	.word	0x40020410
 8004088:	40020428 	.word	0x40020428
 800408c:	40020440 	.word	0x40020440
 8004090:	40020458 	.word	0x40020458
 8004094:	40020470 	.word	0x40020470
 8004098:	40020488 	.word	0x40020488
 800409c:	400204a0 	.word	0x400204a0
 80040a0:	400204b8 	.word	0x400204b8
 80040a4:	58025408 	.word	0x58025408
 80040a8:	5802541c 	.word	0x5802541c
 80040ac:	58025430 	.word	0x58025430
 80040b0:	58025444 	.word	0x58025444
 80040b4:	58025458 	.word	0x58025458
 80040b8:	5802546c 	.word	0x5802546c
 80040bc:	58025480 	.word	0x58025480
 80040c0:	58025494 	.word	0x58025494

080040c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	; 0x28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040d0:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_DMA_IRQHandler+0x1ac>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a67      	ldr	r2, [pc, #412]	; (8004274 <HAL_DMA_IRQHandler+0x1b0>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	0a9b      	lsrs	r3, r3, #10
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a5f      	ldr	r2, [pc, #380]	; (8004278 <HAL_DMA_IRQHandler+0x1b4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d04a      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5d      	ldr	r2, [pc, #372]	; (800427c <HAL_DMA_IRQHandler+0x1b8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d045      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5c      	ldr	r2, [pc, #368]	; (8004280 <HAL_DMA_IRQHandler+0x1bc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d040      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5a      	ldr	r2, [pc, #360]	; (8004284 <HAL_DMA_IRQHandler+0x1c0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d03b      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a59      	ldr	r2, [pc, #356]	; (8004288 <HAL_DMA_IRQHandler+0x1c4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d036      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a57      	ldr	r2, [pc, #348]	; (800428c <HAL_DMA_IRQHandler+0x1c8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d031      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a56      	ldr	r2, [pc, #344]	; (8004290 <HAL_DMA_IRQHandler+0x1cc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d02c      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a54      	ldr	r2, [pc, #336]	; (8004294 <HAL_DMA_IRQHandler+0x1d0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d027      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a53      	ldr	r2, [pc, #332]	; (8004298 <HAL_DMA_IRQHandler+0x1d4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a51      	ldr	r2, [pc, #324]	; (800429c <HAL_DMA_IRQHandler+0x1d8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d01d      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a50      	ldr	r2, [pc, #320]	; (80042a0 <HAL_DMA_IRQHandler+0x1dc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d018      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a4e      	ldr	r2, [pc, #312]	; (80042a4 <HAL_DMA_IRQHandler+0x1e0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a4d      	ldr	r2, [pc, #308]	; (80042a8 <HAL_DMA_IRQHandler+0x1e4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00e      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a4b      	ldr	r2, [pc, #300]	; (80042ac <HAL_DMA_IRQHandler+0x1e8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d009      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a4a      	ldr	r2, [pc, #296]	; (80042b0 <HAL_DMA_IRQHandler+0x1ec>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_IRQHandler+0xd2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a48      	ldr	r2, [pc, #288]	; (80042b4 <HAL_DMA_IRQHandler+0x1f0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d101      	bne.n	800419a <HAL_DMA_IRQHandler+0xd6>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_DMA_IRQHandler+0xd8>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 842b 	beq.w	80049f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	2208      	movs	r2, #8
 80041ac:	409a      	lsls	r2, r3
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 80a2 	beq.w	80042fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2e      	ldr	r2, [pc, #184]	; (8004278 <HAL_DMA_IRQHandler+0x1b4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d04a      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2d      	ldr	r2, [pc, #180]	; (800427c <HAL_DMA_IRQHandler+0x1b8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d045      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a2b      	ldr	r2, [pc, #172]	; (8004280 <HAL_DMA_IRQHandler+0x1bc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d040      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_DMA_IRQHandler+0x1c0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d03b      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a28      	ldr	r2, [pc, #160]	; (8004288 <HAL_DMA_IRQHandler+0x1c4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d036      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a27      	ldr	r2, [pc, #156]	; (800428c <HAL_DMA_IRQHandler+0x1c8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d031      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <HAL_DMA_IRQHandler+0x1cc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02c      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a24      	ldr	r2, [pc, #144]	; (8004294 <HAL_DMA_IRQHandler+0x1d0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d027      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <HAL_DMA_IRQHandler+0x1d4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d022      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a21      	ldr	r2, [pc, #132]	; (800429c <HAL_DMA_IRQHandler+0x1d8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d01d      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_DMA_IRQHandler+0x1dc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d018      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <HAL_DMA_IRQHandler+0x1e0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d013      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <HAL_DMA_IRQHandler+0x1e4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00e      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <HAL_DMA_IRQHandler+0x1e8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <HAL_DMA_IRQHandler+0x1ec>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d004      	beq.n	8004258 <HAL_DMA_IRQHandler+0x194>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <HAL_DMA_IRQHandler+0x1f0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d12f      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x1f4>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf14      	ite	ne
 8004266:	2301      	movne	r3, #1
 8004268:	2300      	moveq	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	e02e      	b.n	80042cc <HAL_DMA_IRQHandler+0x208>
 800426e:	bf00      	nop
 8004270:	20000000 	.word	0x20000000
 8004274:	1b4e81b5 	.word	0x1b4e81b5
 8004278:	40020010 	.word	0x40020010
 800427c:	40020028 	.word	0x40020028
 8004280:	40020040 	.word	0x40020040
 8004284:	40020058 	.word	0x40020058
 8004288:	40020070 	.word	0x40020070
 800428c:	40020088 	.word	0x40020088
 8004290:	400200a0 	.word	0x400200a0
 8004294:	400200b8 	.word	0x400200b8
 8004298:	40020410 	.word	0x40020410
 800429c:	40020428 	.word	0x40020428
 80042a0:	40020440 	.word	0x40020440
 80042a4:	40020458 	.word	0x40020458
 80042a8:	40020470 	.word	0x40020470
 80042ac:	40020488 	.word	0x40020488
 80042b0:	400204a0 	.word	0x400204a0
 80042b4:	400204b8 	.word	0x400204b8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	bf14      	ite	ne
 80042c6:	2301      	movne	r3, #1
 80042c8:	2300      	moveq	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d015      	beq.n	80042fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0204 	bic.w	r2, r2, #4
 80042de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2208      	movs	r2, #8
 80042ea:	409a      	lsls	r2, r3
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	f043 0201 	orr.w	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d06e      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a69      	ldr	r2, [pc, #420]	; (80044bc <HAL_DMA_IRQHandler+0x3f8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d04a      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a67      	ldr	r2, [pc, #412]	; (80044c0 <HAL_DMA_IRQHandler+0x3fc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d045      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a66      	ldr	r2, [pc, #408]	; (80044c4 <HAL_DMA_IRQHandler+0x400>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d040      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a64      	ldr	r2, [pc, #400]	; (80044c8 <HAL_DMA_IRQHandler+0x404>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d03b      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a63      	ldr	r2, [pc, #396]	; (80044cc <HAL_DMA_IRQHandler+0x408>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d036      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a61      	ldr	r2, [pc, #388]	; (80044d0 <HAL_DMA_IRQHandler+0x40c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d031      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a60      	ldr	r2, [pc, #384]	; (80044d4 <HAL_DMA_IRQHandler+0x410>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d02c      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5e      	ldr	r2, [pc, #376]	; (80044d8 <HAL_DMA_IRQHandler+0x414>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d027      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a5d      	ldr	r2, [pc, #372]	; (80044dc <HAL_DMA_IRQHandler+0x418>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d022      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a5b      	ldr	r2, [pc, #364]	; (80044e0 <HAL_DMA_IRQHandler+0x41c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01d      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a5a      	ldr	r2, [pc, #360]	; (80044e4 <HAL_DMA_IRQHandler+0x420>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d018      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a58      	ldr	r2, [pc, #352]	; (80044e8 <HAL_DMA_IRQHandler+0x424>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a57      	ldr	r2, [pc, #348]	; (80044ec <HAL_DMA_IRQHandler+0x428>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00e      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a55      	ldr	r2, [pc, #340]	; (80044f0 <HAL_DMA_IRQHandler+0x42c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d009      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a54      	ldr	r2, [pc, #336]	; (80044f4 <HAL_DMA_IRQHandler+0x430>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d004      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x2ee>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a52      	ldr	r2, [pc, #328]	; (80044f8 <HAL_DMA_IRQHandler+0x434>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d10a      	bne.n	80043c8 <HAL_DMA_IRQHandler+0x304>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e003      	b.n	80043d0 <HAL_DMA_IRQHandler+0x30c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2300      	movs	r3, #0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	f003 031f 	and.w	r3, r3, #31
 80043dc:	2201      	movs	r2, #1
 80043de:	409a      	lsls	r2, r3
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f043 0202 	orr.w	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2204      	movs	r2, #4
 80043fa:	409a      	lsls	r2, r3
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 808f 	beq.w	8004524 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2c      	ldr	r2, [pc, #176]	; (80044bc <HAL_DMA_IRQHandler+0x3f8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d04a      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2a      	ldr	r2, [pc, #168]	; (80044c0 <HAL_DMA_IRQHandler+0x3fc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d045      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <HAL_DMA_IRQHandler+0x400>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d040      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a27      	ldr	r2, [pc, #156]	; (80044c8 <HAL_DMA_IRQHandler+0x404>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d03b      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a26      	ldr	r2, [pc, #152]	; (80044cc <HAL_DMA_IRQHandler+0x408>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d036      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <HAL_DMA_IRQHandler+0x40c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d031      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a23      	ldr	r2, [pc, #140]	; (80044d4 <HAL_DMA_IRQHandler+0x410>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d02c      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a21      	ldr	r2, [pc, #132]	; (80044d8 <HAL_DMA_IRQHandler+0x414>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d027      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a20      	ldr	r2, [pc, #128]	; (80044dc <HAL_DMA_IRQHandler+0x418>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d022      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <HAL_DMA_IRQHandler+0x41c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01d      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <HAL_DMA_IRQHandler+0x420>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d018      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1b      	ldr	r2, [pc, #108]	; (80044e8 <HAL_DMA_IRQHandler+0x424>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1a      	ldr	r2, [pc, #104]	; (80044ec <HAL_DMA_IRQHandler+0x428>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00e      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <HAL_DMA_IRQHandler+0x42c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d009      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <HAL_DMA_IRQHandler+0x430>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d004      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x3e2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <HAL_DMA_IRQHandler+0x434>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d12a      	bne.n	80044fc <HAL_DMA_IRQHandler+0x438>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e023      	b.n	8004504 <HAL_DMA_IRQHandler+0x440>
 80044bc:	40020010 	.word	0x40020010
 80044c0:	40020028 	.word	0x40020028
 80044c4:	40020040 	.word	0x40020040
 80044c8:	40020058 	.word	0x40020058
 80044cc:	40020070 	.word	0x40020070
 80044d0:	40020088 	.word	0x40020088
 80044d4:	400200a0 	.word	0x400200a0
 80044d8:	400200b8 	.word	0x400200b8
 80044dc:	40020410 	.word	0x40020410
 80044e0:	40020428 	.word	0x40020428
 80044e4:	40020440 	.word	0x40020440
 80044e8:	40020458 	.word	0x40020458
 80044ec:	40020470 	.word	0x40020470
 80044f0:	40020488 	.word	0x40020488
 80044f4:	400204a0 	.word	0x400204a0
 80044f8:	400204b8 	.word	0x400204b8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2204      	movs	r2, #4
 8004512:	409a      	lsls	r2, r3
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	2210      	movs	r2, #16
 800452e:	409a      	lsls	r2, r3
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80a6 	beq.w	8004686 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a85      	ldr	r2, [pc, #532]	; (8004754 <HAL_DMA_IRQHandler+0x690>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d04a      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a83      	ldr	r2, [pc, #524]	; (8004758 <HAL_DMA_IRQHandler+0x694>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d045      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a82      	ldr	r2, [pc, #520]	; (800475c <HAL_DMA_IRQHandler+0x698>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d040      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a80      	ldr	r2, [pc, #512]	; (8004760 <HAL_DMA_IRQHandler+0x69c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d03b      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7f      	ldr	r2, [pc, #508]	; (8004764 <HAL_DMA_IRQHandler+0x6a0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d036      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a7d      	ldr	r2, [pc, #500]	; (8004768 <HAL_DMA_IRQHandler+0x6a4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d031      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a7c      	ldr	r2, [pc, #496]	; (800476c <HAL_DMA_IRQHandler+0x6a8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d02c      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a7a      	ldr	r2, [pc, #488]	; (8004770 <HAL_DMA_IRQHandler+0x6ac>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d027      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a79      	ldr	r2, [pc, #484]	; (8004774 <HAL_DMA_IRQHandler+0x6b0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a77      	ldr	r2, [pc, #476]	; (8004778 <HAL_DMA_IRQHandler+0x6b4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01d      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a76      	ldr	r2, [pc, #472]	; (800477c <HAL_DMA_IRQHandler+0x6b8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a74      	ldr	r2, [pc, #464]	; (8004780 <HAL_DMA_IRQHandler+0x6bc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a73      	ldr	r2, [pc, #460]	; (8004784 <HAL_DMA_IRQHandler+0x6c0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a71      	ldr	r2, [pc, #452]	; (8004788 <HAL_DMA_IRQHandler+0x6c4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a70      	ldr	r2, [pc, #448]	; (800478c <HAL_DMA_IRQHandler+0x6c8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_IRQHandler+0x516>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a6e      	ldr	r2, [pc, #440]	; (8004790 <HAL_DMA_IRQHandler+0x6cc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d10a      	bne.n	80045f0 <HAL_DMA_IRQHandler+0x52c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e009      	b.n	8004604 <HAL_DMA_IRQHandler+0x540>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03e      	beq.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	f003 031f 	and.w	r3, r3, #31
 8004610:	2210      	movs	r2, #16
 8004612:	409a      	lsls	r2, r3
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d018      	beq.n	8004658 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d108      	bne.n	8004646 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d024      	beq.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	4798      	blx	r3
 8004644:	e01f      	b.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
 8004656:	e016      	b.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d107      	bne.n	8004676 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0208 	bic.w	r2, r2, #8
 8004674:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	f003 031f 	and.w	r3, r3, #31
 800468e:	2220      	movs	r2, #32
 8004690:	409a      	lsls	r2, r3
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8110 	beq.w	80048bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2c      	ldr	r2, [pc, #176]	; (8004754 <HAL_DMA_IRQHandler+0x690>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04a      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a2b      	ldr	r2, [pc, #172]	; (8004758 <HAL_DMA_IRQHandler+0x694>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d045      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a29      	ldr	r2, [pc, #164]	; (800475c <HAL_DMA_IRQHandler+0x698>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d040      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a28      	ldr	r2, [pc, #160]	; (8004760 <HAL_DMA_IRQHandler+0x69c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d03b      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a26      	ldr	r2, [pc, #152]	; (8004764 <HAL_DMA_IRQHandler+0x6a0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d036      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a25      	ldr	r2, [pc, #148]	; (8004768 <HAL_DMA_IRQHandler+0x6a4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d031      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a23      	ldr	r2, [pc, #140]	; (800476c <HAL_DMA_IRQHandler+0x6a8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02c      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a22      	ldr	r2, [pc, #136]	; (8004770 <HAL_DMA_IRQHandler+0x6ac>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d027      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a20      	ldr	r2, [pc, #128]	; (8004774 <HAL_DMA_IRQHandler+0x6b0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d022      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <HAL_DMA_IRQHandler+0x6b4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d01d      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a1d      	ldr	r2, [pc, #116]	; (800477c <HAL_DMA_IRQHandler+0x6b8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <HAL_DMA_IRQHandler+0x6bc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <HAL_DMA_IRQHandler+0x6c0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_DMA_IRQHandler+0x6c4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a17      	ldr	r2, [pc, #92]	; (800478c <HAL_DMA_IRQHandler+0x6c8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_DMA_IRQHandler+0x678>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a16      	ldr	r2, [pc, #88]	; (8004790 <HAL_DMA_IRQHandler+0x6cc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d12b      	bne.n	8004794 <HAL_DMA_IRQHandler+0x6d0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b00      	cmp	r3, #0
 8004748:	bf14      	ite	ne
 800474a:	2301      	movne	r3, #1
 800474c:	2300      	moveq	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	e02a      	b.n	80047a8 <HAL_DMA_IRQHandler+0x6e4>
 8004752:	bf00      	nop
 8004754:	40020010 	.word	0x40020010
 8004758:	40020028 	.word	0x40020028
 800475c:	40020040 	.word	0x40020040
 8004760:	40020058 	.word	0x40020058
 8004764:	40020070 	.word	0x40020070
 8004768:	40020088 	.word	0x40020088
 800476c:	400200a0 	.word	0x400200a0
 8004770:	400200b8 	.word	0x400200b8
 8004774:	40020410 	.word	0x40020410
 8004778:	40020428 	.word	0x40020428
 800477c:	40020440 	.word	0x40020440
 8004780:	40020458 	.word	0x40020458
 8004784:	40020470 	.word	0x40020470
 8004788:	40020488 	.word	0x40020488
 800478c:	400204a0 	.word	0x400204a0
 8004790:	400204b8 	.word	0x400204b8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8087 	beq.w	80048bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2220      	movs	r2, #32
 80047b8:	409a      	lsls	r2, r3
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d139      	bne.n	800483e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0216 	bic.w	r2, r2, #22
 80047d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695a      	ldr	r2, [r3, #20]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <HAL_DMA_IRQHandler+0x736>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0208 	bic.w	r2, r2, #8
 8004808:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	223f      	movs	r2, #63	; 0x3f
 8004814:	409a      	lsls	r2, r3
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 834a 	beq.w	8004ec8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	4798      	blx	r3
          }
          return;
 800483c:	e344      	b.n	8004ec8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d018      	beq.n	800487e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d108      	bne.n	800486c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02c      	beq.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
 800486a:	e027      	b.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d023      	beq.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
 800487c:	e01e      	b.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10f      	bne.n	80048ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0210 	bic.w	r2, r2, #16
 800489a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8306 	beq.w	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8088 	beq.w	80049e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2204      	movs	r2, #4
 80048d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a7a      	ldr	r2, [pc, #488]	; (8004acc <HAL_DMA_IRQHandler+0xa08>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d04a      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a79      	ldr	r2, [pc, #484]	; (8004ad0 <HAL_DMA_IRQHandler+0xa0c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d045      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a77      	ldr	r2, [pc, #476]	; (8004ad4 <HAL_DMA_IRQHandler+0xa10>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d040      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a76      	ldr	r2, [pc, #472]	; (8004ad8 <HAL_DMA_IRQHandler+0xa14>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d03b      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a74      	ldr	r2, [pc, #464]	; (8004adc <HAL_DMA_IRQHandler+0xa18>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d036      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a73      	ldr	r2, [pc, #460]	; (8004ae0 <HAL_DMA_IRQHandler+0xa1c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d031      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a71      	ldr	r2, [pc, #452]	; (8004ae4 <HAL_DMA_IRQHandler+0xa20>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02c      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a70      	ldr	r2, [pc, #448]	; (8004ae8 <HAL_DMA_IRQHandler+0xa24>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d027      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a6e      	ldr	r2, [pc, #440]	; (8004aec <HAL_DMA_IRQHandler+0xa28>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6d      	ldr	r2, [pc, #436]	; (8004af0 <HAL_DMA_IRQHandler+0xa2c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01d      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a6b      	ldr	r2, [pc, #428]	; (8004af4 <HAL_DMA_IRQHandler+0xa30>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a6a      	ldr	r2, [pc, #424]	; (8004af8 <HAL_DMA_IRQHandler+0xa34>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a68      	ldr	r2, [pc, #416]	; (8004afc <HAL_DMA_IRQHandler+0xa38>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a67      	ldr	r2, [pc, #412]	; (8004b00 <HAL_DMA_IRQHandler+0xa3c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a65      	ldr	r2, [pc, #404]	; (8004b04 <HAL_DMA_IRQHandler+0xa40>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_DMA_IRQHandler+0x8b8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a64      	ldr	r2, [pc, #400]	; (8004b08 <HAL_DMA_IRQHandler+0xa44>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d108      	bne.n	800498e <HAL_DMA_IRQHandler+0x8ca>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e007      	b.n	800499e <HAL_DMA_IRQHandler+0x8da>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3301      	adds	r3, #1
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d307      	bcc.n	80049ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f2      	bne.n	800499e <HAL_DMA_IRQHandler+0x8da>
 80049b8:	e000      	b.n	80049bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80049ba:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d004      	beq.n	80049dc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2203      	movs	r2, #3
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80049da:	e003      	b.n	80049e4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8272 	beq.w	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	4798      	blx	r3
 80049f6:	e26c      	b.n	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a43      	ldr	r2, [pc, #268]	; (8004b0c <HAL_DMA_IRQHandler+0xa48>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d022      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x984>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a42      	ldr	r2, [pc, #264]	; (8004b10 <HAL_DMA_IRQHandler+0xa4c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d01d      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x984>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a40      	ldr	r2, [pc, #256]	; (8004b14 <HAL_DMA_IRQHandler+0xa50>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d018      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x984>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3f      	ldr	r2, [pc, #252]	; (8004b18 <HAL_DMA_IRQHandler+0xa54>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x984>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a3d      	ldr	r2, [pc, #244]	; (8004b1c <HAL_DMA_IRQHandler+0xa58>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00e      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x984>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a3c      	ldr	r2, [pc, #240]	; (8004b20 <HAL_DMA_IRQHandler+0xa5c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d009      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x984>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3a      	ldr	r2, [pc, #232]	; (8004b24 <HAL_DMA_IRQHandler+0xa60>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x984>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a39      	ldr	r2, [pc, #228]	; (8004b28 <HAL_DMA_IRQHandler+0xa64>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_DMA_IRQHandler+0x988>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <HAL_DMA_IRQHandler+0x98a>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 823f 	beq.w	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2204      	movs	r2, #4
 8004a66:	409a      	lsls	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80cd 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xb48>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80c7 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	2204      	movs	r2, #4
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d049      	beq.n	8004b2c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d109      	bne.n	8004ab6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8210 	beq.w	8004ecc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ab4:	e20a      	b.n	8004ecc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 8206 	beq.w	8004ecc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ac8:	e200      	b.n	8004ecc <HAL_DMA_IRQHandler+0xe08>
 8004aca:	bf00      	nop
 8004acc:	40020010 	.word	0x40020010
 8004ad0:	40020028 	.word	0x40020028
 8004ad4:	40020040 	.word	0x40020040
 8004ad8:	40020058 	.word	0x40020058
 8004adc:	40020070 	.word	0x40020070
 8004ae0:	40020088 	.word	0x40020088
 8004ae4:	400200a0 	.word	0x400200a0
 8004ae8:	400200b8 	.word	0x400200b8
 8004aec:	40020410 	.word	0x40020410
 8004af0:	40020428 	.word	0x40020428
 8004af4:	40020440 	.word	0x40020440
 8004af8:	40020458 	.word	0x40020458
 8004afc:	40020470 	.word	0x40020470
 8004b00:	40020488 	.word	0x40020488
 8004b04:	400204a0 	.word	0x400204a0
 8004b08:	400204b8 	.word	0x400204b8
 8004b0c:	58025408 	.word	0x58025408
 8004b10:	5802541c 	.word	0x5802541c
 8004b14:	58025430 	.word	0x58025430
 8004b18:	58025444 	.word	0x58025444
 8004b1c:	58025458 	.word	0x58025458
 8004b20:	5802546c 	.word	0x5802546c
 8004b24:	58025480 	.word	0x58025480
 8004b28:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d160      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a8c      	ldr	r2, [pc, #560]	; (8004d6c <HAL_DMA_IRQHandler+0xca8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d04a      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a8a      	ldr	r2, [pc, #552]	; (8004d70 <HAL_DMA_IRQHandler+0xcac>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d045      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a89      	ldr	r2, [pc, #548]	; (8004d74 <HAL_DMA_IRQHandler+0xcb0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d040      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a87      	ldr	r2, [pc, #540]	; (8004d78 <HAL_DMA_IRQHandler+0xcb4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d03b      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a86      	ldr	r2, [pc, #536]	; (8004d7c <HAL_DMA_IRQHandler+0xcb8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d036      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a84      	ldr	r2, [pc, #528]	; (8004d80 <HAL_DMA_IRQHandler+0xcbc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d031      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a83      	ldr	r2, [pc, #524]	; (8004d84 <HAL_DMA_IRQHandler+0xcc0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d02c      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a81      	ldr	r2, [pc, #516]	; (8004d88 <HAL_DMA_IRQHandler+0xcc4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d027      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a80      	ldr	r2, [pc, #512]	; (8004d8c <HAL_DMA_IRQHandler+0xcc8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d022      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a7e      	ldr	r2, [pc, #504]	; (8004d90 <HAL_DMA_IRQHandler+0xccc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a7d      	ldr	r2, [pc, #500]	; (8004d94 <HAL_DMA_IRQHandler+0xcd0>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a7b      	ldr	r2, [pc, #492]	; (8004d98 <HAL_DMA_IRQHandler+0xcd4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a7a      	ldr	r2, [pc, #488]	; (8004d9c <HAL_DMA_IRQHandler+0xcd8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a78      	ldr	r2, [pc, #480]	; (8004da0 <HAL_DMA_IRQHandler+0xcdc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a77      	ldr	r2, [pc, #476]	; (8004da4 <HAL_DMA_IRQHandler+0xce0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0xb12>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a75      	ldr	r2, [pc, #468]	; (8004da8 <HAL_DMA_IRQHandler+0xce4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d108      	bne.n	8004be8 <HAL_DMA_IRQHandler+0xb24>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0208 	bic.w	r2, r2, #8
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e007      	b.n	8004bf8 <HAL_DMA_IRQHandler+0xb34>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0204 	bic.w	r2, r2, #4
 8004bf6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8165 	beq.w	8004ecc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c0a:	e15f      	b.n	8004ecc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	2202      	movs	r2, #2
 8004c16:	409a      	lsls	r2, r3
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80c5 	beq.w	8004dac <HAL_DMA_IRQHandler+0xce8>
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80bf 	beq.w	8004dac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	2202      	movs	r2, #2
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d018      	beq.n	8004c7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 813a 	beq.w	8004ed0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c64:	e134      	b.n	8004ed0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8130 	beq.w	8004ed0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c78:	e12a      	b.n	8004ed0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d168      	bne.n	8004d56 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <HAL_DMA_IRQHandler+0xca8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d04a      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a37      	ldr	r2, [pc, #220]	; (8004d70 <HAL_DMA_IRQHandler+0xcac>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d045      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <HAL_DMA_IRQHandler+0xcb0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d040      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a34      	ldr	r2, [pc, #208]	; (8004d78 <HAL_DMA_IRQHandler+0xcb4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d03b      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a32      	ldr	r2, [pc, #200]	; (8004d7c <HAL_DMA_IRQHandler+0xcb8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d036      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a31      	ldr	r2, [pc, #196]	; (8004d80 <HAL_DMA_IRQHandler+0xcbc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d031      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <HAL_DMA_IRQHandler+0xcc0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d02c      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a2e      	ldr	r2, [pc, #184]	; (8004d88 <HAL_DMA_IRQHandler+0xcc4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d027      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a2c      	ldr	r2, [pc, #176]	; (8004d8c <HAL_DMA_IRQHandler+0xcc8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d022      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2b      	ldr	r2, [pc, #172]	; (8004d90 <HAL_DMA_IRQHandler+0xccc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d01d      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a29      	ldr	r2, [pc, #164]	; (8004d94 <HAL_DMA_IRQHandler+0xcd0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d018      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a28      	ldr	r2, [pc, #160]	; (8004d98 <HAL_DMA_IRQHandler+0xcd4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <HAL_DMA_IRQHandler+0xcd8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <HAL_DMA_IRQHandler+0xcdc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a23      	ldr	r2, [pc, #140]	; (8004da4 <HAL_DMA_IRQHandler+0xce0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_DMA_IRQHandler+0xc60>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a22      	ldr	r2, [pc, #136]	; (8004da8 <HAL_DMA_IRQHandler+0xce4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d108      	bne.n	8004d36 <HAL_DMA_IRQHandler+0xc72>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0214 	bic.w	r2, r2, #20
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	e007      	b.n	8004d46 <HAL_DMA_IRQHandler+0xc82>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 020a 	bic.w	r2, r2, #10
 8004d44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 80b8 	beq.w	8004ed0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d68:	e0b2      	b.n	8004ed0 <HAL_DMA_IRQHandler+0xe0c>
 8004d6a:	bf00      	nop
 8004d6c:	40020010 	.word	0x40020010
 8004d70:	40020028 	.word	0x40020028
 8004d74:	40020040 	.word	0x40020040
 8004d78:	40020058 	.word	0x40020058
 8004d7c:	40020070 	.word	0x40020070
 8004d80:	40020088 	.word	0x40020088
 8004d84:	400200a0 	.word	0x400200a0
 8004d88:	400200b8 	.word	0x400200b8
 8004d8c:	40020410 	.word	0x40020410
 8004d90:	40020428 	.word	0x40020428
 8004d94:	40020440 	.word	0x40020440
 8004d98:	40020458 	.word	0x40020458
 8004d9c:	40020470 	.word	0x40020470
 8004da0:	40020488 	.word	0x40020488
 8004da4:	400204a0 	.word	0x400204a0
 8004da8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	2208      	movs	r2, #8
 8004db6:	409a      	lsls	r2, r3
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8088 	beq.w	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8082 	beq.w	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a41      	ldr	r2, [pc, #260]	; (8004ed8 <HAL_DMA_IRQHandler+0xe14>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d04a      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a3f      	ldr	r2, [pc, #252]	; (8004edc <HAL_DMA_IRQHandler+0xe18>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d045      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3e      	ldr	r2, [pc, #248]	; (8004ee0 <HAL_DMA_IRQHandler+0xe1c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d040      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a3c      	ldr	r2, [pc, #240]	; (8004ee4 <HAL_DMA_IRQHandler+0xe20>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d03b      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a3b      	ldr	r2, [pc, #236]	; (8004ee8 <HAL_DMA_IRQHandler+0xe24>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d036      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a39      	ldr	r2, [pc, #228]	; (8004eec <HAL_DMA_IRQHandler+0xe28>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d031      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a38      	ldr	r2, [pc, #224]	; (8004ef0 <HAL_DMA_IRQHandler+0xe2c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d02c      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a36      	ldr	r2, [pc, #216]	; (8004ef4 <HAL_DMA_IRQHandler+0xe30>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d027      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a35      	ldr	r2, [pc, #212]	; (8004ef8 <HAL_DMA_IRQHandler+0xe34>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a33      	ldr	r2, [pc, #204]	; (8004efc <HAL_DMA_IRQHandler+0xe38>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01d      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a32      	ldr	r2, [pc, #200]	; (8004f00 <HAL_DMA_IRQHandler+0xe3c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a30      	ldr	r2, [pc, #192]	; (8004f04 <HAL_DMA_IRQHandler+0xe40>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2f      	ldr	r2, [pc, #188]	; (8004f08 <HAL_DMA_IRQHandler+0xe44>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2d      	ldr	r2, [pc, #180]	; (8004f0c <HAL_DMA_IRQHandler+0xe48>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <HAL_DMA_IRQHandler+0xe4c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_DMA_IRQHandler+0xdaa>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2a      	ldr	r2, [pc, #168]	; (8004f14 <HAL_DMA_IRQHandler+0xe50>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <HAL_DMA_IRQHandler+0xdbc>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 021c 	bic.w	r2, r2, #28
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e007      	b.n	8004e90 <HAL_DMA_IRQHandler+0xdcc>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 020e 	bic.w	r2, r2, #14
 8004e8e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	2201      	movs	r2, #1
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
 8004ec6:	e004      	b.n	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ec8:	bf00      	nop
 8004eca:	e002      	b.n	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ecc:	bf00      	nop
 8004ece:	e000      	b.n	8004ed2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ed0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ed2:	3728      	adds	r7, #40	; 0x28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40020010 	.word	0x40020010
 8004edc:	40020028 	.word	0x40020028
 8004ee0:	40020040 	.word	0x40020040
 8004ee4:	40020058 	.word	0x40020058
 8004ee8:	40020070 	.word	0x40020070
 8004eec:	40020088 	.word	0x40020088
 8004ef0:	400200a0 	.word	0x400200a0
 8004ef4:	400200b8 	.word	0x400200b8
 8004ef8:	40020410 	.word	0x40020410
 8004efc:	40020428 	.word	0x40020428
 8004f00:	40020440 	.word	0x40020440
 8004f04:	40020458 	.word	0x40020458
 8004f08:	40020470 	.word	0x40020470
 8004f0c:	40020488 	.word	0x40020488
 8004f10:	400204a0 	.word	0x400204a0
 8004f14:	400204b8 	.word	0x400204b8

08004f18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f30:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a84      	ldr	r2, [pc, #528]	; (8005148 <DMA_SetConfig+0x230>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d072      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a82      	ldr	r2, [pc, #520]	; (800514c <DMA_SetConfig+0x234>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d06d      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a81      	ldr	r2, [pc, #516]	; (8005150 <DMA_SetConfig+0x238>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d068      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a7f      	ldr	r2, [pc, #508]	; (8005154 <DMA_SetConfig+0x23c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d063      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a7e      	ldr	r2, [pc, #504]	; (8005158 <DMA_SetConfig+0x240>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d05e      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a7c      	ldr	r2, [pc, #496]	; (800515c <DMA_SetConfig+0x244>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d059      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7b      	ldr	r2, [pc, #492]	; (8005160 <DMA_SetConfig+0x248>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d054      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a79      	ldr	r2, [pc, #484]	; (8005164 <DMA_SetConfig+0x24c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d04f      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a78      	ldr	r2, [pc, #480]	; (8005168 <DMA_SetConfig+0x250>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d04a      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a76      	ldr	r2, [pc, #472]	; (800516c <DMA_SetConfig+0x254>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d045      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a75      	ldr	r2, [pc, #468]	; (8005170 <DMA_SetConfig+0x258>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d040      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a73      	ldr	r2, [pc, #460]	; (8005174 <DMA_SetConfig+0x25c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d03b      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a72      	ldr	r2, [pc, #456]	; (8005178 <DMA_SetConfig+0x260>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d036      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a70      	ldr	r2, [pc, #448]	; (800517c <DMA_SetConfig+0x264>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d031      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6f      	ldr	r2, [pc, #444]	; (8005180 <DMA_SetConfig+0x268>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d02c      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a6d      	ldr	r2, [pc, #436]	; (8005184 <DMA_SetConfig+0x26c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d027      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a6c      	ldr	r2, [pc, #432]	; (8005188 <DMA_SetConfig+0x270>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d022      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a6a      	ldr	r2, [pc, #424]	; (800518c <DMA_SetConfig+0x274>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01d      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a69      	ldr	r2, [pc, #420]	; (8005190 <DMA_SetConfig+0x278>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d018      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a67      	ldr	r2, [pc, #412]	; (8005194 <DMA_SetConfig+0x27c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a66      	ldr	r2, [pc, #408]	; (8005198 <DMA_SetConfig+0x280>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a64      	ldr	r2, [pc, #400]	; (800519c <DMA_SetConfig+0x284>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d009      	beq.n	8005022 <DMA_SetConfig+0x10a>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a63      	ldr	r2, [pc, #396]	; (80051a0 <DMA_SetConfig+0x288>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <DMA_SetConfig+0x10a>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a61      	ldr	r2, [pc, #388]	; (80051a4 <DMA_SetConfig+0x28c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d101      	bne.n	8005026 <DMA_SetConfig+0x10e>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <DMA_SetConfig+0x110>
 8005026:	2300      	movs	r3, #0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00d      	beq.n	8005048 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005034:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005046:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3e      	ldr	r2, [pc, #248]	; (8005148 <DMA_SetConfig+0x230>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d04a      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a3d      	ldr	r2, [pc, #244]	; (800514c <DMA_SetConfig+0x234>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d045      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3b      	ldr	r2, [pc, #236]	; (8005150 <DMA_SetConfig+0x238>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d040      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3a      	ldr	r2, [pc, #232]	; (8005154 <DMA_SetConfig+0x23c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d03b      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a38      	ldr	r2, [pc, #224]	; (8005158 <DMA_SetConfig+0x240>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d036      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a37      	ldr	r2, [pc, #220]	; (800515c <DMA_SetConfig+0x244>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d031      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a35      	ldr	r2, [pc, #212]	; (8005160 <DMA_SetConfig+0x248>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d02c      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a34      	ldr	r2, [pc, #208]	; (8005164 <DMA_SetConfig+0x24c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d027      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a32      	ldr	r2, [pc, #200]	; (8005168 <DMA_SetConfig+0x250>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d022      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a31      	ldr	r2, [pc, #196]	; (800516c <DMA_SetConfig+0x254>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d01d      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2f      	ldr	r2, [pc, #188]	; (8005170 <DMA_SetConfig+0x258>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d018      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2e      	ldr	r2, [pc, #184]	; (8005174 <DMA_SetConfig+0x25c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2c      	ldr	r2, [pc, #176]	; (8005178 <DMA_SetConfig+0x260>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2b      	ldr	r2, [pc, #172]	; (800517c <DMA_SetConfig+0x264>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d009      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a29      	ldr	r2, [pc, #164]	; (8005180 <DMA_SetConfig+0x268>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <DMA_SetConfig+0x1d0>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a28      	ldr	r2, [pc, #160]	; (8005184 <DMA_SetConfig+0x26c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d101      	bne.n	80050ec <DMA_SetConfig+0x1d4>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <DMA_SetConfig+0x1d6>
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d05a      	beq.n	80051a8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	223f      	movs	r2, #63	; 0x3f
 80050fc:	409a      	lsls	r2, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005110:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b40      	cmp	r3, #64	; 0x40
 8005120:	d108      	bne.n	8005134 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005132:	e087      	b.n	8005244 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	60da      	str	r2, [r3, #12]
}
 8005144:	e07e      	b.n	8005244 <DMA_SetConfig+0x32c>
 8005146:	bf00      	nop
 8005148:	40020010 	.word	0x40020010
 800514c:	40020028 	.word	0x40020028
 8005150:	40020040 	.word	0x40020040
 8005154:	40020058 	.word	0x40020058
 8005158:	40020070 	.word	0x40020070
 800515c:	40020088 	.word	0x40020088
 8005160:	400200a0 	.word	0x400200a0
 8005164:	400200b8 	.word	0x400200b8
 8005168:	40020410 	.word	0x40020410
 800516c:	40020428 	.word	0x40020428
 8005170:	40020440 	.word	0x40020440
 8005174:	40020458 	.word	0x40020458
 8005178:	40020470 	.word	0x40020470
 800517c:	40020488 	.word	0x40020488
 8005180:	400204a0 	.word	0x400204a0
 8005184:	400204b8 	.word	0x400204b8
 8005188:	58025408 	.word	0x58025408
 800518c:	5802541c 	.word	0x5802541c
 8005190:	58025430 	.word	0x58025430
 8005194:	58025444 	.word	0x58025444
 8005198:	58025458 	.word	0x58025458
 800519c:	5802546c 	.word	0x5802546c
 80051a0:	58025480 	.word	0x58025480
 80051a4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a28      	ldr	r2, [pc, #160]	; (8005250 <DMA_SetConfig+0x338>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d022      	beq.n	80051f8 <DMA_SetConfig+0x2e0>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a27      	ldr	r2, [pc, #156]	; (8005254 <DMA_SetConfig+0x33c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d01d      	beq.n	80051f8 <DMA_SetConfig+0x2e0>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a25      	ldr	r2, [pc, #148]	; (8005258 <DMA_SetConfig+0x340>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d018      	beq.n	80051f8 <DMA_SetConfig+0x2e0>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a24      	ldr	r2, [pc, #144]	; (800525c <DMA_SetConfig+0x344>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <DMA_SetConfig+0x2e0>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a22      	ldr	r2, [pc, #136]	; (8005260 <DMA_SetConfig+0x348>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <DMA_SetConfig+0x2e0>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a21      	ldr	r2, [pc, #132]	; (8005264 <DMA_SetConfig+0x34c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d009      	beq.n	80051f8 <DMA_SetConfig+0x2e0>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <DMA_SetConfig+0x350>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <DMA_SetConfig+0x2e0>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1e      	ldr	r2, [pc, #120]	; (800526c <DMA_SetConfig+0x354>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d101      	bne.n	80051fc <DMA_SetConfig+0x2e4>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <DMA_SetConfig+0x2e6>
 80051fc:	2300      	movs	r3, #0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d020      	beq.n	8005244 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	2201      	movs	r2, #1
 800520c:	409a      	lsls	r2, r3
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d108      	bne.n	8005234 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	60da      	str	r2, [r3, #12]
}
 8005232:	e007      	b.n	8005244 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	60da      	str	r2, [r3, #12]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	58025408 	.word	0x58025408
 8005254:	5802541c 	.word	0x5802541c
 8005258:	58025430 	.word	0x58025430
 800525c:	58025444 	.word	0x58025444
 8005260:	58025458 	.word	0x58025458
 8005264:	5802546c 	.word	0x5802546c
 8005268:	58025480 	.word	0x58025480
 800526c:	58025494 	.word	0x58025494

08005270 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a42      	ldr	r2, [pc, #264]	; (8005388 <DMA_CalcBaseAndBitshift+0x118>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d04a      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a41      	ldr	r2, [pc, #260]	; (800538c <DMA_CalcBaseAndBitshift+0x11c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d045      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a3f      	ldr	r2, [pc, #252]	; (8005390 <DMA_CalcBaseAndBitshift+0x120>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d040      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a3e      	ldr	r2, [pc, #248]	; (8005394 <DMA_CalcBaseAndBitshift+0x124>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d03b      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a3c      	ldr	r2, [pc, #240]	; (8005398 <DMA_CalcBaseAndBitshift+0x128>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d036      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a3b      	ldr	r2, [pc, #236]	; (800539c <DMA_CalcBaseAndBitshift+0x12c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d031      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a39      	ldr	r2, [pc, #228]	; (80053a0 <DMA_CalcBaseAndBitshift+0x130>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d02c      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <DMA_CalcBaseAndBitshift+0x134>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d027      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a36      	ldr	r2, [pc, #216]	; (80053a8 <DMA_CalcBaseAndBitshift+0x138>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d022      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a35      	ldr	r2, [pc, #212]	; (80053ac <DMA_CalcBaseAndBitshift+0x13c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d01d      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a33      	ldr	r2, [pc, #204]	; (80053b0 <DMA_CalcBaseAndBitshift+0x140>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d018      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a32      	ldr	r2, [pc, #200]	; (80053b4 <DMA_CalcBaseAndBitshift+0x144>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d013      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a30      	ldr	r2, [pc, #192]	; (80053b8 <DMA_CalcBaseAndBitshift+0x148>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00e      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <DMA_CalcBaseAndBitshift+0x14c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d009      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <DMA_CalcBaseAndBitshift+0x150>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d004      	beq.n	8005318 <DMA_CalcBaseAndBitshift+0xa8>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a2c      	ldr	r2, [pc, #176]	; (80053c4 <DMA_CalcBaseAndBitshift+0x154>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d101      	bne.n	800531c <DMA_CalcBaseAndBitshift+0xac>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <DMA_CalcBaseAndBitshift+0xae>
 800531c:	2300      	movs	r3, #0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d024      	beq.n	800536c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	3b10      	subs	r3, #16
 800532a:	4a27      	ldr	r2, [pc, #156]	; (80053c8 <DMA_CalcBaseAndBitshift+0x158>)
 800532c:	fba2 2303 	umull	r2, r3, r2, r3
 8005330:	091b      	lsrs	r3, r3, #4
 8005332:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	4a24      	ldr	r2, [pc, #144]	; (80053cc <DMA_CalcBaseAndBitshift+0x15c>)
 800533c:	5cd3      	ldrb	r3, [r2, r3]
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d908      	bls.n	800535c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	4b1f      	ldr	r3, [pc, #124]	; (80053d0 <DMA_CalcBaseAndBitshift+0x160>)
 8005352:	4013      	ands	r3, r2
 8005354:	1d1a      	adds	r2, r3, #4
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	659a      	str	r2, [r3, #88]	; 0x58
 800535a:	e00d      	b.n	8005378 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <DMA_CalcBaseAndBitshift+0x160>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
 800536a:	e005      	b.n	8005378 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40020010 	.word	0x40020010
 800538c:	40020028 	.word	0x40020028
 8005390:	40020040 	.word	0x40020040
 8005394:	40020058 	.word	0x40020058
 8005398:	40020070 	.word	0x40020070
 800539c:	40020088 	.word	0x40020088
 80053a0:	400200a0 	.word	0x400200a0
 80053a4:	400200b8 	.word	0x400200b8
 80053a8:	40020410 	.word	0x40020410
 80053ac:	40020428 	.word	0x40020428
 80053b0:	40020440 	.word	0x40020440
 80053b4:	40020458 	.word	0x40020458
 80053b8:	40020470 	.word	0x40020470
 80053bc:	40020488 	.word	0x40020488
 80053c0:	400204a0 	.word	0x400204a0
 80053c4:	400204b8 	.word	0x400204b8
 80053c8:	aaaaaaab 	.word	0xaaaaaaab
 80053cc:	0800ae90 	.word	0x0800ae90
 80053d0:	fffffc00 	.word	0xfffffc00

080053d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d120      	bne.n	800542a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d858      	bhi.n	80054a2 <DMA_CheckFifoParam+0xce>
 80053f0:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <DMA_CheckFifoParam+0x24>)
 80053f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f6:	bf00      	nop
 80053f8:	08005409 	.word	0x08005409
 80053fc:	0800541b 	.word	0x0800541b
 8005400:	08005409 	.word	0x08005409
 8005404:	080054a3 	.word	0x080054a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d048      	beq.n	80054a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005418:	e045      	b.n	80054a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005422:	d142      	bne.n	80054aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005428:	e03f      	b.n	80054aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005432:	d123      	bne.n	800547c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	2b03      	cmp	r3, #3
 800543a:	d838      	bhi.n	80054ae <DMA_CheckFifoParam+0xda>
 800543c:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <DMA_CheckFifoParam+0x70>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	08005455 	.word	0x08005455
 8005448:	0800545b 	.word	0x0800545b
 800544c:	08005455 	.word	0x08005455
 8005450:	0800546d 	.word	0x0800546d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
        break;
 8005458:	e030      	b.n	80054bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d025      	beq.n	80054b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800546a:	e022      	b.n	80054b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005474:	d11f      	bne.n	80054b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800547a:	e01c      	b.n	80054b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	2b02      	cmp	r3, #2
 8005482:	d902      	bls.n	800548a <DMA_CheckFifoParam+0xb6>
 8005484:	2b03      	cmp	r3, #3
 8005486:	d003      	beq.n	8005490 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005488:	e018      	b.n	80054bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	73fb      	strb	r3, [r7, #15]
        break;
 800548e:	e015      	b.n	80054bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00e      	beq.n	80054ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
    break;
 80054a0:	e00b      	b.n	80054ba <DMA_CheckFifoParam+0xe6>
        break;
 80054a2:	bf00      	nop
 80054a4:	e00a      	b.n	80054bc <DMA_CheckFifoParam+0xe8>
        break;
 80054a6:	bf00      	nop
 80054a8:	e008      	b.n	80054bc <DMA_CheckFifoParam+0xe8>
        break;
 80054aa:	bf00      	nop
 80054ac:	e006      	b.n	80054bc <DMA_CheckFifoParam+0xe8>
        break;
 80054ae:	bf00      	nop
 80054b0:	e004      	b.n	80054bc <DMA_CheckFifoParam+0xe8>
        break;
 80054b2:	bf00      	nop
 80054b4:	e002      	b.n	80054bc <DMA_CheckFifoParam+0xe8>
        break;
 80054b6:	bf00      	nop
 80054b8:	e000      	b.n	80054bc <DMA_CheckFifoParam+0xe8>
    break;
 80054ba:	bf00      	nop
    }
  }

  return status;
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop

080054cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a38      	ldr	r2, [pc, #224]	; (80055c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a36      	ldr	r2, [pc, #216]	; (80055c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01d      	beq.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a35      	ldr	r2, [pc, #212]	; (80055c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d018      	beq.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a33      	ldr	r2, [pc, #204]	; (80055cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a32      	ldr	r2, [pc, #200]	; (80055d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00e      	beq.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a30      	ldr	r2, [pc, #192]	; (80055d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d009      	beq.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a2f      	ldr	r2, [pc, #188]	; (80055d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2d      	ldr	r2, [pc, #180]	; (80055dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d101      	bne.n	800552e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800552e:	2300      	movs	r3, #0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	3b08      	subs	r3, #8
 800553c:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
 8005542:	091b      	lsrs	r3, r3, #4
 8005544:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4b26      	ldr	r3, [pc, #152]	; (80055e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	461a      	mov	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a24      	ldr	r2, [pc, #144]	; (80055e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005558:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2201      	movs	r2, #1
 8005562:	409a      	lsls	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005568:	e024      	b.n	80055b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	3b10      	subs	r3, #16
 8005572:	4a1e      	ldr	r2, [pc, #120]	; (80055ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4a1c      	ldr	r2, [pc, #112]	; (80055f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d806      	bhi.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4a1b      	ldr	r2, [pc, #108]	; (80055f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d902      	bls.n	8005592 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3308      	adds	r3, #8
 8005590:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a16      	ldr	r2, [pc, #88]	; (80055fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80055a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	2201      	movs	r2, #1
 80055ae:	409a      	lsls	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	58025408 	.word	0x58025408
 80055c4:	5802541c 	.word	0x5802541c
 80055c8:	58025430 	.word	0x58025430
 80055cc:	58025444 	.word	0x58025444
 80055d0:	58025458 	.word	0x58025458
 80055d4:	5802546c 	.word	0x5802546c
 80055d8:	58025480 	.word	0x58025480
 80055dc:	58025494 	.word	0x58025494
 80055e0:	cccccccd 	.word	0xcccccccd
 80055e4:	16009600 	.word	0x16009600
 80055e8:	58025880 	.word	0x58025880
 80055ec:	aaaaaaab 	.word	0xaaaaaaab
 80055f0:	400204b8 	.word	0x400204b8
 80055f4:	4002040f 	.word	0x4002040f
 80055f8:	10008200 	.word	0x10008200
 80055fc:	40020880 	.word	0x40020880

08005600 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d04a      	beq.n	80056ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d847      	bhi.n	80056ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d022      	beq.n	800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a24      	ldr	r2, [pc, #144]	; (80056bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d01d      	beq.n	800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d018      	beq.n	800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d013      	beq.n	800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1f      	ldr	r2, [pc, #124]	; (80056c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00e      	beq.n	800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d009      	beq.n	800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d004      	beq.n	800566c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d101      	bne.n	8005670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005670:	2300      	movs	r3, #0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	461a      	mov	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a15      	ldr	r2, [pc, #84]	; (80056dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005688:	671a      	str	r2, [r3, #112]	; 0x70
 800568a:	e009      	b.n	80056a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4b14      	ldr	r3, [pc, #80]	; (80056e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	461a      	mov	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800569e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	2201      	movs	r2, #1
 80056a6:	409a      	lsls	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	58025408 	.word	0x58025408
 80056bc:	5802541c 	.word	0x5802541c
 80056c0:	58025430 	.word	0x58025430
 80056c4:	58025444 	.word	0x58025444
 80056c8:	58025458 	.word	0x58025458
 80056cc:	5802546c 	.word	0x5802546c
 80056d0:	58025480 	.word	0x58025480
 80056d4:	58025494 	.word	0x58025494
 80056d8:	1600963f 	.word	0x1600963f
 80056dc:	58025940 	.word	0x58025940
 80056e0:	1000823f 	.word	0x1000823f
 80056e4:	40020940 	.word	0x40020940

080056e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80056f6:	4b89      	ldr	r3, [pc, #548]	; (800591c <HAL_GPIO_Init+0x234>)
 80056f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056fa:	e194      	b.n	8005a26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	2101      	movs	r1, #1
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	fa01 f303 	lsl.w	r3, r1, r3
 8005708:	4013      	ands	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 8186 	beq.w	8005a20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d00b      	beq.n	8005734 <HAL_GPIO_Init+0x4c>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d007      	beq.n	8005734 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005728:	2b11      	cmp	r3, #17
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b12      	cmp	r3, #18
 8005732:	d130      	bne.n	8005796 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	2203      	movs	r2, #3
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4313      	orrs	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800576a:	2201      	movs	r2, #1
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43db      	mvns	r3, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	4013      	ands	r3, r2
 8005778:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	f003 0201 	and.w	r2, r3, #1
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	2203      	movs	r2, #3
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43db      	mvns	r3, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4013      	ands	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d003      	beq.n	80057d6 <HAL_GPIO_Init+0xee>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b12      	cmp	r3, #18
 80057d4:	d123      	bne.n	800581e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	08da      	lsrs	r2, r3, #3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3208      	adds	r2, #8
 80057de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4313      	orrs	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	08da      	lsrs	r2, r3, #3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3208      	adds	r2, #8
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	2203      	movs	r2, #3
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f003 0203 	and.w	r2, r3, #3
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4313      	orrs	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 80e0 	beq.w	8005a20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005860:	4b2f      	ldr	r3, [pc, #188]	; (8005920 <HAL_GPIO_Init+0x238>)
 8005862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005866:	4a2e      	ldr	r2, [pc, #184]	; (8005920 <HAL_GPIO_Init+0x238>)
 8005868:	f043 0302 	orr.w	r3, r3, #2
 800586c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005870:	4b2b      	ldr	r3, [pc, #172]	; (8005920 <HAL_GPIO_Init+0x238>)
 8005872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800587e:	4a29      	ldr	r2, [pc, #164]	; (8005924 <HAL_GPIO_Init+0x23c>)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	3302      	adds	r3, #2
 8005886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	220f      	movs	r2, #15
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a20      	ldr	r2, [pc, #128]	; (8005928 <HAL_GPIO_Init+0x240>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d052      	beq.n	8005950 <HAL_GPIO_Init+0x268>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <HAL_GPIO_Init+0x244>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d031      	beq.n	8005916 <HAL_GPIO_Init+0x22e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1e      	ldr	r2, [pc, #120]	; (8005930 <HAL_GPIO_Init+0x248>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d02b      	beq.n	8005912 <HAL_GPIO_Init+0x22a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <HAL_GPIO_Init+0x24c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d025      	beq.n	800590e <HAL_GPIO_Init+0x226>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_GPIO_Init+0x250>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01f      	beq.n	800590a <HAL_GPIO_Init+0x222>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1b      	ldr	r2, [pc, #108]	; (800593c <HAL_GPIO_Init+0x254>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d019      	beq.n	8005906 <HAL_GPIO_Init+0x21e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <HAL_GPIO_Init+0x258>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_GPIO_Init+0x21a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a19      	ldr	r2, [pc, #100]	; (8005944 <HAL_GPIO_Init+0x25c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00d      	beq.n	80058fe <HAL_GPIO_Init+0x216>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a18      	ldr	r2, [pc, #96]	; (8005948 <HAL_GPIO_Init+0x260>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <HAL_GPIO_Init+0x212>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a17      	ldr	r2, [pc, #92]	; (800594c <HAL_GPIO_Init+0x264>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d101      	bne.n	80058f6 <HAL_GPIO_Init+0x20e>
 80058f2:	2309      	movs	r3, #9
 80058f4:	e02d      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 80058f6:	230a      	movs	r3, #10
 80058f8:	e02b      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 80058fa:	2308      	movs	r3, #8
 80058fc:	e029      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 80058fe:	2307      	movs	r3, #7
 8005900:	e027      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 8005902:	2306      	movs	r3, #6
 8005904:	e025      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 8005906:	2305      	movs	r3, #5
 8005908:	e023      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 800590a:	2304      	movs	r3, #4
 800590c:	e021      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 800590e:	2303      	movs	r3, #3
 8005910:	e01f      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 8005912:	2302      	movs	r3, #2
 8005914:	e01d      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 8005916:	2301      	movs	r3, #1
 8005918:	e01b      	b.n	8005952 <HAL_GPIO_Init+0x26a>
 800591a:	bf00      	nop
 800591c:	58000080 	.word	0x58000080
 8005920:	58024400 	.word	0x58024400
 8005924:	58000400 	.word	0x58000400
 8005928:	58020000 	.word	0x58020000
 800592c:	58020400 	.word	0x58020400
 8005930:	58020800 	.word	0x58020800
 8005934:	58020c00 	.word	0x58020c00
 8005938:	58021000 	.word	0x58021000
 800593c:	58021400 	.word	0x58021400
 8005940:	58021800 	.word	0x58021800
 8005944:	58021c00 	.word	0x58021c00
 8005948:	58022000 	.word	0x58022000
 800594c:	58022400 	.word	0x58022400
 8005950:	2300      	movs	r3, #0
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	f002 0203 	and.w	r2, r2, #3
 8005958:	0092      	lsls	r2, r2, #2
 800595a:	4093      	lsls	r3, r2
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005962:	4938      	ldr	r1, [pc, #224]	; (8005a44 <HAL_GPIO_Init+0x35c>)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	3302      	adds	r3, #2
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4013      	ands	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80059ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80059f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	3301      	adds	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f ae63 	bne.w	80056fc <HAL_GPIO_Init+0x14>
  }
}
 8005a36:	bf00      	nop
 8005a38:	3724      	adds	r7, #36	; 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	58000400 	.word	0x58000400

08005a48 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005a50:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <HAL_HSEM_FastTake+0x2c>)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3320      	adds	r3, #32
 8005a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5a:	4a07      	ldr	r2, [pc, #28]	; (8005a78 <HAL_HSEM_FastTake+0x30>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d101      	bne.n	8005a64 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	58026400 	.word	0x58026400
 8005a78:	80000300 	.word	0x80000300

08005a7c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005a86:	4906      	ldr	r1, [pc, #24]	; (8005aa0 <HAL_HSEM_Release+0x24>)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	58026400 	.word	0x58026400

08005aa4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005aac:	4b29      	ldr	r3, [pc, #164]	; (8005b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	2b06      	cmp	r3, #6
 8005ab6:	d00a      	beq.n	8005ace <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ab8:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d001      	beq.n	8005aca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e040      	b.n	8005b4c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e03e      	b.n	8005b4c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ace:	4b21      	ldr	r3, [pc, #132]	; (8005b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005ad6:	491f      	ldr	r1, [pc, #124]	; (8005b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ade:	f7fb fc9d 	bl	800141c <HAL_GetTick>
 8005ae2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ae4:	e009      	b.n	8005afa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ae6:	f7fb fc99 	bl	800141c <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005af4:	d901      	bls.n	8005afa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e028      	b.n	8005b4c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005afa:	4b16      	ldr	r3, [pc, #88]	; (8005b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b06:	d1ee      	bne.n	8005ae6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b1e      	cmp	r3, #30
 8005b0c:	d008      	beq.n	8005b20 <HAL_PWREx_ConfigSupply+0x7c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b2e      	cmp	r3, #46	; 0x2e
 8005b12:	d005      	beq.n	8005b20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b1d      	cmp	r3, #29
 8005b18:	d002      	beq.n	8005b20 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b2d      	cmp	r3, #45	; 0x2d
 8005b1e:	d114      	bne.n	8005b4a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005b20:	f7fb fc7c 	bl	800141c <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b26:	e009      	b.n	8005b3c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b28:	f7fb fc78 	bl	800141c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b36:	d901      	bls.n	8005b3c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e007      	b.n	8005b4c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b3c:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b48:	d1ee      	bne.n	8005b28 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	58024800 	.word	0x58024800

08005b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08c      	sub	sp, #48	; 0x30
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e3ff      	b.n	800636a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8087 	beq.w	8005c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b78:	4b99      	ldr	r3, [pc, #612]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b82:	4b97      	ldr	r3, [pc, #604]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d007      	beq.n	8005b9e <HAL_RCC_OscConfig+0x46>
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	2b18      	cmp	r3, #24
 8005b92:	d110      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x5e>
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d10b      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b9e:	4b90      	ldr	r3, [pc, #576]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d06c      	beq.n	8005c84 <HAL_RCC_OscConfig+0x12c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d168      	bne.n	8005c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e3d9      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bbe:	d106      	bne.n	8005bce <HAL_RCC_OscConfig+0x76>
 8005bc0:	4b87      	ldr	r3, [pc, #540]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a86      	ldr	r2, [pc, #536]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e02e      	b.n	8005c2c <HAL_RCC_OscConfig+0xd4>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10c      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x98>
 8005bd6:	4b82      	ldr	r3, [pc, #520]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a81      	ldr	r2, [pc, #516]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	4b7f      	ldr	r3, [pc, #508]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a7e      	ldr	r2, [pc, #504]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e01d      	b.n	8005c2c <HAL_RCC_OscConfig+0xd4>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCC_OscConfig+0xbc>
 8005bfa:	4b79      	ldr	r3, [pc, #484]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a78      	ldr	r2, [pc, #480]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	4b76      	ldr	r3, [pc, #472]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a75      	ldr	r2, [pc, #468]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	e00b      	b.n	8005c2c <HAL_RCC_OscConfig+0xd4>
 8005c14:	4b72      	ldr	r3, [pc, #456]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a71      	ldr	r2, [pc, #452]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	4b6f      	ldr	r3, [pc, #444]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a6e      	ldr	r2, [pc, #440]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d013      	beq.n	8005c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fb fbf2 	bl	800141c <HAL_GetTick>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c3c:	f7fb fbee 	bl	800141c <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b64      	cmp	r3, #100	; 0x64
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e38d      	b.n	800636a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c4e:	4b64      	ldr	r3, [pc, #400]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0xe4>
 8005c5a:	e014      	b.n	8005c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fb fbde 	bl	800141c <HAL_GetTick>
 8005c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c64:	f7fb fbda 	bl	800141c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b64      	cmp	r3, #100	; 0x64
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e379      	b.n	800636a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c76:	4b5a      	ldr	r3, [pc, #360]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f0      	bne.n	8005c64 <HAL_RCC_OscConfig+0x10c>
 8005c82:	e000      	b.n	8005c86 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 80ae 	beq.w	8005df0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c94:	4b52      	ldr	r3, [pc, #328]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c9e:	4b50      	ldr	r3, [pc, #320]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <HAL_RCC_OscConfig+0x162>
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	2b18      	cmp	r3, #24
 8005cae:	d13a      	bne.n	8005d26 <HAL_RCC_OscConfig+0x1ce>
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d135      	bne.n	8005d26 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cba:	4b49      	ldr	r3, [pc, #292]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x17a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e34b      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd2:	f7fb fbd1 	bl	8001478 <HAL_GetREVID>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	f241 0303 	movw	r3, #4099	; 0x1003
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d817      	bhi.n	8005d10 <HAL_RCC_OscConfig+0x1b8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d108      	bne.n	8005cfa <HAL_RCC_OscConfig+0x1a2>
 8005ce8:	4b3d      	ldr	r3, [pc, #244]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005cf0:	4a3b      	ldr	r2, [pc, #236]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cf8:	e07a      	b.n	8005df0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfa:	4b39      	ldr	r3, [pc, #228]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	031b      	lsls	r3, r3, #12
 8005d08:	4935      	ldr	r1, [pc, #212]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d0e:	e06f      	b.n	8005df0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d10:	4b33      	ldr	r3, [pc, #204]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	061b      	lsls	r3, r3, #24
 8005d1e:	4930      	ldr	r1, [pc, #192]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d24:	e064      	b.n	8005df0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d045      	beq.n	8005dba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d2e:	4b2c      	ldr	r3, [pc, #176]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 0219 	bic.w	r2, r3, #25
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	4929      	ldr	r1, [pc, #164]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fb fb6c 	bl	800141c <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d48:	f7fb fb68 	bl	800141c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e307      	b.n	800636a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d5a:	4b21      	ldr	r3, [pc, #132]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d66:	f7fb fb87 	bl	8001478 <HAL_GetREVID>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d817      	bhi.n	8005da4 <HAL_RCC_OscConfig+0x24c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d108      	bne.n	8005d8e <HAL_RCC_OscConfig+0x236>
 8005d7c:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005d84:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d8a:	6053      	str	r3, [r2, #4]
 8005d8c:	e030      	b.n	8005df0 <HAL_RCC_OscConfig+0x298>
 8005d8e:	4b14      	ldr	r3, [pc, #80]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	031b      	lsls	r3, r3, #12
 8005d9c:	4910      	ldr	r1, [pc, #64]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	604b      	str	r3, [r1, #4]
 8005da2:	e025      	b.n	8005df0 <HAL_RCC_OscConfig+0x298>
 8005da4:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	061b      	lsls	r3, r3, #24
 8005db2:	490b      	ldr	r1, [pc, #44]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	604b      	str	r3, [r1, #4]
 8005db8:	e01a      	b.n	8005df0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dba:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a08      	ldr	r2, [pc, #32]	; (8005de0 <HAL_RCC_OscConfig+0x288>)
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc6:	f7fb fb29 	bl	800141c <HAL_GetTick>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dcc:	e00a      	b.n	8005de4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dce:	f7fb fb25 	bl	800141c <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d903      	bls.n	8005de4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e2c4      	b.n	800636a <HAL_RCC_OscConfig+0x812>
 8005de0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005de4:	4ba4      	ldr	r3, [pc, #656]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1ee      	bne.n	8005dce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80a9 	beq.w	8005f50 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dfe:	4b9e      	ldr	r3, [pc, #632]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e08:	4b9b      	ldr	r3, [pc, #620]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d007      	beq.n	8005e24 <HAL_RCC_OscConfig+0x2cc>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b18      	cmp	r3, #24
 8005e18:	d13a      	bne.n	8005e90 <HAL_RCC_OscConfig+0x338>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d135      	bne.n	8005e90 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e24:	4b94      	ldr	r3, [pc, #592]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_OscConfig+0x2e4>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	2b80      	cmp	r3, #128	; 0x80
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e296      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e3c:	f7fb fb1c 	bl	8001478 <HAL_GetREVID>
 8005e40:	4602      	mov	r2, r0
 8005e42:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d817      	bhi.n	8005e7a <HAL_RCC_OscConfig+0x322>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d108      	bne.n	8005e64 <HAL_RCC_OscConfig+0x30c>
 8005e52:	4b89      	ldr	r3, [pc, #548]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005e5a:	4a87      	ldr	r2, [pc, #540]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e62:	e075      	b.n	8005f50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e64:	4b84      	ldr	r3, [pc, #528]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	069b      	lsls	r3, r3, #26
 8005e72:	4981      	ldr	r1, [pc, #516]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e78:	e06a      	b.n	8005f50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e7a:	4b7f      	ldr	r3, [pc, #508]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	061b      	lsls	r3, r3, #24
 8005e88:	497b      	ldr	r1, [pc, #492]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e8e:	e05f      	b.n	8005f50 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d042      	beq.n	8005f1e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e98:	4b77      	ldr	r3, [pc, #476]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a76      	ldr	r2, [pc, #472]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea4:	f7fb faba 	bl	800141c <HAL_GetTick>
 8005ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005eac:	f7fb fab6 	bl	800141c <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e255      	b.n	800636a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ebe:	4b6e      	ldr	r3, [pc, #440]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0f0      	beq.n	8005eac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eca:	f7fb fad5 	bl	8001478 <HAL_GetREVID>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d817      	bhi.n	8005f08 <HAL_RCC_OscConfig+0x3b0>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d108      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x39a>
 8005ee0:	4b65      	ldr	r3, [pc, #404]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ee8:	4a63      	ldr	r2, [pc, #396]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eee:	6053      	str	r3, [r2, #4]
 8005ef0:	e02e      	b.n	8005f50 <HAL_RCC_OscConfig+0x3f8>
 8005ef2:	4b61      	ldr	r3, [pc, #388]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	069b      	lsls	r3, r3, #26
 8005f00:	495d      	ldr	r1, [pc, #372]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	604b      	str	r3, [r1, #4]
 8005f06:	e023      	b.n	8005f50 <HAL_RCC_OscConfig+0x3f8>
 8005f08:	4b5b      	ldr	r3, [pc, #364]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	061b      	lsls	r3, r3, #24
 8005f16:	4958      	ldr	r1, [pc, #352]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60cb      	str	r3, [r1, #12]
 8005f1c:	e018      	b.n	8005f50 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f1e:	4b56      	ldr	r3, [pc, #344]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a55      	ldr	r2, [pc, #340]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2a:	f7fb fa77 	bl	800141c <HAL_GetTick>
 8005f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005f32:	f7fb fa73 	bl	800141c <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e212      	b.n	800636a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f44:	4b4c      	ldr	r3, [pc, #304]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f0      	bne.n	8005f32 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d036      	beq.n	8005fca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d019      	beq.n	8005f98 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f64:	4b44      	ldr	r3, [pc, #272]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f68:	4a43      	ldr	r2, [pc, #268]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fb fa54 	bl	800141c <HAL_GetTick>
 8005f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f78:	f7fb fa50 	bl	800141c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e1ef      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f8a:	4b3b      	ldr	r3, [pc, #236]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCC_OscConfig+0x420>
 8005f96:	e018      	b.n	8005fca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f98:	4b37      	ldr	r3, [pc, #220]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f9c:	4a36      	ldr	r2, [pc, #216]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fb fa3a 	bl	800141c <HAL_GetTick>
 8005fa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fac:	f7fb fa36 	bl	800141c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e1d5      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005fbe:	4b2e      	ldr	r3, [pc, #184]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f0      	bne.n	8005fac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d036      	beq.n	8006044 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d019      	beq.n	8006012 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fde:	4b26      	ldr	r3, [pc, #152]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a25      	ldr	r2, [pc, #148]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8005fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fe8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fea:	f7fb fa17 	bl	800141c <HAL_GetTick>
 8005fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ff0:	e008      	b.n	8006004 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ff2:	f7fb fa13 	bl	800141c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e1b2      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006004:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f0      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x49a>
 8006010:	e018      	b.n	8006044 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006012:	4b19      	ldr	r3, [pc, #100]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a18      	ldr	r2, [pc, #96]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 8006018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800601c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800601e:	f7fb f9fd 	bl	800141c <HAL_GetTick>
 8006022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006026:	f7fb f9f9 	bl	800141c <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e198      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <HAL_RCC_OscConfig+0x520>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f0      	bne.n	8006026 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8085 	beq.w	800615c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <HAL_RCC_OscConfig+0x524>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a09      	ldr	r2, [pc, #36]	; (800607c <HAL_RCC_OscConfig+0x524>)
 8006058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800605e:	f7fb f9dd 	bl	800141c <HAL_GetTick>
 8006062:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006064:	e00c      	b.n	8006080 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006066:	f7fb f9d9 	bl	800141c <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b64      	cmp	r3, #100	; 0x64
 8006072:	d905      	bls.n	8006080 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e178      	b.n	800636a <HAL_RCC_OscConfig+0x812>
 8006078:	58024400 	.word	0x58024400
 800607c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006080:	4b96      	ldr	r3, [pc, #600]	; (80062dc <HAL_RCC_OscConfig+0x784>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0ec      	beq.n	8006066 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d106      	bne.n	80060a2 <HAL_RCC_OscConfig+0x54a>
 8006094:	4b92      	ldr	r3, [pc, #584]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006098:	4a91      	ldr	r2, [pc, #580]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6713      	str	r3, [r2, #112]	; 0x70
 80060a0:	e02d      	b.n	80060fe <HAL_RCC_OscConfig+0x5a6>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x56c>
 80060aa:	4b8d      	ldr	r3, [pc, #564]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	4a8c      	ldr	r2, [pc, #560]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6713      	str	r3, [r2, #112]	; 0x70
 80060b6:	4b8a      	ldr	r3, [pc, #552]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4a89      	ldr	r2, [pc, #548]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	6713      	str	r3, [r2, #112]	; 0x70
 80060c2:	e01c      	b.n	80060fe <HAL_RCC_OscConfig+0x5a6>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	d10c      	bne.n	80060e6 <HAL_RCC_OscConfig+0x58e>
 80060cc:	4b84      	ldr	r3, [pc, #528]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	4a83      	ldr	r2, [pc, #524]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060d2:	f043 0304 	orr.w	r3, r3, #4
 80060d6:	6713      	str	r3, [r2, #112]	; 0x70
 80060d8:	4b81      	ldr	r3, [pc, #516]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	4a80      	ldr	r2, [pc, #512]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	6713      	str	r3, [r2, #112]	; 0x70
 80060e4:	e00b      	b.n	80060fe <HAL_RCC_OscConfig+0x5a6>
 80060e6:	4b7e      	ldr	r3, [pc, #504]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ea:	4a7d      	ldr	r2, [pc, #500]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	; 0x70
 80060f2:	4b7b      	ldr	r3, [pc, #492]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	4a7a      	ldr	r2, [pc, #488]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80060f8:	f023 0304 	bic.w	r3, r3, #4
 80060fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d015      	beq.n	8006132 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006106:	f7fb f989 	bl	800141c <HAL_GetTick>
 800610a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800610c:	e00a      	b.n	8006124 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800610e:	f7fb f985 	bl	800141c <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f241 3288 	movw	r2, #5000	; 0x1388
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e122      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006124:	4b6e      	ldr	r3, [pc, #440]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0ee      	beq.n	800610e <HAL_RCC_OscConfig+0x5b6>
 8006130:	e014      	b.n	800615c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006132:	f7fb f973 	bl	800141c <HAL_GetTick>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006138:	e00a      	b.n	8006150 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800613a:	f7fb f96f 	bl	800141c <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f241 3288 	movw	r2, #5000	; 0x1388
 8006148:	4293      	cmp	r3, r2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e10c      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006150:	4b63      	ldr	r3, [pc, #396]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ee      	bne.n	800613a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8101 	beq.w	8006368 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006166:	4b5e      	ldr	r3, [pc, #376]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800616e:	2b18      	cmp	r3, #24
 8006170:	f000 80bc 	beq.w	80062ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b02      	cmp	r3, #2
 800617a:	f040 8095 	bne.w	80062a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617e:	4b58      	ldr	r3, [pc, #352]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a57      	ldr	r2, [pc, #348]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618a:	f7fb f947 	bl	800141c <HAL_GetTick>
 800618e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006192:	f7fb f943 	bl	800141c <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e0e2      	b.n	800636a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061a4:	4b4e      	ldr	r3, [pc, #312]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1f0      	bne.n	8006192 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061b0:	4b4b      	ldr	r3, [pc, #300]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80061b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061b4:	4b4b      	ldr	r3, [pc, #300]	; (80062e4 <HAL_RCC_OscConfig+0x78c>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061c0:	0112      	lsls	r2, r2, #4
 80061c2:	430a      	orrs	r2, r1
 80061c4:	4946      	ldr	r1, [pc, #280]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	628b      	str	r3, [r1, #40]	; 0x28
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	3b01      	subs	r3, #1
 80061d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d8:	3b01      	subs	r3, #1
 80061da:	025b      	lsls	r3, r3, #9
 80061dc:	b29b      	uxth	r3, r3
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	3b01      	subs	r3, #1
 80061e6:	041b      	lsls	r3, r3, #16
 80061e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	3b01      	subs	r3, #1
 80061f4:	061b      	lsls	r3, r3, #24
 80061f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061fa:	4939      	ldr	r1, [pc, #228]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006200:	4b37      	ldr	r3, [pc, #220]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	4a36      	ldr	r2, [pc, #216]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800620c:	4b34      	ldr	r3, [pc, #208]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800620e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006210:	4b35      	ldr	r3, [pc, #212]	; (80062e8 <HAL_RCC_OscConfig+0x790>)
 8006212:	4013      	ands	r3, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006218:	00d2      	lsls	r2, r2, #3
 800621a:	4931      	ldr	r1, [pc, #196]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800621c:	4313      	orrs	r3, r2
 800621e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006220:	4b2f      	ldr	r3, [pc, #188]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	f023 020c 	bic.w	r2, r3, #12
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	492c      	ldr	r1, [pc, #176]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800622e:	4313      	orrs	r3, r2
 8006230:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006232:	4b2b      	ldr	r3, [pc, #172]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	f023 0202 	bic.w	r2, r3, #2
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	4928      	ldr	r1, [pc, #160]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006240:	4313      	orrs	r3, r2
 8006242:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006244:	4b26      	ldr	r3, [pc, #152]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	4a25      	ldr	r2, [pc, #148]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800624a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800624e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006250:	4b23      	ldr	r3, [pc, #140]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006254:	4a22      	ldr	r2, [pc, #136]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800625a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800625c:	4b20      	ldr	r3, [pc, #128]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	4a1f      	ldr	r2, [pc, #124]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006268:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006274:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800627a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800627e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006280:	f7fb f8cc 	bl	800141c <HAL_GetTick>
 8006284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006288:	f7fb f8c8 	bl	800141c <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e067      	b.n	800636a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800629a:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <HAL_RCC_OscConfig+0x730>
 80062a6:	e05f      	b.n	8006368 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a8:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80062ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b4:	f7fb f8b2 	bl	800141c <HAL_GetTick>
 80062b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fb f8ae 	bl	800141c <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e04d      	b.n	800636a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062ce:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <HAL_RCC_OscConfig+0x788>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f0      	bne.n	80062bc <HAL_RCC_OscConfig+0x764>
 80062da:	e045      	b.n	8006368 <HAL_RCC_OscConfig+0x810>
 80062dc:	58024800 	.word	0x58024800
 80062e0:	58024400 	.word	0x58024400
 80062e4:	fffffc0c 	.word	0xfffffc0c
 80062e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062ec:	4b21      	ldr	r3, [pc, #132]	; (8006374 <HAL_RCC_OscConfig+0x81c>)
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062f2:	4b20      	ldr	r3, [pc, #128]	; (8006374 <HAL_RCC_OscConfig+0x81c>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d031      	beq.n	8006364 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f003 0203 	and.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800630a:	429a      	cmp	r2, r3
 800630c:	d12a      	bne.n	8006364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631a:	429a      	cmp	r2, r3
 800631c:	d122      	bne.n	8006364 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006328:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800632a:	429a      	cmp	r2, r3
 800632c:	d11a      	bne.n	8006364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	0a5b      	lsrs	r3, r3, #9
 8006332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800633c:	429a      	cmp	r2, r3
 800633e:	d111      	bne.n	8006364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	0c1b      	lsrs	r3, r3, #16
 8006344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800634e:	429a      	cmp	r2, r3
 8006350:	d108      	bne.n	8006364 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	0e1b      	lsrs	r3, r3, #24
 8006356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006360:	429a      	cmp	r2, r3
 8006362:	d001      	beq.n	8006368 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3730      	adds	r7, #48	; 0x30
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	58024400 	.word	0x58024400

08006378 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e19c      	b.n	80066c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800638c:	4b8a      	ldr	r3, [pc, #552]	; (80065b8 <HAL_RCC_ClockConfig+0x240>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d910      	bls.n	80063bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639a:	4b87      	ldr	r3, [pc, #540]	; (80065b8 <HAL_RCC_ClockConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f023 020f 	bic.w	r2, r3, #15
 80063a2:	4985      	ldr	r1, [pc, #532]	; (80065b8 <HAL_RCC_ClockConfig+0x240>)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063aa:	4b83      	ldr	r3, [pc, #524]	; (80065b8 <HAL_RCC_ClockConfig+0x240>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e184      	b.n	80066c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d010      	beq.n	80063ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	4b7b      	ldr	r3, [pc, #492]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d908      	bls.n	80063ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063d8:	4b78      	ldr	r3, [pc, #480]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	4975      	ldr	r1, [pc, #468]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d010      	beq.n	8006418 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695a      	ldr	r2, [r3, #20]
 80063fa:	4b70      	ldr	r3, [pc, #448]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006402:	429a      	cmp	r2, r3
 8006404:	d908      	bls.n	8006418 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006406:	4b6d      	ldr	r3, [pc, #436]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	496a      	ldr	r1, [pc, #424]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006414:	4313      	orrs	r3, r2
 8006416:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b00      	cmp	r3, #0
 8006422:	d010      	beq.n	8006446 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	4b64      	ldr	r3, [pc, #400]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006430:	429a      	cmp	r2, r3
 8006432:	d908      	bls.n	8006446 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006434:	4b61      	ldr	r3, [pc, #388]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	495e      	ldr	r1, [pc, #376]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006442:	4313      	orrs	r3, r2
 8006444:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d010      	beq.n	8006474 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69da      	ldr	r2, [r3, #28]
 8006456:	4b59      	ldr	r3, [pc, #356]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800645e:	429a      	cmp	r2, r3
 8006460:	d908      	bls.n	8006474 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006462:	4b56      	ldr	r3, [pc, #344]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	4953      	ldr	r1, [pc, #332]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006470:	4313      	orrs	r3, r2
 8006472:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d010      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	4b4d      	ldr	r3, [pc, #308]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	429a      	cmp	r2, r3
 800648e:	d908      	bls.n	80064a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006490:	4b4a      	ldr	r3, [pc, #296]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	f023 020f 	bic.w	r2, r3, #15
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4947      	ldr	r1, [pc, #284]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d055      	beq.n	800655a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80064ae:	4b43      	ldr	r3, [pc, #268]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	4940      	ldr	r1, [pc, #256]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d107      	bne.n	80064d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064c8:	4b3c      	ldr	r3, [pc, #240]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d121      	bne.n	8006518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0f6      	b.n	80066c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d107      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064e0:	4b36      	ldr	r3, [pc, #216]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d115      	bne.n	8006518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0ea      	b.n	80066c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d107      	bne.n	8006508 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064f8:	4b30      	ldr	r3, [pc, #192]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d109      	bne.n	8006518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e0de      	b.n	80066c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006508:	4b2c      	ldr	r3, [pc, #176]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0d6      	b.n	80066c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006518:	4b28      	ldr	r3, [pc, #160]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f023 0207 	bic.w	r2, r3, #7
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	4925      	ldr	r1, [pc, #148]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006526:	4313      	orrs	r3, r2
 8006528:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652a:	f7fa ff77 	bl	800141c <HAL_GetTick>
 800652e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006530:	e00a      	b.n	8006548 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006532:	f7fa ff73 	bl	800141c <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006540:	4293      	cmp	r3, r2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e0be      	b.n	80066c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006548:	4b1c      	ldr	r3, [pc, #112]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	429a      	cmp	r2, r3
 8006558:	d1eb      	bne.n	8006532 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d010      	beq.n	8006588 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	4b14      	ldr	r3, [pc, #80]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	429a      	cmp	r2, r3
 8006574:	d208      	bcs.n	8006588 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006576:	4b11      	ldr	r3, [pc, #68]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	f023 020f 	bic.w	r2, r3, #15
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	490e      	ldr	r1, [pc, #56]	; (80065bc <HAL_RCC_ClockConfig+0x244>)
 8006584:	4313      	orrs	r3, r2
 8006586:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <HAL_RCC_ClockConfig+0x240>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	429a      	cmp	r2, r3
 8006594:	d214      	bcs.n	80065c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006596:	4b08      	ldr	r3, [pc, #32]	; (80065b8 <HAL_RCC_ClockConfig+0x240>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f023 020f 	bic.w	r2, r3, #15
 800659e:	4906      	ldr	r1, [pc, #24]	; (80065b8 <HAL_RCC_ClockConfig+0x240>)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a6:	4b04      	ldr	r3, [pc, #16]	; (80065b8 <HAL_RCC_ClockConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d005      	beq.n	80065c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e086      	b.n	80066c6 <HAL_RCC_ClockConfig+0x34e>
 80065b8:	52002000 	.word	0x52002000
 80065bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d010      	beq.n	80065ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	4b3f      	ldr	r3, [pc, #252]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065d8:	429a      	cmp	r2, r3
 80065da:	d208      	bcs.n	80065ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065dc:	4b3c      	ldr	r3, [pc, #240]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	4939      	ldr	r1, [pc, #228]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0308 	and.w	r3, r3, #8
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d010      	beq.n	800661c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	4b34      	ldr	r3, [pc, #208]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006606:	429a      	cmp	r2, r3
 8006608:	d208      	bcs.n	800661c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800660a:	4b31      	ldr	r3, [pc, #196]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	492e      	ldr	r1, [pc, #184]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 8006618:	4313      	orrs	r3, r2
 800661a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b00      	cmp	r3, #0
 8006626:	d010      	beq.n	800664a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699a      	ldr	r2, [r3, #24]
 800662c:	4b28      	ldr	r3, [pc, #160]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006634:	429a      	cmp	r2, r3
 8006636:	d208      	bcs.n	800664a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006638:	4b25      	ldr	r3, [pc, #148]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	4922      	ldr	r1, [pc, #136]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 8006646:	4313      	orrs	r3, r2
 8006648:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d010      	beq.n	8006678 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006662:	429a      	cmp	r2, r3
 8006664:	d208      	bcs.n	8006678 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006666:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	4917      	ldr	r1, [pc, #92]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 8006674:	4313      	orrs	r3, r2
 8006676:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006678:	f000 f834 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 800667c:	4601      	mov	r1, r0
 800667e:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <HAL_RCC_ClockConfig+0x35c>)
 800668a:	5cd3      	ldrb	r3, [r2, r3]
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	fa21 f303 	lsr.w	r3, r1, r3
 8006694:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006696:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <HAL_RCC_ClockConfig+0x358>)
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	4a0d      	ldr	r2, [pc, #52]	; (80066d4 <HAL_RCC_ClockConfig+0x35c>)
 80066a0:	5cd3      	ldrb	r3, [r2, r3]
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ac:	4a0a      	ldr	r2, [pc, #40]	; (80066d8 <HAL_RCC_ClockConfig+0x360>)
 80066ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066b0:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <HAL_RCC_ClockConfig+0x364>)
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80066b6:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <HAL_RCC_ClockConfig+0x368>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fa fe64 	bl	8001388 <HAL_InitTick>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	58024400 	.word	0x58024400
 80066d4:	0800ae80 	.word	0x0800ae80
 80066d8:	20000004 	.word	0x20000004
 80066dc:	20000000 	.word	0x20000000
 80066e0:	2000000c 	.word	0x2000000c

080066e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	; 0x24
 80066e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066ea:	4baf      	ldr	r3, [pc, #700]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066f2:	2b18      	cmp	r3, #24
 80066f4:	f200 814e 	bhi.w	8006994 <HAL_RCC_GetSysClockFreq+0x2b0>
 80066f8:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	08006765 	.word	0x08006765
 8006704:	08006995 	.word	0x08006995
 8006708:	08006995 	.word	0x08006995
 800670c:	08006995 	.word	0x08006995
 8006710:	08006995 	.word	0x08006995
 8006714:	08006995 	.word	0x08006995
 8006718:	08006995 	.word	0x08006995
 800671c:	08006995 	.word	0x08006995
 8006720:	0800678b 	.word	0x0800678b
 8006724:	08006995 	.word	0x08006995
 8006728:	08006995 	.word	0x08006995
 800672c:	08006995 	.word	0x08006995
 8006730:	08006995 	.word	0x08006995
 8006734:	08006995 	.word	0x08006995
 8006738:	08006995 	.word	0x08006995
 800673c:	08006995 	.word	0x08006995
 8006740:	08006791 	.word	0x08006791
 8006744:	08006995 	.word	0x08006995
 8006748:	08006995 	.word	0x08006995
 800674c:	08006995 	.word	0x08006995
 8006750:	08006995 	.word	0x08006995
 8006754:	08006995 	.word	0x08006995
 8006758:	08006995 	.word	0x08006995
 800675c:	08006995 	.word	0x08006995
 8006760:	08006797 	.word	0x08006797
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006764:	4b90      	ldr	r3, [pc, #576]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006770:	4b8d      	ldr	r3, [pc, #564]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	4a8c      	ldr	r2, [pc, #560]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
 8006780:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006782:	e10a      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006784:	4b89      	ldr	r3, [pc, #548]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006786:	61bb      	str	r3, [r7, #24]
    break;
 8006788:	e107      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800678a:	4b89      	ldr	r3, [pc, #548]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800678c:	61bb      	str	r3, [r7, #24]
    break;
 800678e:	e104      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006790:	4b88      	ldr	r3, [pc, #544]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006792:	61bb      	str	r3, [r7, #24]
    break;
 8006794:	e101      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006796:	4b84      	ldr	r3, [pc, #528]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80067a0:	4b81      	ldr	r3, [pc, #516]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067ac:	4b7e      	ldr	r3, [pc, #504]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80067b6:	4b7c      	ldr	r3, [pc, #496]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ba:	08db      	lsrs	r3, r3, #3
 80067bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80da 	beq.w	800698e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d05a      	beq.n	8006896 <HAL_RCC_GetSysClockFreq+0x1b2>
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d302      	bcc.n	80067ea <HAL_RCC_GetSysClockFreq+0x106>
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d078      	beq.n	80068da <HAL_RCC_GetSysClockFreq+0x1f6>
 80067e8:	e099      	b.n	800691e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ea:	4b6f      	ldr	r3, [pc, #444]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d02d      	beq.n	8006852 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067f6:	4b6c      	ldr	r3, [pc, #432]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	08db      	lsrs	r3, r3, #3
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	4a6a      	ldr	r2, [pc, #424]	; (80069ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006802:	fa22 f303 	lsr.w	r3, r2, r3
 8006806:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006820:	4b61      	ldr	r3, [pc, #388]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006828:	ee07 3a90 	vmov	s15, r3
 800682c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006830:	ed97 6a02 	vldr	s12, [r7, #8]
 8006834:	eddf 5a60 	vldr	s11, [pc, #384]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006850:	e087      	b.n	8006962 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80069bc <HAL_RCC_GetSysClockFreq+0x2d8>
 8006860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006864:	4b50      	ldr	r3, [pc, #320]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686c:	ee07 3a90 	vmov	s15, r3
 8006870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006874:	ed97 6a02 	vldr	s12, [r7, #8]
 8006878:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800687c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006894:	e065      	b.n	8006962 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	ee07 3a90 	vmov	s15, r3
 800689c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80069c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80068a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a8:	4b3f      	ldr	r3, [pc, #252]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b0:	ee07 3a90 	vmov	s15, r3
 80068b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80068bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80068c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068d8:	e043      	b.n	8006962 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	ee07 3a90 	vmov	s15, r3
 80068e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80069c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80068e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ec:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f4:	ee07 3a90 	vmov	s15, r3
 80068f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006900:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800690c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006918:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800691c:	e021      	b.n	8006962 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	ee07 3a90 	vmov	s15, r3
 8006924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006928:	eddf 6a25 	vldr	s13, [pc, #148]	; 80069c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800692c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006930:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006940:	ed97 6a02 	vldr	s12, [r7, #8]
 8006944:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80069b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800694c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800695c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006960:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006962:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	0a5b      	lsrs	r3, r3, #9
 8006968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696c:	3301      	adds	r3, #1
 800696e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800697a:	edd7 6a07 	vldr	s13, [r7, #28]
 800697e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006986:	ee17 3a90 	vmov	r3, s15
 800698a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800698c:	e005      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	61bb      	str	r3, [r7, #24]
    break;
 8006992:	e002      	b.n	800699a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006996:	61bb      	str	r3, [r7, #24]
    break;
 8006998:	bf00      	nop
  }

  return sysclockfreq;
 800699a:	69bb      	ldr	r3, [r7, #24]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3724      	adds	r7, #36	; 0x24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	58024400 	.word	0x58024400
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	003d0900 	.word	0x003d0900
 80069b4:	007a1200 	.word	0x007a1200
 80069b8:	46000000 	.word	0x46000000
 80069bc:	4c742400 	.word	0x4c742400
 80069c0:	4a742400 	.word	0x4a742400
 80069c4:	4af42400 	.word	0x4af42400

080069c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069ce:	f7ff fe89 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 80069d2:	4601      	mov	r1, r0
 80069d4:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	4a0f      	ldr	r2, [pc, #60]	; (8006a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80069e0:	5cd3      	ldrb	r3, [r2, r3]
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	fa21 f303 	lsr.w	r3, r1, r3
 80069ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <HAL_RCC_GetHCLKFreq+0x50>)
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <HAL_RCC_GetHCLKFreq+0x54>)
 80069f6:	5cd3      	ldrb	r3, [r2, r3]
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006a02:	4a07      	ldr	r2, [pc, #28]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a06:	4a07      	ldr	r2, [pc, #28]	; (8006a24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	58024400 	.word	0x58024400
 8006a1c:	0800ae80 	.word	0x0800ae80
 8006a20:	20000004 	.word	0x20000004
 8006a24:	20000000 	.word	0x20000000

08006a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a2c:	f7ff ffcc 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8006a30:	4601      	mov	r1, r0
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	4a04      	ldr	r2, [pc, #16]	; (8006a50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a3e:	5cd3      	ldrb	r3, [r2, r3]
 8006a40:	f003 031f 	and.w	r3, r3, #31
 8006a44:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	58024400 	.word	0x58024400
 8006a50:	0800ae80 	.word	0x0800ae80

08006a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006a58:	f7ff ffb6 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8006a5c:	4601      	mov	r1, r0
 8006a5e:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	4a04      	ldr	r2, [pc, #16]	; (8006a7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a6a:	5cd3      	ldrb	r3, [r2, r3]
 8006a6c:	f003 031f 	and.w	r3, r3, #31
 8006a70:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	0800ae80 	.word	0x0800ae80

08006a80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a88:	2300      	movs	r3, #0
 8006a8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d03d      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aa4:	d013      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aaa:	d802      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006ab0:	e01f      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ab6:	d013      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006ab8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006abc:	d01c      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006abe:	e018      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac0:	4baf      	ldr	r3, [pc, #700]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac4:	4aae      	ldr	r2, [pc, #696]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006acc:	e015      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 fd33 	bl	8008540 <RCCEx_PLL2_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ade:	e00c      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3324      	adds	r3, #36	; 0x24
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 fddc 	bl	80086a4 <RCCEx_PLL3_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006af0:	e003      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	75fb      	strb	r3, [r7, #23]
      break;
 8006af6:	e000      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d109      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b00:	4b9f      	ldr	r3, [pc, #636]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b0c:	499c      	ldr	r1, [pc, #624]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	650b      	str	r3, [r1, #80]	; 0x50
 8006b12:	e001      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d03d      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d826      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b49 	.word	0x08006b49
 8006b38:	08006b57 	.word	0x08006b57
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	08006b81 	.word	0x08006b81
 8006b44:	08006b81 	.word	0x08006b81
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b48:	4b8d      	ldr	r3, [pc, #564]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	4a8c      	ldr	r2, [pc, #560]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b54:	e015      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 fcef 	bl	8008540 <RCCEx_PLL2_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b66:	e00c      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3324      	adds	r3, #36	; 0x24
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 fd98 	bl	80086a4 <RCCEx_PLL3_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b78:	e003      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7e:	e000      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d109      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b88:	4b7d      	ldr	r3, [pc, #500]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8c:	f023 0207 	bic.w	r2, r3, #7
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	497a      	ldr	r1, [pc, #488]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	650b      	str	r3, [r1, #80]	; 0x50
 8006b9a:	e001      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d03e      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d01c      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006bb4:	2b80      	cmp	r3, #128	; 0x80
 8006bb6:	d804      	bhi.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d00d      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006bc0:	e01e      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8006bc4:	d01f      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bca:	d01e      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006bcc:	e018      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bce:	4b6c      	ldr	r3, [pc, #432]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	4a6b      	ldr	r2, [pc, #428]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006bda:	e017      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3304      	adds	r3, #4
 8006be0:	2100      	movs	r1, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 fcac 	bl	8008540 <RCCEx_PLL2_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006bec:	e00e      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3324      	adds	r3, #36	; 0x24
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f001 fd55 	bl	80086a4 <RCCEx_PLL3_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006bfe:	e005      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
      break;
 8006c04:	e002      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006c06:	bf00      	nop
 8006c08:	e000      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d109      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006c12:	4b5b      	ldr	r3, [pc, #364]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	4958      	ldr	r1, [pc, #352]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	650b      	str	r3, [r1, #80]	; 0x50
 8006c24:	e001      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d044      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c40:	d01f      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c46:	d805      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006c4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c50:	d00e      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006c52:	e01f      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006c54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c58:	d01f      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c5e:	d01e      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006c60:	e018      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c62:	4b47      	ldr	r3, [pc, #284]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	4a46      	ldr	r2, [pc, #280]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c6e:	e017      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	2100      	movs	r1, #0
 8006c76:	4618      	mov	r0, r3
 8006c78:	f001 fc62 	bl	8008540 <RCCEx_PLL2_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006c80:	e00e      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3324      	adds	r3, #36	; 0x24
 8006c86:	2100      	movs	r1, #0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 fd0b 	bl	80086a4 <RCCEx_PLL3_Config>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006c92:	e005      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75fb      	strb	r3, [r7, #23]
      break;
 8006c98:	e002      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006ca6:	4b36      	ldr	r3, [pc, #216]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006caa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006cb4:	4932      	ldr	r1, [pc, #200]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	658b      	str	r3, [r1, #88]	; 0x58
 8006cba:	e001      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d044      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cd6:	d01f      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cdc:	d805      	bhi.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00a      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006ce2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ce6:	d00e      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006ce8:	e01f      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006cea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cee:	d01f      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006cf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cf4:	d01e      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006cf6:	e018      	b.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf8:	4b21      	ldr	r3, [pc, #132]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	4a20      	ldr	r2, [pc, #128]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d04:	e017      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 fc17 	bl	8008540 <RCCEx_PLL2_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006d16:	e00e      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3324      	adds	r3, #36	; 0x24
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 fcc0 	bl	80086a4 <RCCEx_PLL3_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d28:	e005      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d2e:	e002      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006d30:	bf00      	nop
 8006d32:	e000      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d3c:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d4a:	490d      	ldr	r1, [pc, #52]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	658b      	str	r3, [r1, #88]	; 0x58
 8006d50:	e001      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d035      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d00c      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006d6a:	2b10      	cmp	r3, #16
 8006d6c:	d802      	bhi.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01b      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006d72:	e017      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d00c      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006d78:	2b30      	cmp	r3, #48	; 0x30
 8006d7a:	d018      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006d7c:	e012      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006d7e:	bf00      	nop
 8006d80:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d84:	4baf      	ldr	r3, [pc, #700]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	4aae      	ldr	r2, [pc, #696]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006d90:	e00e      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3304      	adds	r3, #4
 8006d96:	2102      	movs	r1, #2
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f001 fbd1 	bl	8008540 <RCCEx_PLL2_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006da2:	e005      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
      break;
 8006da8:	e002      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006daa:	bf00      	nop
 8006dac:	e000      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006db6:	4ba3      	ldr	r3, [pc, #652]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc2:	49a0      	ldr	r1, [pc, #640]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006dc8:	e001      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d042      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de2:	d01f      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de8:	d805      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df2:	d00e      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006df4:	e01f      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006df6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dfa:	d01f      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e00:	d01e      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006e02:	e018      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e04:	4b8f      	ldr	r3, [pc, #572]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a8e      	ldr	r2, [pc, #568]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e10:	e017      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3304      	adds	r3, #4
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 fb91 	bl	8008540 <RCCEx_PLL2_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e22:	e00e      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3324      	adds	r3, #36	; 0x24
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 fc3a 	bl	80086a4 <RCCEx_PLL3_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006e34:	e005      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3a:	e002      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e48:	4b7e      	ldr	r3, [pc, #504]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e54:	497b      	ldr	r1, [pc, #492]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	650b      	str	r3, [r1, #80]	; 0x50
 8006e5a:	e001      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5c:	7dfb      	ldrb	r3, [r7, #23]
 8006e5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d042      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e74:	d01b      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e7a:	d805      	bhi.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d022      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e84:	d00a      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e86:	e01b      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006e88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e8c:	d01d      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e92:	d01c      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006e94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e98:	d01b      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006e9a:	e011      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f001 fb4c 	bl	8008540 <RCCEx_PLL2_Config>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006eac:	e012      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3324      	adds	r3, #36	; 0x24
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 fbf5 	bl	80086a4 <RCCEx_PLL3_Config>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006ebe:	e009      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec4:	e006      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006ec6:	bf00      	nop
 8006ec8:	e004      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006eca:	bf00      	nop
 8006ecc:	e002      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006ece:	bf00      	nop
 8006ed0:	e000      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006eda:	4b5a      	ldr	r3, [pc, #360]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ede:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee6:	4957      	ldr	r1, [pc, #348]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	650b      	str	r3, [r1, #80]	; 0x50
 8006eec:	e001      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
 8006ef0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d044      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f08:	d01b      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f0e:	d805      	bhi.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d022      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f18:	d00a      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006f1a:	e01b      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f20:	d01d      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f26:	d01c      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006f28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f2c:	d01b      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006f2e:	e011      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	2101      	movs	r1, #1
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 fb02 	bl	8008540 <RCCEx_PLL2_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006f40:	e012      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3324      	adds	r3, #36	; 0x24
 8006f46:	2101      	movs	r1, #1
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 fbab 	bl	80086a4 <RCCEx_PLL3_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006f52:	e009      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
      break;
 8006f58:	e006      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f5a:	bf00      	nop
 8006f5c:	e004      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f68:	7dfb      	ldrb	r3, [r7, #23]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f6e:	4b35      	ldr	r3, [pc, #212]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f7c:	4931      	ldr	r1, [pc, #196]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	658b      	str	r3, [r1, #88]	; 0x58
 8006f82:	e001      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d02d      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f9c:	d005      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fa2:	d009      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d013      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006fa8:	e00f      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006faa:	4b26      	ldr	r3, [pc, #152]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	4a25      	ldr	r2, [pc, #148]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006fb6:	e00c      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f001 fabe 	bl	8008540 <RCCEx_PLL2_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006fc8:	e003      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006fce:	e000      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe4:	4917      	ldr	r1, [pc, #92]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8006fea:	e001      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d035      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	2b03      	cmp	r3, #3
 8007002:	d81b      	bhi.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007004:	a201      	add	r2, pc, #4	; (adr r2, 800700c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700a:	bf00      	nop
 800700c:	08007049 	.word	0x08007049
 8007010:	0800701d 	.word	0x0800701d
 8007014:	0800702b 	.word	0x0800702b
 8007018:	08007049 	.word	0x08007049
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	4a08      	ldr	r2, [pc, #32]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007028:	e00f      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	2102      	movs	r1, #2
 8007030:	4618      	mov	r0, r3
 8007032:	f001 fa85 	bl	8008540 <RCCEx_PLL2_Config>
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800703a:	e006      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]
      break;
 8007040:	e003      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007042:	bf00      	nop
 8007044:	58024400 	.word	0x58024400
      break;
 8007048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800704a:	7dfb      	ldrb	r3, [r7, #23]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d109      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007050:	4bba      	ldr	r3, [pc, #744]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007054:	f023 0203 	bic.w	r2, r3, #3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705c:	49b7      	ldr	r1, [pc, #732]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800705e:	4313      	orrs	r3, r2
 8007060:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007062:	e001      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8086 	beq.w	8007182 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007076:	4bb2      	ldr	r3, [pc, #712]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4ab1      	ldr	r2, [pc, #708]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800707c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007080:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007082:	f7fa f9cb 	bl	800141c <HAL_GetTick>
 8007086:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007088:	e009      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708a:	f7fa f9c7 	bl	800141c <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b64      	cmp	r3, #100	; 0x64
 8007096:	d902      	bls.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	75fb      	strb	r3, [r7, #23]
        break;
 800709c:	e005      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800709e:	4ba8      	ldr	r3, [pc, #672]	; (8007340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0ef      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d166      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070b0:	4ba2      	ldr	r3, [pc, #648]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070ba:	4053      	eors	r3, r2
 80070bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d013      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070c4:	4b9d      	ldr	r3, [pc, #628]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070cc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070ce:	4b9b      	ldr	r3, [pc, #620]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	4a9a      	ldr	r2, [pc, #616]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070da:	4b98      	ldr	r3, [pc, #608]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	4a97      	ldr	r2, [pc, #604]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070e6:	4a95      	ldr	r2, [pc, #596]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f6:	d115      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f8:	f7fa f990 	bl	800141c <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070fe:	e00b      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007100:	f7fa f98c 	bl	800141c <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f241 3288 	movw	r2, #5000	; 0x1388
 800710e:	4293      	cmp	r3, r2
 8007110:	d902      	bls.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	75fb      	strb	r3, [r7, #23]
            break;
 8007116:	e005      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007118:	4b88      	ldr	r3, [pc, #544]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800711a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711c:	f003 0302 	and.w	r3, r3, #2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0ed      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d126      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007138:	d10d      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800713a:	4b80      	ldr	r3, [pc, #512]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007148:	0919      	lsrs	r1, r3, #4
 800714a:	4b7e      	ldr	r3, [pc, #504]	; (8007344 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800714c:	400b      	ands	r3, r1
 800714e:	497b      	ldr	r1, [pc, #492]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007150:	4313      	orrs	r3, r2
 8007152:	610b      	str	r3, [r1, #16]
 8007154:	e005      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007156:	4b79      	ldr	r3, [pc, #484]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	4a78      	ldr	r2, [pc, #480]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800715c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007160:	6113      	str	r3, [r2, #16]
 8007162:	4b76      	ldr	r3, [pc, #472]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007164:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800716c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007170:	4972      	ldr	r1, [pc, #456]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007172:	4313      	orrs	r3, r2
 8007174:	670b      	str	r3, [r1, #112]	; 0x70
 8007176:	e004      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	75bb      	strb	r3, [r7, #22]
 800717c:	e001      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d07d      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007192:	2b28      	cmp	r3, #40	; 0x28
 8007194:	d866      	bhi.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	0800726b 	.word	0x0800726b
 80071a0:	08007265 	.word	0x08007265
 80071a4:	08007265 	.word	0x08007265
 80071a8:	08007265 	.word	0x08007265
 80071ac:	08007265 	.word	0x08007265
 80071b0:	08007265 	.word	0x08007265
 80071b4:	08007265 	.word	0x08007265
 80071b8:	08007265 	.word	0x08007265
 80071bc:	08007241 	.word	0x08007241
 80071c0:	08007265 	.word	0x08007265
 80071c4:	08007265 	.word	0x08007265
 80071c8:	08007265 	.word	0x08007265
 80071cc:	08007265 	.word	0x08007265
 80071d0:	08007265 	.word	0x08007265
 80071d4:	08007265 	.word	0x08007265
 80071d8:	08007265 	.word	0x08007265
 80071dc:	08007253 	.word	0x08007253
 80071e0:	08007265 	.word	0x08007265
 80071e4:	08007265 	.word	0x08007265
 80071e8:	08007265 	.word	0x08007265
 80071ec:	08007265 	.word	0x08007265
 80071f0:	08007265 	.word	0x08007265
 80071f4:	08007265 	.word	0x08007265
 80071f8:	08007265 	.word	0x08007265
 80071fc:	0800726b 	.word	0x0800726b
 8007200:	08007265 	.word	0x08007265
 8007204:	08007265 	.word	0x08007265
 8007208:	08007265 	.word	0x08007265
 800720c:	08007265 	.word	0x08007265
 8007210:	08007265 	.word	0x08007265
 8007214:	08007265 	.word	0x08007265
 8007218:	08007265 	.word	0x08007265
 800721c:	0800726b 	.word	0x0800726b
 8007220:	08007265 	.word	0x08007265
 8007224:	08007265 	.word	0x08007265
 8007228:	08007265 	.word	0x08007265
 800722c:	08007265 	.word	0x08007265
 8007230:	08007265 	.word	0x08007265
 8007234:	08007265 	.word	0x08007265
 8007238:	08007265 	.word	0x08007265
 800723c:	0800726b 	.word	0x0800726b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3304      	adds	r3, #4
 8007244:	2101      	movs	r1, #1
 8007246:	4618      	mov	r0, r3
 8007248:	f001 f97a 	bl	8008540 <RCCEx_PLL2_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007250:	e00c      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3324      	adds	r3, #36	; 0x24
 8007256:	2101      	movs	r1, #1
 8007258:	4618      	mov	r0, r3
 800725a:	f001 fa23 	bl	80086a4 <RCCEx_PLL3_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007262:	e003      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
      break;
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800726a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007272:	4b32      	ldr	r3, [pc, #200]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800727e:	492f      	ldr	r1, [pc, #188]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007280:	4313      	orrs	r3, r2
 8007282:	654b      	str	r3, [r1, #84]	; 0x54
 8007284:	e001      	b.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d037      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800729a:	2b05      	cmp	r3, #5
 800729c:	d820      	bhi.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800729e:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072e7 	.word	0x080072e7
 80072a8:	080072bd 	.word	0x080072bd
 80072ac:	080072cf 	.word	0x080072cf
 80072b0:	080072e7 	.word	0x080072e7
 80072b4:	080072e7 	.word	0x080072e7
 80072b8:	080072e7 	.word	0x080072e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	2101      	movs	r1, #1
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 f93c 	bl	8008540 <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80072cc:	e00c      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3324      	adds	r3, #36	; 0x24
 80072d2:	2101      	movs	r1, #1
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 f9e5 	bl	80086a4 <RCCEx_PLL3_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80072de:	e003      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	75fb      	strb	r3, [r7, #23]
      break;
 80072e4:	e000      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80072e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d109      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072ee:	4b13      	ldr	r3, [pc, #76]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f023 0207 	bic.w	r2, r3, #7
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072fa:	4910      	ldr	r1, [pc, #64]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	654b      	str	r3, [r1, #84]	; 0x54
 8007300:	e001      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0304 	and.w	r3, r3, #4
 800730e:	2b00      	cmp	r3, #0
 8007310:	d040      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007318:	2b05      	cmp	r3, #5
 800731a:	d827      	bhi.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800731c:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	08007373 	.word	0x08007373
 8007328:	08007349 	.word	0x08007349
 800732c:	0800735b 	.word	0x0800735b
 8007330:	08007373 	.word	0x08007373
 8007334:	08007373 	.word	0x08007373
 8007338:	08007373 	.word	0x08007373
 800733c:	58024400 	.word	0x58024400
 8007340:	58024800 	.word	0x58024800
 8007344:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3304      	adds	r3, #4
 800734c:	2101      	movs	r1, #1
 800734e:	4618      	mov	r0, r3
 8007350:	f001 f8f6 	bl	8008540 <RCCEx_PLL2_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007358:	e00c      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3324      	adds	r3, #36	; 0x24
 800735e:	2101      	movs	r1, #1
 8007360:	4618      	mov	r0, r3
 8007362:	f001 f99f 	bl	80086a4 <RCCEx_PLL3_Config>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800736a:	e003      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
      break;
 8007370:	e000      	b.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800737a:	4bb2      	ldr	r3, [pc, #712]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	f023 0207 	bic.w	r2, r3, #7
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007388:	49ae      	ldr	r1, [pc, #696]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800738a:	4313      	orrs	r3, r2
 800738c:	658b      	str	r3, [r1, #88]	; 0x58
 800738e:	e001      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d044      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073aa:	d01b      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80073ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b0:	d805      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d022      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80073b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073ba:	d00a      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80073bc:	e01b      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80073be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c2:	d01d      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80073c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073c8:	d01c      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80073ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073ce:	d01b      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80073d0:	e011      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3304      	adds	r3, #4
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 f8b1 	bl	8008540 <RCCEx_PLL2_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80073e2:	e012      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3324      	adds	r3, #36	; 0x24
 80073e8:	2102      	movs	r1, #2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 f95a 	bl	80086a4 <RCCEx_PLL3_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80073f4:	e009      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	75fb      	strb	r3, [r7, #23]
      break;
 80073fa:	e006      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80073fc:	bf00      	nop
 80073fe:	e004      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007400:	bf00      	nop
 8007402:	e002      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007404:	bf00      	nop
 8007406:	e000      	b.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800740a:	7dfb      	ldrb	r3, [r7, #23]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007410:	4b8c      	ldr	r3, [pc, #560]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007414:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800741e:	4989      	ldr	r1, [pc, #548]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007420:	4313      	orrs	r3, r2
 8007422:	654b      	str	r3, [r1, #84]	; 0x54
 8007424:	e001      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007432:	2b00      	cmp	r3, #0
 8007434:	d044      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800743c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007440:	d01b      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007446:	d805      	bhi.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d022      	beq.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800744c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007450:	d00a      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007452:	e01b      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007458:	d01d      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800745a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800745e:	d01c      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007460:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007464:	d01b      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007466:	e011      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3304      	adds	r3, #4
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f001 f866 	bl	8008540 <RCCEx_PLL2_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007478:	e012      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3324      	adds	r3, #36	; 0x24
 800747e:	2102      	movs	r1, #2
 8007480:	4618      	mov	r0, r3
 8007482:	f001 f90f 	bl	80086a4 <RCCEx_PLL3_Config>
 8007486:	4603      	mov	r3, r0
 8007488:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800748a:	e009      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	75fb      	strb	r3, [r7, #23]
      break;
 8007490:	e006      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007492:	bf00      	nop
 8007494:	e004      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007496:	bf00      	nop
 8007498:	e002      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800749e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074a6:	4b67      	ldr	r3, [pc, #412]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80074a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074b4:	4963      	ldr	r1, [pc, #396]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	658b      	str	r3, [r1, #88]	; 0x58
 80074ba:	e001      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d044      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80074d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d6:	d01b      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80074d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074dc:	d805      	bhi.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d022      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80074e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80074e8:	e01b      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ee:	d01d      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80074f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074f4:	d01c      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80074f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074fa:	d01b      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80074fc:	e011      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3304      	adds	r3, #4
 8007502:	2100      	movs	r1, #0
 8007504:	4618      	mov	r0, r3
 8007506:	f001 f81b 	bl	8008540 <RCCEx_PLL2_Config>
 800750a:	4603      	mov	r3, r0
 800750c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800750e:	e012      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3324      	adds	r3, #36	; 0x24
 8007514:	2102      	movs	r1, #2
 8007516:	4618      	mov	r0, r3
 8007518:	f001 f8c4 	bl	80086a4 <RCCEx_PLL3_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007520:	e009      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
      break;
 8007526:	e006      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007528:	bf00      	nop
 800752a:	e004      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800752c:	bf00      	nop
 800752e:	e002      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007530:	bf00      	nop
 8007532:	e000      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800753c:	4b41      	ldr	r3, [pc, #260]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800753e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007540:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800754a:	493e      	ldr	r1, [pc, #248]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800754c:	4313      	orrs	r3, r2
 800754e:	658b      	str	r3, [r1, #88]	; 0x58
 8007550:	e001      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d01a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756c:	d10a      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3324      	adds	r3, #36	; 0x24
 8007572:	2102      	movs	r1, #2
 8007574:	4618      	mov	r0, r3
 8007576:	f001 f895 	bl	80086a4 <RCCEx_PLL3_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007584:	4b2f      	ldr	r3, [pc, #188]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007592:	492c      	ldr	r1, [pc, #176]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007594:	4313      	orrs	r3, r2
 8007596:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0310 	and.w	r3, r3, #16
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ae:	d10a      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3324      	adds	r3, #36	; 0x24
 80075b4:	2102      	movs	r1, #2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 f874 	bl	80086a4 <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075c6:	4b1f      	ldr	r3, [pc, #124]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d4:	491b      	ldr	r1, [pc, #108]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d032      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80075ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f0:	d00d      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80075f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075f6:	d016      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d111      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f000 ff9c 	bl	8008540 <RCCEx_PLL2_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800760c:	e00c      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3324      	adds	r3, #36	; 0x24
 8007612:	2102      	movs	r1, #2
 8007614:	4618      	mov	r0, r3
 8007616:	f001 f845 	bl	80086a4 <RCCEx_PLL3_Config>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800761e:	e003      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
      break;
 8007624:	e000      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10c      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800762e:	4b05      	ldr	r3, [pc, #20]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007632:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800763c:	4901      	ldr	r1, [pc, #4]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800763e:	4313      	orrs	r3, r2
 8007640:	658b      	str	r3, [r1, #88]	; 0x58
 8007642:	e003      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d02f      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800765e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007662:	d00c      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007664:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007668:	d015      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800766a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800766e:	d10f      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007670:	4b79      	ldr	r3, [pc, #484]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	4a78      	ldr	r2, [pc, #480]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800767a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800767c:	e00c      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3324      	adds	r3, #36	; 0x24
 8007682:	2101      	movs	r1, #1
 8007684:	4618      	mov	r0, r3
 8007686:	f001 f80d 	bl	80086a4 <RCCEx_PLL3_Config>
 800768a:	4603      	mov	r3, r0
 800768c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800768e:	e003      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	75fb      	strb	r3, [r7, #23]
      break;
 8007694:	e000      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10a      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800769e:	4b6e      	ldr	r3, [pc, #440]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80076a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ac:	496a      	ldr	r1, [pc, #424]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	654b      	str	r3, [r1, #84]	; 0x54
 80076b2:	e001      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d029      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d0:	d007      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80076d2:	e00f      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d4:	4b60      	ldr	r3, [pc, #384]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	4a5f      	ldr	r2, [pc, #380]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80076da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80076e0:	e00b      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3304      	adds	r3, #4
 80076e6:	2102      	movs	r1, #2
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 ff29 	bl	8008540 <RCCEx_PLL2_Config>
 80076ee:	4603      	mov	r3, r0
 80076f0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80076f2:	e002      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	75fb      	strb	r3, [r7, #23]
      break;
 80076f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d109      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007700:	4b55      	ldr	r3, [pc, #340]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770c:	4952      	ldr	r1, [pc, #328]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800770e:	4313      	orrs	r3, r2
 8007710:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007712:	e001      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00a      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3324      	adds	r3, #36	; 0x24
 8007728:	2102      	movs	r1, #2
 800772a:	4618      	mov	r0, r3
 800772c:	f000 ffba 	bl	80086a4 <RCCEx_PLL3_Config>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d02f      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800774a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800774e:	d00c      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007754:	d802      	bhi.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d011      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800775a:	e00d      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800775c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007760:	d00f      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007766:	d00e      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007768:	e006      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800776a:	4b3b      	ldr	r3, [pc, #236]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776e:	4a3a      	ldr	r2, [pc, #232]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007776:	e007      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
      break;
 800777c:	e004      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800777e:	bf00      	nop
 8007780:	e002      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007782:	bf00      	nop
 8007784:	e000      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800778e:	4b32      	ldr	r3, [pc, #200]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800779a:	492f      	ldr	r1, [pc, #188]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800779c:	4313      	orrs	r3, r2
 800779e:	654b      	str	r3, [r1, #84]	; 0x54
 80077a0:	e001      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
 80077a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d008      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80077b2:	4b29      	ldr	r3, [pc, #164]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077be:	4926      	ldr	r1, [pc, #152]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80077d0:	4b21      	ldr	r3, [pc, #132]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80077de:	491e      	ldr	r1, [pc, #120]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d008      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077f0:	4b19      	ldr	r3, [pc, #100]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077fc:	4916      	ldr	r1, [pc, #88]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00d      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	4a11      	ldr	r2, [pc, #68]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007814:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007818:	6113      	str	r3, [r2, #16]
 800781a:	4b0f      	ldr	r3, [pc, #60]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800781c:	691a      	ldr	r2, [r3, #16]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007824:	490c      	ldr	r1, [pc, #48]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007826:	4313      	orrs	r3, r2
 8007828:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	da08      	bge.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007836:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800783e:	4906      	ldr	r1, [pc, #24]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007840:	4313      	orrs	r3, r2
 8007842:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007844:	7dbb      	ldrb	r3, [r7, #22]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	e000      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	58024400 	.word	0x58024400

0800785c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b090      	sub	sp, #64	; 0x40
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786a:	d150      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800786c:	4ba1      	ldr	r3, [pc, #644]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800786e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	2b04      	cmp	r3, #4
 800787a:	d844      	bhi.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007899 	.word	0x08007899
 8007888:	080078a9 	.word	0x080078a9
 800788c:	080078b9 	.word	0x080078b9
 8007890:	08007901 	.word	0x08007901
 8007894:	080078c9 	.word	0x080078c9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fd03 	bl	80082a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a6:	e241      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078a8:	f107 0318 	add.w	r3, r7, #24
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 fa63 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078b6:	e239      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b8:	f107 030c 	add.w	r3, r7, #12
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fba7 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078c6:	e231      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80078c8:	4b8a      	ldr	r3, [pc, #552]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80078ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078d0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80078d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d102      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80078d8:	4b87      	ldr	r3, [pc, #540]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80078da:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80078dc:	e226      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80078de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078e4:	d102      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80078e6:	4b85      	ldr	r3, [pc, #532]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ea:	e21f      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80078ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f2:	d102      	bne.n	80078fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80078f4:	4b82      	ldr	r3, [pc, #520]	; (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80078f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078f8:	e218      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078fe:	e215      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007900:	4b80      	ldr	r3, [pc, #512]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007902:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007904:	e212      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800790a:	bf00      	nop
 800790c:	e20e      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007914:	d14f      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007916:	4b77      	ldr	r3, [pc, #476]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800791e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	2b80      	cmp	r3, #128	; 0x80
 8007924:	d01c      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007926:	2b80      	cmp	r3, #128	; 0x80
 8007928:	d804      	bhi.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d008      	beq.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800792e:	2b40      	cmp	r3, #64	; 0x40
 8007930:	d00e      	beq.n	8007950 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007932:	e03c      	b.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007934:	2bc0      	cmp	r3, #192	; 0xc0
 8007936:	d037      	beq.n	80079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800793c:	d018      	beq.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800793e:	e036      	b.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fcaf 	bl	80082a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800794e:	e1ed      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007950:	f107 0318 	add.w	r3, r7, #24
 8007954:	4618      	mov	r0, r3
 8007956:	f000 fa0f 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800795e:	e1e5      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007960:	f107 030c 	add.w	r3, r7, #12
 8007964:	4618      	mov	r0, r3
 8007966:	f000 fb53 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800796e:	e1dd      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007970:	4b60      	ldr	r3, [pc, #384]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007978:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800797a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007980:	4b5d      	ldr	r3, [pc, #372]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007984:	e1d2      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800798c:	d102      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800798e:	4b5b      	ldr	r3, [pc, #364]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007992:	e1cb      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800799a:	d102      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800799c:	4b58      	ldr	r3, [pc, #352]	; (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a0:	e1c4      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079a6:	e1c1      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80079a8:	4b56      	ldr	r3, [pc, #344]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079ac:	e1be      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079b2:	bf00      	nop
 80079b4:	e1ba      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079bc:	d153      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80079be:	4b4d      	ldr	r3, [pc, #308]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80079c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ce:	d01f      	beq.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80079d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079d4:	d805      	bhi.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80079da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079de:	d00f      	beq.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80079e0:	e03d      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80079e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079e6:	d037      	beq.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80079e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079ec:	d018      	beq.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80079ee:	e036      	b.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 fc57 	bl	80082a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079fe:	e195      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a00:	f107 0318 	add.w	r3, r7, #24
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f9b7 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a0e:	e18d      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a10:	f107 030c 	add.w	r3, r7, #12
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fafb 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a1e:	e185      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a20:	4b34      	ldr	r3, [pc, #208]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a30:	4b31      	ldr	r3, [pc, #196]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a34:	e17a      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a3c:	d102      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007a3e:	4b2f      	ldr	r3, [pc, #188]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a42:	e173      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a4a:	d102      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007a4c:	4b2c      	ldr	r3, [pc, #176]	; (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a50:	e16c      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a56:	e169      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a58:	4b2a      	ldr	r3, [pc, #168]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a5c:	e166      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a62:	bf00      	nop
 8007a64:	e162      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a6c:	d15d      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007a6e:	4b21      	ldr	r3, [pc, #132]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007a76:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a7e:	d01f      	beq.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007a80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a84:	d805      	bhi.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007a8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a8e:	d00f      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007a90:	e047      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007a92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a96:	d041      	beq.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a9c:	d018      	beq.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007a9e:	e040      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fbff 	bl	80082a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aae:	e13d      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ab0:	f107 0318 	add.w	r3, r7, #24
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 f95f 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007abe:	e135      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ac0:	f107 030c 	add.w	r3, r7, #12
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 faa3 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ace:	e12d      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ad0:	4b08      	ldr	r3, [pc, #32]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ad8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d102      	bne.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007ae4:	e122      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aec:	d10c      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007aee:	4b03      	ldr	r3, [pc, #12]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007af2:	e11b      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007af4:	58024400 	.word	0x58024400
 8007af8:	03d09000 	.word	0x03d09000
 8007afc:	003d0900 	.word	0x003d0900
 8007b00:	007a1200 	.word	0x007a1200
 8007b04:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b0e:	d102      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007b10:	4b89      	ldr	r3, [pc, #548]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b14:	e10a      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b1a:	e107      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b1c:	4b87      	ldr	r3, [pc, #540]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b20:	e104      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b26:	bf00      	nop
 8007b28:	e100      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b30:	d153      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007b32:	4b83      	ldr	r3, [pc, #524]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b36:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007b3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b42:	d01f      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b48:	d805      	bhi.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b52:	d00f      	beq.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007b54:	e03d      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007b56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b5a:	d037      	beq.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b60:	d018      	beq.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007b62:	e036      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fb9d 	bl	80082a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b72:	e0db      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b74:	f107 0318 	add.w	r3, r7, #24
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f8fd 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b82:	e0d3      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b84:	f107 030c 	add.w	r3, r7, #12
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 fa41 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b92:	e0cb      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b94:	4b6a      	ldr	r3, [pc, #424]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d102      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007ba4:	4b67      	ldr	r3, [pc, #412]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007ba8:	e0c0      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bb0:	d102      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007bb2:	4b65      	ldr	r3, [pc, #404]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bb6:	e0b9      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bbe:	d102      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007bc0:	4b5d      	ldr	r3, [pc, #372]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc4:	e0b2      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bca:	e0af      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007bcc:	4b5b      	ldr	r3, [pc, #364]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd0:	e0ac      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd6:	bf00      	nop
 8007bd8:	e0a8      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007be0:	d13d      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007be2:	4b57      	ldr	r3, [pc, #348]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007bea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf2:	d00c      	beq.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf8:	d011      	beq.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d12b      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bfe:	f107 0318 	add.w	r3, r7, #24
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 f8b8 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c0c:	e08e      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f9fc 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c1c:	e086      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c1e:	4b48      	ldr	r3, [pc, #288]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c26:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d102      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c2e:	4b45      	ldr	r3, [pc, #276]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c32:	e07b      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c3a:	d102      	bne.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007c3c:	4b42      	ldr	r3, [pc, #264]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c40:	e074      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c48:	d102      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007c4a:	4b3b      	ldr	r3, [pc, #236]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c4e:	e06d      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c54:	e06a      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c5a:	bf00      	nop
 8007c5c:	e066      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c64:	d11f      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007c66:	4b36      	ldr	r3, [pc, #216]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c6e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c7a:	d008      	beq.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007c7c:	e00f      	b.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fb10 	bl	80082a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c8c:	e04e      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c8e:	f107 0318 	add.w	r3, r7, #24
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 f870 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c9c:	e046      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca2:	bf00      	nop
 8007ca4:	e042      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cac:	d13c      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007cae:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007cb6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cbe:	d01e      	beq.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc4:	d805      	bhi.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00d      	beq.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cce:	d00e      	beq.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007cd0:	e026      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd6:	d01d      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cdc:	d01d      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007cde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ce2:	d014      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007ce4:	e01c      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007ce6:	f000 f831 	bl	8007d4c <HAL_RCCEx_GetD3PCLK1Freq>
 8007cea:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007cec:	e01e      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cee:	f107 0318 	add.w	r3, r7, #24
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f840 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cfc:	e016      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cfe:	f107 030c 	add.w	r3, r7, #12
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 f984 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d0c:	e00e      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d12:	e00b      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d18:	e008      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007d1a:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d1e:	e005      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d24:	bf00      	nop
 8007d26:	e001      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3740      	adds	r7, #64	; 0x40
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	007a1200 	.word	0x007a1200
 8007d3c:	00bb8000 	.word	0x00bb8000
 8007d40:	58024400 	.word	0x58024400
 8007d44:	03d09000 	.word	0x03d09000
 8007d48:	003d0900 	.word	0x003d0900

08007d4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d50:	f7fe fe3a 	bl	80069c8 <HAL_RCC_GetHCLKFreq>
 8007d54:	4601      	mov	r1, r0
 8007d56:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	091b      	lsrs	r3, r3, #4
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	4a04      	ldr	r2, [pc, #16]	; (8007d74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d62:	5cd3      	ldrb	r3, [r2, r3]
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	58024400 	.word	0x58024400
 8007d74:	0800ae80 	.word	0x0800ae80

08007d78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b089      	sub	sp, #36	; 0x24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d80:	4b9d      	ldr	r3, [pc, #628]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d8a:	4b9b      	ldr	r3, [pc, #620]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8e:	0b1b      	lsrs	r3, r3, #12
 8007d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d96:	4b98      	ldr	r3, [pc, #608]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9a:	091b      	lsrs	r3, r3, #4
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007da2:	4b95      	ldr	r3, [pc, #596]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da6:	08db      	lsrs	r3, r3, #3
 8007da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	fb02 f303 	mul.w	r3, r2, r3
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 810a 	beq.w	8007fda <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d05a      	beq.n	8007e82 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d302      	bcc.n	8007dd6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d078      	beq.n	8007ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007dd4:	e099      	b.n	8007f0a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dd6:	4b88      	ldr	r3, [pc, #544]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d02d      	beq.n	8007e3e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007de2:	4b85      	ldr	r3, [pc, #532]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	4a83      	ldr	r2, [pc, #524]	; (8007ffc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	ee07 3a90 	vmov	s15, r3
 8007e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e0c:	4b7a      	ldr	r3, [pc, #488]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e14:	ee07 3a90 	vmov	s15, r3
 8007e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e20:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e38:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e3c:	e087      	b.n	8007f4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e48:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008004 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e50:	4b69      	ldr	r3, [pc, #420]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e58:	ee07 3a90 	vmov	s15, r3
 8007e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e60:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e64:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e80:	e065      	b.n	8007f4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e94:	4b58      	ldr	r3, [pc, #352]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ea8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ec4:	e043      	b.n	8007f4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	ee07 3a90 	vmov	s15, r3
 8007ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800800c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed8:	4b47      	ldr	r3, [pc, #284]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ee0:	ee07 3a90 	vmov	s15, r3
 8007ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f08:	e021      	b.n	8007f4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	ee07 3a90 	vmov	s15, r3
 8007f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f14:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f1c:	4b36      	ldr	r3, [pc, #216]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f24:	ee07 3a90 	vmov	s15, r3
 8007f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f30:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f4c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007f4e:	4b2a      	ldr	r3, [pc, #168]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	0a5b      	lsrs	r3, r3, #9
 8007f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f74:	ee17 2a90 	vmov	r2, s15
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f7c:	4b1e      	ldr	r3, [pc, #120]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	0c1b      	lsrs	r3, r3, #16
 8007f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa2:	ee17 2a90 	vmov	r2, s15
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007faa:	4b13      	ldr	r3, [pc, #76]	; (8007ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	0e1b      	lsrs	r3, r3, #24
 8007fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb4:	ee07 3a90 	vmov	s15, r3
 8007fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd0:	ee17 2a90 	vmov	r2, s15
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007fd8:	e008      	b.n	8007fec <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	609a      	str	r2, [r3, #8]
}
 8007fec:	bf00      	nop
 8007fee:	3724      	adds	r7, #36	; 0x24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	58024400 	.word	0x58024400
 8007ffc:	03d09000 	.word	0x03d09000
 8008000:	46000000 	.word	0x46000000
 8008004:	4c742400 	.word	0x4c742400
 8008008:	4a742400 	.word	0x4a742400
 800800c:	4af42400 	.word	0x4af42400

08008010 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008010:	b480      	push	{r7}
 8008012:	b089      	sub	sp, #36	; 0x24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008018:	4b9d      	ldr	r3, [pc, #628]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800801a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801c:	f003 0303 	and.w	r3, r3, #3
 8008020:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008022:	4b9b      	ldr	r3, [pc, #620]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008026:	0d1b      	lsrs	r3, r3, #20
 8008028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800802c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800802e:	4b98      	ldr	r3, [pc, #608]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	0a1b      	lsrs	r3, r3, #8
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800803a:	4b95      	ldr	r3, [pc, #596]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800803c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803e:	08db      	lsrs	r3, r3, #3
 8008040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	fb02 f303 	mul.w	r3, r2, r3
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 810a 	beq.w	8008272 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d05a      	beq.n	800811a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008064:	2b01      	cmp	r3, #1
 8008066:	d302      	bcc.n	800806e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008068:	2b02      	cmp	r3, #2
 800806a:	d078      	beq.n	800815e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800806c:	e099      	b.n	80081a2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800806e:	4b88      	ldr	r3, [pc, #544]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b00      	cmp	r3, #0
 8008078:	d02d      	beq.n	80080d6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800807a:	4b85      	ldr	r3, [pc, #532]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	08db      	lsrs	r3, r3, #3
 8008080:	f003 0303 	and.w	r3, r3, #3
 8008084:	4a83      	ldr	r2, [pc, #524]	; (8008294 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008086:	fa22 f303 	lsr.w	r3, r2, r3
 800808a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	ee07 3a90 	vmov	s15, r3
 800809c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a4:	4b7a      	ldr	r3, [pc, #488]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80080b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80080bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80080d4:	e087      	b.n	80081e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800829c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80080e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e8:	4b69      	ldr	r3, [pc, #420]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f0:	ee07 3a90 	vmov	s15, r3
 80080f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800810c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008114:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008118:	e065      	b.n	80081e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	ee07 3a90 	vmov	s15, r3
 8008120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008124:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812c:	4b58      	ldr	r3, [pc, #352]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008134:	ee07 3a90 	vmov	s15, r3
 8008138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008140:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008158:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800815c:	e043      	b.n	80081e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	ee07 3a90 	vmov	s15, r3
 8008164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008168:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80082a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800816c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008170:	4b47      	ldr	r3, [pc, #284]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008178:	ee07 3a90 	vmov	s15, r3
 800817c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008180:	ed97 6a03 	vldr	s12, [r7, #12]
 8008184:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081a0:	e021      	b.n	80081e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	ee07 3a90 	vmov	s15, r3
 80081a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80081b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b4:	4b36      	ldr	r3, [pc, #216]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081bc:	ee07 3a90 	vmov	s15, r3
 80081c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008298 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80081cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081e4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80081e6:	4b2a      	ldr	r3, [pc, #168]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	0a5b      	lsrs	r3, r3, #9
 80081ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081f0:	ee07 3a90 	vmov	s15, r3
 80081f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008200:	edd7 6a07 	vldr	s13, [r7, #28]
 8008204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800820c:	ee17 2a90 	vmov	r2, s15
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008214:	4b1e      	ldr	r3, [pc, #120]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008218:	0c1b      	lsrs	r3, r3, #16
 800821a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800822a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800822e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800823a:	ee17 2a90 	vmov	r2, s15
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008242:	4b13      	ldr	r3, [pc, #76]	; (8008290 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	0e1b      	lsrs	r3, r3, #24
 8008248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824c:	ee07 3a90 	vmov	s15, r3
 8008250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008258:	ee37 7a87 	vadd.f32	s14, s15, s14
 800825c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008268:	ee17 2a90 	vmov	r2, s15
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008270:	e008      	b.n	8008284 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	609a      	str	r2, [r3, #8]
}
 8008284:	bf00      	nop
 8008286:	3724      	adds	r7, #36	; 0x24
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	58024400 	.word	0x58024400
 8008294:	03d09000 	.word	0x03d09000
 8008298:	46000000 	.word	0x46000000
 800829c:	4c742400 	.word	0x4c742400
 80082a0:	4a742400 	.word	0x4a742400
 80082a4:	4af42400 	.word	0x4af42400

080082a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b089      	sub	sp, #36	; 0x24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082b0:	4b9d      	ldr	r3, [pc, #628]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80082ba:	4b9b      	ldr	r3, [pc, #620]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	091b      	lsrs	r3, r3, #4
 80082c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80082c6:	4b98      	ldr	r3, [pc, #608]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80082d0:	4b95      	ldr	r3, [pc, #596]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80082d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d4:	08db      	lsrs	r3, r3, #3
 80082d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	fb02 f303 	mul.w	r3, r2, r3
 80082e0:	ee07 3a90 	vmov	s15, r3
 80082e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 810a 	beq.w	8008508 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d05a      	beq.n	80083b0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d302      	bcc.n	8008304 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d078      	beq.n	80083f4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008302:	e099      	b.n	8008438 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008304:	4b88      	ldr	r3, [pc, #544]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d02d      	beq.n	800836c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008310:	4b85      	ldr	r3, [pc, #532]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	08db      	lsrs	r3, r3, #3
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	4a84      	ldr	r2, [pc, #528]	; (800852c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
 8008320:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833a:	4b7b      	ldr	r3, [pc, #492]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800834a:	ed97 6a03 	vldr	s12, [r7, #12]
 800834e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008530 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800835a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800835e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008366:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800836a:	e087      	b.n	800847c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008376:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008534 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800837a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837e:	4b6a      	ldr	r3, [pc, #424]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008386:	ee07 3a90 	vmov	s15, r3
 800838a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008392:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008530 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083ae:	e065      	b.n	800847c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008538 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80083be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c2:	4b59      	ldr	r3, [pc, #356]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80083c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008530 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80083da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083f2:	e043      	b.n	800847c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800853c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008406:	4b48      	ldr	r3, [pc, #288]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008416:	ed97 6a03 	vldr	s12, [r7, #12]
 800841a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008530 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800841e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008436:	e021      	b.n	800847c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008538 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844a:	4b37      	ldr	r3, [pc, #220]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845a:	ed97 6a03 	vldr	s12, [r7, #12]
 800845e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008530 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800847a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800847c:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	0a5b      	lsrs	r3, r3, #9
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008496:	edd7 6a07 	vldr	s13, [r7, #28]
 800849a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a2:	ee17 2a90 	vmov	r2, s15
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80084aa:	4b1f      	ldr	r3, [pc, #124]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	0c1b      	lsrs	r3, r3, #16
 80084b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d0:	ee17 2a90 	vmov	r2, s15
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80084d8:	4b13      	ldr	r3, [pc, #76]	; (8008528 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084dc:	0e1b      	lsrs	r3, r3, #24
 80084de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084fe:	ee17 2a90 	vmov	r2, s15
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008506:	e008      	b.n	800851a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	609a      	str	r2, [r3, #8]
}
 800851a:	bf00      	nop
 800851c:	3724      	adds	r7, #36	; 0x24
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	58024400 	.word	0x58024400
 800852c:	03d09000 	.word	0x03d09000
 8008530:	46000000 	.word	0x46000000
 8008534:	4c742400 	.word	0x4c742400
 8008538:	4a742400 	.word	0x4a742400
 800853c:	4af42400 	.word	0x4af42400

08008540 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800854e:	4b53      	ldr	r3, [pc, #332]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	2b03      	cmp	r3, #3
 8008558:	d101      	bne.n	800855e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e099      	b.n	8008692 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800855e:	4b4f      	ldr	r3, [pc, #316]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a4e      	ldr	r2, [pc, #312]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008564:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800856a:	f7f8 ff57 	bl	800141c <HAL_GetTick>
 800856e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008570:	e008      	b.n	8008584 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008572:	f7f8 ff53 	bl	800141c <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d901      	bls.n	8008584 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e086      	b.n	8008692 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008584:	4b45      	ldr	r3, [pc, #276]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f0      	bne.n	8008572 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008590:	4b42      	ldr	r3, [pc, #264]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	031b      	lsls	r3, r3, #12
 800859e:	493f      	ldr	r1, [pc, #252]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	628b      	str	r3, [r1, #40]	; 0x28
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	025b      	lsls	r3, r3, #9
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	431a      	orrs	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	3b01      	subs	r3, #1
 80085c0:	041b      	lsls	r3, r3, #16
 80085c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80085c6:	431a      	orrs	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	061b      	lsls	r3, r3, #24
 80085d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80085d4:	4931      	ldr	r1, [pc, #196]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80085da:	4b30      	ldr	r3, [pc, #192]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 80085dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	492d      	ldr	r1, [pc, #180]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80085ec:	4b2b      	ldr	r3, [pc, #172]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 80085ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f0:	f023 0220 	bic.w	r2, r3, #32
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	4928      	ldr	r1, [pc, #160]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80085fe:	4b27      	ldr	r3, [pc, #156]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008602:	4a26      	ldr	r2, [pc, #152]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008604:	f023 0310 	bic.w	r3, r3, #16
 8008608:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800860a:	4b24      	ldr	r3, [pc, #144]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 800860c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800860e:	4b24      	ldr	r3, [pc, #144]	; (80086a0 <RCCEx_PLL2_Config+0x160>)
 8008610:	4013      	ands	r3, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	69d2      	ldr	r2, [r2, #28]
 8008616:	00d2      	lsls	r2, r2, #3
 8008618:	4920      	ldr	r1, [pc, #128]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 800861a:	4313      	orrs	r3, r2
 800861c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800861e:	4b1f      	ldr	r3, [pc, #124]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	4a1e      	ldr	r2, [pc, #120]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008624:	f043 0310 	orr.w	r3, r3, #16
 8008628:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d106      	bne.n	800863e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008630:	4b1a      	ldr	r3, [pc, #104]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	4a19      	ldr	r2, [pc, #100]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800863a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800863c:	e00f      	b.n	800865e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d106      	bne.n	8008652 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008644:	4b15      	ldr	r3, [pc, #84]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	4a14      	ldr	r2, [pc, #80]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 800864a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800864e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008650:	e005      	b.n	800865e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	4a11      	ldr	r2, [pc, #68]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800865c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800865e:	4b0f      	ldr	r3, [pc, #60]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a0e      	ldr	r2, [pc, #56]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008664:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800866a:	f7f8 fed7 	bl	800141c <HAL_GetTick>
 800866e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008670:	e008      	b.n	8008684 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008672:	f7f8 fed3 	bl	800141c <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d901      	bls.n	8008684 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e006      	b.n	8008692 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008684:	4b05      	ldr	r3, [pc, #20]	; (800869c <RCCEx_PLL2_Config+0x15c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0f0      	beq.n	8008672 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	58024400 	.word	0x58024400
 80086a0:	ffff0007 	.word	0xffff0007

080086a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086b2:	4b53      	ldr	r3, [pc, #332]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80086b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d101      	bne.n	80086c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e099      	b.n	80087f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80086c2:	4b4f      	ldr	r3, [pc, #316]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a4e      	ldr	r2, [pc, #312]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80086c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ce:	f7f8 fea5 	bl	800141c <HAL_GetTick>
 80086d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086d4:	e008      	b.n	80086e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086d6:	f7f8 fea1 	bl	800141c <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d901      	bls.n	80086e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e086      	b.n	80087f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086e8:	4b45      	ldr	r3, [pc, #276]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1f0      	bne.n	80086d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80086f4:	4b42      	ldr	r3, [pc, #264]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80086f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	051b      	lsls	r3, r3, #20
 8008702:	493f      	ldr	r1, [pc, #252]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 8008704:	4313      	orrs	r3, r2
 8008706:	628b      	str	r3, [r1, #40]	; 0x28
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	3b01      	subs	r3, #1
 800870e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	3b01      	subs	r3, #1
 8008718:	025b      	lsls	r3, r3, #9
 800871a:	b29b      	uxth	r3, r3
 800871c:	431a      	orrs	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	3b01      	subs	r3, #1
 8008724:	041b      	lsls	r3, r3, #16
 8008726:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800872a:	431a      	orrs	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	3b01      	subs	r3, #1
 8008732:	061b      	lsls	r3, r3, #24
 8008734:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008738:	4931      	ldr	r1, [pc, #196]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 800873a:	4313      	orrs	r3, r2
 800873c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800873e:	4b30      	ldr	r3, [pc, #192]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	492d      	ldr	r1, [pc, #180]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 800874c:	4313      	orrs	r3, r2
 800874e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008750:	4b2b      	ldr	r3, [pc, #172]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	4928      	ldr	r1, [pc, #160]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 800875e:	4313      	orrs	r3, r2
 8008760:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008762:	4b27      	ldr	r3, [pc, #156]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 8008764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008766:	4a26      	ldr	r2, [pc, #152]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 8008768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800876c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800876e:	4b24      	ldr	r3, [pc, #144]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 8008770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008772:	4b24      	ldr	r3, [pc, #144]	; (8008804 <RCCEx_PLL3_Config+0x160>)
 8008774:	4013      	ands	r3, r2
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	69d2      	ldr	r2, [r2, #28]
 800877a:	00d2      	lsls	r2, r2, #3
 800877c:	4920      	ldr	r1, [pc, #128]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 800877e:	4313      	orrs	r3, r2
 8008780:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008782:	4b1f      	ldr	r3, [pc, #124]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 8008784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008786:	4a1e      	ldr	r2, [pc, #120]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 8008788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800878c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d106      	bne.n	80087a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008794:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	4a19      	ldr	r2, [pc, #100]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 800879a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800879e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087a0:	e00f      	b.n	80087c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d106      	bne.n	80087b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80087a8:	4b15      	ldr	r3, [pc, #84]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	4a14      	ldr	r2, [pc, #80]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80087ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087b4:	e005      	b.n	80087c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80087b6:	4b12      	ldr	r3, [pc, #72]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80087b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ba:	4a11      	ldr	r2, [pc, #68]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80087bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80087c2:	4b0f      	ldr	r3, [pc, #60]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a0e      	ldr	r2, [pc, #56]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80087c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087ce:	f7f8 fe25 	bl	800141c <HAL_GetTick>
 80087d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087d4:	e008      	b.n	80087e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80087d6:	f7f8 fe21 	bl	800141c <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d901      	bls.n	80087e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e006      	b.n	80087f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087e8:	4b05      	ldr	r3, [pc, #20]	; (8008800 <RCCEx_PLL3_Config+0x15c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0f0      	beq.n	80087d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	58024400 	.word	0x58024400
 8008804:	ffff0007 	.word	0xffff0007

08008808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e049      	b.n	80088ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d106      	bne.n	8008834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7f8 fc92 	bl	8001158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f000 fa86 	bl	8008d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d001      	beq.n	80088d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e019      	b.n	8008904 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <HAL_TIM_Base_Start+0x58>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b06      	cmp	r3, #6
 80088e8:	d00b      	beq.n	8008902 <HAL_TIM_Base_Start+0x4a>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088f0:	d007      	beq.n	8008902 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f042 0201 	orr.w	r2, r2, #1
 8008900:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	00010007 	.word	0x00010007

08008914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b02      	cmp	r3, #2
 8008928:	d122      	bne.n	8008970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b02      	cmp	r3, #2
 8008936:	d11b      	bne.n	8008970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0202 	mvn.w	r2, #2
 8008940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9e0 	bl	8008d1c <HAL_TIM_IC_CaptureCallback>
 800895c:	e005      	b.n	800896a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f9d2 	bl	8008d08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f9e3 	bl	8008d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	f003 0304 	and.w	r3, r3, #4
 800897a:	2b04      	cmp	r3, #4
 800897c:	d122      	bne.n	80089c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b04      	cmp	r3, #4
 800898a:	d11b      	bne.n	80089c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f06f 0204 	mvn.w	r2, #4
 8008994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2202      	movs	r2, #2
 800899a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f9b6 	bl	8008d1c <HAL_TIM_IC_CaptureCallback>
 80089b0:	e005      	b.n	80089be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f9a8 	bl	8008d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f9b9 	bl	8008d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f003 0308 	and.w	r3, r3, #8
 80089ce:	2b08      	cmp	r3, #8
 80089d0:	d122      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f003 0308 	and.w	r3, r3, #8
 80089dc:	2b08      	cmp	r3, #8
 80089de:	d11b      	bne.n	8008a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f06f 0208 	mvn.w	r2, #8
 80089e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2204      	movs	r2, #4
 80089ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f98c 	bl	8008d1c <HAL_TIM_IC_CaptureCallback>
 8008a04:	e005      	b.n	8008a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f97e 	bl	8008d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f98f 	bl	8008d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f003 0310 	and.w	r3, r3, #16
 8008a22:	2b10      	cmp	r3, #16
 8008a24:	d122      	bne.n	8008a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b10      	cmp	r3, #16
 8008a32:	d11b      	bne.n	8008a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f06f 0210 	mvn.w	r2, #16
 8008a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2208      	movs	r2, #8
 8008a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f962 	bl	8008d1c <HAL_TIM_IC_CaptureCallback>
 8008a58:	e005      	b.n	8008a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f954 	bl	8008d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f965 	bl	8008d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d10e      	bne.n	8008a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f003 0301 	and.w	r3, r3, #1
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d107      	bne.n	8008a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f06f 0201 	mvn.w	r2, #1
 8008a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f92e 	bl	8008cf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa2:	2b80      	cmp	r3, #128	; 0x80
 8008aa4:	d10e      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab0:	2b80      	cmp	r3, #128	; 0x80
 8008ab2:	d107      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fb14 	bl	80090ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad2:	d10e      	bne.n	8008af2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ade:	2b80      	cmp	r3, #128	; 0x80
 8008ae0:	d107      	bne.n	8008af2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fb07 	bl	8009100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afc:	2b40      	cmp	r3, #64	; 0x40
 8008afe:	d10e      	bne.n	8008b1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0a:	2b40      	cmp	r3, #64	; 0x40
 8008b0c:	d107      	bne.n	8008b1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f913 	bl	8008d44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	f003 0320 	and.w	r3, r3, #32
 8008b28:	2b20      	cmp	r3, #32
 8008b2a:	d10e      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	d107      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f06f 0220 	mvn.w	r2, #32
 8008b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fac7 	bl	80090d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b4a:	bf00      	nop
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
	...

08008b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d101      	bne.n	8008b6c <HAL_TIM_ConfigClockSource+0x18>
 8008b68:	2302      	movs	r3, #2
 8008b6a:	e0b7      	b.n	8008cdc <HAL_TIM_ConfigClockSource+0x188>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4b57      	ldr	r3, [pc, #348]	; (8008ce4 <HAL_TIM_ConfigClockSource+0x190>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b70      	cmp	r3, #112	; 0x70
 8008ba2:	d02e      	beq.n	8008c02 <HAL_TIM_ConfigClockSource+0xae>
 8008ba4:	2b70      	cmp	r3, #112	; 0x70
 8008ba6:	d812      	bhi.n	8008bce <HAL_TIM_ConfigClockSource+0x7a>
 8008ba8:	2b30      	cmp	r3, #48	; 0x30
 8008baa:	f000 8084 	beq.w	8008cb6 <HAL_TIM_ConfigClockSource+0x162>
 8008bae:	2b30      	cmp	r3, #48	; 0x30
 8008bb0:	d806      	bhi.n	8008bc0 <HAL_TIM_ConfigClockSource+0x6c>
 8008bb2:	2b10      	cmp	r3, #16
 8008bb4:	d07f      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x162>
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	d07d      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x162>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d07b      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008bbe:	e084      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008bc0:	2b50      	cmp	r3, #80	; 0x50
 8008bc2:	d048      	beq.n	8008c56 <HAL_TIM_ConfigClockSource+0x102>
 8008bc4:	2b60      	cmp	r3, #96	; 0x60
 8008bc6:	d056      	beq.n	8008c76 <HAL_TIM_ConfigClockSource+0x122>
 8008bc8:	2b40      	cmp	r3, #64	; 0x40
 8008bca:	d064      	beq.n	8008c96 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008bcc:	e07d      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008bce:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bd2:	d070      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x162>
 8008bd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bd8:	d809      	bhi.n	8008bee <HAL_TIM_ConfigClockSource+0x9a>
 8008bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bde:	d027      	beq.n	8008c30 <HAL_TIM_ConfigClockSource+0xdc>
 8008be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008be4:	d067      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x162>
 8008be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bea:	d06d      	beq.n	8008cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008bec:	e06d      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008bee:	4a3e      	ldr	r2, [pc, #248]	; (8008ce8 <HAL_TIM_ConfigClockSource+0x194>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d060      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x162>
 8008bf4:	4a3d      	ldr	r2, [pc, #244]	; (8008cec <HAL_TIM_ConfigClockSource+0x198>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d05d      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x162>
 8008bfa:	4a3d      	ldr	r2, [pc, #244]	; (8008cf0 <HAL_TIM_ConfigClockSource+0x19c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d05a      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008c00:	e063      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	6899      	ldr	r1, [r3, #8]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f000 f9b9 	bl	8008f88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	609a      	str	r2, [r3, #8]
      break;
 8008c2e:	e04c      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	6899      	ldr	r1, [r3, #8]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f000 f9a2 	bl	8008f88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c52:	609a      	str	r2, [r3, #8]
      break;
 8008c54:	e039      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6818      	ldr	r0, [r3, #0]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6859      	ldr	r1, [r3, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	461a      	mov	r2, r3
 8008c64:	f000 f912 	bl	8008e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2150      	movs	r1, #80	; 0x50
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 f96c 	bl	8008f4c <TIM_ITRx_SetConfig>
      break;
 8008c74:	e029      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	6859      	ldr	r1, [r3, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	461a      	mov	r2, r3
 8008c84:	f000 f931 	bl	8008eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2160      	movs	r1, #96	; 0x60
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 f95c 	bl	8008f4c <TIM_ITRx_SetConfig>
      break;
 8008c94:	e019      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	6859      	ldr	r1, [r3, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f000 f8f2 	bl	8008e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2140      	movs	r1, #64	; 0x40
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 f94c 	bl	8008f4c <TIM_ITRx_SetConfig>
      break;
 8008cb4:	e009      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f000 f943 	bl	8008f4c <TIM_ITRx_SetConfig>
      break;
 8008cc6:	e000      	b.n	8008cca <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008cc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	ffceff88 	.word	0xffceff88
 8008ce8:	00100030 	.word	0x00100030
 8008cec:	00100040 	.word	0x00100040
 8008cf0:	00100020 	.word	0x00100020

08008cf4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a40      	ldr	r2, [pc, #256]	; (8008e6c <TIM_Base_SetConfig+0x114>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d013      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d76:	d00f      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a3d      	ldr	r2, [pc, #244]	; (8008e70 <TIM_Base_SetConfig+0x118>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00b      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a3c      	ldr	r2, [pc, #240]	; (8008e74 <TIM_Base_SetConfig+0x11c>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d007      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a3b      	ldr	r2, [pc, #236]	; (8008e78 <TIM_Base_SetConfig+0x120>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d003      	beq.n	8008d98 <TIM_Base_SetConfig+0x40>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a3a      	ldr	r2, [pc, #232]	; (8008e7c <TIM_Base_SetConfig+0x124>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d108      	bne.n	8008daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a2f      	ldr	r2, [pc, #188]	; (8008e6c <TIM_Base_SetConfig+0x114>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d01f      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db8:	d01b      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a2c      	ldr	r2, [pc, #176]	; (8008e70 <TIM_Base_SetConfig+0x118>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d017      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a2b      	ldr	r2, [pc, #172]	; (8008e74 <TIM_Base_SetConfig+0x11c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d013      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a2a      	ldr	r2, [pc, #168]	; (8008e78 <TIM_Base_SetConfig+0x120>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d00f      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a29      	ldr	r2, [pc, #164]	; (8008e7c <TIM_Base_SetConfig+0x124>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00b      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a28      	ldr	r2, [pc, #160]	; (8008e80 <TIM_Base_SetConfig+0x128>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d007      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a27      	ldr	r2, [pc, #156]	; (8008e84 <TIM_Base_SetConfig+0x12c>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d003      	beq.n	8008df2 <TIM_Base_SetConfig+0x9a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a26      	ldr	r2, [pc, #152]	; (8008e88 <TIM_Base_SetConfig+0x130>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d108      	bne.n	8008e04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a10      	ldr	r2, [pc, #64]	; (8008e6c <TIM_Base_SetConfig+0x114>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00f      	beq.n	8008e50 <TIM_Base_SetConfig+0xf8>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a12      	ldr	r2, [pc, #72]	; (8008e7c <TIM_Base_SetConfig+0x124>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00b      	beq.n	8008e50 <TIM_Base_SetConfig+0xf8>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <TIM_Base_SetConfig+0x128>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d007      	beq.n	8008e50 <TIM_Base_SetConfig+0xf8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a10      	ldr	r2, [pc, #64]	; (8008e84 <TIM_Base_SetConfig+0x12c>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <TIM_Base_SetConfig+0xf8>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a0f      	ldr	r2, [pc, #60]	; (8008e88 <TIM_Base_SetConfig+0x130>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d103      	bne.n	8008e58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	691a      	ldr	r2, [r3, #16]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	615a      	str	r2, [r3, #20]
}
 8008e5e:	bf00      	nop
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	40010000 	.word	0x40010000
 8008e70:	40000400 	.word	0x40000400
 8008e74:	40000800 	.word	0x40000800
 8008e78:	40000c00 	.word	0x40000c00
 8008e7c:	40010400 	.word	0x40010400
 8008e80:	40014000 	.word	0x40014000
 8008e84:	40014400 	.word	0x40014400
 8008e88:	40014800 	.word	0x40014800

08008e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	f023 0201 	bic.w	r2, r3, #1
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f023 030a 	bic.w	r3, r3, #10
 8008ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	621a      	str	r2, [r3, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b087      	sub	sp, #28
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	f023 0210 	bic.w	r2, r3, #16
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	031b      	lsls	r3, r3, #12
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	621a      	str	r2, [r3, #32]
}
 8008f3e:	bf00      	nop
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
	...

08008f4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <TIM_ITRx_SetConfig+0x38>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	f043 0307 	orr.w	r3, r3, #7
 8008f6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	609a      	str	r2, [r3, #8]
}
 8008f76:	bf00      	nop
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	ffcfff8f 	.word	0xffcfff8f

08008f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	021a      	lsls	r2, r3, #8
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	609a      	str	r2, [r3, #8]
}
 8008fbc:	bf00      	nop
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e068      	b.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a2e      	ldr	r2, [pc, #184]	; (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d004      	beq.n	8009014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a2d      	ldr	r2, [pc, #180]	; (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d108      	bne.n	8009026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800901a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800902c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68fa      	ldr	r2, [r7, #12]
 8009034:	4313      	orrs	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a1e      	ldr	r2, [pc, #120]	; (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d01d      	beq.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009052:	d018      	beq.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a1b      	ldr	r2, [pc, #108]	; (80090c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d013      	beq.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a1a      	ldr	r2, [pc, #104]	; (80090cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00e      	beq.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a18      	ldr	r2, [pc, #96]	; (80090d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d009      	beq.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a13      	ldr	r2, [pc, #76]	; (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d004      	beq.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a14      	ldr	r2, [pc, #80]	; (80090d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d10c      	bne.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800908c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	4313      	orrs	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40010000 	.word	0x40010000
 80090c4:	40010400 	.word	0x40010400
 80090c8:	40000400 	.word	0x40000400
 80090cc:	40000800 	.word	0x40000800
 80090d0:	40000c00 	.word	0x40000c00
 80090d4:	40001800 	.word	0x40001800

080090d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e042      	b.n	80091ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800912c:	2b00      	cmp	r3, #0
 800912e:	d106      	bne.n	800913e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7f8 f833 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2224      	movs	r2, #36	; 0x24
 8009142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0201 	bic.w	r2, r2, #1
 8009154:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f82c 	bl	80091b4 <UART_SetConfig>
 800915c:	4603      	mov	r3, r0
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e022      	b.n	80091ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fdd0 	bl	8009d14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0201 	orr.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fe57 	bl	8009e58 <UART_CheckIdleState>
 80091aa:	4603      	mov	r3, r0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80091b8:	b08e      	sub	sp, #56	; 0x38
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	431a      	orrs	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	431a      	orrs	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	4313      	orrs	r3, r2
 80091da:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091e2:	4313      	orrs	r3, r2
 80091e4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	4bc1      	ldr	r3, [pc, #772]	; (80094f4 <UART_SetConfig+0x340>)
 80091ee:	4013      	ands	r3, r2
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6812      	ldr	r2, [r2, #0]
 80091f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091f6:	430b      	orrs	r3, r1
 80091f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4ab7      	ldr	r2, [pc, #732]	; (80094f8 <UART_SetConfig+0x344>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d004      	beq.n	800922a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009226:	4313      	orrs	r3, r2
 8009228:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689a      	ldr	r2, [r3, #8]
 8009230:	4bb2      	ldr	r3, [pc, #712]	; (80094fc <UART_SetConfig+0x348>)
 8009232:	4013      	ands	r3, r2
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6812      	ldr	r2, [r2, #0]
 8009238:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800923a:	430b      	orrs	r3, r1
 800923c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	f023 010f 	bic.w	r1, r3, #15
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4aa9      	ldr	r2, [pc, #676]	; (8009500 <UART_SetConfig+0x34c>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d177      	bne.n	800934e <UART_SetConfig+0x19a>
 800925e:	4ba9      	ldr	r3, [pc, #676]	; (8009504 <UART_SetConfig+0x350>)
 8009260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009266:	2b28      	cmp	r3, #40	; 0x28
 8009268:	d86c      	bhi.n	8009344 <UART_SetConfig+0x190>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <UART_SetConfig+0xbc>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	08009315 	.word	0x08009315
 8009274:	08009345 	.word	0x08009345
 8009278:	08009345 	.word	0x08009345
 800927c:	08009345 	.word	0x08009345
 8009280:	08009345 	.word	0x08009345
 8009284:	08009345 	.word	0x08009345
 8009288:	08009345 	.word	0x08009345
 800928c:	08009345 	.word	0x08009345
 8009290:	0800931d 	.word	0x0800931d
 8009294:	08009345 	.word	0x08009345
 8009298:	08009345 	.word	0x08009345
 800929c:	08009345 	.word	0x08009345
 80092a0:	08009345 	.word	0x08009345
 80092a4:	08009345 	.word	0x08009345
 80092a8:	08009345 	.word	0x08009345
 80092ac:	08009345 	.word	0x08009345
 80092b0:	08009325 	.word	0x08009325
 80092b4:	08009345 	.word	0x08009345
 80092b8:	08009345 	.word	0x08009345
 80092bc:	08009345 	.word	0x08009345
 80092c0:	08009345 	.word	0x08009345
 80092c4:	08009345 	.word	0x08009345
 80092c8:	08009345 	.word	0x08009345
 80092cc:	08009345 	.word	0x08009345
 80092d0:	0800932d 	.word	0x0800932d
 80092d4:	08009345 	.word	0x08009345
 80092d8:	08009345 	.word	0x08009345
 80092dc:	08009345 	.word	0x08009345
 80092e0:	08009345 	.word	0x08009345
 80092e4:	08009345 	.word	0x08009345
 80092e8:	08009345 	.word	0x08009345
 80092ec:	08009345 	.word	0x08009345
 80092f0:	08009335 	.word	0x08009335
 80092f4:	08009345 	.word	0x08009345
 80092f8:	08009345 	.word	0x08009345
 80092fc:	08009345 	.word	0x08009345
 8009300:	08009345 	.word	0x08009345
 8009304:	08009345 	.word	0x08009345
 8009308:	08009345 	.word	0x08009345
 800930c:	08009345 	.word	0x08009345
 8009310:	0800933d 	.word	0x0800933d
 8009314:	2301      	movs	r3, #1
 8009316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931a:	e233      	b.n	8009784 <UART_SetConfig+0x5d0>
 800931c:	2304      	movs	r3, #4
 800931e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009322:	e22f      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009324:	2308      	movs	r3, #8
 8009326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932a:	e22b      	b.n	8009784 <UART_SetConfig+0x5d0>
 800932c:	2310      	movs	r3, #16
 800932e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009332:	e227      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009334:	2320      	movs	r3, #32
 8009336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800933a:	e223      	b.n	8009784 <UART_SetConfig+0x5d0>
 800933c:	2340      	movs	r3, #64	; 0x40
 800933e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009342:	e21f      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009344:	2380      	movs	r3, #128	; 0x80
 8009346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800934a:	bf00      	nop
 800934c:	e21a      	b.n	8009784 <UART_SetConfig+0x5d0>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a6d      	ldr	r2, [pc, #436]	; (8009508 <UART_SetConfig+0x354>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d132      	bne.n	80093be <UART_SetConfig+0x20a>
 8009358:	4b6a      	ldr	r3, [pc, #424]	; (8009504 <UART_SetConfig+0x350>)
 800935a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	2b05      	cmp	r3, #5
 8009362:	d827      	bhi.n	80093b4 <UART_SetConfig+0x200>
 8009364:	a201      	add	r2, pc, #4	; (adr r2, 800936c <UART_SetConfig+0x1b8>)
 8009366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936a:	bf00      	nop
 800936c:	08009385 	.word	0x08009385
 8009370:	0800938d 	.word	0x0800938d
 8009374:	08009395 	.word	0x08009395
 8009378:	0800939d 	.word	0x0800939d
 800937c:	080093a5 	.word	0x080093a5
 8009380:	080093ad 	.word	0x080093ad
 8009384:	2300      	movs	r3, #0
 8009386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938a:	e1fb      	b.n	8009784 <UART_SetConfig+0x5d0>
 800938c:	2304      	movs	r3, #4
 800938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009392:	e1f7      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009394:	2308      	movs	r3, #8
 8009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800939a:	e1f3      	b.n	8009784 <UART_SetConfig+0x5d0>
 800939c:	2310      	movs	r3, #16
 800939e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093a2:	e1ef      	b.n	8009784 <UART_SetConfig+0x5d0>
 80093a4:	2320      	movs	r3, #32
 80093a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093aa:	e1eb      	b.n	8009784 <UART_SetConfig+0x5d0>
 80093ac:	2340      	movs	r3, #64	; 0x40
 80093ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093b2:	e1e7      	b.n	8009784 <UART_SetConfig+0x5d0>
 80093b4:	2380      	movs	r3, #128	; 0x80
 80093b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093ba:	bf00      	nop
 80093bc:	e1e2      	b.n	8009784 <UART_SetConfig+0x5d0>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a52      	ldr	r2, [pc, #328]	; (800950c <UART_SetConfig+0x358>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d132      	bne.n	800942e <UART_SetConfig+0x27a>
 80093c8:	4b4e      	ldr	r3, [pc, #312]	; (8009504 <UART_SetConfig+0x350>)
 80093ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093cc:	f003 0307 	and.w	r3, r3, #7
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d827      	bhi.n	8009424 <UART_SetConfig+0x270>
 80093d4:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <UART_SetConfig+0x228>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	080093f5 	.word	0x080093f5
 80093e0:	080093fd 	.word	0x080093fd
 80093e4:	08009405 	.word	0x08009405
 80093e8:	0800940d 	.word	0x0800940d
 80093ec:	08009415 	.word	0x08009415
 80093f0:	0800941d 	.word	0x0800941d
 80093f4:	2300      	movs	r3, #0
 80093f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093fa:	e1c3      	b.n	8009784 <UART_SetConfig+0x5d0>
 80093fc:	2304      	movs	r3, #4
 80093fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009402:	e1bf      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009404:	2308      	movs	r3, #8
 8009406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800940a:	e1bb      	b.n	8009784 <UART_SetConfig+0x5d0>
 800940c:	2310      	movs	r3, #16
 800940e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009412:	e1b7      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009414:	2320      	movs	r3, #32
 8009416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800941a:	e1b3      	b.n	8009784 <UART_SetConfig+0x5d0>
 800941c:	2340      	movs	r3, #64	; 0x40
 800941e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009422:	e1af      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009424:	2380      	movs	r3, #128	; 0x80
 8009426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800942a:	bf00      	nop
 800942c:	e1aa      	b.n	8009784 <UART_SetConfig+0x5d0>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a37      	ldr	r2, [pc, #220]	; (8009510 <UART_SetConfig+0x35c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d132      	bne.n	800949e <UART_SetConfig+0x2ea>
 8009438:	4b32      	ldr	r3, [pc, #200]	; (8009504 <UART_SetConfig+0x350>)
 800943a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943c:	f003 0307 	and.w	r3, r3, #7
 8009440:	2b05      	cmp	r3, #5
 8009442:	d827      	bhi.n	8009494 <UART_SetConfig+0x2e0>
 8009444:	a201      	add	r2, pc, #4	; (adr r2, 800944c <UART_SetConfig+0x298>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	08009465 	.word	0x08009465
 8009450:	0800946d 	.word	0x0800946d
 8009454:	08009475 	.word	0x08009475
 8009458:	0800947d 	.word	0x0800947d
 800945c:	08009485 	.word	0x08009485
 8009460:	0800948d 	.word	0x0800948d
 8009464:	2300      	movs	r3, #0
 8009466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946a:	e18b      	b.n	8009784 <UART_SetConfig+0x5d0>
 800946c:	2304      	movs	r3, #4
 800946e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009472:	e187      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009474:	2308      	movs	r3, #8
 8009476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947a:	e183      	b.n	8009784 <UART_SetConfig+0x5d0>
 800947c:	2310      	movs	r3, #16
 800947e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009482:	e17f      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009484:	2320      	movs	r3, #32
 8009486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800948a:	e17b      	b.n	8009784 <UART_SetConfig+0x5d0>
 800948c:	2340      	movs	r3, #64	; 0x40
 800948e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009492:	e177      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009494:	2380      	movs	r3, #128	; 0x80
 8009496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800949a:	bf00      	nop
 800949c:	e172      	b.n	8009784 <UART_SetConfig+0x5d0>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a1c      	ldr	r2, [pc, #112]	; (8009514 <UART_SetConfig+0x360>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d144      	bne.n	8009532 <UART_SetConfig+0x37e>
 80094a8:	4b16      	ldr	r3, [pc, #88]	; (8009504 <UART_SetConfig+0x350>)
 80094aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ac:	f003 0307 	and.w	r3, r3, #7
 80094b0:	2b05      	cmp	r3, #5
 80094b2:	d839      	bhi.n	8009528 <UART_SetConfig+0x374>
 80094b4:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <UART_SetConfig+0x308>)
 80094b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ba:	bf00      	nop
 80094bc:	080094d5 	.word	0x080094d5
 80094c0:	080094dd 	.word	0x080094dd
 80094c4:	080094e5 	.word	0x080094e5
 80094c8:	080094ed 	.word	0x080094ed
 80094cc:	08009519 	.word	0x08009519
 80094d0:	08009521 	.word	0x08009521
 80094d4:	2300      	movs	r3, #0
 80094d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094da:	e153      	b.n	8009784 <UART_SetConfig+0x5d0>
 80094dc:	2304      	movs	r3, #4
 80094de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e2:	e14f      	b.n	8009784 <UART_SetConfig+0x5d0>
 80094e4:	2308      	movs	r3, #8
 80094e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ea:	e14b      	b.n	8009784 <UART_SetConfig+0x5d0>
 80094ec:	2310      	movs	r3, #16
 80094ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094f2:	e147      	b.n	8009784 <UART_SetConfig+0x5d0>
 80094f4:	cfff69f3 	.word	0xcfff69f3
 80094f8:	58000c00 	.word	0x58000c00
 80094fc:	11fff4ff 	.word	0x11fff4ff
 8009500:	40011000 	.word	0x40011000
 8009504:	58024400 	.word	0x58024400
 8009508:	40004400 	.word	0x40004400
 800950c:	40004800 	.word	0x40004800
 8009510:	40004c00 	.word	0x40004c00
 8009514:	40005000 	.word	0x40005000
 8009518:	2320      	movs	r3, #32
 800951a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800951e:	e131      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009520:	2340      	movs	r3, #64	; 0x40
 8009522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009526:	e12d      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009528:	2380      	movs	r3, #128	; 0x80
 800952a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800952e:	bf00      	nop
 8009530:	e128      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4ab6      	ldr	r2, [pc, #728]	; (8009810 <UART_SetConfig+0x65c>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d178      	bne.n	800962e <UART_SetConfig+0x47a>
 800953c:	4bb5      	ldr	r3, [pc, #724]	; (8009814 <UART_SetConfig+0x660>)
 800953e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009540:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009544:	2b28      	cmp	r3, #40	; 0x28
 8009546:	d86d      	bhi.n	8009624 <UART_SetConfig+0x470>
 8009548:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <UART_SetConfig+0x39c>)
 800954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954e:	bf00      	nop
 8009550:	080095f5 	.word	0x080095f5
 8009554:	08009625 	.word	0x08009625
 8009558:	08009625 	.word	0x08009625
 800955c:	08009625 	.word	0x08009625
 8009560:	08009625 	.word	0x08009625
 8009564:	08009625 	.word	0x08009625
 8009568:	08009625 	.word	0x08009625
 800956c:	08009625 	.word	0x08009625
 8009570:	080095fd 	.word	0x080095fd
 8009574:	08009625 	.word	0x08009625
 8009578:	08009625 	.word	0x08009625
 800957c:	08009625 	.word	0x08009625
 8009580:	08009625 	.word	0x08009625
 8009584:	08009625 	.word	0x08009625
 8009588:	08009625 	.word	0x08009625
 800958c:	08009625 	.word	0x08009625
 8009590:	08009605 	.word	0x08009605
 8009594:	08009625 	.word	0x08009625
 8009598:	08009625 	.word	0x08009625
 800959c:	08009625 	.word	0x08009625
 80095a0:	08009625 	.word	0x08009625
 80095a4:	08009625 	.word	0x08009625
 80095a8:	08009625 	.word	0x08009625
 80095ac:	08009625 	.word	0x08009625
 80095b0:	0800960d 	.word	0x0800960d
 80095b4:	08009625 	.word	0x08009625
 80095b8:	08009625 	.word	0x08009625
 80095bc:	08009625 	.word	0x08009625
 80095c0:	08009625 	.word	0x08009625
 80095c4:	08009625 	.word	0x08009625
 80095c8:	08009625 	.word	0x08009625
 80095cc:	08009625 	.word	0x08009625
 80095d0:	08009615 	.word	0x08009615
 80095d4:	08009625 	.word	0x08009625
 80095d8:	08009625 	.word	0x08009625
 80095dc:	08009625 	.word	0x08009625
 80095e0:	08009625 	.word	0x08009625
 80095e4:	08009625 	.word	0x08009625
 80095e8:	08009625 	.word	0x08009625
 80095ec:	08009625 	.word	0x08009625
 80095f0:	0800961d 	.word	0x0800961d
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e0c3      	b.n	8009784 <UART_SetConfig+0x5d0>
 80095fc:	2304      	movs	r3, #4
 80095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009602:	e0bf      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009604:	2308      	movs	r3, #8
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e0bb      	b.n	8009784 <UART_SetConfig+0x5d0>
 800960c:	2310      	movs	r3, #16
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	e0b7      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009614:	2320      	movs	r3, #32
 8009616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961a:	e0b3      	b.n	8009784 <UART_SetConfig+0x5d0>
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009622:	e0af      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009624:	2380      	movs	r3, #128	; 0x80
 8009626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800962a:	bf00      	nop
 800962c:	e0aa      	b.n	8009784 <UART_SetConfig+0x5d0>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a79      	ldr	r2, [pc, #484]	; (8009818 <UART_SetConfig+0x664>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d132      	bne.n	800969e <UART_SetConfig+0x4ea>
 8009638:	4b76      	ldr	r3, [pc, #472]	; (8009814 <UART_SetConfig+0x660>)
 800963a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963c:	f003 0307 	and.w	r3, r3, #7
 8009640:	2b05      	cmp	r3, #5
 8009642:	d827      	bhi.n	8009694 <UART_SetConfig+0x4e0>
 8009644:	a201      	add	r2, pc, #4	; (adr r2, 800964c <UART_SetConfig+0x498>)
 8009646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964a:	bf00      	nop
 800964c:	08009665 	.word	0x08009665
 8009650:	0800966d 	.word	0x0800966d
 8009654:	08009675 	.word	0x08009675
 8009658:	0800967d 	.word	0x0800967d
 800965c:	08009685 	.word	0x08009685
 8009660:	0800968d 	.word	0x0800968d
 8009664:	2300      	movs	r3, #0
 8009666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966a:	e08b      	b.n	8009784 <UART_SetConfig+0x5d0>
 800966c:	2304      	movs	r3, #4
 800966e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009672:	e087      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009674:	2308      	movs	r3, #8
 8009676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967a:	e083      	b.n	8009784 <UART_SetConfig+0x5d0>
 800967c:	2310      	movs	r3, #16
 800967e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009682:	e07f      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009684:	2320      	movs	r3, #32
 8009686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968a:	e07b      	b.n	8009784 <UART_SetConfig+0x5d0>
 800968c:	2340      	movs	r3, #64	; 0x40
 800968e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009692:	e077      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009694:	2380      	movs	r3, #128	; 0x80
 8009696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969a:	bf00      	nop
 800969c:	e072      	b.n	8009784 <UART_SetConfig+0x5d0>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a5e      	ldr	r2, [pc, #376]	; (800981c <UART_SetConfig+0x668>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d132      	bne.n	800970e <UART_SetConfig+0x55a>
 80096a8:	4b5a      	ldr	r3, [pc, #360]	; (8009814 <UART_SetConfig+0x660>)
 80096aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ac:	f003 0307 	and.w	r3, r3, #7
 80096b0:	2b05      	cmp	r3, #5
 80096b2:	d827      	bhi.n	8009704 <UART_SetConfig+0x550>
 80096b4:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <UART_SetConfig+0x508>)
 80096b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ba:	bf00      	nop
 80096bc:	080096d5 	.word	0x080096d5
 80096c0:	080096dd 	.word	0x080096dd
 80096c4:	080096e5 	.word	0x080096e5
 80096c8:	080096ed 	.word	0x080096ed
 80096cc:	080096f5 	.word	0x080096f5
 80096d0:	080096fd 	.word	0x080096fd
 80096d4:	2300      	movs	r3, #0
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096da:	e053      	b.n	8009784 <UART_SetConfig+0x5d0>
 80096dc:	2304      	movs	r3, #4
 80096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e2:	e04f      	b.n	8009784 <UART_SetConfig+0x5d0>
 80096e4:	2308      	movs	r3, #8
 80096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ea:	e04b      	b.n	8009784 <UART_SetConfig+0x5d0>
 80096ec:	2310      	movs	r3, #16
 80096ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096f2:	e047      	b.n	8009784 <UART_SetConfig+0x5d0>
 80096f4:	2320      	movs	r3, #32
 80096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fa:	e043      	b.n	8009784 <UART_SetConfig+0x5d0>
 80096fc:	2340      	movs	r3, #64	; 0x40
 80096fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009702:	e03f      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009704:	2380      	movs	r3, #128	; 0x80
 8009706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970a:	bf00      	nop
 800970c:	e03a      	b.n	8009784 <UART_SetConfig+0x5d0>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a43      	ldr	r2, [pc, #268]	; (8009820 <UART_SetConfig+0x66c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d132      	bne.n	800977e <UART_SetConfig+0x5ca>
 8009718:	4b3e      	ldr	r3, [pc, #248]	; (8009814 <UART_SetConfig+0x660>)
 800971a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800971c:	f003 0307 	and.w	r3, r3, #7
 8009720:	2b05      	cmp	r3, #5
 8009722:	d827      	bhi.n	8009774 <UART_SetConfig+0x5c0>
 8009724:	a201      	add	r2, pc, #4	; (adr r2, 800972c <UART_SetConfig+0x578>)
 8009726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972a:	bf00      	nop
 800972c:	08009745 	.word	0x08009745
 8009730:	0800974d 	.word	0x0800974d
 8009734:	08009755 	.word	0x08009755
 8009738:	0800975d 	.word	0x0800975d
 800973c:	08009765 	.word	0x08009765
 8009740:	0800976d 	.word	0x0800976d
 8009744:	2302      	movs	r3, #2
 8009746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974a:	e01b      	b.n	8009784 <UART_SetConfig+0x5d0>
 800974c:	2304      	movs	r3, #4
 800974e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009752:	e017      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009754:	2308      	movs	r3, #8
 8009756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800975a:	e013      	b.n	8009784 <UART_SetConfig+0x5d0>
 800975c:	2310      	movs	r3, #16
 800975e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009762:	e00f      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009764:	2320      	movs	r3, #32
 8009766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800976a:	e00b      	b.n	8009784 <UART_SetConfig+0x5d0>
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009772:	e007      	b.n	8009784 <UART_SetConfig+0x5d0>
 8009774:	2380      	movs	r3, #128	; 0x80
 8009776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800977a:	bf00      	nop
 800977c:	e002      	b.n	8009784 <UART_SetConfig+0x5d0>
 800977e:	2380      	movs	r3, #128	; 0x80
 8009780:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a25      	ldr	r2, [pc, #148]	; (8009820 <UART_SetConfig+0x66c>)
 800978a:	4293      	cmp	r3, r2
 800978c:	f040 80b8 	bne.w	8009900 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009790:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009794:	2b08      	cmp	r3, #8
 8009796:	d019      	beq.n	80097cc <UART_SetConfig+0x618>
 8009798:	2b08      	cmp	r3, #8
 800979a:	dc04      	bgt.n	80097a6 <UART_SetConfig+0x5f2>
 800979c:	2b02      	cmp	r3, #2
 800979e:	d009      	beq.n	80097b4 <UART_SetConfig+0x600>
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d00b      	beq.n	80097bc <UART_SetConfig+0x608>
 80097a4:	e042      	b.n	800982c <UART_SetConfig+0x678>
 80097a6:	2b20      	cmp	r3, #32
 80097a8:	d02b      	beq.n	8009802 <UART_SetConfig+0x64e>
 80097aa:	2b40      	cmp	r3, #64	; 0x40
 80097ac:	d02c      	beq.n	8009808 <UART_SetConfig+0x654>
 80097ae:	2b10      	cmp	r3, #16
 80097b0:	d014      	beq.n	80097dc <UART_SetConfig+0x628>
 80097b2:	e03b      	b.n	800982c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80097b4:	f7fe faca 	bl	8007d4c <HAL_RCCEx_GetD3PCLK1Freq>
 80097b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097ba:	e03d      	b.n	8009838 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097bc:	f107 0314 	add.w	r3, r7, #20
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fad9 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ca:	e035      	b.n	8009838 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097cc:	f107 0308 	add.w	r3, r7, #8
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fc1d 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097da:	e02d      	b.n	8009838 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097dc:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <UART_SetConfig+0x660>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0320 	and.w	r3, r3, #32
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d009      	beq.n	80097fc <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097e8:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <UART_SetConfig+0x660>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	08db      	lsrs	r3, r3, #3
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	4a0c      	ldr	r2, [pc, #48]	; (8009824 <UART_SetConfig+0x670>)
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
 80097f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097fa:	e01d      	b.n	8009838 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <UART_SetConfig+0x670>)
 80097fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009800:	e01a      	b.n	8009838 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <UART_SetConfig+0x674>)
 8009804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009806:	e017      	b.n	8009838 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800980c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800980e:	e013      	b.n	8009838 <UART_SetConfig+0x684>
 8009810:	40011400 	.word	0x40011400
 8009814:	58024400 	.word	0x58024400
 8009818:	40007800 	.word	0x40007800
 800981c:	40007c00 	.word	0x40007c00
 8009820:	58000c00 	.word	0x58000c00
 8009824:	03d09000 	.word	0x03d09000
 8009828:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009836:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 824d 	beq.w	8009cda <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	4aad      	ldr	r2, [pc, #692]	; (8009afc <UART_SetConfig+0x948>)
 8009846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800984a:	461a      	mov	r2, r3
 800984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009852:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	4613      	mov	r3, r2
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	4413      	add	r3, r2
 800985e:	6a3a      	ldr	r2, [r7, #32]
 8009860:	429a      	cmp	r2, r3
 8009862:	d305      	bcc.n	8009870 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800986a:	6a3a      	ldr	r2, [r7, #32]
 800986c:	429a      	cmp	r2, r3
 800986e:	d903      	bls.n	8009878 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009876:	e230      	b.n	8009cda <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987a:	4618      	mov	r0, r3
 800987c:	f04f 0100 	mov.w	r1, #0
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	4a9d      	ldr	r2, [pc, #628]	; (8009afc <UART_SetConfig+0x948>)
 8009886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800988a:	b29b      	uxth	r3, r3
 800988c:	f04f 0400 	mov.w	r4, #0
 8009890:	461a      	mov	r2, r3
 8009892:	4623      	mov	r3, r4
 8009894:	f7f6 fd20 	bl	80002d8 <__aeabi_uldivmod>
 8009898:	4603      	mov	r3, r0
 800989a:	460c      	mov	r4, r1
 800989c:	4619      	mov	r1, r3
 800989e:	4622      	mov	r2, r4
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	f04f 0400 	mov.w	r4, #0
 80098a8:	0214      	lsls	r4, r2, #8
 80098aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80098ae:	020b      	lsls	r3, r1, #8
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6852      	ldr	r2, [r2, #4]
 80098b4:	0852      	lsrs	r2, r2, #1
 80098b6:	4611      	mov	r1, r2
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	eb13 0b01 	adds.w	fp, r3, r1
 80098c0:	eb44 0c02 	adc.w	ip, r4, r2
 80098c4:	4658      	mov	r0, fp
 80098c6:	4661      	mov	r1, ip
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	f04f 0400 	mov.w	r4, #0
 80098d0:	461a      	mov	r2, r3
 80098d2:	4623      	mov	r3, r4
 80098d4:	f7f6 fd00 	bl	80002d8 <__aeabi_uldivmod>
 80098d8:	4603      	mov	r3, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098e4:	d308      	bcc.n	80098f8 <UART_SetConfig+0x744>
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098ec:	d204      	bcs.n	80098f8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098f4:	60da      	str	r2, [r3, #12]
 80098f6:	e1f0      	b.n	8009cda <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80098fe:	e1ec      	b.n	8009cda <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009908:	f040 8100 	bne.w	8009b0c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800990c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009910:	2b40      	cmp	r3, #64	; 0x40
 8009912:	f200 80b7 	bhi.w	8009a84 <UART_SetConfig+0x8d0>
 8009916:	a201      	add	r2, pc, #4	; (adr r2, 800991c <UART_SetConfig+0x768>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	08009a21 	.word	0x08009a21
 8009920:	08009a29 	.word	0x08009a29
 8009924:	08009a85 	.word	0x08009a85
 8009928:	08009a85 	.word	0x08009a85
 800992c:	08009a31 	.word	0x08009a31
 8009930:	08009a85 	.word	0x08009a85
 8009934:	08009a85 	.word	0x08009a85
 8009938:	08009a85 	.word	0x08009a85
 800993c:	08009a41 	.word	0x08009a41
 8009940:	08009a85 	.word	0x08009a85
 8009944:	08009a85 	.word	0x08009a85
 8009948:	08009a85 	.word	0x08009a85
 800994c:	08009a85 	.word	0x08009a85
 8009950:	08009a85 	.word	0x08009a85
 8009954:	08009a85 	.word	0x08009a85
 8009958:	08009a85 	.word	0x08009a85
 800995c:	08009a51 	.word	0x08009a51
 8009960:	08009a85 	.word	0x08009a85
 8009964:	08009a85 	.word	0x08009a85
 8009968:	08009a85 	.word	0x08009a85
 800996c:	08009a85 	.word	0x08009a85
 8009970:	08009a85 	.word	0x08009a85
 8009974:	08009a85 	.word	0x08009a85
 8009978:	08009a85 	.word	0x08009a85
 800997c:	08009a85 	.word	0x08009a85
 8009980:	08009a85 	.word	0x08009a85
 8009984:	08009a85 	.word	0x08009a85
 8009988:	08009a85 	.word	0x08009a85
 800998c:	08009a85 	.word	0x08009a85
 8009990:	08009a85 	.word	0x08009a85
 8009994:	08009a85 	.word	0x08009a85
 8009998:	08009a85 	.word	0x08009a85
 800999c:	08009a77 	.word	0x08009a77
 80099a0:	08009a85 	.word	0x08009a85
 80099a4:	08009a85 	.word	0x08009a85
 80099a8:	08009a85 	.word	0x08009a85
 80099ac:	08009a85 	.word	0x08009a85
 80099b0:	08009a85 	.word	0x08009a85
 80099b4:	08009a85 	.word	0x08009a85
 80099b8:	08009a85 	.word	0x08009a85
 80099bc:	08009a85 	.word	0x08009a85
 80099c0:	08009a85 	.word	0x08009a85
 80099c4:	08009a85 	.word	0x08009a85
 80099c8:	08009a85 	.word	0x08009a85
 80099cc:	08009a85 	.word	0x08009a85
 80099d0:	08009a85 	.word	0x08009a85
 80099d4:	08009a85 	.word	0x08009a85
 80099d8:	08009a85 	.word	0x08009a85
 80099dc:	08009a85 	.word	0x08009a85
 80099e0:	08009a85 	.word	0x08009a85
 80099e4:	08009a85 	.word	0x08009a85
 80099e8:	08009a85 	.word	0x08009a85
 80099ec:	08009a85 	.word	0x08009a85
 80099f0:	08009a85 	.word	0x08009a85
 80099f4:	08009a85 	.word	0x08009a85
 80099f8:	08009a85 	.word	0x08009a85
 80099fc:	08009a85 	.word	0x08009a85
 8009a00:	08009a85 	.word	0x08009a85
 8009a04:	08009a85 	.word	0x08009a85
 8009a08:	08009a85 	.word	0x08009a85
 8009a0c:	08009a85 	.word	0x08009a85
 8009a10:	08009a85 	.word	0x08009a85
 8009a14:	08009a85 	.word	0x08009a85
 8009a18:	08009a85 	.word	0x08009a85
 8009a1c:	08009a7d 	.word	0x08009a7d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a20:	f7fd f802 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 8009a24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a26:	e033      	b.n	8009a90 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a28:	f7fd f814 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
 8009a2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a2e:	e02f      	b.n	8009a90 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a30:	f107 0314 	add.w	r3, r7, #20
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fe f99f 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a3e:	e027      	b.n	8009a90 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a40:	f107 0308 	add.w	r3, r7, #8
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe fae3 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a4e:	e01f      	b.n	8009a90 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a50:	4b2b      	ldr	r3, [pc, #172]	; (8009b00 <UART_SetConfig+0x94c>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d009      	beq.n	8009a70 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009a5c:	4b28      	ldr	r3, [pc, #160]	; (8009b00 <UART_SetConfig+0x94c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	08db      	lsrs	r3, r3, #3
 8009a62:	f003 0303 	and.w	r3, r3, #3
 8009a66:	4a27      	ldr	r2, [pc, #156]	; (8009b04 <UART_SetConfig+0x950>)
 8009a68:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009a6e:	e00f      	b.n	8009a90 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009a70:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <UART_SetConfig+0x950>)
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a74:	e00c      	b.n	8009a90 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a76:	4b24      	ldr	r3, [pc, #144]	; (8009b08 <UART_SetConfig+0x954>)
 8009a78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a7a:	e009      	b.n	8009a90 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a82:	e005      	b.n	8009a90 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009a8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 8121 	beq.w	8009cda <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9c:	4a17      	ldr	r2, [pc, #92]	; (8009afc <UART_SetConfig+0x948>)
 8009a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aaa:	005a      	lsls	r2, r3, #1
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	085b      	lsrs	r3, r3, #1
 8009ab2:	441a      	add	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	2b0f      	cmp	r3, #15
 8009ac4:	d916      	bls.n	8009af4 <UART_SetConfig+0x940>
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009acc:	d212      	bcs.n	8009af4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f023 030f 	bic.w	r3, r3, #15
 8009ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	085b      	lsrs	r3, r3, #1
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	f003 0307 	and.w	r3, r3, #7
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	e0f2      	b.n	8009cda <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009afa:	e0ee      	b.n	8009cda <UART_SetConfig+0xb26>
 8009afc:	0800ae98 	.word	0x0800ae98
 8009b00:	58024400 	.word	0x58024400
 8009b04:	03d09000 	.word	0x03d09000
 8009b08:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b10:	2b40      	cmp	r3, #64	; 0x40
 8009b12:	f200 80b7 	bhi.w	8009c84 <UART_SetConfig+0xad0>
 8009b16:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <UART_SetConfig+0x968>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009c21 	.word	0x08009c21
 8009b20:	08009c29 	.word	0x08009c29
 8009b24:	08009c85 	.word	0x08009c85
 8009b28:	08009c85 	.word	0x08009c85
 8009b2c:	08009c31 	.word	0x08009c31
 8009b30:	08009c85 	.word	0x08009c85
 8009b34:	08009c85 	.word	0x08009c85
 8009b38:	08009c85 	.word	0x08009c85
 8009b3c:	08009c41 	.word	0x08009c41
 8009b40:	08009c85 	.word	0x08009c85
 8009b44:	08009c85 	.word	0x08009c85
 8009b48:	08009c85 	.word	0x08009c85
 8009b4c:	08009c85 	.word	0x08009c85
 8009b50:	08009c85 	.word	0x08009c85
 8009b54:	08009c85 	.word	0x08009c85
 8009b58:	08009c85 	.word	0x08009c85
 8009b5c:	08009c51 	.word	0x08009c51
 8009b60:	08009c85 	.word	0x08009c85
 8009b64:	08009c85 	.word	0x08009c85
 8009b68:	08009c85 	.word	0x08009c85
 8009b6c:	08009c85 	.word	0x08009c85
 8009b70:	08009c85 	.word	0x08009c85
 8009b74:	08009c85 	.word	0x08009c85
 8009b78:	08009c85 	.word	0x08009c85
 8009b7c:	08009c85 	.word	0x08009c85
 8009b80:	08009c85 	.word	0x08009c85
 8009b84:	08009c85 	.word	0x08009c85
 8009b88:	08009c85 	.word	0x08009c85
 8009b8c:	08009c85 	.word	0x08009c85
 8009b90:	08009c85 	.word	0x08009c85
 8009b94:	08009c85 	.word	0x08009c85
 8009b98:	08009c85 	.word	0x08009c85
 8009b9c:	08009c77 	.word	0x08009c77
 8009ba0:	08009c85 	.word	0x08009c85
 8009ba4:	08009c85 	.word	0x08009c85
 8009ba8:	08009c85 	.word	0x08009c85
 8009bac:	08009c85 	.word	0x08009c85
 8009bb0:	08009c85 	.word	0x08009c85
 8009bb4:	08009c85 	.word	0x08009c85
 8009bb8:	08009c85 	.word	0x08009c85
 8009bbc:	08009c85 	.word	0x08009c85
 8009bc0:	08009c85 	.word	0x08009c85
 8009bc4:	08009c85 	.word	0x08009c85
 8009bc8:	08009c85 	.word	0x08009c85
 8009bcc:	08009c85 	.word	0x08009c85
 8009bd0:	08009c85 	.word	0x08009c85
 8009bd4:	08009c85 	.word	0x08009c85
 8009bd8:	08009c85 	.word	0x08009c85
 8009bdc:	08009c85 	.word	0x08009c85
 8009be0:	08009c85 	.word	0x08009c85
 8009be4:	08009c85 	.word	0x08009c85
 8009be8:	08009c85 	.word	0x08009c85
 8009bec:	08009c85 	.word	0x08009c85
 8009bf0:	08009c85 	.word	0x08009c85
 8009bf4:	08009c85 	.word	0x08009c85
 8009bf8:	08009c85 	.word	0x08009c85
 8009bfc:	08009c85 	.word	0x08009c85
 8009c00:	08009c85 	.word	0x08009c85
 8009c04:	08009c85 	.word	0x08009c85
 8009c08:	08009c85 	.word	0x08009c85
 8009c0c:	08009c85 	.word	0x08009c85
 8009c10:	08009c85 	.word	0x08009c85
 8009c14:	08009c85 	.word	0x08009c85
 8009c18:	08009c85 	.word	0x08009c85
 8009c1c:	08009c7d 	.word	0x08009c7d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c20:	f7fc ff02 	bl	8006a28 <HAL_RCC_GetPCLK1Freq>
 8009c24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c26:	e033      	b.n	8009c90 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c28:	f7fc ff14 	bl	8006a54 <HAL_RCC_GetPCLK2Freq>
 8009c2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c2e:	e02f      	b.n	8009c90 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c30:	f107 0314 	add.w	r3, r7, #20
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fe f89f 	bl	8007d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c3e:	e027      	b.n	8009c90 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c40:	f107 0308 	add.w	r3, r7, #8
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe f9e3 	bl	8008010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c4e:	e01f      	b.n	8009c90 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c50:	4b2c      	ldr	r3, [pc, #176]	; (8009d04 <UART_SetConfig+0xb50>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c5c:	4b29      	ldr	r3, [pc, #164]	; (8009d04 <UART_SetConfig+0xb50>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	08db      	lsrs	r3, r3, #3
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	4a28      	ldr	r2, [pc, #160]	; (8009d08 <UART_SetConfig+0xb54>)
 8009c68:	fa22 f303 	lsr.w	r3, r2, r3
 8009c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c6e:	e00f      	b.n	8009c90 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8009c70:	4b25      	ldr	r3, [pc, #148]	; (8009d08 <UART_SetConfig+0xb54>)
 8009c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c74:	e00c      	b.n	8009c90 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c76:	4b25      	ldr	r3, [pc, #148]	; (8009d0c <UART_SetConfig+0xb58>)
 8009c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c7a:	e009      	b.n	8009c90 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c82:	e005      	b.n	8009c90 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009c8e:	bf00      	nop
    }

    if (pclk != 0U)
 8009c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d021      	beq.n	8009cda <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	4a1d      	ldr	r2, [pc, #116]	; (8009d10 <UART_SetConfig+0xb5c>)
 8009c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca4:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	085b      	lsrs	r3, r3, #1
 8009cae:	441a      	add	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cbe:	2b0f      	cmp	r3, #15
 8009cc0:	d908      	bls.n	8009cd4 <UART_SetConfig+0xb20>
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cc8:	d204      	bcs.n	8009cd4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cd0:	60da      	str	r2, [r3, #12]
 8009cd2:	e002      	b.n	8009cda <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009cf6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3738      	adds	r7, #56	; 0x38
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009d04:	58024400 	.word	0x58024400
 8009d08:	03d09000 	.word	0x03d09000
 8009d0c:	003d0900 	.word	0x003d0900
 8009d10:	0800ae98 	.word	0x0800ae98

08009d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00a      	beq.n	8009d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	430a      	orrs	r2, r1
 8009d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	f003 0304 	and.w	r3, r3, #4
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00a      	beq.n	8009d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d86:	f003 0308 	and.w	r3, r3, #8
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009da8:	f003 0310 	and.w	r3, r3, #16
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dca:	f003 0320 	and.w	r3, r3, #32
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d01a      	beq.n	8009e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e12:	d10a      	bne.n	8009e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00a      	beq.n	8009e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	605a      	str	r2, [r3, #4]
  }
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e68:	f7f7 fad8 	bl	800141c <HAL_GetTick>
 8009e6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0308 	and.w	r3, r3, #8
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d10e      	bne.n	8009e9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f82c 	bl	8009ee8 <UART_WaitOnFlagUntilTimeout>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e022      	b.n	8009ee0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0304 	and.w	r3, r3, #4
 8009ea4:	2b04      	cmp	r3, #4
 8009ea6:	d10e      	bne.n	8009ec6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f816 	bl	8009ee8 <UART_WaitOnFlagUntilTimeout>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e00c      	b.n	8009ee0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2220      	movs	r2, #32
 8009eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	603b      	str	r3, [r7, #0]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ef8:	e062      	b.n	8009fc0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f00:	d05e      	beq.n	8009fc0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f02:	f7f7 fa8b 	bl	800141c <HAL_GetTick>
 8009f06:	4602      	mov	r2, r0
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d302      	bcc.n	8009f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d11d      	bne.n	8009f54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689a      	ldr	r2, [r3, #8]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f022 0201 	bic.w	r2, r2, #1
 8009f36:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2220      	movs	r2, #32
 8009f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e045      	b.n	8009fe0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 0304 	and.w	r3, r3, #4
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d02e      	beq.n	8009fc0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f70:	d126      	bne.n	8009fc0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f8a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	689a      	ldr	r2, [r3, #8]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0201 	bic.w	r2, r2, #1
 8009f9a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2220      	movs	r2, #32
 8009fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e00f      	b.n	8009fe0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	69da      	ldr	r2, [r3, #28]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	4013      	ands	r3, r2
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	bf0c      	ite	eq
 8009fd0:	2301      	moveq	r3, #1
 8009fd2:	2300      	movne	r3, #0
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d08d      	beq.n	8009efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <HAL_UARTEx_DisableFifoMode+0x16>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e027      	b.n	800a04e <HAL_UARTEx_DisableFifoMode+0x66>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2224      	movs	r2, #36	; 0x24
 800a00a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a02c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2220      	movs	r2, #32
 800a040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d101      	bne.n	800a072 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a06e:	2302      	movs	r3, #2
 800a070:	e02d      	b.n	800a0ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2224      	movs	r2, #36	; 0x24
 800a07e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f022 0201 	bic.w	r2, r2, #1
 800a098:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	689b      	ldr	r3, [r3, #8]
 800a0a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	683a      	ldr	r2, [r7, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f850 	bl	800a154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b084      	sub	sp, #16
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d101      	bne.n	800a0ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e02d      	b.n	800a14a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2224      	movs	r2, #36	; 0x24
 800a0fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f022 0201 	bic.w	r2, r2, #1
 800a114:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	430a      	orrs	r2, r1
 800a128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f812 	bl	800a154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2220      	movs	r2, #32
 800a13c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a154:	b480      	push	{r7}
 800a156:	b089      	sub	sp, #36	; 0x24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a15c:	4a2f      	ldr	r2, [pc, #188]	; (800a21c <UARTEx_SetNbDataToProcess+0xc8>)
 800a15e:	f107 0314 	add.w	r3, r7, #20
 800a162:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a166:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a16a:	4a2d      	ldr	r2, [pc, #180]	; (800a220 <UARTEx_SetNbDataToProcess+0xcc>)
 800a16c:	f107 030c 	add.w	r3, r7, #12
 800a170:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a174:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d108      	bne.n	800a192 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a190:	e03d      	b.n	800a20e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a192:	2310      	movs	r3, #16
 800a194:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a196:	2310      	movs	r3, #16
 800a198:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	0e5b      	lsrs	r3, r3, #25
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	f003 0307 	and.w	r3, r3, #7
 800a1a8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	0f5b      	lsrs	r3, r3, #29
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 0307 	and.w	r3, r3, #7
 800a1b8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a1ba:	7fbb      	ldrb	r3, [r7, #30]
 800a1bc:	7f3a      	ldrb	r2, [r7, #28]
 800a1be:	f107 0120 	add.w	r1, r7, #32
 800a1c2:	440a      	add	r2, r1
 800a1c4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1c8:	fb02 f303 	mul.w	r3, r2, r3
 800a1cc:	7f3a      	ldrb	r2, [r7, #28]
 800a1ce:	f107 0120 	add.w	r1, r7, #32
 800a1d2:	440a      	add	r2, r1
 800a1d4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a1e4:	7ffb      	ldrb	r3, [r7, #31]
 800a1e6:	7f7a      	ldrb	r2, [r7, #29]
 800a1e8:	f107 0120 	add.w	r1, r7, #32
 800a1ec:	440a      	add	r2, r1
 800a1ee:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1f2:	fb02 f303 	mul.w	r3, r2, r3
 800a1f6:	7f7a      	ldrb	r2, [r7, #29]
 800a1f8:	f107 0120 	add.w	r1, r7, #32
 800a1fc:	440a      	add	r2, r1
 800a1fe:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a202:	fb93 f3f2 	sdiv	r3, r3, r2
 800a206:	b29a      	uxth	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a20e:	bf00      	nop
 800a210:	3724      	adds	r7, #36	; 0x24
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	0800ae70 	.word	0x0800ae70
 800a220:	0800ae78 	.word	0x0800ae78

0800a224 <__libc_init_array>:
 800a224:	b570      	push	{r4, r5, r6, lr}
 800a226:	4e0d      	ldr	r6, [pc, #52]	; (800a25c <__libc_init_array+0x38>)
 800a228:	4c0d      	ldr	r4, [pc, #52]	; (800a260 <__libc_init_array+0x3c>)
 800a22a:	1ba4      	subs	r4, r4, r6
 800a22c:	10a4      	asrs	r4, r4, #2
 800a22e:	2500      	movs	r5, #0
 800a230:	42a5      	cmp	r5, r4
 800a232:	d109      	bne.n	800a248 <__libc_init_array+0x24>
 800a234:	4e0b      	ldr	r6, [pc, #44]	; (800a264 <__libc_init_array+0x40>)
 800a236:	4c0c      	ldr	r4, [pc, #48]	; (800a268 <__libc_init_array+0x44>)
 800a238:	f000 fe0c 	bl	800ae54 <_init>
 800a23c:	1ba4      	subs	r4, r4, r6
 800a23e:	10a4      	asrs	r4, r4, #2
 800a240:	2500      	movs	r5, #0
 800a242:	42a5      	cmp	r5, r4
 800a244:	d105      	bne.n	800a252 <__libc_init_array+0x2e>
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a24c:	4798      	blx	r3
 800a24e:	3501      	adds	r5, #1
 800a250:	e7ee      	b.n	800a230 <__libc_init_array+0xc>
 800a252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a256:	4798      	blx	r3
 800a258:	3501      	adds	r5, #1
 800a25a:	e7f2      	b.n	800a242 <__libc_init_array+0x1e>
 800a25c:	0800b090 	.word	0x0800b090
 800a260:	0800b090 	.word	0x0800b090
 800a264:	0800b090 	.word	0x0800b090
 800a268:	0800b094 	.word	0x0800b094

0800a26c <memset>:
 800a26c:	4402      	add	r2, r0
 800a26e:	4603      	mov	r3, r0
 800a270:	4293      	cmp	r3, r2
 800a272:	d100      	bne.n	800a276 <memset+0xa>
 800a274:	4770      	bx	lr
 800a276:	f803 1b01 	strb.w	r1, [r3], #1
 800a27a:	e7f9      	b.n	800a270 <memset+0x4>
 800a27c:	0000      	movs	r0, r0
	...

0800a280 <sin>:
 800a280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a282:	eeb0 7b40 	vmov.f64	d7, d0
 800a286:	ee17 3a90 	vmov	r3, s15
 800a28a:	4a19      	ldr	r2, [pc, #100]	; (800a2f0 <sin+0x70>)
 800a28c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a290:	4293      	cmp	r3, r2
 800a292:	dc05      	bgt.n	800a2a0 <sin+0x20>
 800a294:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800a2e8 <sin+0x68>
 800a298:	2000      	movs	r0, #0
 800a29a:	f000 fc71 	bl	800ab80 <__kernel_sin>
 800a29e:	e004      	b.n	800a2aa <sin+0x2a>
 800a2a0:	4a14      	ldr	r2, [pc, #80]	; (800a2f4 <sin+0x74>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	dd04      	ble.n	800a2b0 <sin+0x30>
 800a2a6:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a2aa:	b005      	add	sp, #20
 800a2ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2b0:	4668      	mov	r0, sp
 800a2b2:	f000 f821 	bl	800a2f8 <__ieee754_rem_pio2>
 800a2b6:	f000 0003 	and.w	r0, r0, #3
 800a2ba:	2801      	cmp	r0, #1
 800a2bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2c0:	ed9d 0b00 	vldr	d0, [sp]
 800a2c4:	d004      	beq.n	800a2d0 <sin+0x50>
 800a2c6:	2802      	cmp	r0, #2
 800a2c8:	d005      	beq.n	800a2d6 <sin+0x56>
 800a2ca:	b950      	cbnz	r0, 800a2e2 <sin+0x62>
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	e7e4      	b.n	800a29a <sin+0x1a>
 800a2d0:	f000 f94e 	bl	800a570 <__kernel_cos>
 800a2d4:	e7e9      	b.n	800a2aa <sin+0x2a>
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	f000 fc52 	bl	800ab80 <__kernel_sin>
 800a2dc:	eeb1 0b40 	vneg.f64	d0, d0
 800a2e0:	e7e3      	b.n	800a2aa <sin+0x2a>
 800a2e2:	f000 f945 	bl	800a570 <__kernel_cos>
 800a2e6:	e7f9      	b.n	800a2dc <sin+0x5c>
	...
 800a2f0:	3fe921fb 	.word	0x3fe921fb
 800a2f4:	7fefffff 	.word	0x7fefffff

0800a2f8 <__ieee754_rem_pio2>:
 800a2f8:	b570      	push	{r4, r5, r6, lr}
 800a2fa:	eeb0 7b40 	vmov.f64	d7, d0
 800a2fe:	ee17 5a90 	vmov	r5, s15
 800a302:	4b95      	ldr	r3, [pc, #596]	; (800a558 <__ieee754_rem_pio2+0x260>)
 800a304:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a308:	429e      	cmp	r6, r3
 800a30a:	b088      	sub	sp, #32
 800a30c:	4604      	mov	r4, r0
 800a30e:	dc07      	bgt.n	800a320 <__ieee754_rem_pio2+0x28>
 800a310:	2200      	movs	r2, #0
 800a312:	2300      	movs	r3, #0
 800a314:	ed84 0b00 	vstr	d0, [r4]
 800a318:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a31c:	2000      	movs	r0, #0
 800a31e:	e01b      	b.n	800a358 <__ieee754_rem_pio2+0x60>
 800a320:	4b8e      	ldr	r3, [pc, #568]	; (800a55c <__ieee754_rem_pio2+0x264>)
 800a322:	429e      	cmp	r6, r3
 800a324:	dc3b      	bgt.n	800a39e <__ieee754_rem_pio2+0xa6>
 800a326:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800a32a:	2d00      	cmp	r5, #0
 800a32c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800a518 <__ieee754_rem_pio2+0x220>
 800a330:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800a334:	dd19      	ble.n	800a36a <__ieee754_rem_pio2+0x72>
 800a336:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a33a:	429e      	cmp	r6, r3
 800a33c:	d00e      	beq.n	800a35c <__ieee754_rem_pio2+0x64>
 800a33e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a520 <__ieee754_rem_pio2+0x228>
 800a342:	ee37 5b46 	vsub.f64	d5, d7, d6
 800a346:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a34a:	ed84 5b00 	vstr	d5, [r4]
 800a34e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a352:	ed84 7b02 	vstr	d7, [r4, #8]
 800a356:	2001      	movs	r0, #1
 800a358:	b008      	add	sp, #32
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800a528 <__ieee754_rem_pio2+0x230>
 800a360:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a364:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800a530 <__ieee754_rem_pio2+0x238>
 800a368:	e7eb      	b.n	800a342 <__ieee754_rem_pio2+0x4a>
 800a36a:	429e      	cmp	r6, r3
 800a36c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a370:	d00e      	beq.n	800a390 <__ieee754_rem_pio2+0x98>
 800a372:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800a520 <__ieee754_rem_pio2+0x228>
 800a376:	ee37 5b06 	vadd.f64	d5, d7, d6
 800a37a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a37e:	ed84 5b00 	vstr	d5, [r4]
 800a382:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a386:	f04f 30ff 	mov.w	r0, #4294967295
 800a38a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a38e:	e7e3      	b.n	800a358 <__ieee754_rem_pio2+0x60>
 800a390:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800a528 <__ieee754_rem_pio2+0x230>
 800a394:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a398:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800a530 <__ieee754_rem_pio2+0x238>
 800a39c:	e7eb      	b.n	800a376 <__ieee754_rem_pio2+0x7e>
 800a39e:	4b70      	ldr	r3, [pc, #448]	; (800a560 <__ieee754_rem_pio2+0x268>)
 800a3a0:	429e      	cmp	r6, r3
 800a3a2:	dc6c      	bgt.n	800a47e <__ieee754_rem_pio2+0x186>
 800a3a4:	f000 fc44 	bl	800ac30 <fabs>
 800a3a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a3ac:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800a538 <__ieee754_rem_pio2+0x240>
 800a3b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a3b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a3b8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a3bc:	ee17 0a90 	vmov	r0, s15
 800a3c0:	eeb1 5b44 	vneg.f64	d5, d4
 800a3c4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800a518 <__ieee754_rem_pio2+0x220>
 800a3c8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a3cc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800a520 <__ieee754_rem_pio2+0x228>
 800a3d0:	281f      	cmp	r0, #31
 800a3d2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a3d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a3da:	dc08      	bgt.n	800a3ee <__ieee754_rem_pio2+0xf6>
 800a3dc:	1e42      	subs	r2, r0, #1
 800a3de:	4b61      	ldr	r3, [pc, #388]	; (800a564 <__ieee754_rem_pio2+0x26c>)
 800a3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e4:	42b3      	cmp	r3, r6
 800a3e6:	d002      	beq.n	800a3ee <__ieee754_rem_pio2+0xf6>
 800a3e8:	ed84 6b00 	vstr	d6, [r4]
 800a3ec:	e022      	b.n	800a434 <__ieee754_rem_pio2+0x13c>
 800a3ee:	ee16 3a90 	vmov	r3, s13
 800a3f2:	1536      	asrs	r6, r6, #20
 800a3f4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a3f8:	1af3      	subs	r3, r6, r3
 800a3fa:	2b10      	cmp	r3, #16
 800a3fc:	ddf4      	ble.n	800a3e8 <__ieee754_rem_pio2+0xf0>
 800a3fe:	eeb0 6b40 	vmov.f64	d6, d0
 800a402:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800a528 <__ieee754_rem_pio2+0x230>
 800a406:	eea5 6b03 	vfma.f64	d6, d5, d3
 800a40a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a40e:	eea5 7b03 	vfma.f64	d7, d5, d3
 800a412:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800a530 <__ieee754_rem_pio2+0x238>
 800a416:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800a41a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a41e:	ee13 3a90 	vmov	r3, s7
 800a422:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a426:	1af6      	subs	r6, r6, r3
 800a428:	2e31      	cmp	r6, #49	; 0x31
 800a42a:	dc17      	bgt.n	800a45c <__ieee754_rem_pio2+0x164>
 800a42c:	eeb0 0b46 	vmov.f64	d0, d6
 800a430:	ed84 3b00 	vstr	d3, [r4]
 800a434:	ed94 6b00 	vldr	d6, [r4]
 800a438:	2d00      	cmp	r5, #0
 800a43a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a43e:	ee30 7b47 	vsub.f64	d7, d0, d7
 800a442:	ed84 7b02 	vstr	d7, [r4, #8]
 800a446:	da87      	bge.n	800a358 <__ieee754_rem_pio2+0x60>
 800a448:	eeb1 6b46 	vneg.f64	d6, d6
 800a44c:	ed84 6b00 	vstr	d6, [r4]
 800a450:	eeb1 7b47 	vneg.f64	d7, d7
 800a454:	4240      	negs	r0, r0
 800a456:	ed84 7b02 	vstr	d7, [r4, #8]
 800a45a:	e77d      	b.n	800a358 <__ieee754_rem_pio2+0x60>
 800a45c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800a540 <__ieee754_rem_pio2+0x248>
 800a460:	eeb0 0b46 	vmov.f64	d0, d6
 800a464:	eea5 0b03 	vfma.f64	d0, d5, d3
 800a468:	ee36 7b40 	vsub.f64	d7, d6, d0
 800a46c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800a548 <__ieee754_rem_pio2+0x250>
 800a470:	eea5 7b03 	vfma.f64	d7, d5, d3
 800a474:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800a478:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a47c:	e7b4      	b.n	800a3e8 <__ieee754_rem_pio2+0xf0>
 800a47e:	4b3a      	ldr	r3, [pc, #232]	; (800a568 <__ieee754_rem_pio2+0x270>)
 800a480:	429e      	cmp	r6, r3
 800a482:	dd06      	ble.n	800a492 <__ieee754_rem_pio2+0x19a>
 800a484:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a488:	ed80 7b02 	vstr	d7, [r0, #8]
 800a48c:	ed80 7b00 	vstr	d7, [r0]
 800a490:	e744      	b.n	800a31c <__ieee754_rem_pio2+0x24>
 800a492:	1532      	asrs	r2, r6, #20
 800a494:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800a498:	ee10 0a10 	vmov	r0, s0
 800a49c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800a4a0:	ec41 0b17 	vmov	d7, r0, r1
 800a4a4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a4a8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800a550 <__ieee754_rem_pio2+0x258>
 800a4ac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a4b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a4b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a4b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a4bc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a4c0:	a908      	add	r1, sp, #32
 800a4c2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a4c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a4ca:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a4ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a4d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	ed31 7b02 	vldmdb	r1!, {d7}
 800a4dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e4:	f103 30ff 	add.w	r0, r3, #4294967295
 800a4e8:	d013      	beq.n	800a512 <__ieee754_rem_pio2+0x21a>
 800a4ea:	4920      	ldr	r1, [pc, #128]	; (800a56c <__ieee754_rem_pio2+0x274>)
 800a4ec:	9101      	str	r1, [sp, #4]
 800a4ee:	2102      	movs	r1, #2
 800a4f0:	9100      	str	r1, [sp, #0]
 800a4f2:	a802      	add	r0, sp, #8
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	f000 f8a7 	bl	800a648 <__kernel_rem_pio2>
 800a4fa:	2d00      	cmp	r5, #0
 800a4fc:	f6bf af2c 	bge.w	800a358 <__ieee754_rem_pio2+0x60>
 800a500:	ed94 7b00 	vldr	d7, [r4]
 800a504:	eeb1 7b47 	vneg.f64	d7, d7
 800a508:	ed84 7b00 	vstr	d7, [r4]
 800a50c:	ed94 7b02 	vldr	d7, [r4, #8]
 800a510:	e79e      	b.n	800a450 <__ieee754_rem_pio2+0x158>
 800a512:	4603      	mov	r3, r0
 800a514:	e7e0      	b.n	800a4d8 <__ieee754_rem_pio2+0x1e0>
 800a516:	bf00      	nop
 800a518:	54400000 	.word	0x54400000
 800a51c:	3ff921fb 	.word	0x3ff921fb
 800a520:	1a626331 	.word	0x1a626331
 800a524:	3dd0b461 	.word	0x3dd0b461
 800a528:	1a600000 	.word	0x1a600000
 800a52c:	3dd0b461 	.word	0x3dd0b461
 800a530:	2e037073 	.word	0x2e037073
 800a534:	3ba3198a 	.word	0x3ba3198a
 800a538:	6dc9c883 	.word	0x6dc9c883
 800a53c:	3fe45f30 	.word	0x3fe45f30
 800a540:	2e000000 	.word	0x2e000000
 800a544:	3ba3198a 	.word	0x3ba3198a
 800a548:	252049c1 	.word	0x252049c1
 800a54c:	397b839a 	.word	0x397b839a
 800a550:	00000000 	.word	0x00000000
 800a554:	41700000 	.word	0x41700000
 800a558:	3fe921fb 	.word	0x3fe921fb
 800a55c:	4002d97b 	.word	0x4002d97b
 800a560:	413921fb 	.word	0x413921fb
 800a564:	0800aeb0 	.word	0x0800aeb0
 800a568:	7fefffff 	.word	0x7fefffff
 800a56c:	0800af30 	.word	0x0800af30

0800a570 <__kernel_cos>:
 800a570:	ee10 1a90 	vmov	r1, s1
 800a574:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800a578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a57c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800a580:	da05      	bge.n	800a58e <__kernel_cos+0x1e>
 800a582:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800a586:	ee16 3a90 	vmov	r3, s13
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d03d      	beq.n	800a60a <__kernel_cos+0x9a>
 800a58e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800a592:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a596:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800a610 <__kernel_cos+0xa0>
 800a59a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800a59e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800a5a2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800a618 <__kernel_cos+0xa8>
 800a5a6:	eea4 5b03 	vfma.f64	d5, d4, d3
 800a5aa:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800a620 <__kernel_cos+0xb0>
 800a5ae:	eea5 3b04 	vfma.f64	d3, d5, d4
 800a5b2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800a628 <__kernel_cos+0xb8>
 800a5b6:	eea3 5b04 	vfma.f64	d5, d3, d4
 800a5ba:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800a630 <__kernel_cos+0xc0>
 800a5be:	4b20      	ldr	r3, [pc, #128]	; (800a640 <__kernel_cos+0xd0>)
 800a5c0:	eea5 3b04 	vfma.f64	d3, d5, d4
 800a5c4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800a638 <__kernel_cos+0xc8>
 800a5c8:	4299      	cmp	r1, r3
 800a5ca:	eea3 5b04 	vfma.f64	d5, d3, d4
 800a5ce:	ee25 5b04 	vmul.f64	d5, d5, d4
 800a5d2:	eea4 1b05 	vfma.f64	d1, d4, d5
 800a5d6:	dc04      	bgt.n	800a5e2 <__kernel_cos+0x72>
 800a5d8:	ee36 6b41 	vsub.f64	d6, d6, d1
 800a5dc:	ee37 0b46 	vsub.f64	d0, d7, d6
 800a5e0:	4770      	bx	lr
 800a5e2:	4b18      	ldr	r3, [pc, #96]	; (800a644 <__kernel_cos+0xd4>)
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	dc0d      	bgt.n	800a604 <__kernel_cos+0x94>
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800a5ee:	ec43 2b15 	vmov	d5, r2, r3
 800a5f2:	ee37 0b45 	vsub.f64	d0, d7, d5
 800a5f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5fa:	ee36 6b41 	vsub.f64	d6, d6, d1
 800a5fe:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a602:	4770      	bx	lr
 800a604:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800a608:	e7f3      	b.n	800a5f2 <__kernel_cos+0x82>
 800a60a:	eeb0 0b47 	vmov.f64	d0, d7
 800a60e:	4770      	bx	lr
 800a610:	be8838d4 	.word	0xbe8838d4
 800a614:	bda8fae9 	.word	0xbda8fae9
 800a618:	bdb4b1c4 	.word	0xbdb4b1c4
 800a61c:	3e21ee9e 	.word	0x3e21ee9e
 800a620:	809c52ad 	.word	0x809c52ad
 800a624:	be927e4f 	.word	0xbe927e4f
 800a628:	19cb1590 	.word	0x19cb1590
 800a62c:	3efa01a0 	.word	0x3efa01a0
 800a630:	16c15177 	.word	0x16c15177
 800a634:	bf56c16c 	.word	0xbf56c16c
 800a638:	5555554c 	.word	0x5555554c
 800a63c:	3fa55555 	.word	0x3fa55555
 800a640:	3fd33332 	.word	0x3fd33332
 800a644:	3fe90000 	.word	0x3fe90000

0800a648 <__kernel_rem_pio2>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	ed2d 8b06 	vpush	{d8-d10}
 800a650:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800a654:	469b      	mov	fp, r3
 800a656:	460e      	mov	r6, r1
 800a658:	4bc7      	ldr	r3, [pc, #796]	; (800a978 <__kernel_rem_pio2+0x330>)
 800a65a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800a65c:	9002      	str	r0, [sp, #8]
 800a65e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800a662:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800a664:	1ed1      	subs	r1, r2, #3
 800a666:	2318      	movs	r3, #24
 800a668:	f06f 0417 	mvn.w	r4, #23
 800a66c:	fb91 f1f3 	sdiv	r1, r1, r3
 800a670:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800a674:	f10b 3aff 	add.w	sl, fp, #4294967295
 800a678:	fb01 4404 	mla	r4, r1, r4, r4
 800a67c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800a960 <__kernel_rem_pio2+0x318>
 800a680:	4414      	add	r4, r2
 800a682:	eba1 050a 	sub.w	r5, r1, sl
 800a686:	aa1a      	add	r2, sp, #104	; 0x68
 800a688:	eb09 070a 	add.w	r7, r9, sl
 800a68c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800a690:	4696      	mov	lr, r2
 800a692:	2300      	movs	r3, #0
 800a694:	42bb      	cmp	r3, r7
 800a696:	dd0f      	ble.n	800a6b8 <__kernel_rem_pio2+0x70>
 800a698:	af6a      	add	r7, sp, #424	; 0x1a8
 800a69a:	2200      	movs	r2, #0
 800a69c:	454a      	cmp	r2, r9
 800a69e:	dc28      	bgt.n	800a6f2 <__kernel_rem_pio2+0xaa>
 800a6a0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800a6a4:	eb0b 0302 	add.w	r3, fp, r2
 800a6a8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800a6ac:	9d02      	ldr	r5, [sp, #8]
 800a6ae:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800a960 <__kernel_rem_pio2+0x318>
 800a6b2:	f04f 0c00 	mov.w	ip, #0
 800a6b6:	e016      	b.n	800a6e6 <__kernel_rem_pio2+0x9e>
 800a6b8:	42dd      	cmn	r5, r3
 800a6ba:	d409      	bmi.n	800a6d0 <__kernel_rem_pio2+0x88>
 800a6bc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800a6c0:	ee07 2a90 	vmov	s15, r2
 800a6c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a6c8:	ecae 7b02 	vstmia	lr!, {d7}
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	e7e1      	b.n	800a694 <__kernel_rem_pio2+0x4c>
 800a6d0:	eeb0 7b46 	vmov.f64	d7, d6
 800a6d4:	e7f8      	b.n	800a6c8 <__kernel_rem_pio2+0x80>
 800a6d6:	ecb5 5b02 	vldmia	r5!, {d5}
 800a6da:	ed33 6b02 	vldmdb	r3!, {d6}
 800a6de:	f10c 0c01 	add.w	ip, ip, #1
 800a6e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a6e6:	45d4      	cmp	ip, sl
 800a6e8:	ddf5      	ble.n	800a6d6 <__kernel_rem_pio2+0x8e>
 800a6ea:	eca7 7b02 	vstmia	r7!, {d7}
 800a6ee:	3201      	adds	r2, #1
 800a6f0:	e7d4      	b.n	800a69c <__kernel_rem_pio2+0x54>
 800a6f2:	ab06      	add	r3, sp, #24
 800a6f4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800a6f8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800a968 <__kernel_rem_pio2+0x320>
 800a6fc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800a970 <__kernel_rem_pio2+0x328>
 800a700:	9304      	str	r3, [sp, #16]
 800a702:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	464d      	mov	r5, r9
 800a70a:	ab92      	add	r3, sp, #584	; 0x248
 800a70c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800a710:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a714:	3f01      	subs	r7, #1
 800a716:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800a71a:	00ff      	lsls	r7, r7, #3
 800a71c:	ab92      	add	r3, sp, #584	; 0x248
 800a71e:	19da      	adds	r2, r3, r7
 800a720:	3a98      	subs	r2, #152	; 0x98
 800a722:	2300      	movs	r3, #0
 800a724:	1ae9      	subs	r1, r5, r3
 800a726:	2900      	cmp	r1, #0
 800a728:	dc4e      	bgt.n	800a7c8 <__kernel_rem_pio2+0x180>
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 fb04 	bl	800ad38 <scalbn>
 800a730:	eeb0 8b40 	vmov.f64	d8, d0
 800a734:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800a738:	ee28 0b00 	vmul.f64	d0, d8, d0
 800a73c:	f000 fa84 	bl	800ac48 <floor>
 800a740:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800a744:	eea0 8b47 	vfms.f64	d8, d0, d7
 800a748:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800a74c:	2c00      	cmp	r4, #0
 800a74e:	edcd 7a01 	vstr	s15, [sp, #4]
 800a752:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a756:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a75a:	dd4a      	ble.n	800a7f2 <__kernel_rem_pio2+0x1aa>
 800a75c:	1e69      	subs	r1, r5, #1
 800a75e:	ab06      	add	r3, sp, #24
 800a760:	f1c4 0018 	rsb	r0, r4, #24
 800a764:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800a768:	9a01      	ldr	r2, [sp, #4]
 800a76a:	fa4c f300 	asr.w	r3, ip, r0
 800a76e:	441a      	add	r2, r3
 800a770:	4083      	lsls	r3, r0
 800a772:	9201      	str	r2, [sp, #4]
 800a774:	ebac 0203 	sub.w	r2, ip, r3
 800a778:	ab06      	add	r3, sp, #24
 800a77a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800a77e:	f1c4 0317 	rsb	r3, r4, #23
 800a782:	fa42 f803 	asr.w	r8, r2, r3
 800a786:	f1b8 0f00 	cmp.w	r8, #0
 800a78a:	dd43      	ble.n	800a814 <__kernel_rem_pio2+0x1cc>
 800a78c:	9b01      	ldr	r3, [sp, #4]
 800a78e:	2000      	movs	r0, #0
 800a790:	3301      	adds	r3, #1
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	4601      	mov	r1, r0
 800a796:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800a79a:	4285      	cmp	r5, r0
 800a79c:	dc6e      	bgt.n	800a87c <__kernel_rem_pio2+0x234>
 800a79e:	2c00      	cmp	r4, #0
 800a7a0:	dd04      	ble.n	800a7ac <__kernel_rem_pio2+0x164>
 800a7a2:	2c01      	cmp	r4, #1
 800a7a4:	d07f      	beq.n	800a8a6 <__kernel_rem_pio2+0x25e>
 800a7a6:	2c02      	cmp	r4, #2
 800a7a8:	f000 8087 	beq.w	800a8ba <__kernel_rem_pio2+0x272>
 800a7ac:	f1b8 0f02 	cmp.w	r8, #2
 800a7b0:	d130      	bne.n	800a814 <__kernel_rem_pio2+0x1cc>
 800a7b2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a7b6:	ee30 8b48 	vsub.f64	d8, d0, d8
 800a7ba:	b359      	cbz	r1, 800a814 <__kernel_rem_pio2+0x1cc>
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 fabb 	bl	800ad38 <scalbn>
 800a7c2:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a7c6:	e025      	b.n	800a814 <__kernel_rem_pio2+0x1cc>
 800a7c8:	ee20 7b09 	vmul.f64	d7, d0, d9
 800a7cc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a7d0:	a806      	add	r0, sp, #24
 800a7d2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800a7d6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800a7da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a7de:	ee10 1a10 	vmov	r1, s0
 800a7e2:	ed32 0b02 	vldmdb	r2!, {d0}
 800a7e6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800a7ea:	ee37 0b00 	vadd.f64	d0, d7, d0
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	e798      	b.n	800a724 <__kernel_rem_pio2+0xdc>
 800a7f2:	d106      	bne.n	800a802 <__kernel_rem_pio2+0x1ba>
 800a7f4:	1e6b      	subs	r3, r5, #1
 800a7f6:	aa06      	add	r2, sp, #24
 800a7f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a7fc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800a800:	e7c1      	b.n	800a786 <__kernel_rem_pio2+0x13e>
 800a802:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800a806:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80e:	da32      	bge.n	800a876 <__kernel_rem_pio2+0x22e>
 800a810:	f04f 0800 	mov.w	r8, #0
 800a814:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81c:	f040 80b0 	bne.w	800a980 <__kernel_rem_pio2+0x338>
 800a820:	1e6b      	subs	r3, r5, #1
 800a822:	4618      	mov	r0, r3
 800a824:	2200      	movs	r2, #0
 800a826:	4548      	cmp	r0, r9
 800a828:	da4e      	bge.n	800a8c8 <__kernel_rem_pio2+0x280>
 800a82a:	2a00      	cmp	r2, #0
 800a82c:	f000 8088 	beq.w	800a940 <__kernel_rem_pio2+0x2f8>
 800a830:	aa06      	add	r2, sp, #24
 800a832:	3c18      	subs	r4, #24
 800a834:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a838:	2900      	cmp	r1, #0
 800a83a:	f000 808e 	beq.w	800a95a <__kernel_rem_pio2+0x312>
 800a83e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a842:	4620      	mov	r0, r4
 800a844:	9302      	str	r3, [sp, #8]
 800a846:	f000 fa77 	bl	800ad38 <scalbn>
 800a84a:	9b02      	ldr	r3, [sp, #8]
 800a84c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800a84e:	00d9      	lsls	r1, r3, #3
 800a850:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800a968 <__kernel_rem_pio2+0x320>
 800a854:	1850      	adds	r0, r2, r1
 800a856:	f100 0508 	add.w	r5, r0, #8
 800a85a:	461c      	mov	r4, r3
 800a85c:	2c00      	cmp	r4, #0
 800a85e:	f280 80bd 	bge.w	800a9dc <__kernel_rem_pio2+0x394>
 800a862:	2500      	movs	r5, #0
 800a864:	1b5c      	subs	r4, r3, r5
 800a866:	2c00      	cmp	r4, #0
 800a868:	f2c0 80dd 	blt.w	800aa26 <__kernel_rem_pio2+0x3de>
 800a86c:	4f43      	ldr	r7, [pc, #268]	; (800a97c <__kernel_rem_pio2+0x334>)
 800a86e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800a960 <__kernel_rem_pio2+0x318>
 800a872:	2400      	movs	r4, #0
 800a874:	e0cb      	b.n	800aa0e <__kernel_rem_pio2+0x3c6>
 800a876:	f04f 0802 	mov.w	r8, #2
 800a87a:	e787      	b.n	800a78c <__kernel_rem_pio2+0x144>
 800a87c:	ab06      	add	r3, sp, #24
 800a87e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a882:	b949      	cbnz	r1, 800a898 <__kernel_rem_pio2+0x250>
 800a884:	b12b      	cbz	r3, 800a892 <__kernel_rem_pio2+0x24a>
 800a886:	aa06      	add	r2, sp, #24
 800a888:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a88c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a890:	2301      	movs	r3, #1
 800a892:	3001      	adds	r0, #1
 800a894:	4619      	mov	r1, r3
 800a896:	e780      	b.n	800a79a <__kernel_rem_pio2+0x152>
 800a898:	aa06      	add	r2, sp, #24
 800a89a:	ebac 0303 	sub.w	r3, ip, r3
 800a89e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	e7f5      	b.n	800a892 <__kernel_rem_pio2+0x24a>
 800a8a6:	1e68      	subs	r0, r5, #1
 800a8a8:	ab06      	add	r3, sp, #24
 800a8aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a8ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a8b2:	aa06      	add	r2, sp, #24
 800a8b4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800a8b8:	e778      	b.n	800a7ac <__kernel_rem_pio2+0x164>
 800a8ba:	1e68      	subs	r0, r5, #1
 800a8bc:	ab06      	add	r3, sp, #24
 800a8be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a8c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a8c6:	e7f4      	b.n	800a8b2 <__kernel_rem_pio2+0x26a>
 800a8c8:	a906      	add	r1, sp, #24
 800a8ca:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a8ce:	3801      	subs	r0, #1
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	e7a8      	b.n	800a826 <__kernel_rem_pio2+0x1de>
 800a8d4:	f10c 0c01 	add.w	ip, ip, #1
 800a8d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	d0f9      	beq.n	800a8d4 <__kernel_rem_pio2+0x28c>
 800a8e0:	eb0b 0305 	add.w	r3, fp, r5
 800a8e4:	aa1a      	add	r2, sp, #104	; 0x68
 800a8e6:	00db      	lsls	r3, r3, #3
 800a8e8:	1898      	adds	r0, r3, r2
 800a8ea:	3008      	adds	r0, #8
 800a8ec:	1c69      	adds	r1, r5, #1
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	4465      	add	r5, ip
 800a8f4:	9005      	str	r0, [sp, #20]
 800a8f6:	428d      	cmp	r5, r1
 800a8f8:	f6ff af07 	blt.w	800a70a <__kernel_rem_pio2+0xc2>
 800a8fc:	a81a      	add	r0, sp, #104	; 0x68
 800a8fe:	eb02 0c03 	add.w	ip, r2, r3
 800a902:	4484      	add	ip, r0
 800a904:	9803      	ldr	r0, [sp, #12]
 800a906:	f8dd e008 	ldr.w	lr, [sp, #8]
 800a90a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800a90e:	9001      	str	r0, [sp, #4]
 800a910:	ee07 0a90 	vmov	s15, r0
 800a914:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a918:	9805      	ldr	r0, [sp, #20]
 800a91a:	ed8c 7b00 	vstr	d7, [ip]
 800a91e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a960 <__kernel_rem_pio2+0x318>
 800a922:	eb00 0802 	add.w	r8, r0, r2
 800a926:	f04f 0c00 	mov.w	ip, #0
 800a92a:	45d4      	cmp	ip, sl
 800a92c:	dd0c      	ble.n	800a948 <__kernel_rem_pio2+0x300>
 800a92e:	eb02 0c07 	add.w	ip, r2, r7
 800a932:	a86a      	add	r0, sp, #424	; 0x1a8
 800a934:	4484      	add	ip, r0
 800a936:	ed8c 7b02 	vstr	d7, [ip, #8]
 800a93a:	3101      	adds	r1, #1
 800a93c:	3208      	adds	r2, #8
 800a93e:	e7da      	b.n	800a8f6 <__kernel_rem_pio2+0x2ae>
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	f04f 0c01 	mov.w	ip, #1
 800a946:	e7c7      	b.n	800a8d8 <__kernel_rem_pio2+0x290>
 800a948:	ecbe 5b02 	vldmia	lr!, {d5}
 800a94c:	ed38 6b02 	vldmdb	r8!, {d6}
 800a950:	f10c 0c01 	add.w	ip, ip, #1
 800a954:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a958:	e7e7      	b.n	800a92a <__kernel_rem_pio2+0x2e2>
 800a95a:	3b01      	subs	r3, #1
 800a95c:	e768      	b.n	800a830 <__kernel_rem_pio2+0x1e8>
 800a95e:	bf00      	nop
	...
 800a96c:	3e700000 	.word	0x3e700000
 800a970:	00000000 	.word	0x00000000
 800a974:	41700000 	.word	0x41700000
 800a978:	0800b078 	.word	0x0800b078
 800a97c:	0800b038 	.word	0x0800b038
 800a980:	4260      	negs	r0, r4
 800a982:	eeb0 0b48 	vmov.f64	d0, d8
 800a986:	f000 f9d7 	bl	800ad38 <scalbn>
 800a98a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800ab68 <__kernel_rem_pio2+0x520>
 800a98e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800a992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a996:	db18      	blt.n	800a9ca <__kernel_rem_pio2+0x382>
 800a998:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800ab70 <__kernel_rem_pio2+0x528>
 800a99c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a9a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a9a4:	aa06      	add	r2, sp, #24
 800a9a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800a9aa:	eea5 0b46 	vfms.f64	d0, d5, d6
 800a9ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a9b2:	a906      	add	r1, sp, #24
 800a9b4:	ee10 3a10 	vmov	r3, s0
 800a9b8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a9bc:	1c6b      	adds	r3, r5, #1
 800a9be:	ee17 2a10 	vmov	r2, s14
 800a9c2:	3418      	adds	r4, #24
 800a9c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a9c8:	e739      	b.n	800a83e <__kernel_rem_pio2+0x1f6>
 800a9ca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a9ce:	aa06      	add	r2, sp, #24
 800a9d0:	ee10 3a10 	vmov	r3, s0
 800a9d4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800a9d8:	462b      	mov	r3, r5
 800a9da:	e730      	b.n	800a83e <__kernel_rem_pio2+0x1f6>
 800a9dc:	aa06      	add	r2, sp, #24
 800a9de:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800a9e2:	9202      	str	r2, [sp, #8]
 800a9e4:	ee07 2a90 	vmov	s15, r2
 800a9e8:	3c01      	subs	r4, #1
 800a9ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a9ee:	ee27 7b00 	vmul.f64	d7, d7, d0
 800a9f2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800a9f6:	ed25 7b02 	vstmdb	r5!, {d7}
 800a9fa:	e72f      	b.n	800a85c <__kernel_rem_pio2+0x214>
 800a9fc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800aa00:	ecb7 5b02 	vldmia	r7!, {d5}
 800aa04:	ed9c 6b00 	vldr	d6, [ip]
 800aa08:	3401      	adds	r4, #1
 800aa0a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800aa0e:	454c      	cmp	r4, r9
 800aa10:	dc01      	bgt.n	800aa16 <__kernel_rem_pio2+0x3ce>
 800aa12:	42a5      	cmp	r5, r4
 800aa14:	daf2      	bge.n	800a9fc <__kernel_rem_pio2+0x3b4>
 800aa16:	aa42      	add	r2, sp, #264	; 0x108
 800aa18:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800aa1c:	ed84 7b00 	vstr	d7, [r4]
 800aa20:	3501      	adds	r5, #1
 800aa22:	3808      	subs	r0, #8
 800aa24:	e71e      	b.n	800a864 <__kernel_rem_pio2+0x21c>
 800aa26:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800aa28:	2a03      	cmp	r2, #3
 800aa2a:	d84e      	bhi.n	800aaca <__kernel_rem_pio2+0x482>
 800aa2c:	e8df f002 	tbb	[pc, r2]
 800aa30:	021f1f3e 	.word	0x021f1f3e
 800aa34:	3108      	adds	r1, #8
 800aa36:	aa42      	add	r2, sp, #264	; 0x108
 800aa38:	4411      	add	r1, r2
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	461c      	mov	r4, r3
 800aa3e:	2c00      	cmp	r4, #0
 800aa40:	dc61      	bgt.n	800ab06 <__kernel_rem_pio2+0x4be>
 800aa42:	4608      	mov	r0, r1
 800aa44:	461c      	mov	r4, r3
 800aa46:	2c01      	cmp	r4, #1
 800aa48:	dc6d      	bgt.n	800ab26 <__kernel_rem_pio2+0x4de>
 800aa4a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ab78 <__kernel_rem_pio2+0x530>
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	dc79      	bgt.n	800ab46 <__kernel_rem_pio2+0x4fe>
 800aa52:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800aa56:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800aa5a:	f1b8 0f00 	cmp.w	r8, #0
 800aa5e:	d178      	bne.n	800ab52 <__kernel_rem_pio2+0x50a>
 800aa60:	ed86 5b00 	vstr	d5, [r6]
 800aa64:	ed86 6b02 	vstr	d6, [r6, #8]
 800aa68:	ed86 7b04 	vstr	d7, [r6, #16]
 800aa6c:	e02d      	b.n	800aaca <__kernel_rem_pio2+0x482>
 800aa6e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800ab78 <__kernel_rem_pio2+0x530>
 800aa72:	3108      	adds	r1, #8
 800aa74:	aa42      	add	r2, sp, #264	; 0x108
 800aa76:	4411      	add	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	da34      	bge.n	800aae8 <__kernel_rem_pio2+0x4a0>
 800aa7e:	f1b8 0f00 	cmp.w	r8, #0
 800aa82:	d037      	beq.n	800aaf4 <__kernel_rem_pio2+0x4ac>
 800aa84:	eeb1 7b46 	vneg.f64	d7, d6
 800aa88:	ed86 7b00 	vstr	d7, [r6]
 800aa8c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800aa90:	a844      	add	r0, sp, #272	; 0x110
 800aa92:	2101      	movs	r1, #1
 800aa94:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa98:	428b      	cmp	r3, r1
 800aa9a:	da2e      	bge.n	800aafa <__kernel_rem_pio2+0x4b2>
 800aa9c:	f1b8 0f00 	cmp.w	r8, #0
 800aaa0:	d001      	beq.n	800aaa6 <__kernel_rem_pio2+0x45e>
 800aaa2:	eeb1 7b47 	vneg.f64	d7, d7
 800aaa6:	ed86 7b02 	vstr	d7, [r6, #8]
 800aaaa:	e00e      	b.n	800aaca <__kernel_rem_pio2+0x482>
 800aaac:	aa92      	add	r2, sp, #584	; 0x248
 800aaae:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800ab78 <__kernel_rem_pio2+0x530>
 800aab2:	4411      	add	r1, r2
 800aab4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	da0f      	bge.n	800aadc <__kernel_rem_pio2+0x494>
 800aabc:	f1b8 0f00 	cmp.w	r8, #0
 800aac0:	d001      	beq.n	800aac6 <__kernel_rem_pio2+0x47e>
 800aac2:	eeb1 7b47 	vneg.f64	d7, d7
 800aac6:	ed86 7b00 	vstr	d7, [r6]
 800aaca:	9b01      	ldr	r3, [sp, #4]
 800aacc:	f003 0007 	and.w	r0, r3, #7
 800aad0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800aad4:	ecbd 8b06 	vpop	{d8-d10}
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aadc:	ed31 6b02 	vldmdb	r1!, {d6}
 800aae0:	3b01      	subs	r3, #1
 800aae2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aae6:	e7e7      	b.n	800aab8 <__kernel_rem_pio2+0x470>
 800aae8:	ed31 7b02 	vldmdb	r1!, {d7}
 800aaec:	3801      	subs	r0, #1
 800aaee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800aaf2:	e7c2      	b.n	800aa7a <__kernel_rem_pio2+0x432>
 800aaf4:	eeb0 7b46 	vmov.f64	d7, d6
 800aaf8:	e7c6      	b.n	800aa88 <__kernel_rem_pio2+0x440>
 800aafa:	ecb0 6b02 	vldmia	r0!, {d6}
 800aafe:	3101      	adds	r1, #1
 800ab00:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ab04:	e7c8      	b.n	800aa98 <__kernel_rem_pio2+0x450>
 800ab06:	ed10 7b04 	vldr	d7, [r0, #-16]
 800ab0a:	ed30 5b02 	vldmdb	r0!, {d5}
 800ab0e:	3c01      	subs	r4, #1
 800ab10:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ab14:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ab18:	ed00 6b02 	vstr	d6, [r0, #-8]
 800ab1c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ab20:	ed80 7b00 	vstr	d7, [r0]
 800ab24:	e78b      	b.n	800aa3e <__kernel_rem_pio2+0x3f6>
 800ab26:	ed10 7b04 	vldr	d7, [r0, #-16]
 800ab2a:	ed30 5b02 	vldmdb	r0!, {d5}
 800ab2e:	3c01      	subs	r4, #1
 800ab30:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ab34:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ab38:	ed00 6b02 	vstr	d6, [r0, #-8]
 800ab3c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ab40:	ed80 7b00 	vstr	d7, [r0]
 800ab44:	e77f      	b.n	800aa46 <__kernel_rem_pio2+0x3fe>
 800ab46:	ed31 6b02 	vldmdb	r1!, {d6}
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ab50:	e77d      	b.n	800aa4e <__kernel_rem_pio2+0x406>
 800ab52:	eeb1 5b45 	vneg.f64	d5, d5
 800ab56:	eeb1 6b46 	vneg.f64	d6, d6
 800ab5a:	ed86 5b00 	vstr	d5, [r6]
 800ab5e:	eeb1 7b47 	vneg.f64	d7, d7
 800ab62:	ed86 6b02 	vstr	d6, [r6, #8]
 800ab66:	e77f      	b.n	800aa68 <__kernel_rem_pio2+0x420>
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	41700000 	.word	0x41700000
 800ab70:	00000000 	.word	0x00000000
 800ab74:	3e700000 	.word	0x3e700000
	...

0800ab80 <__kernel_sin>:
 800ab80:	ee10 3a90 	vmov	r3, s1
 800ab84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab88:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ab8c:	da04      	bge.n	800ab98 <__kernel_sin+0x18>
 800ab8e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ab92:	ee17 3a90 	vmov	r3, s15
 800ab96:	b35b      	cbz	r3, 800abf0 <__kernel_sin+0x70>
 800ab98:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ab9c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800aba0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800abf8 <__kernel_sin+0x78>
 800aba4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ac00 <__kernel_sin+0x80>
 800aba8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800abac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ac08 <__kernel_sin+0x88>
 800abb0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800abb4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ac10 <__kernel_sin+0x90>
 800abb8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800abbc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ac18 <__kernel_sin+0x98>
 800abc0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800abc4:	b930      	cbnz	r0, 800abd4 <__kernel_sin+0x54>
 800abc6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ac20 <__kernel_sin+0xa0>
 800abca:	eea6 4b07 	vfma.f64	d4, d6, d7
 800abce:	eea4 0b05 	vfma.f64	d0, d4, d5
 800abd2:	4770      	bx	lr
 800abd4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800abd8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800abdc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800abe0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800abe4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ac28 <__kernel_sin+0xa8>
 800abe8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800abec:	ee30 0b41 	vsub.f64	d0, d0, d1
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	f3af 8000 	nop.w
 800abf8:	5acfd57c 	.word	0x5acfd57c
 800abfc:	3de5d93a 	.word	0x3de5d93a
 800ac00:	8a2b9ceb 	.word	0x8a2b9ceb
 800ac04:	be5ae5e6 	.word	0xbe5ae5e6
 800ac08:	57b1fe7d 	.word	0x57b1fe7d
 800ac0c:	3ec71de3 	.word	0x3ec71de3
 800ac10:	19c161d5 	.word	0x19c161d5
 800ac14:	bf2a01a0 	.word	0xbf2a01a0
 800ac18:	1110f8a6 	.word	0x1110f8a6
 800ac1c:	3f811111 	.word	0x3f811111
 800ac20:	55555549 	.word	0x55555549
 800ac24:	bfc55555 	.word	0xbfc55555
 800ac28:	55555549 	.word	0x55555549
 800ac2c:	3fc55555 	.word	0x3fc55555

0800ac30 <fabs>:
 800ac30:	ec51 0b10 	vmov	r0, r1, d0
 800ac34:	ee10 2a10 	vmov	r2, s0
 800ac38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac3c:	ec43 2b10 	vmov	d0, r2, r3
 800ac40:	4770      	bx	lr
 800ac42:	0000      	movs	r0, r0
 800ac44:	0000      	movs	r0, r0
	...

0800ac48 <floor>:
 800ac48:	ee10 1a90 	vmov	r1, s1
 800ac4c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac50:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ac54:	2b13      	cmp	r3, #19
 800ac56:	b530      	push	{r4, r5, lr}
 800ac58:	ee10 0a10 	vmov	r0, s0
 800ac5c:	ee10 5a10 	vmov	r5, s0
 800ac60:	dc33      	bgt.n	800acca <floor+0x82>
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	da17      	bge.n	800ac96 <floor+0x4e>
 800ac66:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ad28 <floor+0xe0>
 800ac6a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ac6e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac76:	dd09      	ble.n	800ac8c <floor+0x44>
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	da50      	bge.n	800ad1e <floor+0xd6>
 800ac7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac80:	4a2b      	ldr	r2, [pc, #172]	; (800ad30 <floor+0xe8>)
 800ac82:	4303      	orrs	r3, r0
 800ac84:	2000      	movs	r0, #0
 800ac86:	4283      	cmp	r3, r0
 800ac88:	bf18      	it	ne
 800ac8a:	4611      	movne	r1, r2
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4602      	mov	r2, r0
 800ac90:	ec43 2b10 	vmov	d0, r2, r3
 800ac94:	e020      	b.n	800acd8 <floor+0x90>
 800ac96:	4a27      	ldr	r2, [pc, #156]	; (800ad34 <floor+0xec>)
 800ac98:	411a      	asrs	r2, r3
 800ac9a:	ea01 0402 	and.w	r4, r1, r2
 800ac9e:	4304      	orrs	r4, r0
 800aca0:	d01a      	beq.n	800acd8 <floor+0x90>
 800aca2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ad28 <floor+0xe0>
 800aca6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800acaa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800acae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb2:	ddeb      	ble.n	800ac8c <floor+0x44>
 800acb4:	2900      	cmp	r1, #0
 800acb6:	bfbe      	ittt	lt
 800acb8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800acbc:	fa40 f303 	asrlt.w	r3, r0, r3
 800acc0:	18c9      	addlt	r1, r1, r3
 800acc2:	ea21 0102 	bic.w	r1, r1, r2
 800acc6:	2000      	movs	r0, #0
 800acc8:	e7e0      	b.n	800ac8c <floor+0x44>
 800acca:	2b33      	cmp	r3, #51	; 0x33
 800accc:	dd05      	ble.n	800acda <floor+0x92>
 800acce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acd2:	d101      	bne.n	800acd8 <floor+0x90>
 800acd4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800acd8:	bd30      	pop	{r4, r5, pc}
 800acda:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800acde:	f04f 32ff 	mov.w	r2, #4294967295
 800ace2:	40e2      	lsrs	r2, r4
 800ace4:	4202      	tst	r2, r0
 800ace6:	d0f7      	beq.n	800acd8 <floor+0x90>
 800ace8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ad28 <floor+0xe0>
 800acec:	ee30 0b07 	vadd.f64	d0, d0, d7
 800acf0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800acf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf8:	ddc8      	ble.n	800ac8c <floor+0x44>
 800acfa:	2900      	cmp	r1, #0
 800acfc:	da02      	bge.n	800ad04 <floor+0xbc>
 800acfe:	2b14      	cmp	r3, #20
 800ad00:	d103      	bne.n	800ad0a <floor+0xc2>
 800ad02:	3101      	adds	r1, #1
 800ad04:	ea20 0002 	bic.w	r0, r0, r2
 800ad08:	e7c0      	b.n	800ac8c <floor+0x44>
 800ad0a:	2401      	movs	r4, #1
 800ad0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ad10:	fa04 f303 	lsl.w	r3, r4, r3
 800ad14:	4418      	add	r0, r3
 800ad16:	42a8      	cmp	r0, r5
 800ad18:	bf38      	it	cc
 800ad1a:	1909      	addcc	r1, r1, r4
 800ad1c:	e7f2      	b.n	800ad04 <floor+0xbc>
 800ad1e:	2000      	movs	r0, #0
 800ad20:	4601      	mov	r1, r0
 800ad22:	e7b3      	b.n	800ac8c <floor+0x44>
 800ad24:	f3af 8000 	nop.w
 800ad28:	8800759c 	.word	0x8800759c
 800ad2c:	7e37e43c 	.word	0x7e37e43c
 800ad30:	bff00000 	.word	0xbff00000
 800ad34:	000fffff 	.word	0x000fffff

0800ad38 <scalbn>:
 800ad38:	b500      	push	{lr}
 800ad3a:	ed2d 8b02 	vpush	{d8}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	ed8d 0b00 	vstr	d0, [sp]
 800ad44:	9b01      	ldr	r3, [sp, #4]
 800ad46:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ad4a:	b9a2      	cbnz	r2, 800ad76 <scalbn+0x3e>
 800ad4c:	9a00      	ldr	r2, [sp, #0]
 800ad4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad52:	4313      	orrs	r3, r2
 800ad54:	d03a      	beq.n	800adcc <scalbn+0x94>
 800ad56:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ae10 <scalbn+0xd8>
 800ad5a:	4b35      	ldr	r3, [pc, #212]	; (800ae30 <scalbn+0xf8>)
 800ad5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ad60:	4298      	cmp	r0, r3
 800ad62:	ed8d 7b00 	vstr	d7, [sp]
 800ad66:	da11      	bge.n	800ad8c <scalbn+0x54>
 800ad68:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800ae18 <scalbn+0xe0>
 800ad6c:	ed9d 6b00 	vldr	d6, [sp]
 800ad70:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad74:	e007      	b.n	800ad86 <scalbn+0x4e>
 800ad76:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ad7a:	428a      	cmp	r2, r1
 800ad7c:	d10a      	bne.n	800ad94 <scalbn+0x5c>
 800ad7e:	ed9d 7b00 	vldr	d7, [sp]
 800ad82:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ad86:	ed8d 7b00 	vstr	d7, [sp]
 800ad8a:	e01f      	b.n	800adcc <scalbn+0x94>
 800ad8c:	9b01      	ldr	r3, [sp, #4]
 800ad8e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ad92:	3a36      	subs	r2, #54	; 0x36
 800ad94:	4402      	add	r2, r0
 800ad96:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ad9a:	428a      	cmp	r2, r1
 800ad9c:	dd0a      	ble.n	800adb4 <scalbn+0x7c>
 800ad9e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800ae20 <scalbn+0xe8>
 800ada2:	eeb0 0b48 	vmov.f64	d0, d8
 800ada6:	ed9d 1b00 	vldr	d1, [sp]
 800adaa:	f000 f843 	bl	800ae34 <copysign>
 800adae:	ee20 7b08 	vmul.f64	d7, d0, d8
 800adb2:	e7e8      	b.n	800ad86 <scalbn+0x4e>
 800adb4:	2a00      	cmp	r2, #0
 800adb6:	dd10      	ble.n	800adda <scalbn+0xa2>
 800adb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800adc4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800adc8:	e9cd 0100 	strd	r0, r1, [sp]
 800adcc:	ed9d 0b00 	vldr	d0, [sp]
 800add0:	b003      	add	sp, #12
 800add2:	ecbd 8b02 	vpop	{d8}
 800add6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adda:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800adde:	da06      	bge.n	800adee <scalbn+0xb6>
 800ade0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ade4:	4298      	cmp	r0, r3
 800ade6:	dcda      	bgt.n	800ad9e <scalbn+0x66>
 800ade8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800ae18 <scalbn+0xe0>
 800adec:	e7d9      	b.n	800ada2 <scalbn+0x6a>
 800adee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800adf2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adf6:	3236      	adds	r2, #54	; 0x36
 800adf8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800adfc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ae00:	ec41 0b17 	vmov	d7, r0, r1
 800ae04:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800ae28 <scalbn+0xf0>
 800ae08:	e7b2      	b.n	800ad70 <scalbn+0x38>
 800ae0a:	bf00      	nop
 800ae0c:	f3af 8000 	nop.w
 800ae10:	00000000 	.word	0x00000000
 800ae14:	43500000 	.word	0x43500000
 800ae18:	c2f8f359 	.word	0xc2f8f359
 800ae1c:	01a56e1f 	.word	0x01a56e1f
 800ae20:	8800759c 	.word	0x8800759c
 800ae24:	7e37e43c 	.word	0x7e37e43c
 800ae28:	00000000 	.word	0x00000000
 800ae2c:	3c900000 	.word	0x3c900000
 800ae30:	ffff3cb0 	.word	0xffff3cb0

0800ae34 <copysign>:
 800ae34:	ec51 0b10 	vmov	r0, r1, d0
 800ae38:	ee11 0a90 	vmov	r0, s3
 800ae3c:	ee10 2a10 	vmov	r2, s0
 800ae40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ae48:	ea41 0300 	orr.w	r3, r1, r0
 800ae4c:	ec43 2b10 	vmov	d0, r2, r3
 800ae50:	4770      	bx	lr
	...

0800ae54 <_init>:
 800ae54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae56:	bf00      	nop
 800ae58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae5a:	bc08      	pop	{r3}
 800ae5c:	469e      	mov	lr, r3
 800ae5e:	4770      	bx	lr

0800ae60 <_fini>:
 800ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae62:	bf00      	nop
 800ae64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae66:	bc08      	pop	{r3}
 800ae68:	469e      	mov	lr, r3
 800ae6a:	4770      	bx	lr
