
testdac1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005f80  08005f80  00015f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08006178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000290  20000010  08006188  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002a0  08006188  000202a0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018bcf  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000281d  00000000  00000000  00038c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ec8  00000000  00000000  0003b430  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000dd0  00000000  00000000  0003c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038caf  00000000  00000000  0003d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000dca6  00000000  00000000  00075d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0017bb73  00000000  00000000  00083a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001ff590  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003f98  00000000  00000000  001ff60c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005f64 	.word	0x08005f64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08005f64 	.word	0x08005f64

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	2b07      	cmp	r3, #7
 800033c:	d907      	bls.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000
 800040c:	00000000 	.word	0x00000000

08000410 <get_sineval>:

#define PI 3.1415926
int i=0;

void get_sineval ()
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	for (i=0;i<100;i++)
 8000414:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <get_sineval+0xc0>)
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	e040      	b.n	800049e <get_sineval+0x8e>
	{
		sin_val[i] = ((sin(i*2*PI/100) + 1)*((0xFFF+1)/2));
 800041c:	4b2c      	ldr	r3, [pc, #176]	; (80004d0 <get_sineval+0xc0>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	ee07 3a90 	vmov	s15, r3
 8000426:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800042a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80004b0 <get_sineval+0xa0>
 800042e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000432:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80004b8 <get_sineval+0xa8>
 8000436:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800043a:	eeb0 0b45 	vmov.f64	d0, d5
 800043e:	f004 ffa7 	bl	8005390 <sin>
 8000442:	eeb0 6b40 	vmov.f64	d6, d0
 8000446:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800044a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800044e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80004c0 <get_sineval+0xb0>
 8000452:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000456:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <get_sineval+0xc0>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800045e:	ee17 1a90 	vmov	r1, s15
 8000462:	4a1c      	ldr	r2, [pc, #112]	; (80004d4 <get_sineval+0xc4>)
 8000464:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sin_val[i]=sin_val[i]*0.1; //fattore di scala
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <get_sineval+0xc0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a19      	ldr	r2, [pc, #100]	; (80004d4 <get_sineval+0xc4>)
 800046e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000472:	ee07 3a90 	vmov	s15, r3
 8000476:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800047a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80004c8 <get_sineval+0xb8>
 800047e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <get_sineval+0xc0>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800048a:	ee17 1a90 	vmov	r1, s15
 800048e:	4a11      	ldr	r2, [pc, #68]	; (80004d4 <get_sineval+0xc4>)
 8000490:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<100;i++)
 8000494:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <get_sineval+0xc0>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	3301      	adds	r3, #1
 800049a:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <get_sineval+0xc0>)
 800049c:	6013      	str	r3, [r2, #0]
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <get_sineval+0xc0>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b63      	cmp	r3, #99	; 0x63
 80004a4:	ddba      	ble.n	800041c <get_sineval+0xc>
		//sin_val[i] = ((sin(i*2*PI/100) + 1)*(100)); //il secondo elemento è l'ampiezza *** attenzione, essendo valori interi, se <0 la sin appare tosata
	}
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	f3af 8000 	nop.w
 80004b0:	4d12d84a 	.word	0x4d12d84a
 80004b4:	400921fb 	.word	0x400921fb
 80004b8:	00000000 	.word	0x00000000
 80004bc:	40590000 	.word	0x40590000
 80004c0:	00000000 	.word	0x00000000
 80004c4:	40a00000 	.word	0x40a00000
 80004c8:	9999999a 	.word	0x9999999a
 80004cc:	3fb99999 	.word	0x3fb99999
 80004d0:	2000002c 	.word	0x2000002c
 80004d4:	200000bc 	.word	0x200000bc

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80004de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e2:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004e4:	bf00      	nop
 80004e6:	4b3f      	ldr	r3, [pc, #252]	; (80005e4 <main+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d004      	beq.n	80004fc <main+0x24>
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	1e5a      	subs	r2, r3, #1
 80004f6:	60fa      	str	r2, [r7, #12]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	dcf4      	bgt.n	80004e6 <main+0xe>
  if ( timeout < 0 )
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	da01      	bge.n	8000506 <main+0x2e>
  {
  Error_Handler();
 8000502:	f000 fa6d 	bl	80009e0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fb99 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f875 	bl	80005f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800050e:	4b35      	ldr	r3, [pc, #212]	; (80005e4 <main+0x10c>)
 8000510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000514:	4a33      	ldr	r2, [pc, #204]	; (80005e4 <main+0x10c>)
 8000516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800051a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800051e:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <main+0x10c>)
 8000520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800052c:	2000      	movs	r0, #0
 800052e:	f003 fabb 	bl	8003aa8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000532:	2100      	movs	r1, #0
 8000534:	2000      	movs	r0, #0
 8000536:	f003 fad1 	bl	8003adc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800053a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800053e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000540:	bf00      	nop
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <main+0x10c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800054a:	2b00      	cmp	r3, #0
 800054c:	d104      	bne.n	8000558 <main+0x80>
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	60fa      	str	r2, [r7, #12]
 8000554:	2b00      	cmp	r3, #0
 8000556:	dcf4      	bgt.n	8000542 <main+0x6a>
if ( timeout < 0 )
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2b00      	cmp	r3, #0
 800055c:	da01      	bge.n	8000562 <main+0x8a>
{
Error_Handler();
 800055e:	f000 fa3f 	bl	80009e0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f963 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 8000566:	f000 f941 	bl	80007ec <MX_DMA_Init>
  MX_DAC1_Init();
 800056a:	f000 f8bf 	bl	80006ec <MX_DAC1_Init>
  MX_TIM2_Init();
 800056e:	f000 f8ef 	bl	8000750 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Avvio il DAC



 HAL_TIM_Base_Start(&htim2);
 8000572:	481d      	ldr	r0, [pc, #116]	; (80005e8 <main+0x110>)
 8000574:	f004 fab0 	bl	8004ad8 <HAL_TIM_Base_Start>

 get_sineval();
 8000578:	f7ff ff4a 	bl	8000410 <get_sineval>

 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 800057c:	2300      	movs	r3, #0
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <main+0x114>)
 8000584:	2100      	movs	r1, #0
 8000586:	481a      	ldr	r0, [pc, #104]	; (80005f0 <main+0x118>)
 8000588:	f000 fd4a 	bl	8001020 <HAL_DAC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
int cont=0;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
int j=0;
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
	  //var = value*(0xfff+1)/3.3;
		for (i=0;i<100;i++)
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <main+0x11c>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	e01a      	b.n	80005d2 <main+0xfa>
           VEF+ is the input voltage reference (refer to the device datasheet)
         e.g. To set DAC_OUT1 to 0.7V, use
           Assuming that VREF+ = 3.3V, DAC_OUT1 = (3.3 * 868) / 4095 = 0.7V

		   */
      		 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sin_val[i]);
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <main+0x11c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a12      	ldr	r2, [pc, #72]	; (80005ec <main+0x114>)
 80005a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	4811      	ldr	r0, [pc, #68]	; (80005f0 <main+0x118>)
 80005ac:	f000 fdf6 	bl	800119c <HAL_DAC_SetValue>
     		for (j=0;j<18;j++)  //ritardo sintetico
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	e005      	b.n	80005c2 <main+0xea>
     		{
     			cont++;
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	3301      	adds	r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
     		for (j=0;j<18;j++)  //ritardo sintetico
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b11      	cmp	r3, #17
 80005c6:	ddf6      	ble.n	80005b6 <main+0xde>
		for (i=0;i<100;i++)
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <main+0x11c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <main+0x11c>)
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <main+0x11c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b63      	cmp	r3, #99	; 0x63
 80005d8:	dde0      	ble.n	800059c <main+0xc4>
     		}
      		 //HAL_Delay(0.1); //min 0.5

		}
		  cont=cont-1;
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	3b01      	subs	r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
  {
 80005e0:	e7d4      	b.n	800058c <main+0xb4>
 80005e2:	bf00      	nop
 80005e4:	58024400 	.word	0x58024400
 80005e8:	20000250 	.word	0x20000250
 80005ec:	200000bc 	.word	0x200000bc
 80005f0:	20000030 	.word	0x20000030
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09c      	sub	sp, #112	; 0x70
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	224c      	movs	r2, #76	; 0x4c
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 feb8 	bl	800537c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2220      	movs	r2, #32
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f004 feb2 	bl	800537c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000618:	2004      	movs	r0, #4
 800061a:	f003 fa73 	bl	8003b04 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemClock_Config+0xec>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <SystemClock_Config+0xec>)
 8000628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <SystemClock_Config+0xec>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemClock_Config+0xf0>)
 800063a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063c:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <SystemClock_Config+0xf0>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xf0>)
 8000646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000650:	bf00      	nop
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <SystemClock_Config+0xec>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800065a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065e:	d1f8      	bne.n	8000652 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000676:	2378      	movs	r3, #120	; 0x78
 8000678:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000686:	230c      	movs	r3, #12
 8000688:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800068a:	2300      	movs	r3, #0
 800068c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000696:	4618      	mov	r0, r3
 8000698:	f003 fa8e 	bl	8003bb8 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a2:	f000 f99d 	bl	80009e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	233f      	movs	r3, #63	; 0x3f
 80006a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006b2:	2308      	movs	r3, #8
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006b6:	2340      	movs	r3, #64	; 0x40
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006c4:	2340      	movs	r3, #64	; 0x40
 80006c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2104      	movs	r1, #4
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fe83 	bl	80043d8 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006d8:	f000 f982 	bl	80009e0 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3770      	adds	r7, #112	; 0x70
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58024800 	.word	0x58024800
 80006e8:	58000400 	.word	0x58000400

080006ec <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2224      	movs	r2, #36	; 0x24
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 fe3f 	bl	800537c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_DAC1_Init+0x60>)
 8000702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000706:	f000 fc68 	bl	8000fda <HAL_DAC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000710:	f000 f966 	bl	80009e0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000718:	230a      	movs	r3, #10
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000720:	2301      	movs	r3, #1
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_DAC1_Init+0x5c>)
 8000730:	f000 fd78 	bl	8001224 <HAL_DAC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f951 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000030 	.word	0x20000030
 800074c:	40007400 	.word	0x40007400

08000750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000774:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000778:	2259      	movs	r2, #89	; 0x59
 800077a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM2_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000784:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_TIM2_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000796:	4814      	ldr	r0, [pc, #80]	; (80007e8 <MX_TIM2_Init+0x98>)
 8000798:	f004 f946 	bl	8004a28 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007a2:	f000 f91d 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_TIM2_Init+0x98>)
 80007b4:	f004 fade 	bl	8004d74 <HAL_TIM_ConfigClockSource>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007be:	f000 f90f 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007c2:	2320      	movs	r3, #32
 80007c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_TIM2_Init+0x98>)
 80007d0:	f004 fd0a 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007da:	f000 f901 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000250 	.word	0x20000250

080007ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA_Init+0x3c>)
 80007f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <MX_DMA_Init+0x3c>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_DMA_Init+0x3c>)
 8000804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2010      	movs	r0, #16
 8000816:	f000 fbac 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800081a:	2010      	movs	r0, #16
 800081c:	f000 fbc3 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	58024400 	.word	0x58024400

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b61      	ldr	r3, [pc, #388]	; (80009c8 <MX_GPIO_Init+0x19c>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	4a5f      	ldr	r2, [pc, #380]	; (80009c8 <MX_GPIO_Init+0x19c>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000852:	4b5d      	ldr	r3, [pc, #372]	; (80009c8 <MX_GPIO_Init+0x19c>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000860:	4b59      	ldr	r3, [pc, #356]	; (80009c8 <MX_GPIO_Init+0x19c>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	4a58      	ldr	r2, [pc, #352]	; (80009c8 <MX_GPIO_Init+0x19c>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000870:	4b55      	ldr	r3, [pc, #340]	; (80009c8 <MX_GPIO_Init+0x19c>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <MX_GPIO_Init+0x19c>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	4a50      	ldr	r2, [pc, #320]	; (80009c8 <MX_GPIO_Init+0x19c>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088e:	4b4e      	ldr	r3, [pc, #312]	; (80009c8 <MX_GPIO_Init+0x19c>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b4a      	ldr	r3, [pc, #296]	; (80009c8 <MX_GPIO_Init+0x19c>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	4a49      	ldr	r2, [pc, #292]	; (80009c8 <MX_GPIO_Init+0x19c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ac:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <MX_GPIO_Init+0x19c>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	4b43      	ldr	r3, [pc, #268]	; (80009c8 <MX_GPIO_Init+0x19c>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	4a41      	ldr	r2, [pc, #260]	; (80009c8 <MX_GPIO_Init+0x19c>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ca:	4b3f      	ldr	r3, [pc, #252]	; (80009c8 <MX_GPIO_Init+0x19c>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d8:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_GPIO_Init+0x19c>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	4a3a      	ldr	r2, [pc, #232]	; (80009c8 <MX_GPIO_Init+0x19c>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e8:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x19c>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008f6:	2332      	movs	r3, #50	; 0x32
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000906:	230b      	movs	r3, #11
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	482e      	ldr	r0, [pc, #184]	; (80009cc <MX_GPIO_Init+0x1a0>)
 8000912:	f002 ff19 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000916:	2386      	movs	r3, #134	; 0x86
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000926:	230b      	movs	r3, #11
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4827      	ldr	r0, [pc, #156]	; (80009d0 <MX_GPIO_Init+0x1a4>)
 8000932:	f002 ff09 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000948:	230b      	movs	r3, #11
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4820      	ldr	r0, [pc, #128]	; (80009d4 <MX_GPIO_Init+0x1a8>)
 8000954:	f002 fef8 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000958:	f44f 7340 	mov.w	r3, #768	; 0x300
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800096a:	2307      	movs	r3, #7
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4818      	ldr	r0, [pc, #96]	; (80009d8 <MX_GPIO_Init+0x1ac>)
 8000976:	f002 fee7 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800097a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800098c:	230a      	movs	r3, #10
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <MX_GPIO_Init+0x1a4>)
 8000998:	f002 fed6 	bl	8003748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800099c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ae:	230b      	movs	r3, #11
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_GPIO_Init+0x1b0>)
 80009ba:	f002 fec5 	bl	8003748 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58020800 	.word	0x58020800
 80009d0:	58020000 	.word	0x58020000
 80009d4:	58020400 	.word	0x58020400
 80009d8:	58020c00 	.word	0x58020c00
 80009dc:	58021800 	.word	0x58021800

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_MspInit+0x30>)
 80009f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009fc:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_MspInit+0x30>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_MspInit+0x30>)
 8000a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	58024400 	.word	0x58024400

08000a24 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a30      	ldr	r2, [pc, #192]	; (8000b04 <HAL_DAC_MspInit+0xe0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d159      	bne.n	8000afa <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_DAC_MspInit+0xe4>)
 8000a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a4c:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <HAL_DAC_MspInit+0xe4>)
 8000a4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <HAL_DAC_MspInit+0xe4>)
 8000a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <HAL_DAC_MspInit+0xe4>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	4a27      	ldr	r2, [pc, #156]	; (8000b08 <HAL_DAC_MspInit+0xe4>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_DAC_MspInit+0xe4>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a82:	2310      	movs	r3, #16
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a86:	2303      	movs	r3, #3
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	481d      	ldr	r0, [pc, #116]	; (8000b0c <HAL_DAC_MspInit+0xe8>)
 8000a96:	f002 fe57 	bl	8003748 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_DAC_MspInit+0xf0>)
 8000a9e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000aa2:	2243      	movs	r2, #67	; 0x43
 8000aa4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000aa8:	2240      	movs	r2, #64	; 0x40
 8000aaa:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000abc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ac0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000ac4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad0:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000ade:	480c      	ldr	r0, [pc, #48]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000ae0:	f000 fd5a 	bl	8001598 <HAL_DMA_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000aea:	f7ff ff79 	bl	80009e0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_DAC_MspInit+0xec>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40007400 	.word	0x40007400
 8000b08:	58024400 	.word	0x58024400
 8000b0c:	58020000 	.word	0x58020000
 8000b10:	20000044 	.word	0x20000044
 8000b14:	40020088 	.word	0x40020088

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b28:	d116      	bne.n	8000b58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_TIM_Base_MspInit+0x48>)
 8000b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_TIM_Base_MspInit+0x48>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_TIM_Base_MspInit+0x48>)
 8000b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	201c      	movs	r0, #28
 8000b4e:	f000 fa10 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b52:	201c      	movs	r0, #28
 8000b54:	f000 fa27 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58024400 	.word	0x58024400

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f8b2 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <DMA1_Stream5_IRQHandler+0x10>)
 8000bc6:	f001 faad 	bl	8002124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000044 	.word	0x20000044

08000bd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM2_IRQHandler+0x10>)
 8000bda:	f003 ffab 	bl	8004b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000250 	.word	0x20000250

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bec:	f7ff fb74 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bf2:	e003      	b.n	8000bfc <LoopCopyDataInit>

08000bf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000bf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bfa:	3104      	adds	r1, #4

08000bfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bfc:	480a      	ldr	r0, [pc, #40]	; (8000c28 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000c00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c04:	d3f6      	bcc.n	8000bf4 <CopyDataInit>
  ldr  r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000c08:	e002      	b.n	8000c10 <LoopFillZerobss>

08000c0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c0c:	f842 3b04 	str.w	r3, [r2], #4

08000c10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000c12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c14:	d3f9      	bcc.n	8000c0a <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f004 fb8d 	bl	8005334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fc5d 	bl	80004d8 <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c24:	08006178 	.word	0x08006178
  ldr  r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c2c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c30:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c34:	200002a0 	.word	0x200002a0

08000c38 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC3_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f98a 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c48:	f003 fd7c 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_Init+0x68>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <HAL_Init+0x6c>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	f003 031f 	and.w	r3, r3, #31
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_Init+0x68>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_Init+0x6c>)
 8000c70:	5cd3      	ldrb	r3, [r2, r3]
 8000c72:	f003 031f 	and.w	r3, r3, #31
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_Init+0x70>)
 8000c7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_Init+0x74>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 f814 	bl	8000cb4 <HAL_InitTick>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e002      	b.n	8000c9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c96:	f7ff feab 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	08005f80 	.word	0x08005f80
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_InitTick+0x60>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e021      	b.n	8000d0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <HAL_InitTick+0x64>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_InitTick+0x60>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f96f 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f939 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x68>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	2000000c 	.word	0x2000000c
 8000d44:	2000029c 	.word	0x2000029c

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000029c 	.word	0x2000029c

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff ffee 	bl	8000d48 <HAL_GetTick>
 8000d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d78:	d005      	beq.n	8000d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_Delay+0x40>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4413      	add	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d86:	bf00      	nop
 8000d88:	f7ff ffde 	bl	8000d48 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d8f7      	bhi.n	8000d88 <HAL_Delay+0x28>
  {
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000000c 	.word	0x2000000c

08000da4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetREVID+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	0c1b      	lsrs	r3, r3, #16
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	5c001000 	.word	0x5c001000

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <__NVIC_SetPriorityGrouping+0x40>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x40>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00
 8000e00:	05fa0000 	.word	0x05fa0000

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff29 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff40 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff90 	bl	8000eb0 <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5f 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff33 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa4 	bl	8000f18 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e014      	b.n	8001016 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	791b      	ldrb	r3, [r3, #4]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d105      	bne.n	8001002 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff fd11 	bl	8000a24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2202      	movs	r2, #2
 8001006:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	795b      	ldrb	r3, [r3, #5]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d101      	bne.n	800103e <HAL_DAC_Start_DMA+0x1e>
 800103a:	2302      	movs	r3, #2
 800103c:	e09e      	b.n	800117c <HAL_DAC_Start_DMA+0x15c>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2201      	movs	r2, #1
 8001042:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2202      	movs	r2, #2
 8001048:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d12a      	bne.n	80010a6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <HAL_DAC_Start_DMA+0x164>)
 8001056:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a4a      	ldr	r2, [pc, #296]	; (8001188 <HAL_DAC_Start_DMA+0x168>)
 800105e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a49      	ldr	r2, [pc, #292]	; (800118c <HAL_DAC_Start_DMA+0x16c>)
 8001066:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001076:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d009      	beq.n	8001092 <HAL_DAC_Start_DMA+0x72>
 800107e:	2b08      	cmp	r3, #8
 8001080:	d00c      	beq.n	800109c <HAL_DAC_Start_DMA+0x7c>
 8001082:	2b00      	cmp	r3, #0
 8001084:	d000      	beq.n	8001088 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001086:	e039      	b.n	80010fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3308      	adds	r3, #8
 800108e:	613b      	str	r3, [r7, #16]
        break;
 8001090:	e034      	b.n	80010fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	330c      	adds	r3, #12
 8001098:	613b      	str	r3, [r7, #16]
        break;
 800109a:	e02f      	b.n	80010fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3310      	adds	r3, #16
 80010a2:	613b      	str	r3, [r7, #16]
        break;
 80010a4:	e02a      	b.n	80010fc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	4a39      	ldr	r2, [pc, #228]	; (8001190 <HAL_DAC_Start_DMA+0x170>)
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	4a38      	ldr	r2, [pc, #224]	; (8001194 <HAL_DAC_Start_DMA+0x174>)
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	4a37      	ldr	r2, [pc, #220]	; (8001198 <HAL_DAC_Start_DMA+0x178>)
 80010bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010cc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d009      	beq.n	80010e8 <HAL_DAC_Start_DMA+0xc8>
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d00c      	beq.n	80010f2 <HAL_DAC_Start_DMA+0xd2>
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d000      	beq.n	80010de <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80010dc:	e00e      	b.n	80010fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3314      	adds	r3, #20
 80010e4:	613b      	str	r3, [r7, #16]
        break;
 80010e6:	e009      	b.n	80010fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3318      	adds	r3, #24
 80010ee:	613b      	str	r3, [r7, #16]
        break;
 80010f0:	e004      	b.n	80010fc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	331c      	adds	r3, #28
 80010f8:	613b      	str	r3, [r7, #16]
        break;
 80010fa:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d111      	bne.n	8001126 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001110:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6898      	ldr	r0, [r3, #8]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	f000 fd98 	bl	8001c50 <HAL_DMA_Start_IT>
 8001120:	4603      	mov	r3, r0
 8001122:	75fb      	strb	r3, [r7, #23]
 8001124:	e010      	b.n	8001148 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001134:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	68d8      	ldr	r0, [r3, #12]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	f000 fd86 	bl	8001c50 <HAL_DMA_Start_IT>
 8001144:	4603      	mov	r3, r0
 8001146:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10c      	bne.n	800116e <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2201      	movs	r2, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	e005      	b.n	800117a <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	f043 0204 	orr.w	r2, r3, #4
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800117a:	7dfb      	ldrb	r3, [r7, #23]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	08001485 	.word	0x08001485
 8001188:	080014a7 	.word	0x080014a7
 800118c:	080014c3 	.word	0x080014c3
 8001190:	0800152d 	.word	0x0800152d
 8001194:	0800154f 	.word	0x0800154f
 8001198:	0800156b 	.word	0x0800156b

0800119c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d105      	bne.n	80011c6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	3308      	adds	r3, #8
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e004      	b.n	80011d0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	3314      	adds	r3, #20
 80011ce:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	461a      	mov	r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	795b      	ldrb	r3, [r3, #5]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_DAC_ConfigChannel+0x18>
 8001238:	2302      	movs	r3, #2
 800123a:	e11d      	b.n	8001478 <HAL_DAC_ConfigChannel+0x254>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2201      	movs	r2, #1
 8001240:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2202      	movs	r2, #2
 8001246:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b04      	cmp	r3, #4
 800124e:	d174      	bne.n	800133a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001250:	f7ff fd7a 	bl	8000d48 <HAL_GetTick>
 8001254:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d134      	bne.n	80012c6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800125c:	e011      	b.n	8001282 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800125e:	f7ff fd73 	bl	8000d48 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d90a      	bls.n	8001282 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	f043 0208 	orr.w	r2, r3, #8
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2203      	movs	r2, #3
 800127c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e0fa      	b.n	8001478 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001288:	4b7d      	ldr	r3, [pc, #500]	; (8001480 <HAL_DAC_ConfigChannel+0x25c>)
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1e6      	bne.n	800125e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff fd65 	bl	8000d60 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	6992      	ldr	r2, [r2, #24]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
 80012a0:	e01e      	b.n	80012e0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012a2:	f7ff fd51 	bl	8000d48 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d90a      	bls.n	80012c6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	f043 0208 	orr.w	r2, r3, #8
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2203      	movs	r2, #3
 80012c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e0d8      	b.n	8001478 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	dbe8      	blt.n	80012a2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff fd45 	bl	8000d60 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	6992      	ldr	r2, [r2, #24]
 80012de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	ea02 0103 	and.w	r1, r2, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	409a      	lsls	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0310 	and.w	r3, r3, #16
 800131a:	21ff      	movs	r1, #255	; 0xff
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	ea02 0103 	and.w	r1, r2, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	6a1a      	ldr	r2, [r3, #32]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	409a      	lsls	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d11d      	bne.n	800137e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001348:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	221f      	movs	r2, #31
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	4013      	ands	r3, r2
 800135c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	4313      	orrs	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001384:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	2207      	movs	r2, #7
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	4013      	ands	r3, r2
 8001398:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d102      	bne.n	80013a8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e00f      	b.n	80013c8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d102      	bne.n	80013b6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	e008      	b.n	80013c8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80013be:	2301      	movs	r3, #1
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	e001      	b.n	80013c8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6819      	ldr	r1, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4013      	ands	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4313      	orrs	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	22c0      	movs	r2, #192	; 0xc0
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43da      	mvns	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	400a      	ands	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2201      	movs	r2, #1
 800146e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20008000 	.word	0x20008000

08001484 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001490:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff fea7 	bl	80011e6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2201      	movs	r2, #1
 800149c:	711a      	strb	r2, [r3, #4]
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f7ff fea0 	bl	80011fa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	f043 0204 	orr.w	r2, r3, #4
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff fe96 	bl	800120e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	711a      	strb	r2, [r3, #4]
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001538:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff ffd8 	bl	80014f0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2201      	movs	r2, #1
 8001544:	711a      	strb	r2, [r3, #4]
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f7ff ffd1 	bl	8001504 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	f043 0204 	orr.w	r2, r3, #4
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff ffc7 	bl	8001518 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2201      	movs	r2, #1
 800158e:	711a      	strb	r2, [r3, #4]
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fbd2 	bl	8000d48 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e316      	b.n	8001bde <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a66      	ldr	r2, [pc, #408]	; (8001750 <HAL_DMA_Init+0x1b8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d04a      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a65      	ldr	r2, [pc, #404]	; (8001754 <HAL_DMA_Init+0x1bc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d045      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a63      	ldr	r2, [pc, #396]	; (8001758 <HAL_DMA_Init+0x1c0>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d040      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a62      	ldr	r2, [pc, #392]	; (800175c <HAL_DMA_Init+0x1c4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d03b      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a60      	ldr	r2, [pc, #384]	; (8001760 <HAL_DMA_Init+0x1c8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d036      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a5f      	ldr	r2, [pc, #380]	; (8001764 <HAL_DMA_Init+0x1cc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d031      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a5d      	ldr	r2, [pc, #372]	; (8001768 <HAL_DMA_Init+0x1d0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d02c      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a5c      	ldr	r2, [pc, #368]	; (800176c <HAL_DMA_Init+0x1d4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d027      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a5a      	ldr	r2, [pc, #360]	; (8001770 <HAL_DMA_Init+0x1d8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d022      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a59      	ldr	r2, [pc, #356]	; (8001774 <HAL_DMA_Init+0x1dc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d01d      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a57      	ldr	r2, [pc, #348]	; (8001778 <HAL_DMA_Init+0x1e0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d018      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a56      	ldr	r2, [pc, #344]	; (800177c <HAL_DMA_Init+0x1e4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a54      	ldr	r2, [pc, #336]	; (8001780 <HAL_DMA_Init+0x1e8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00e      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a53      	ldr	r2, [pc, #332]	; (8001784 <HAL_DMA_Init+0x1ec>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d009      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a51      	ldr	r2, [pc, #324]	; (8001788 <HAL_DMA_Init+0x1f0>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d004      	beq.n	8001650 <HAL_DMA_Init+0xb8>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a50      	ldr	r2, [pc, #320]	; (800178c <HAL_DMA_Init+0x1f4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_DMA_Init+0xbc>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_DMA_Init+0xbe>
 8001654:	2300      	movs	r3, #0
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 813b 	beq.w	80018d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a37      	ldr	r2, [pc, #220]	; (8001750 <HAL_DMA_Init+0x1b8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d04a      	beq.n	800170c <HAL_DMA_Init+0x174>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a36      	ldr	r2, [pc, #216]	; (8001754 <HAL_DMA_Init+0x1bc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d045      	beq.n	800170c <HAL_DMA_Init+0x174>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a34      	ldr	r2, [pc, #208]	; (8001758 <HAL_DMA_Init+0x1c0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d040      	beq.n	800170c <HAL_DMA_Init+0x174>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a33      	ldr	r2, [pc, #204]	; (800175c <HAL_DMA_Init+0x1c4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d03b      	beq.n	800170c <HAL_DMA_Init+0x174>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a31      	ldr	r2, [pc, #196]	; (8001760 <HAL_DMA_Init+0x1c8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d036      	beq.n	800170c <HAL_DMA_Init+0x174>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a30      	ldr	r2, [pc, #192]	; (8001764 <HAL_DMA_Init+0x1cc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d031      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a2e      	ldr	r2, [pc, #184]	; (8001768 <HAL_DMA_Init+0x1d0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d02c      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a2d      	ldr	r2, [pc, #180]	; (800176c <HAL_DMA_Init+0x1d4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d027      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <HAL_DMA_Init+0x1d8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d022      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a2a      	ldr	r2, [pc, #168]	; (8001774 <HAL_DMA_Init+0x1dc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d01d      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_DMA_Init+0x1e0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d018      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a27      	ldr	r2, [pc, #156]	; (800177c <HAL_DMA_Init+0x1e4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a25      	ldr	r2, [pc, #148]	; (8001780 <HAL_DMA_Init+0x1e8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00e      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a24      	ldr	r2, [pc, #144]	; (8001784 <HAL_DMA_Init+0x1ec>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d009      	beq.n	800170c <HAL_DMA_Init+0x174>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a22      	ldr	r2, [pc, #136]	; (8001788 <HAL_DMA_Init+0x1f0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d004      	beq.n	800170c <HAL_DMA_Init+0x174>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a21      	ldr	r2, [pc, #132]	; (800178c <HAL_DMA_Init+0x1f4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d108      	bne.n	800171e <HAL_DMA_Init+0x186>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e007      	b.n	800172e <HAL_DMA_Init+0x196>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800172e:	e02f      	b.n	8001790 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001730:	f7ff fb0a 	bl	8000d48 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b05      	cmp	r3, #5
 800173c:	d928      	bls.n	8001790 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2220      	movs	r2, #32
 8001742:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e246      	b.n	8001bde <HAL_DMA_Init+0x646>
 8001750:	40020010 	.word	0x40020010
 8001754:	40020028 	.word	0x40020028
 8001758:	40020040 	.word	0x40020040
 800175c:	40020058 	.word	0x40020058
 8001760:	40020070 	.word	0x40020070
 8001764:	40020088 	.word	0x40020088
 8001768:	400200a0 	.word	0x400200a0
 800176c:	400200b8 	.word	0x400200b8
 8001770:	40020410 	.word	0x40020410
 8001774:	40020428 	.word	0x40020428
 8001778:	40020440 	.word	0x40020440
 800177c:	40020458 	.word	0x40020458
 8001780:	40020470 	.word	0x40020470
 8001784:	40020488 	.word	0x40020488
 8001788:	400204a0 	.word	0x400204a0
 800178c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1c8      	bne.n	8001730 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4b83      	ldr	r3, [pc, #524]	; (80019b8 <HAL_DMA_Init+0x420>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80017b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4313      	orrs	r3, r2
 80017da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d107      	bne.n	80017f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4313      	orrs	r3, r2
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80017f4:	4b71      	ldr	r3, [pc, #452]	; (80019bc <HAL_DMA_Init+0x424>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b71      	ldr	r3, [pc, #452]	; (80019c0 <HAL_DMA_Init+0x428>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001800:	d328      	bcc.n	8001854 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b28      	cmp	r3, #40	; 0x28
 8001808:	d903      	bls.n	8001812 <HAL_DMA_Init+0x27a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b2e      	cmp	r3, #46	; 0x2e
 8001810:	d917      	bls.n	8001842 <HAL_DMA_Init+0x2aa>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b3e      	cmp	r3, #62	; 0x3e
 8001818:	d903      	bls.n	8001822 <HAL_DMA_Init+0x28a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b42      	cmp	r3, #66	; 0x42
 8001820:	d90f      	bls.n	8001842 <HAL_DMA_Init+0x2aa>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b46      	cmp	r3, #70	; 0x46
 8001828:	d903      	bls.n	8001832 <HAL_DMA_Init+0x29a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b48      	cmp	r3, #72	; 0x48
 8001830:	d907      	bls.n	8001842 <HAL_DMA_Init+0x2aa>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b4e      	cmp	r3, #78	; 0x4e
 8001838:	d905      	bls.n	8001846 <HAL_DMA_Init+0x2ae>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b52      	cmp	r3, #82	; 0x52
 8001840:	d801      	bhi.n	8001846 <HAL_DMA_Init+0x2ae>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_DMA_Init+0x2b0>
 8001846:	2300      	movs	r3, #0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001852:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f023 0307 	bic.w	r3, r3, #7
 800186a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4313      	orrs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	2b04      	cmp	r3, #4
 800187c:	d117      	bne.n	80018ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4313      	orrs	r3, r2
 8001886:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00e      	beq.n	80018ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f001 fdcf 	bl	8003434 <DMA_CheckFifoParam>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e197      	b.n	8001bde <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f001 fd0a 	bl	80032d0 <DMA_CalcBaseAndBitshift>
 80018bc:	4603      	mov	r3, r0
 80018be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	223f      	movs	r2, #63	; 0x3f
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	e0cd      	b.n	8001a6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <HAL_DMA_Init+0x42c>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d022      	beq.n	8001922 <HAL_DMA_Init+0x38a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a39      	ldr	r2, [pc, #228]	; (80019c8 <HAL_DMA_Init+0x430>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01d      	beq.n	8001922 <HAL_DMA_Init+0x38a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a38      	ldr	r2, [pc, #224]	; (80019cc <HAL_DMA_Init+0x434>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d018      	beq.n	8001922 <HAL_DMA_Init+0x38a>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a36      	ldr	r2, [pc, #216]	; (80019d0 <HAL_DMA_Init+0x438>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_DMA_Init+0x38a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a35      	ldr	r2, [pc, #212]	; (80019d4 <HAL_DMA_Init+0x43c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00e      	beq.n	8001922 <HAL_DMA_Init+0x38a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a33      	ldr	r2, [pc, #204]	; (80019d8 <HAL_DMA_Init+0x440>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d009      	beq.n	8001922 <HAL_DMA_Init+0x38a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a32      	ldr	r2, [pc, #200]	; (80019dc <HAL_DMA_Init+0x444>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d004      	beq.n	8001922 <HAL_DMA_Init+0x38a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a30      	ldr	r2, [pc, #192]	; (80019e0 <HAL_DMA_Init+0x448>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_DMA_Init+0x38e>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_DMA_Init+0x390>
 8001926:	2300      	movs	r3, #0
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 8097 	beq.w	8001a5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <HAL_DMA_Init+0x42c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d021      	beq.n	800197c <HAL_DMA_Init+0x3e4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_DMA_Init+0x430>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01c      	beq.n	800197c <HAL_DMA_Init+0x3e4>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a21      	ldr	r2, [pc, #132]	; (80019cc <HAL_DMA_Init+0x434>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d017      	beq.n	800197c <HAL_DMA_Init+0x3e4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <HAL_DMA_Init+0x438>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d012      	beq.n	800197c <HAL_DMA_Init+0x3e4>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <HAL_DMA_Init+0x43c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00d      	beq.n	800197c <HAL_DMA_Init+0x3e4>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_DMA_Init+0x440>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d008      	beq.n	800197c <HAL_DMA_Init+0x3e4>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_DMA_Init+0x444>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d003      	beq.n	800197c <HAL_DMA_Init+0x3e4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_DMA_Init+0x448>)
 800197a:	4293      	cmp	r3, r2
 800197c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_DMA_Init+0x44c>)
 800199a:	4013      	ands	r3, r2
 800199c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b40      	cmp	r3, #64	; 0x40
 80019a4:	d020      	beq.n	80019e8 <HAL_DMA_Init+0x450>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b80      	cmp	r3, #128	; 0x80
 80019ac:	d102      	bne.n	80019b4 <HAL_DMA_Init+0x41c>
 80019ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019b2:	e01a      	b.n	80019ea <HAL_DMA_Init+0x452>
 80019b4:	2300      	movs	r3, #0
 80019b6:	e018      	b.n	80019ea <HAL_DMA_Init+0x452>
 80019b8:	fe10803f 	.word	0xfe10803f
 80019bc:	5c001000 	.word	0x5c001000
 80019c0:	ffff0000 	.word	0xffff0000
 80019c4:	58025408 	.word	0x58025408
 80019c8:	5802541c 	.word	0x5802541c
 80019cc:	58025430 	.word	0x58025430
 80019d0:	58025444 	.word	0x58025444
 80019d4:	58025458 	.word	0x58025458
 80019d8:	5802546c 	.word	0x5802546c
 80019dc:	58025480 	.word	0x58025480
 80019e0:	58025494 	.word	0x58025494
 80019e4:	fffe000f 	.word	0xfffe000f
 80019e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68d2      	ldr	r2, [r2, #12]
 80019ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80019f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80019f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001a00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001a18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b6e      	ldr	r3, [pc, #440]	; (8001be8 <HAL_DMA_Init+0x650>)
 8001a30:	4413      	add	r3, r2
 8001a32:	4a6e      	ldr	r2, [pc, #440]	; (8001bec <HAL_DMA_Init+0x654>)
 8001a34:	fba2 2303 	umull	r2, r3, r2, r3
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	009a      	lsls	r2, r3, #2
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f001 fc45 	bl	80032d0 <DMA_CalcBaseAndBitshift>
 8001a46:	4603      	mov	r3, r0
 8001a48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	2201      	movs	r2, #1
 8001a54:	409a      	lsls	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	e008      	b.n	8001a6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0b7      	b.n	8001bde <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <HAL_DMA_Init+0x658>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d072      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a5d      	ldr	r2, [pc, #372]	; (8001bf4 <HAL_DMA_Init+0x65c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d06d      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a5c      	ldr	r2, [pc, #368]	; (8001bf8 <HAL_DMA_Init+0x660>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d068      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a5a      	ldr	r2, [pc, #360]	; (8001bfc <HAL_DMA_Init+0x664>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d063      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a59      	ldr	r2, [pc, #356]	; (8001c00 <HAL_DMA_Init+0x668>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d05e      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a57      	ldr	r2, [pc, #348]	; (8001c04 <HAL_DMA_Init+0x66c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d059      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a56      	ldr	r2, [pc, #344]	; (8001c08 <HAL_DMA_Init+0x670>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d054      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a54      	ldr	r2, [pc, #336]	; (8001c0c <HAL_DMA_Init+0x674>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d04f      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a53      	ldr	r2, [pc, #332]	; (8001c10 <HAL_DMA_Init+0x678>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d04a      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a51      	ldr	r2, [pc, #324]	; (8001c14 <HAL_DMA_Init+0x67c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d045      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a50      	ldr	r2, [pc, #320]	; (8001c18 <HAL_DMA_Init+0x680>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d040      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a4e      	ldr	r2, [pc, #312]	; (8001c1c <HAL_DMA_Init+0x684>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d03b      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a4d      	ldr	r2, [pc, #308]	; (8001c20 <HAL_DMA_Init+0x688>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d036      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <HAL_DMA_Init+0x68c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d031      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a4a      	ldr	r2, [pc, #296]	; (8001c28 <HAL_DMA_Init+0x690>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d02c      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <HAL_DMA_Init+0x694>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d027      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <HAL_DMA_Init+0x698>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d022      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <HAL_DMA_Init+0x69c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d01d      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a44      	ldr	r2, [pc, #272]	; (8001c38 <HAL_DMA_Init+0x6a0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d018      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a42      	ldr	r2, [pc, #264]	; (8001c3c <HAL_DMA_Init+0x6a4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a41      	ldr	r2, [pc, #260]	; (8001c40 <HAL_DMA_Init+0x6a8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00e      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a3f      	ldr	r2, [pc, #252]	; (8001c44 <HAL_DMA_Init+0x6ac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d009      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a3e      	ldr	r2, [pc, #248]	; (8001c48 <HAL_DMA_Init+0x6b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d004      	beq.n	8001b5e <HAL_DMA_Init+0x5c6>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a3c      	ldr	r2, [pc, #240]	; (8001c4c <HAL_DMA_Init+0x6b4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_DMA_Init+0x5ca>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_DMA_Init+0x5cc>
 8001b62:	2300      	movs	r3, #0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d032      	beq.n	8001bce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f001 fcdf 	bl	800352c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b80      	cmp	r3, #128	; 0x80
 8001b74:	d102      	bne.n	8001b7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d010      	beq.n	8001bbc <HAL_DMA_Init+0x624>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d80c      	bhi.n	8001bbc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f001 fd5c 	bl	8003660 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e008      	b.n	8001bce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	a7fdabf8 	.word	0xa7fdabf8
 8001bec:	cccccccd 	.word	0xcccccccd
 8001bf0:	40020010 	.word	0x40020010
 8001bf4:	40020028 	.word	0x40020028
 8001bf8:	40020040 	.word	0x40020040
 8001bfc:	40020058 	.word	0x40020058
 8001c00:	40020070 	.word	0x40020070
 8001c04:	40020088 	.word	0x40020088
 8001c08:	400200a0 	.word	0x400200a0
 8001c0c:	400200b8 	.word	0x400200b8
 8001c10:	40020410 	.word	0x40020410
 8001c14:	40020428 	.word	0x40020428
 8001c18:	40020440 	.word	0x40020440
 8001c1c:	40020458 	.word	0x40020458
 8001c20:	40020470 	.word	0x40020470
 8001c24:	40020488 	.word	0x40020488
 8001c28:	400204a0 	.word	0x400204a0
 8001c2c:	400204b8 	.word	0x400204b8
 8001c30:	58025408 	.word	0x58025408
 8001c34:	5802541c 	.word	0x5802541c
 8001c38:	58025430 	.word	0x58025430
 8001c3c:	58025444 	.word	0x58025444
 8001c40:	58025458 	.word	0x58025458
 8001c44:	5802546c 	.word	0x5802546c
 8001c48:	58025480 	.word	0x58025480
 8001c4c:	58025494 	.word	0x58025494

08001c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e226      	b.n	80020ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_DMA_Start_IT+0x2a>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e21f      	b.n	80020ba <HAL_DMA_Start_IT+0x46a>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f040 820a 	bne.w	80020a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a68      	ldr	r2, [pc, #416]	; (8001e44 <HAL_DMA_Start_IT+0x1f4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d04a      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a66      	ldr	r2, [pc, #408]	; (8001e48 <HAL_DMA_Start_IT+0x1f8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d045      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a65      	ldr	r2, [pc, #404]	; (8001e4c <HAL_DMA_Start_IT+0x1fc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d040      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a63      	ldr	r2, [pc, #396]	; (8001e50 <HAL_DMA_Start_IT+0x200>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d03b      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a62      	ldr	r2, [pc, #392]	; (8001e54 <HAL_DMA_Start_IT+0x204>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d036      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a60      	ldr	r2, [pc, #384]	; (8001e58 <HAL_DMA_Start_IT+0x208>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d031      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a5f      	ldr	r2, [pc, #380]	; (8001e5c <HAL_DMA_Start_IT+0x20c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d02c      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a5d      	ldr	r2, [pc, #372]	; (8001e60 <HAL_DMA_Start_IT+0x210>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d027      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a5c      	ldr	r2, [pc, #368]	; (8001e64 <HAL_DMA_Start_IT+0x214>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d022      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a5a      	ldr	r2, [pc, #360]	; (8001e68 <HAL_DMA_Start_IT+0x218>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01d      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a59      	ldr	r2, [pc, #356]	; (8001e6c <HAL_DMA_Start_IT+0x21c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d018      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_DMA_Start_IT+0x220>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a56      	ldr	r2, [pc, #344]	; (8001e74 <HAL_DMA_Start_IT+0x224>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d00e      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_DMA_Start_IT+0x228>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d009      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a53      	ldr	r2, [pc, #332]	; (8001e7c <HAL_DMA_Start_IT+0x22c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d004      	beq.n	8001d3e <HAL_DMA_Start_IT+0xee>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a51      	ldr	r2, [pc, #324]	; (8001e80 <HAL_DMA_Start_IT+0x230>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d108      	bne.n	8001d50 <HAL_DMA_Start_IT+0x100>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e007      	b.n	8001d60 <HAL_DMA_Start_IT+0x110>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f001 f906 	bl	8002f78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <HAL_DMA_Start_IT+0x1f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d04a      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a33      	ldr	r2, [pc, #204]	; (8001e48 <HAL_DMA_Start_IT+0x1f8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d045      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a31      	ldr	r2, [pc, #196]	; (8001e4c <HAL_DMA_Start_IT+0x1fc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d040      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a30      	ldr	r2, [pc, #192]	; (8001e50 <HAL_DMA_Start_IT+0x200>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d03b      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a2e      	ldr	r2, [pc, #184]	; (8001e54 <HAL_DMA_Start_IT+0x204>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d036      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a2d      	ldr	r2, [pc, #180]	; (8001e58 <HAL_DMA_Start_IT+0x208>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d031      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <HAL_DMA_Start_IT+0x20c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02c      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2a      	ldr	r2, [pc, #168]	; (8001e60 <HAL_DMA_Start_IT+0x210>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d027      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a28      	ldr	r2, [pc, #160]	; (8001e64 <HAL_DMA_Start_IT+0x214>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d022      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a27      	ldr	r2, [pc, #156]	; (8001e68 <HAL_DMA_Start_IT+0x218>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d01d      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <HAL_DMA_Start_IT+0x21c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d018      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <HAL_DMA_Start_IT+0x220>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d013      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a22      	ldr	r2, [pc, #136]	; (8001e74 <HAL_DMA_Start_IT+0x224>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00e      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <HAL_DMA_Start_IT+0x228>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d009      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_DMA_Start_IT+0x22c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d004      	beq.n	8001e0c <HAL_DMA_Start_IT+0x1bc>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_DMA_Start_IT+0x230>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d101      	bne.n	8001e10 <HAL_DMA_Start_IT+0x1c0>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <HAL_DMA_Start_IT+0x1c2>
 8001e10:	2300      	movs	r3, #0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d036      	beq.n	8001e84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 021e 	bic.w	r2, r3, #30
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0216 	orr.w	r2, r2, #22
 8001e28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d03e      	beq.n	8001eb0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0208 	orr.w	r2, r2, #8
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e035      	b.n	8001eb0 <HAL_DMA_Start_IT+0x260>
 8001e44:	40020010 	.word	0x40020010
 8001e48:	40020028 	.word	0x40020028
 8001e4c:	40020040 	.word	0x40020040
 8001e50:	40020058 	.word	0x40020058
 8001e54:	40020070 	.word	0x40020070
 8001e58:	40020088 	.word	0x40020088
 8001e5c:	400200a0 	.word	0x400200a0
 8001e60:	400200b8 	.word	0x400200b8
 8001e64:	40020410 	.word	0x40020410
 8001e68:	40020428 	.word	0x40020428
 8001e6c:	40020440 	.word	0x40020440
 8001e70:	40020458 	.word	0x40020458
 8001e74:	40020470 	.word	0x40020470
 8001e78:	40020488 	.word	0x40020488
 8001e7c:	400204a0 	.word	0x400204a0
 8001e80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 020e 	bic.w	r2, r3, #14
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 020a 	orr.w	r2, r2, #10
 8001e96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0204 	orr.w	r2, r2, #4
 8001eae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a83      	ldr	r2, [pc, #524]	; (80020c4 <HAL_DMA_Start_IT+0x474>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d072      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a82      	ldr	r2, [pc, #520]	; (80020c8 <HAL_DMA_Start_IT+0x478>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d06d      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a80      	ldr	r2, [pc, #512]	; (80020cc <HAL_DMA_Start_IT+0x47c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d068      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7f      	ldr	r2, [pc, #508]	; (80020d0 <HAL_DMA_Start_IT+0x480>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d063      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a7d      	ldr	r2, [pc, #500]	; (80020d4 <HAL_DMA_Start_IT+0x484>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d05e      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a7c      	ldr	r2, [pc, #496]	; (80020d8 <HAL_DMA_Start_IT+0x488>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d059      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <HAL_DMA_Start_IT+0x48c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d054      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a79      	ldr	r2, [pc, #484]	; (80020e0 <HAL_DMA_Start_IT+0x490>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d04f      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a77      	ldr	r2, [pc, #476]	; (80020e4 <HAL_DMA_Start_IT+0x494>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d04a      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a76      	ldr	r2, [pc, #472]	; (80020e8 <HAL_DMA_Start_IT+0x498>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d045      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a74      	ldr	r2, [pc, #464]	; (80020ec <HAL_DMA_Start_IT+0x49c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d040      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a73      	ldr	r2, [pc, #460]	; (80020f0 <HAL_DMA_Start_IT+0x4a0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d03b      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a71      	ldr	r2, [pc, #452]	; (80020f4 <HAL_DMA_Start_IT+0x4a4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d036      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a70      	ldr	r2, [pc, #448]	; (80020f8 <HAL_DMA_Start_IT+0x4a8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d031      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a6e      	ldr	r2, [pc, #440]	; (80020fc <HAL_DMA_Start_IT+0x4ac>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d02c      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a6d      	ldr	r2, [pc, #436]	; (8002100 <HAL_DMA_Start_IT+0x4b0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d027      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6b      	ldr	r2, [pc, #428]	; (8002104 <HAL_DMA_Start_IT+0x4b4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d022      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6a      	ldr	r2, [pc, #424]	; (8002108 <HAL_DMA_Start_IT+0x4b8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d01d      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a68      	ldr	r2, [pc, #416]	; (800210c <HAL_DMA_Start_IT+0x4bc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d018      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a67      	ldr	r2, [pc, #412]	; (8002110 <HAL_DMA_Start_IT+0x4c0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a65      	ldr	r2, [pc, #404]	; (8002114 <HAL_DMA_Start_IT+0x4c4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00e      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a64      	ldr	r2, [pc, #400]	; (8002118 <HAL_DMA_Start_IT+0x4c8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d009      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a62      	ldr	r2, [pc, #392]	; (800211c <HAL_DMA_Start_IT+0x4cc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d004      	beq.n	8001fa0 <HAL_DMA_Start_IT+0x350>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a61      	ldr	r2, [pc, #388]	; (8002120 <HAL_DMA_Start_IT+0x4d0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_DMA_Start_IT+0x354>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_DMA_Start_IT+0x356>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fde:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a37      	ldr	r2, [pc, #220]	; (80020c4 <HAL_DMA_Start_IT+0x474>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d04a      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a36      	ldr	r2, [pc, #216]	; (80020c8 <HAL_DMA_Start_IT+0x478>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d045      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a34      	ldr	r2, [pc, #208]	; (80020cc <HAL_DMA_Start_IT+0x47c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d040      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a33      	ldr	r2, [pc, #204]	; (80020d0 <HAL_DMA_Start_IT+0x480>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d03b      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_DMA_Start_IT+0x484>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d036      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a30      	ldr	r2, [pc, #192]	; (80020d8 <HAL_DMA_Start_IT+0x488>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d031      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <HAL_DMA_Start_IT+0x48c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02c      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a2d      	ldr	r2, [pc, #180]	; (80020e0 <HAL_DMA_Start_IT+0x490>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d027      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <HAL_DMA_Start_IT+0x494>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d022      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <HAL_DMA_Start_IT+0x498>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d01d      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a28      	ldr	r2, [pc, #160]	; (80020ec <HAL_DMA_Start_IT+0x49c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d018      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <HAL_DMA_Start_IT+0x4a0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d013      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <HAL_DMA_Start_IT+0x4a4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00e      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a24      	ldr	r2, [pc, #144]	; (80020f8 <HAL_DMA_Start_IT+0x4a8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <HAL_DMA_Start_IT+0x4ac>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d004      	beq.n	8002080 <HAL_DMA_Start_IT+0x430>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_DMA_Start_IT+0x4b0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d108      	bne.n	8002092 <HAL_DMA_Start_IT+0x442>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e012      	b.n	80020b8 <HAL_DMA_Start_IT+0x468>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e009      	b.n	80020b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40020010 	.word	0x40020010
 80020c8:	40020028 	.word	0x40020028
 80020cc:	40020040 	.word	0x40020040
 80020d0:	40020058 	.word	0x40020058
 80020d4:	40020070 	.word	0x40020070
 80020d8:	40020088 	.word	0x40020088
 80020dc:	400200a0 	.word	0x400200a0
 80020e0:	400200b8 	.word	0x400200b8
 80020e4:	40020410 	.word	0x40020410
 80020e8:	40020428 	.word	0x40020428
 80020ec:	40020440 	.word	0x40020440
 80020f0:	40020458 	.word	0x40020458
 80020f4:	40020470 	.word	0x40020470
 80020f8:	40020488 	.word	0x40020488
 80020fc:	400204a0 	.word	0x400204a0
 8002100:	400204b8 	.word	0x400204b8
 8002104:	58025408 	.word	0x58025408
 8002108:	5802541c 	.word	0x5802541c
 800210c:	58025430 	.word	0x58025430
 8002110:	58025444 	.word	0x58025444
 8002114:	58025458 	.word	0x58025458
 8002118:	5802546c 	.word	0x5802546c
 800211c:	58025480 	.word	0x58025480
 8002120:	58025494 	.word	0x58025494

08002124 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002130:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <HAL_DMA_IRQHandler+0x1ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a67      	ldr	r2, [pc, #412]	; (80022d4 <HAL_DMA_IRQHandler+0x1b0>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0a9b      	lsrs	r3, r3, #10
 800213c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5f      	ldr	r2, [pc, #380]	; (80022d8 <HAL_DMA_IRQHandler+0x1b4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d04a      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5d      	ldr	r2, [pc, #372]	; (80022dc <HAL_DMA_IRQHandler+0x1b8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d045      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5c      	ldr	r2, [pc, #368]	; (80022e0 <HAL_DMA_IRQHandler+0x1bc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d040      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5a      	ldr	r2, [pc, #360]	; (80022e4 <HAL_DMA_IRQHandler+0x1c0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d03b      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a59      	ldr	r2, [pc, #356]	; (80022e8 <HAL_DMA_IRQHandler+0x1c4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d036      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_DMA_IRQHandler+0x1c8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d031      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_DMA_IRQHandler+0x1cc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d02c      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a54      	ldr	r2, [pc, #336]	; (80022f4 <HAL_DMA_IRQHandler+0x1d0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d027      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a53      	ldr	r2, [pc, #332]	; (80022f8 <HAL_DMA_IRQHandler+0x1d4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d022      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a51      	ldr	r2, [pc, #324]	; (80022fc <HAL_DMA_IRQHandler+0x1d8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01d      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a50      	ldr	r2, [pc, #320]	; (8002300 <HAL_DMA_IRQHandler+0x1dc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d018      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <HAL_DMA_IRQHandler+0x1e0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_DMA_IRQHandler+0x1e4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00e      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a4b      	ldr	r2, [pc, #300]	; (800230c <HAL_DMA_IRQHandler+0x1e8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <HAL_DMA_IRQHandler+0x1ec>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_DMA_IRQHandler+0xd2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_DMA_IRQHandler+0x1f0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_DMA_IRQHandler+0xd6>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_DMA_IRQHandler+0xd8>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 842b 	beq.w	8002a58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2208      	movs	r2, #8
 800220c:	409a      	lsls	r2, r3
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80a2 	beq.w	800235c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2e      	ldr	r2, [pc, #184]	; (80022d8 <HAL_DMA_IRQHandler+0x1b4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d04a      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <HAL_DMA_IRQHandler+0x1b8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d045      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <HAL_DMA_IRQHandler+0x1bc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d040      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <HAL_DMA_IRQHandler+0x1c0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d03b      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a28      	ldr	r2, [pc, #160]	; (80022e8 <HAL_DMA_IRQHandler+0x1c4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d036      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a27      	ldr	r2, [pc, #156]	; (80022ec <HAL_DMA_IRQHandler+0x1c8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d031      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <HAL_DMA_IRQHandler+0x1cc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02c      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a24      	ldr	r2, [pc, #144]	; (80022f4 <HAL_DMA_IRQHandler+0x1d0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d027      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_DMA_IRQHandler+0x1d4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d022      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a21      	ldr	r2, [pc, #132]	; (80022fc <HAL_DMA_IRQHandler+0x1d8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d01d      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_DMA_IRQHandler+0x1dc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d018      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_DMA_IRQHandler+0x1e0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_DMA_IRQHandler+0x1e4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00e      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_DMA_IRQHandler+0x1e8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d009      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <HAL_DMA_IRQHandler+0x1ec>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x194>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_DMA_IRQHandler+0x1f0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d12f      	bne.n	8002318 <HAL_DMA_IRQHandler+0x1f4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e02e      	b.n	800232c <HAL_DMA_IRQHandler+0x208>
 80022ce:	bf00      	nop
 80022d0:	20000000 	.word	0x20000000
 80022d4:	1b4e81b5 	.word	0x1b4e81b5
 80022d8:	40020010 	.word	0x40020010
 80022dc:	40020028 	.word	0x40020028
 80022e0:	40020040 	.word	0x40020040
 80022e4:	40020058 	.word	0x40020058
 80022e8:	40020070 	.word	0x40020070
 80022ec:	40020088 	.word	0x40020088
 80022f0:	400200a0 	.word	0x400200a0
 80022f4:	400200b8 	.word	0x400200b8
 80022f8:	40020410 	.word	0x40020410
 80022fc:	40020428 	.word	0x40020428
 8002300:	40020440 	.word	0x40020440
 8002304:	40020458 	.word	0x40020458
 8002308:	40020470 	.word	0x40020470
 800230c:	40020488 	.word	0x40020488
 8002310:	400204a0 	.word	0x400204a0
 8002314:	400204b8 	.word	0x400204b8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d015      	beq.n	800235c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0204 	bic.w	r2, r2, #4
 800233e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2208      	movs	r2, #8
 800234a:	409a      	lsls	r2, r3
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d06e      	beq.n	8002450 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a69      	ldr	r2, [pc, #420]	; (800251c <HAL_DMA_IRQHandler+0x3f8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d04a      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a67      	ldr	r2, [pc, #412]	; (8002520 <HAL_DMA_IRQHandler+0x3fc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d045      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a66      	ldr	r2, [pc, #408]	; (8002524 <HAL_DMA_IRQHandler+0x400>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d040      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a64      	ldr	r2, [pc, #400]	; (8002528 <HAL_DMA_IRQHandler+0x404>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d03b      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a63      	ldr	r2, [pc, #396]	; (800252c <HAL_DMA_IRQHandler+0x408>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d036      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a61      	ldr	r2, [pc, #388]	; (8002530 <HAL_DMA_IRQHandler+0x40c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d031      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a60      	ldr	r2, [pc, #384]	; (8002534 <HAL_DMA_IRQHandler+0x410>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d02c      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5e      	ldr	r2, [pc, #376]	; (8002538 <HAL_DMA_IRQHandler+0x414>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d027      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a5d      	ldr	r2, [pc, #372]	; (800253c <HAL_DMA_IRQHandler+0x418>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d022      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5b      	ldr	r2, [pc, #364]	; (8002540 <HAL_DMA_IRQHandler+0x41c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01d      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5a      	ldr	r2, [pc, #360]	; (8002544 <HAL_DMA_IRQHandler+0x420>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d018      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_DMA_IRQHandler+0x424>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a57      	ldr	r2, [pc, #348]	; (800254c <HAL_DMA_IRQHandler+0x428>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00e      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a55      	ldr	r2, [pc, #340]	; (8002550 <HAL_DMA_IRQHandler+0x42c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a54      	ldr	r2, [pc, #336]	; (8002554 <HAL_DMA_IRQHandler+0x430>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d004      	beq.n	8002412 <HAL_DMA_IRQHandler+0x2ee>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_DMA_IRQHandler+0x434>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10a      	bne.n	8002428 <HAL_DMA_IRQHandler+0x304>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e003      	b.n	8002430 <HAL_DMA_IRQHandler+0x30c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2300      	movs	r3, #0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00d      	beq.n	8002450 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2201      	movs	r2, #1
 800243e:	409a      	lsls	r2, r3
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	f043 0202 	orr.w	r2, r3, #2
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2204      	movs	r2, #4
 800245a:	409a      	lsls	r2, r3
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 808f 	beq.w	8002584 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2c      	ldr	r2, [pc, #176]	; (800251c <HAL_DMA_IRQHandler+0x3f8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d04a      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <HAL_DMA_IRQHandler+0x3fc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d045      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a29      	ldr	r2, [pc, #164]	; (8002524 <HAL_DMA_IRQHandler+0x400>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d040      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <HAL_DMA_IRQHandler+0x404>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d03b      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a26      	ldr	r2, [pc, #152]	; (800252c <HAL_DMA_IRQHandler+0x408>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d036      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a24      	ldr	r2, [pc, #144]	; (8002530 <HAL_DMA_IRQHandler+0x40c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d031      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a23      	ldr	r2, [pc, #140]	; (8002534 <HAL_DMA_IRQHandler+0x410>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d02c      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a21      	ldr	r2, [pc, #132]	; (8002538 <HAL_DMA_IRQHandler+0x414>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d027      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a20      	ldr	r2, [pc, #128]	; (800253c <HAL_DMA_IRQHandler+0x418>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d022      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <HAL_DMA_IRQHandler+0x41c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01d      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <HAL_DMA_IRQHandler+0x420>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d018      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_DMA_IRQHandler+0x424>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1a      	ldr	r2, [pc, #104]	; (800254c <HAL_DMA_IRQHandler+0x428>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a18      	ldr	r2, [pc, #96]	; (8002550 <HAL_DMA_IRQHandler+0x42c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_DMA_IRQHandler+0x430>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_DMA_IRQHandler+0x3e2>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a15      	ldr	r2, [pc, #84]	; (8002558 <HAL_DMA_IRQHandler+0x434>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d12a      	bne.n	800255c <HAL_DMA_IRQHandler+0x438>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf14      	ite	ne
 8002514:	2301      	movne	r3, #1
 8002516:	2300      	moveq	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e023      	b.n	8002564 <HAL_DMA_IRQHandler+0x440>
 800251c:	40020010 	.word	0x40020010
 8002520:	40020028 	.word	0x40020028
 8002524:	40020040 	.word	0x40020040
 8002528:	40020058 	.word	0x40020058
 800252c:	40020070 	.word	0x40020070
 8002530:	40020088 	.word	0x40020088
 8002534:	400200a0 	.word	0x400200a0
 8002538:	400200b8 	.word	0x400200b8
 800253c:	40020410 	.word	0x40020410
 8002540:	40020428 	.word	0x40020428
 8002544:	40020440 	.word	0x40020440
 8002548:	40020458 	.word	0x40020458
 800254c:	40020470 	.word	0x40020470
 8002550:	40020488 	.word	0x40020488
 8002554:	400204a0 	.word	0x400204a0
 8002558:	400204b8 	.word	0x400204b8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00d      	beq.n	8002584 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	2204      	movs	r2, #4
 8002572:	409a      	lsls	r2, r3
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f043 0204 	orr.w	r2, r3, #4
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2210      	movs	r2, #16
 800258e:	409a      	lsls	r2, r3
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a6 	beq.w	80026e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a85      	ldr	r2, [pc, #532]	; (80027b4 <HAL_DMA_IRQHandler+0x690>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d04a      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a83      	ldr	r2, [pc, #524]	; (80027b8 <HAL_DMA_IRQHandler+0x694>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d045      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a82      	ldr	r2, [pc, #520]	; (80027bc <HAL_DMA_IRQHandler+0x698>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d040      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a80      	ldr	r2, [pc, #512]	; (80027c0 <HAL_DMA_IRQHandler+0x69c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d03b      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a7f      	ldr	r2, [pc, #508]	; (80027c4 <HAL_DMA_IRQHandler+0x6a0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d036      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a7d      	ldr	r2, [pc, #500]	; (80027c8 <HAL_DMA_IRQHandler+0x6a4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d031      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7c      	ldr	r2, [pc, #496]	; (80027cc <HAL_DMA_IRQHandler+0x6a8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d02c      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <HAL_DMA_IRQHandler+0x6ac>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d027      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a79      	ldr	r2, [pc, #484]	; (80027d4 <HAL_DMA_IRQHandler+0x6b0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d022      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a77      	ldr	r2, [pc, #476]	; (80027d8 <HAL_DMA_IRQHandler+0x6b4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01d      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a76      	ldr	r2, [pc, #472]	; (80027dc <HAL_DMA_IRQHandler+0x6b8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d018      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a74      	ldr	r2, [pc, #464]	; (80027e0 <HAL_DMA_IRQHandler+0x6bc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d013      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a73      	ldr	r2, [pc, #460]	; (80027e4 <HAL_DMA_IRQHandler+0x6c0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00e      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a71      	ldr	r2, [pc, #452]	; (80027e8 <HAL_DMA_IRQHandler+0x6c4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d009      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a70      	ldr	r2, [pc, #448]	; (80027ec <HAL_DMA_IRQHandler+0x6c8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d004      	beq.n	800263a <HAL_DMA_IRQHandler+0x516>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_DMA_IRQHandler+0x6cc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d10a      	bne.n	8002650 <HAL_DMA_IRQHandler+0x52c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e009      	b.n	8002664 <HAL_DMA_IRQHandler+0x540>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d03e      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2210      	movs	r2, #16
 8002672:	409a      	lsls	r2, r3
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d018      	beq.n	80026b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d108      	bne.n	80026a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d024      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
 80026a4:	e01f      	b.n	80026e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01b      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
 80026b6:	e016      	b.n	80026e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0208 	bic.w	r2, r2, #8
 80026d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2220      	movs	r2, #32
 80026f0:	409a      	lsls	r2, r3
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8110 	beq.w	800291c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2c      	ldr	r2, [pc, #176]	; (80027b4 <HAL_DMA_IRQHandler+0x690>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d04a      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2b      	ldr	r2, [pc, #172]	; (80027b8 <HAL_DMA_IRQHandler+0x694>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d045      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a29      	ldr	r2, [pc, #164]	; (80027bc <HAL_DMA_IRQHandler+0x698>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d040      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <HAL_DMA_IRQHandler+0x69c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d03b      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a26      	ldr	r2, [pc, #152]	; (80027c4 <HAL_DMA_IRQHandler+0x6a0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d036      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <HAL_DMA_IRQHandler+0x6a4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d031      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a23      	ldr	r2, [pc, #140]	; (80027cc <HAL_DMA_IRQHandler+0x6a8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02c      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a22      	ldr	r2, [pc, #136]	; (80027d0 <HAL_DMA_IRQHandler+0x6ac>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d027      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <HAL_DMA_IRQHandler+0x6b0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d022      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_DMA_IRQHandler+0x6b4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d01d      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_DMA_IRQHandler+0x6b8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d018      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_DMA_IRQHandler+0x6bc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d013      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1a      	ldr	r2, [pc, #104]	; (80027e4 <HAL_DMA_IRQHandler+0x6c0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00e      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_DMA_IRQHandler+0x6c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <HAL_DMA_IRQHandler+0x6c8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d004      	beq.n	800279c <HAL_DMA_IRQHandler+0x678>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <HAL_DMA_IRQHandler+0x6cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d12b      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x6d0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	e02a      	b.n	8002808 <HAL_DMA_IRQHandler+0x6e4>
 80027b2:	bf00      	nop
 80027b4:	40020010 	.word	0x40020010
 80027b8:	40020028 	.word	0x40020028
 80027bc:	40020040 	.word	0x40020040
 80027c0:	40020058 	.word	0x40020058
 80027c4:	40020070 	.word	0x40020070
 80027c8:	40020088 	.word	0x40020088
 80027cc:	400200a0 	.word	0x400200a0
 80027d0:	400200b8 	.word	0x400200b8
 80027d4:	40020410 	.word	0x40020410
 80027d8:	40020428 	.word	0x40020428
 80027dc:	40020440 	.word	0x40020440
 80027e0:	40020458 	.word	0x40020458
 80027e4:	40020470 	.word	0x40020470
 80027e8:	40020488 	.word	0x40020488
 80027ec:	400204a0 	.word	0x400204a0
 80027f0:	400204b8 	.word	0x400204b8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf14      	ite	ne
 8002802:	2301      	movne	r3, #1
 8002804:	2300      	moveq	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8087 	beq.w	800291c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	2220      	movs	r2, #32
 8002818:	409a      	lsls	r2, r3
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b04      	cmp	r3, #4
 8002828:	d139      	bne.n	800289e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0216 	bic.w	r2, r2, #22
 8002838:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002848:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d103      	bne.n	800285a <HAL_DMA_IRQHandler+0x736>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0208 	bic.w	r2, r2, #8
 8002868:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	223f      	movs	r2, #63	; 0x3f
 8002874:	409a      	lsls	r2, r3
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 834a 	beq.w	8002f28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
          }
          return;
 800289c:	e344      	b.n	8002f28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d018      	beq.n	80028de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d108      	bne.n	80028cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d02c      	beq.n	800291c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
 80028ca:	e027      	b.n	800291c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d023      	beq.n	800291c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
 80028dc:	e01e      	b.n	800291c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10f      	bne.n	800290c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0210 	bic.w	r2, r2, #16
 80028fa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8306 	beq.w	8002f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8088 	beq.w	8002a44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a7a      	ldr	r2, [pc, #488]	; (8002b2c <HAL_DMA_IRQHandler+0xa08>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d04a      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a79      	ldr	r2, [pc, #484]	; (8002b30 <HAL_DMA_IRQHandler+0xa0c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d045      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a77      	ldr	r2, [pc, #476]	; (8002b34 <HAL_DMA_IRQHandler+0xa10>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d040      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a76      	ldr	r2, [pc, #472]	; (8002b38 <HAL_DMA_IRQHandler+0xa14>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d03b      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a74      	ldr	r2, [pc, #464]	; (8002b3c <HAL_DMA_IRQHandler+0xa18>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d036      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a73      	ldr	r2, [pc, #460]	; (8002b40 <HAL_DMA_IRQHandler+0xa1c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d031      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a71      	ldr	r2, [pc, #452]	; (8002b44 <HAL_DMA_IRQHandler+0xa20>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d02c      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a70      	ldr	r2, [pc, #448]	; (8002b48 <HAL_DMA_IRQHandler+0xa24>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d027      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6e      	ldr	r2, [pc, #440]	; (8002b4c <HAL_DMA_IRQHandler+0xa28>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d022      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6d      	ldr	r2, [pc, #436]	; (8002b50 <HAL_DMA_IRQHandler+0xa2c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d01d      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <HAL_DMA_IRQHandler+0xa30>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d018      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a6a      	ldr	r2, [pc, #424]	; (8002b58 <HAL_DMA_IRQHandler+0xa34>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d013      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a68      	ldr	r2, [pc, #416]	; (8002b5c <HAL_DMA_IRQHandler+0xa38>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00e      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a67      	ldr	r2, [pc, #412]	; (8002b60 <HAL_DMA_IRQHandler+0xa3c>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d009      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a65      	ldr	r2, [pc, #404]	; (8002b64 <HAL_DMA_IRQHandler+0xa40>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_DMA_IRQHandler+0x8b8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a64      	ldr	r2, [pc, #400]	; (8002b68 <HAL_DMA_IRQHandler+0xa44>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d108      	bne.n	80029ee <HAL_DMA_IRQHandler+0x8ca>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e007      	b.n	80029fe <HAL_DMA_IRQHandler+0x8da>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3301      	adds	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d307      	bcc.n	8002a1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f2      	bne.n	80029fe <HAL_DMA_IRQHandler+0x8da>
 8002a18:	e000      	b.n	8002a1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002a1a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002a3a:	e003      	b.n	8002a44 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8272 	beq.w	8002f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
 8002a56:	e26c      	b.n	8002f32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a43      	ldr	r2, [pc, #268]	; (8002b6c <HAL_DMA_IRQHandler+0xa48>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x984>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a42      	ldr	r2, [pc, #264]	; (8002b70 <HAL_DMA_IRQHandler+0xa4c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x984>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a40      	ldr	r2, [pc, #256]	; (8002b74 <HAL_DMA_IRQHandler+0xa50>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x984>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <HAL_DMA_IRQHandler+0xa54>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x984>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a3d      	ldr	r2, [pc, #244]	; (8002b7c <HAL_DMA_IRQHandler+0xa58>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x984>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a3c      	ldr	r2, [pc, #240]	; (8002b80 <HAL_DMA_IRQHandler+0xa5c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x984>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <HAL_DMA_IRQHandler+0xa60>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x984>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a39      	ldr	r2, [pc, #228]	; (8002b88 <HAL_DMA_IRQHandler+0xa64>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_DMA_IRQHandler+0x988>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_DMA_IRQHandler+0x98a>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 823f 	beq.w	8002f32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80cd 	beq.w	8002c6c <HAL_DMA_IRQHandler+0xb48>
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80c7 	beq.w	8002c6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2204      	movs	r2, #4
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d049      	beq.n	8002b8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8210 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b14:	e20a      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 8206 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b28:	e200      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe08>
 8002b2a:	bf00      	nop
 8002b2c:	40020010 	.word	0x40020010
 8002b30:	40020028 	.word	0x40020028
 8002b34:	40020040 	.word	0x40020040
 8002b38:	40020058 	.word	0x40020058
 8002b3c:	40020070 	.word	0x40020070
 8002b40:	40020088 	.word	0x40020088
 8002b44:	400200a0 	.word	0x400200a0
 8002b48:	400200b8 	.word	0x400200b8
 8002b4c:	40020410 	.word	0x40020410
 8002b50:	40020428 	.word	0x40020428
 8002b54:	40020440 	.word	0x40020440
 8002b58:	40020458 	.word	0x40020458
 8002b5c:	40020470 	.word	0x40020470
 8002b60:	40020488 	.word	0x40020488
 8002b64:	400204a0 	.word	0x400204a0
 8002b68:	400204b8 	.word	0x400204b8
 8002b6c:	58025408 	.word	0x58025408
 8002b70:	5802541c 	.word	0x5802541c
 8002b74:	58025430 	.word	0x58025430
 8002b78:	58025444 	.word	0x58025444
 8002b7c:	58025458 	.word	0x58025458
 8002b80:	5802546c 	.word	0x5802546c
 8002b84:	58025480 	.word	0x58025480
 8002b88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d160      	bne.n	8002c58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a8c      	ldr	r2, [pc, #560]	; (8002dcc <HAL_DMA_IRQHandler+0xca8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d04a      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a8a      	ldr	r2, [pc, #552]	; (8002dd0 <HAL_DMA_IRQHandler+0xcac>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d045      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a89      	ldr	r2, [pc, #548]	; (8002dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d040      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a87      	ldr	r2, [pc, #540]	; (8002dd8 <HAL_DMA_IRQHandler+0xcb4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d03b      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a86      	ldr	r2, [pc, #536]	; (8002ddc <HAL_DMA_IRQHandler+0xcb8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d036      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a84      	ldr	r2, [pc, #528]	; (8002de0 <HAL_DMA_IRQHandler+0xcbc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d031      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a83      	ldr	r2, [pc, #524]	; (8002de4 <HAL_DMA_IRQHandler+0xcc0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d02c      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a81      	ldr	r2, [pc, #516]	; (8002de8 <HAL_DMA_IRQHandler+0xcc4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d027      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a80      	ldr	r2, [pc, #512]	; (8002dec <HAL_DMA_IRQHandler+0xcc8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a7e      	ldr	r2, [pc, #504]	; (8002df0 <HAL_DMA_IRQHandler+0xccc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01d      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a7d      	ldr	r2, [pc, #500]	; (8002df4 <HAL_DMA_IRQHandler+0xcd0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7b      	ldr	r2, [pc, #492]	; (8002df8 <HAL_DMA_IRQHandler+0xcd4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a7a      	ldr	r2, [pc, #488]	; (8002dfc <HAL_DMA_IRQHandler+0xcd8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a78      	ldr	r2, [pc, #480]	; (8002e00 <HAL_DMA_IRQHandler+0xcdc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a77      	ldr	r2, [pc, #476]	; (8002e04 <HAL_DMA_IRQHandler+0xce0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_DMA_IRQHandler+0xb12>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <HAL_DMA_IRQHandler+0xce4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d108      	bne.n	8002c48 <HAL_DMA_IRQHandler+0xb24>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0208 	bic.w	r2, r2, #8
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	e007      	b.n	8002c58 <HAL_DMA_IRQHandler+0xb34>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0204 	bic.w	r2, r2, #4
 8002c56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8165 	beq.w	8002f2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c6a:	e15f      	b.n	8002f2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	2202      	movs	r2, #2
 8002c76:	409a      	lsls	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80c5 	beq.w	8002e0c <HAL_DMA_IRQHandler+0xce8>
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80bf 	beq.w	8002e0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2202      	movs	r2, #2
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d018      	beq.n	8002cda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 813a 	beq.w	8002f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cc4:	e134      	b.n	8002f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8130 	beq.w	8002f30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cd8:	e12a      	b.n	8002f30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d168      	bne.n	8002db6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a38      	ldr	r2, [pc, #224]	; (8002dcc <HAL_DMA_IRQHandler+0xca8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d04a      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a37      	ldr	r2, [pc, #220]	; (8002dd0 <HAL_DMA_IRQHandler+0xcac>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d045      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a35      	ldr	r2, [pc, #212]	; (8002dd4 <HAL_DMA_IRQHandler+0xcb0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d040      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a34      	ldr	r2, [pc, #208]	; (8002dd8 <HAL_DMA_IRQHandler+0xcb4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d03b      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <HAL_DMA_IRQHandler+0xcb8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d036      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <HAL_DMA_IRQHandler+0xcbc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d031      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <HAL_DMA_IRQHandler+0xcc0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02c      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2e      	ldr	r2, [pc, #184]	; (8002de8 <HAL_DMA_IRQHandler+0xcc4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d027      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <HAL_DMA_IRQHandler+0xcc8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d022      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <HAL_DMA_IRQHandler+0xccc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d01d      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <HAL_DMA_IRQHandler+0xcd0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d018      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <HAL_DMA_IRQHandler+0xcd4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <HAL_DMA_IRQHandler+0xcd8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00e      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a25      	ldr	r2, [pc, #148]	; (8002e00 <HAL_DMA_IRQHandler+0xcdc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a23      	ldr	r2, [pc, #140]	; (8002e04 <HAL_DMA_IRQHandler+0xce0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xc60>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_DMA_IRQHandler+0xce4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d108      	bne.n	8002d96 <HAL_DMA_IRQHandler+0xc72>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0214 	bic.w	r2, r2, #20
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e007      	b.n	8002da6 <HAL_DMA_IRQHandler+0xc82>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 020a 	bic.w	r2, r2, #10
 8002da4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80b8 	beq.w	8002f30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dc8:	e0b2      	b.n	8002f30 <HAL_DMA_IRQHandler+0xe0c>
 8002dca:	bf00      	nop
 8002dcc:	40020010 	.word	0x40020010
 8002dd0:	40020028 	.word	0x40020028
 8002dd4:	40020040 	.word	0x40020040
 8002dd8:	40020058 	.word	0x40020058
 8002ddc:	40020070 	.word	0x40020070
 8002de0:	40020088 	.word	0x40020088
 8002de4:	400200a0 	.word	0x400200a0
 8002de8:	400200b8 	.word	0x400200b8
 8002dec:	40020410 	.word	0x40020410
 8002df0:	40020428 	.word	0x40020428
 8002df4:	40020440 	.word	0x40020440
 8002df8:	40020458 	.word	0x40020458
 8002dfc:	40020470 	.word	0x40020470
 8002e00:	40020488 	.word	0x40020488
 8002e04:	400204a0 	.word	0x400204a0
 8002e08:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	2208      	movs	r2, #8
 8002e16:	409a      	lsls	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8088 	beq.w	8002f32 <HAL_DMA_IRQHandler+0xe0e>
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f003 0308 	and.w	r3, r3, #8
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8082 	beq.w	8002f32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a41      	ldr	r2, [pc, #260]	; (8002f38 <HAL_DMA_IRQHandler+0xe14>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04a      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3f      	ldr	r2, [pc, #252]	; (8002f3c <HAL_DMA_IRQHandler+0xe18>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d045      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a3e      	ldr	r2, [pc, #248]	; (8002f40 <HAL_DMA_IRQHandler+0xe1c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d040      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3c      	ldr	r2, [pc, #240]	; (8002f44 <HAL_DMA_IRQHandler+0xe20>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03b      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3b      	ldr	r2, [pc, #236]	; (8002f48 <HAL_DMA_IRQHandler+0xe24>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d036      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a39      	ldr	r2, [pc, #228]	; (8002f4c <HAL_DMA_IRQHandler+0xe28>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d031      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a38      	ldr	r2, [pc, #224]	; (8002f50 <HAL_DMA_IRQHandler+0xe2c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d02c      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a36      	ldr	r2, [pc, #216]	; (8002f54 <HAL_DMA_IRQHandler+0xe30>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d027      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a35      	ldr	r2, [pc, #212]	; (8002f58 <HAL_DMA_IRQHandler+0xe34>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a33      	ldr	r2, [pc, #204]	; (8002f5c <HAL_DMA_IRQHandler+0xe38>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a32      	ldr	r2, [pc, #200]	; (8002f60 <HAL_DMA_IRQHandler+0xe3c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d018      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a30      	ldr	r2, [pc, #192]	; (8002f64 <HAL_DMA_IRQHandler+0xe40>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a2f      	ldr	r2, [pc, #188]	; (8002f68 <HAL_DMA_IRQHandler+0xe44>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	; (8002f6c <HAL_DMA_IRQHandler+0xe48>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a2c      	ldr	r2, [pc, #176]	; (8002f70 <HAL_DMA_IRQHandler+0xe4c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_IRQHandler+0xdaa>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2a      	ldr	r2, [pc, #168]	; (8002f74 <HAL_DMA_IRQHandler+0xe50>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d108      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0xdbc>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 021c 	bic.w	r2, r2, #28
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e007      	b.n	8002ef0 <HAL_DMA_IRQHandler+0xdcc>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020e 	bic.w	r2, r2, #14
 8002eee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2201      	movs	r2, #1
 8002efa:	409a      	lsls	r2, r3
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
 8002f26:	e004      	b.n	8002f32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f32:	3728      	adds	r7, #40	; 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40020010 	.word	0x40020010
 8002f3c:	40020028 	.word	0x40020028
 8002f40:	40020040 	.word	0x40020040
 8002f44:	40020058 	.word	0x40020058
 8002f48:	40020070 	.word	0x40020070
 8002f4c:	40020088 	.word	0x40020088
 8002f50:	400200a0 	.word	0x400200a0
 8002f54:	400200b8 	.word	0x400200b8
 8002f58:	40020410 	.word	0x40020410
 8002f5c:	40020428 	.word	0x40020428
 8002f60:	40020440 	.word	0x40020440
 8002f64:	40020458 	.word	0x40020458
 8002f68:	40020470 	.word	0x40020470
 8002f6c:	40020488 	.word	0x40020488
 8002f70:	400204a0 	.word	0x400204a0
 8002f74:	400204b8 	.word	0x400204b8

08002f78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a84      	ldr	r2, [pc, #528]	; (80031a8 <DMA_SetConfig+0x230>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d072      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a82      	ldr	r2, [pc, #520]	; (80031ac <DMA_SetConfig+0x234>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d06d      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a81      	ldr	r2, [pc, #516]	; (80031b0 <DMA_SetConfig+0x238>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d068      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a7f      	ldr	r2, [pc, #508]	; (80031b4 <DMA_SetConfig+0x23c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d063      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	; (80031b8 <DMA_SetConfig+0x240>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d05e      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a7c      	ldr	r2, [pc, #496]	; (80031bc <DMA_SetConfig+0x244>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d059      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a7b      	ldr	r2, [pc, #492]	; (80031c0 <DMA_SetConfig+0x248>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d054      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a79      	ldr	r2, [pc, #484]	; (80031c4 <DMA_SetConfig+0x24c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d04f      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a78      	ldr	r2, [pc, #480]	; (80031c8 <DMA_SetConfig+0x250>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d04a      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a76      	ldr	r2, [pc, #472]	; (80031cc <DMA_SetConfig+0x254>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d045      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a75      	ldr	r2, [pc, #468]	; (80031d0 <DMA_SetConfig+0x258>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d040      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a73      	ldr	r2, [pc, #460]	; (80031d4 <DMA_SetConfig+0x25c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d03b      	beq.n	8003082 <DMA_SetConfig+0x10a>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a72      	ldr	r2, [pc, #456]	; (80031d8 <DMA_SetConfig+0x260>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d036      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a70      	ldr	r2, [pc, #448]	; (80031dc <DMA_SetConfig+0x264>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d031      	beq.n	8003082 <DMA_SetConfig+0x10a>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6f      	ldr	r2, [pc, #444]	; (80031e0 <DMA_SetConfig+0x268>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d02c      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a6d      	ldr	r2, [pc, #436]	; (80031e4 <DMA_SetConfig+0x26c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d027      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a6c      	ldr	r2, [pc, #432]	; (80031e8 <DMA_SetConfig+0x270>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <DMA_SetConfig+0x10a>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a6a      	ldr	r2, [pc, #424]	; (80031ec <DMA_SetConfig+0x274>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01d      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a69      	ldr	r2, [pc, #420]	; (80031f0 <DMA_SetConfig+0x278>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d018      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a67      	ldr	r2, [pc, #412]	; (80031f4 <DMA_SetConfig+0x27c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <DMA_SetConfig+0x10a>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a66      	ldr	r2, [pc, #408]	; (80031f8 <DMA_SetConfig+0x280>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00e      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a64      	ldr	r2, [pc, #400]	; (80031fc <DMA_SetConfig+0x284>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d009      	beq.n	8003082 <DMA_SetConfig+0x10a>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a63      	ldr	r2, [pc, #396]	; (8003200 <DMA_SetConfig+0x288>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d004      	beq.n	8003082 <DMA_SetConfig+0x10a>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a61      	ldr	r2, [pc, #388]	; (8003204 <DMA_SetConfig+0x28c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d101      	bne.n	8003086 <DMA_SetConfig+0x10e>
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <DMA_SetConfig+0x110>
 8003086:	2300      	movs	r3, #0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003094:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3e      	ldr	r2, [pc, #248]	; (80031a8 <DMA_SetConfig+0x230>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d04a      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a3d      	ldr	r2, [pc, #244]	; (80031ac <DMA_SetConfig+0x234>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d045      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a3b      	ldr	r2, [pc, #236]	; (80031b0 <DMA_SetConfig+0x238>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d040      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3a      	ldr	r2, [pc, #232]	; (80031b4 <DMA_SetConfig+0x23c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d03b      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a38      	ldr	r2, [pc, #224]	; (80031b8 <DMA_SetConfig+0x240>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d036      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a37      	ldr	r2, [pc, #220]	; (80031bc <DMA_SetConfig+0x244>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d031      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a35      	ldr	r2, [pc, #212]	; (80031c0 <DMA_SetConfig+0x248>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02c      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <DMA_SetConfig+0x24c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d027      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a32      	ldr	r2, [pc, #200]	; (80031c8 <DMA_SetConfig+0x250>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d022      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a31      	ldr	r2, [pc, #196]	; (80031cc <DMA_SetConfig+0x254>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d01d      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <DMA_SetConfig+0x258>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d018      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2e      	ldr	r2, [pc, #184]	; (80031d4 <DMA_SetConfig+0x25c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2c      	ldr	r2, [pc, #176]	; (80031d8 <DMA_SetConfig+0x260>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00e      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2b      	ldr	r2, [pc, #172]	; (80031dc <DMA_SetConfig+0x264>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d009      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <DMA_SetConfig+0x268>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <DMA_SetConfig+0x1d0>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <DMA_SetConfig+0x26c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <DMA_SetConfig+0x1d4>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <DMA_SetConfig+0x1d6>
 800314c:	2300      	movs	r3, #0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d05a      	beq.n	8003208 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	223f      	movs	r2, #63	; 0x3f
 800315c:	409a      	lsls	r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003170:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b40      	cmp	r3, #64	; 0x40
 8003180:	d108      	bne.n	8003194 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003192:	e087      	b.n	80032a4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	60da      	str	r2, [r3, #12]
}
 80031a4:	e07e      	b.n	80032a4 <DMA_SetConfig+0x32c>
 80031a6:	bf00      	nop
 80031a8:	40020010 	.word	0x40020010
 80031ac:	40020028 	.word	0x40020028
 80031b0:	40020040 	.word	0x40020040
 80031b4:	40020058 	.word	0x40020058
 80031b8:	40020070 	.word	0x40020070
 80031bc:	40020088 	.word	0x40020088
 80031c0:	400200a0 	.word	0x400200a0
 80031c4:	400200b8 	.word	0x400200b8
 80031c8:	40020410 	.word	0x40020410
 80031cc:	40020428 	.word	0x40020428
 80031d0:	40020440 	.word	0x40020440
 80031d4:	40020458 	.word	0x40020458
 80031d8:	40020470 	.word	0x40020470
 80031dc:	40020488 	.word	0x40020488
 80031e0:	400204a0 	.word	0x400204a0
 80031e4:	400204b8 	.word	0x400204b8
 80031e8:	58025408 	.word	0x58025408
 80031ec:	5802541c 	.word	0x5802541c
 80031f0:	58025430 	.word	0x58025430
 80031f4:	58025444 	.word	0x58025444
 80031f8:	58025458 	.word	0x58025458
 80031fc:	5802546c 	.word	0x5802546c
 8003200:	58025480 	.word	0x58025480
 8003204:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a28      	ldr	r2, [pc, #160]	; (80032b0 <DMA_SetConfig+0x338>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d022      	beq.n	8003258 <DMA_SetConfig+0x2e0>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <DMA_SetConfig+0x33c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d01d      	beq.n	8003258 <DMA_SetConfig+0x2e0>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a25      	ldr	r2, [pc, #148]	; (80032b8 <DMA_SetConfig+0x340>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d018      	beq.n	8003258 <DMA_SetConfig+0x2e0>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a24      	ldr	r2, [pc, #144]	; (80032bc <DMA_SetConfig+0x344>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <DMA_SetConfig+0x2e0>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <DMA_SetConfig+0x348>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00e      	beq.n	8003258 <DMA_SetConfig+0x2e0>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a21      	ldr	r2, [pc, #132]	; (80032c4 <DMA_SetConfig+0x34c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d009      	beq.n	8003258 <DMA_SetConfig+0x2e0>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <DMA_SetConfig+0x350>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <DMA_SetConfig+0x2e0>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1e      	ldr	r2, [pc, #120]	; (80032cc <DMA_SetConfig+0x354>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d101      	bne.n	800325c <DMA_SetConfig+0x2e4>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <DMA_SetConfig+0x2e6>
 800325c:	2300      	movs	r3, #0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d020      	beq.n	80032a4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2201      	movs	r2, #1
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b40      	cmp	r3, #64	; 0x40
 8003280:	d108      	bne.n	8003294 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	60da      	str	r2, [r3, #12]
}
 8003292:	e007      	b.n	80032a4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	60da      	str	r2, [r3, #12]
}
 80032a4:	bf00      	nop
 80032a6:	371c      	adds	r7, #28
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	58025408 	.word	0x58025408
 80032b4:	5802541c 	.word	0x5802541c
 80032b8:	58025430 	.word	0x58025430
 80032bc:	58025444 	.word	0x58025444
 80032c0:	58025458 	.word	0x58025458
 80032c4:	5802546c 	.word	0x5802546c
 80032c8:	58025480 	.word	0x58025480
 80032cc:	58025494 	.word	0x58025494

080032d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a42      	ldr	r2, [pc, #264]	; (80033e8 <DMA_CalcBaseAndBitshift+0x118>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d04a      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a41      	ldr	r2, [pc, #260]	; (80033ec <DMA_CalcBaseAndBitshift+0x11c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d045      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a3f      	ldr	r2, [pc, #252]	; (80033f0 <DMA_CalcBaseAndBitshift+0x120>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d040      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a3e      	ldr	r2, [pc, #248]	; (80033f4 <DMA_CalcBaseAndBitshift+0x124>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d03b      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a3c      	ldr	r2, [pc, #240]	; (80033f8 <DMA_CalcBaseAndBitshift+0x128>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d036      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a3b      	ldr	r2, [pc, #236]	; (80033fc <DMA_CalcBaseAndBitshift+0x12c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d031      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a39      	ldr	r2, [pc, #228]	; (8003400 <DMA_CalcBaseAndBitshift+0x130>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02c      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a38      	ldr	r2, [pc, #224]	; (8003404 <DMA_CalcBaseAndBitshift+0x134>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d027      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a36      	ldr	r2, [pc, #216]	; (8003408 <DMA_CalcBaseAndBitshift+0x138>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d022      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a35      	ldr	r2, [pc, #212]	; (800340c <DMA_CalcBaseAndBitshift+0x13c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d01d      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a33      	ldr	r2, [pc, #204]	; (8003410 <DMA_CalcBaseAndBitshift+0x140>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d018      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a32      	ldr	r2, [pc, #200]	; (8003414 <DMA_CalcBaseAndBitshift+0x144>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a30      	ldr	r2, [pc, #192]	; (8003418 <DMA_CalcBaseAndBitshift+0x148>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00e      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a2f      	ldr	r2, [pc, #188]	; (800341c <DMA_CalcBaseAndBitshift+0x14c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d009      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2d      	ldr	r2, [pc, #180]	; (8003420 <DMA_CalcBaseAndBitshift+0x150>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <DMA_CalcBaseAndBitshift+0xa8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a2c      	ldr	r2, [pc, #176]	; (8003424 <DMA_CalcBaseAndBitshift+0x154>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <DMA_CalcBaseAndBitshift+0xac>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <DMA_CalcBaseAndBitshift+0xae>
 800337c:	2300      	movs	r3, #0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d024      	beq.n	80033cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	3b10      	subs	r3, #16
 800338a:	4a27      	ldr	r2, [pc, #156]	; (8003428 <DMA_CalcBaseAndBitshift+0x158>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	4a24      	ldr	r2, [pc, #144]	; (800342c <DMA_CalcBaseAndBitshift+0x15c>)
 800339c:	5cd3      	ldrb	r3, [r2, r3]
 800339e:	461a      	mov	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d908      	bls.n	80033bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <DMA_CalcBaseAndBitshift+0x160>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	1d1a      	adds	r2, r3, #4
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	659a      	str	r2, [r3, #88]	; 0x58
 80033ba:	e00d      	b.n	80033d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b1b      	ldr	r3, [pc, #108]	; (8003430 <DMA_CalcBaseAndBitshift+0x160>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6593      	str	r3, [r2, #88]	; 0x58
 80033ca:	e005      	b.n	80033d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40020010 	.word	0x40020010
 80033ec:	40020028 	.word	0x40020028
 80033f0:	40020040 	.word	0x40020040
 80033f4:	40020058 	.word	0x40020058
 80033f8:	40020070 	.word	0x40020070
 80033fc:	40020088 	.word	0x40020088
 8003400:	400200a0 	.word	0x400200a0
 8003404:	400200b8 	.word	0x400200b8
 8003408:	40020410 	.word	0x40020410
 800340c:	40020428 	.word	0x40020428
 8003410:	40020440 	.word	0x40020440
 8003414:	40020458 	.word	0x40020458
 8003418:	40020470 	.word	0x40020470
 800341c:	40020488 	.word	0x40020488
 8003420:	400204a0 	.word	0x400204a0
 8003424:	400204b8 	.word	0x400204b8
 8003428:	aaaaaaab 	.word	0xaaaaaaab
 800342c:	08005f90 	.word	0x08005f90
 8003430:	fffffc00 	.word	0xfffffc00

08003434 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d120      	bne.n	800348a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	2b03      	cmp	r3, #3
 800344e:	d858      	bhi.n	8003502 <DMA_CheckFifoParam+0xce>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <DMA_CheckFifoParam+0x24>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	08003469 	.word	0x08003469
 800345c:	0800347b 	.word	0x0800347b
 8003460:	08003469 	.word	0x08003469
 8003464:	08003503 	.word	0x08003503
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d048      	beq.n	8003506 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003478:	e045      	b.n	8003506 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003482:	d142      	bne.n	800350a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003488:	e03f      	b.n	800350a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003492:	d123      	bne.n	80034dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	2b03      	cmp	r3, #3
 800349a:	d838      	bhi.n	800350e <DMA_CheckFifoParam+0xda>
 800349c:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <DMA_CheckFifoParam+0x70>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034b5 	.word	0x080034b5
 80034a8:	080034bb 	.word	0x080034bb
 80034ac:	080034b5 	.word	0x080034b5
 80034b0:	080034cd 	.word	0x080034cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
        break;
 80034b8:	e030      	b.n	800351c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d025      	beq.n	8003512 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034ca:	e022      	b.n	8003512 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d4:	d11f      	bne.n	8003516 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80034da:	e01c      	b.n	8003516 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d902      	bls.n	80034ea <DMA_CheckFifoParam+0xb6>
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d003      	beq.n	80034f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80034e8:	e018      	b.n	800351c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
        break;
 80034ee:	e015      	b.n	800351c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00e      	beq.n	800351a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
    break;
 8003500:	e00b      	b.n	800351a <DMA_CheckFifoParam+0xe6>
        break;
 8003502:	bf00      	nop
 8003504:	e00a      	b.n	800351c <DMA_CheckFifoParam+0xe8>
        break;
 8003506:	bf00      	nop
 8003508:	e008      	b.n	800351c <DMA_CheckFifoParam+0xe8>
        break;
 800350a:	bf00      	nop
 800350c:	e006      	b.n	800351c <DMA_CheckFifoParam+0xe8>
        break;
 800350e:	bf00      	nop
 8003510:	e004      	b.n	800351c <DMA_CheckFifoParam+0xe8>
        break;
 8003512:	bf00      	nop
 8003514:	e002      	b.n	800351c <DMA_CheckFifoParam+0xe8>
        break;
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <DMA_CheckFifoParam+0xe8>
    break;
 800351a:	bf00      	nop
    }
  }

  return status;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop

0800352c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a38      	ldr	r2, [pc, #224]	; (8003620 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a36      	ldr	r2, [pc, #216]	; (8003624 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01d      	beq.n	800358a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a35      	ldr	r2, [pc, #212]	; (8003628 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a33      	ldr	r2, [pc, #204]	; (800362c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a32      	ldr	r2, [pc, #200]	; (8003630 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a30      	ldr	r2, [pc, #192]	; (8003634 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2f      	ldr	r2, [pc, #188]	; (8003638 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2d      	ldr	r2, [pc, #180]	; (800363c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01a      	beq.n	80035ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	3b08      	subs	r3, #8
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4b26      	ldr	r3, [pc, #152]	; (8003644 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	461a      	mov	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a24      	ldr	r2, [pc, #144]	; (8003648 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80035b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2201      	movs	r2, #1
 80035c2:	409a      	lsls	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80035c8:	e024      	b.n	8003614 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3b10      	subs	r3, #16
 80035d2:	4a1e      	ldr	r2, [pc, #120]	; (800364c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d806      	bhi.n	80035f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d902      	bls.n	80035f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3308      	adds	r3, #8
 80035f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	461a      	mov	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a16      	ldr	r2, [pc, #88]	; (800365c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003604:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2201      	movs	r2, #1
 800360e:	409a      	lsls	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	58025408 	.word	0x58025408
 8003624:	5802541c 	.word	0x5802541c
 8003628:	58025430 	.word	0x58025430
 800362c:	58025444 	.word	0x58025444
 8003630:	58025458 	.word	0x58025458
 8003634:	5802546c 	.word	0x5802546c
 8003638:	58025480 	.word	0x58025480
 800363c:	58025494 	.word	0x58025494
 8003640:	cccccccd 	.word	0xcccccccd
 8003644:	16009600 	.word	0x16009600
 8003648:	58025880 	.word	0x58025880
 800364c:	aaaaaaab 	.word	0xaaaaaaab
 8003650:	400204b8 	.word	0x400204b8
 8003654:	4002040f 	.word	0x4002040f
 8003658:	10008200 	.word	0x10008200
 800365c:	40020880 	.word	0x40020880

08003660 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d04a      	beq.n	800370c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d847      	bhi.n	800370c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a25      	ldr	r2, [pc, #148]	; (8003718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a24      	ldr	r2, [pc, #144]	; (800371c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a22      	ldr	r2, [pc, #136]	; (8003720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a21      	ldr	r2, [pc, #132]	; (8003724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4b17      	ldr	r3, [pc, #92]	; (8003738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	461a      	mov	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80036e8:	671a      	str	r2, [r3, #112]	; 0x70
 80036ea:	e009      	b.n	8003700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	461a      	mov	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a11      	ldr	r2, [pc, #68]	; (8003744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80036fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3b01      	subs	r3, #1
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	58025408 	.word	0x58025408
 800371c:	5802541c 	.word	0x5802541c
 8003720:	58025430 	.word	0x58025430
 8003724:	58025444 	.word	0x58025444
 8003728:	58025458 	.word	0x58025458
 800372c:	5802546c 	.word	0x5802546c
 8003730:	58025480 	.word	0x58025480
 8003734:	58025494 	.word	0x58025494
 8003738:	1600963f 	.word	0x1600963f
 800373c:	58025940 	.word	0x58025940
 8003740:	1000823f 	.word	0x1000823f
 8003744:	40020940 	.word	0x40020940

08003748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003756:	4b89      	ldr	r3, [pc, #548]	; (800397c <HAL_GPIO_Init+0x234>)
 8003758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800375a:	e194      	b.n	8003a86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 8186 	beq.w	8003a80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d00b      	beq.n	8003794 <HAL_GPIO_Init+0x4c>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d007      	beq.n	8003794 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003788:	2b11      	cmp	r3, #17
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b12      	cmp	r3, #18
 8003792:	d130      	bne.n	80037f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	2203      	movs	r2, #3
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037ca:	2201      	movs	r2, #1
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4013      	ands	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	091b      	lsrs	r3, r3, #4
 80037e0:	f003 0201 	and.w	r2, r3, #1
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	2203      	movs	r2, #3
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_Init+0xee>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b12      	cmp	r3, #18
 8003834:	d123      	bne.n	800387e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	08da      	lsrs	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3208      	adds	r2, #8
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0203 	and.w	r2, r3, #3
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80e0 	beq.w	8003a80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <HAL_GPIO_Init+0x238>)
 80038c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038c6:	4a2e      	ldr	r2, [pc, #184]	; (8003980 <HAL_GPIO_Init+0x238>)
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038d0:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <HAL_GPIO_Init+0x238>)
 80038d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038de:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_GPIO_Init+0x23c>)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	3302      	adds	r3, #2
 80038e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	220f      	movs	r2, #15
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a20      	ldr	r2, [pc, #128]	; (8003988 <HAL_GPIO_Init+0x240>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d052      	beq.n	80039b0 <HAL_GPIO_Init+0x268>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1f      	ldr	r2, [pc, #124]	; (800398c <HAL_GPIO_Init+0x244>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d031      	beq.n	8003976 <HAL_GPIO_Init+0x22e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <HAL_GPIO_Init+0x248>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02b      	beq.n	8003972 <HAL_GPIO_Init+0x22a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_GPIO_Init+0x24c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d025      	beq.n	800396e <HAL_GPIO_Init+0x226>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <HAL_GPIO_Init+0x250>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01f      	beq.n	800396a <HAL_GPIO_Init+0x222>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1b      	ldr	r2, [pc, #108]	; (800399c <HAL_GPIO_Init+0x254>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d019      	beq.n	8003966 <HAL_GPIO_Init+0x21e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <HAL_GPIO_Init+0x258>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_GPIO_Init+0x21a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_GPIO_Init+0x25c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00d      	beq.n	800395e <HAL_GPIO_Init+0x216>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <HAL_GPIO_Init+0x260>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <HAL_GPIO_Init+0x212>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_GPIO_Init+0x264>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_GPIO_Init+0x20e>
 8003952:	2309      	movs	r3, #9
 8003954:	e02d      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 8003956:	230a      	movs	r3, #10
 8003958:	e02b      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 800395a:	2308      	movs	r3, #8
 800395c:	e029      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 800395e:	2307      	movs	r3, #7
 8003960:	e027      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 8003962:	2306      	movs	r3, #6
 8003964:	e025      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 8003966:	2305      	movs	r3, #5
 8003968:	e023      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 800396a:	2304      	movs	r3, #4
 800396c:	e021      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 800396e:	2303      	movs	r3, #3
 8003970:	e01f      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 8003972:	2302      	movs	r3, #2
 8003974:	e01d      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 8003976:	2301      	movs	r3, #1
 8003978:	e01b      	b.n	80039b2 <HAL_GPIO_Init+0x26a>
 800397a:	bf00      	nop
 800397c:	58000080 	.word	0x58000080
 8003980:	58024400 	.word	0x58024400
 8003984:	58000400 	.word	0x58000400
 8003988:	58020000 	.word	0x58020000
 800398c:	58020400 	.word	0x58020400
 8003990:	58020800 	.word	0x58020800
 8003994:	58020c00 	.word	0x58020c00
 8003998:	58021000 	.word	0x58021000
 800399c:	58021400 	.word	0x58021400
 80039a0:	58021800 	.word	0x58021800
 80039a4:	58021c00 	.word	0x58021c00
 80039a8:	58022000 	.word	0x58022000
 80039ac:	58022400 	.word	0x58022400
 80039b0:	2300      	movs	r3, #0
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	f002 0203 	and.w	r2, r2, #3
 80039b8:	0092      	lsls	r2, r2, #2
 80039ba:	4093      	lsls	r3, r2
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039c2:	4938      	ldr	r1, [pc, #224]	; (8003aa4 <HAL_GPIO_Init+0x35c>)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	3302      	adds	r3, #2
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	43db      	mvns	r3, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f47f ae63 	bne.w	800375c <HAL_GPIO_Init+0x14>
  }
}
 8003a96:	bf00      	nop
 8003a98:	3724      	adds	r7, #36	; 0x24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	58000400 	.word	0x58000400

08003aa8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003ab0:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HAL_HSEM_FastTake+0x2c>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3320      	adds	r3, #32
 8003ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aba:	4a07      	ldr	r2, [pc, #28]	; (8003ad8 <HAL_HSEM_FastTake+0x30>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	58026400 	.word	0x58026400
 8003ad8:	80000300 	.word	0x80000300

08003adc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003ae6:	4906      	ldr	r1, [pc, #24]	; (8003b00 <HAL_HSEM_Release+0x24>)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	58026400 	.word	0x58026400

08003b04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003b0c:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	2b06      	cmp	r3, #6
 8003b16:	d00a      	beq.n	8003b2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b18:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d001      	beq.n	8003b2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e040      	b.n	8003bac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e03e      	b.n	8003bac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003b36:	491f      	ldr	r1, [pc, #124]	; (8003bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b3e:	f7fd f903 	bl	8000d48 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b44:	e009      	b.n	8003b5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b46:	f7fd f8ff 	bl	8000d48 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b54:	d901      	bls.n	8003b5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e028      	b.n	8003bac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b5a:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b66:	d1ee      	bne.n	8003b46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b1e      	cmp	r3, #30
 8003b6c:	d008      	beq.n	8003b80 <HAL_PWREx_ConfigSupply+0x7c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b2e      	cmp	r3, #46	; 0x2e
 8003b72:	d005      	beq.n	8003b80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b1d      	cmp	r3, #29
 8003b78:	d002      	beq.n	8003b80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b2d      	cmp	r3, #45	; 0x2d
 8003b7e:	d114      	bne.n	8003baa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003b80:	f7fd f8e2 	bl	8000d48 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b86:	e009      	b.n	8003b9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b88:	f7fd f8de 	bl	8000d48 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b96:	d901      	bls.n	8003b9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e007      	b.n	8003bac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d1ee      	bne.n	8003b88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	58024800 	.word	0x58024800

08003bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	; 0x30
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e3ff      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8087 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bd8:	4b99      	ldr	r3, [pc, #612]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003be2:	4b97      	ldr	r3, [pc, #604]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d007      	beq.n	8003bfe <HAL_RCC_OscConfig+0x46>
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	2b18      	cmp	r3, #24
 8003bf2:	d110      	bne.n	8003c16 <HAL_RCC_OscConfig+0x5e>
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d10b      	bne.n	8003c16 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfe:	4b90      	ldr	r3, [pc, #576]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d06c      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x12c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d168      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e3d9      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x76>
 8003c20:	4b87      	ldr	r3, [pc, #540]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a86      	ldr	r2, [pc, #536]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	e02e      	b.n	8003c8c <HAL_RCC_OscConfig+0xd4>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x98>
 8003c36:	4b82      	ldr	r3, [pc, #520]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a81      	ldr	r2, [pc, #516]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b7f      	ldr	r3, [pc, #508]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a7e      	ldr	r2, [pc, #504]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e01d      	b.n	8003c8c <HAL_RCC_OscConfig+0xd4>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0xbc>
 8003c5a:	4b79      	ldr	r3, [pc, #484]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a78      	ldr	r2, [pc, #480]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a75      	ldr	r2, [pc, #468]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0xd4>
 8003c74:	4b72      	ldr	r3, [pc, #456]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a71      	ldr	r2, [pc, #452]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b6f      	ldr	r3, [pc, #444]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6e      	ldr	r2, [pc, #440]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fd f858 	bl	8000d48 <HAL_GetTick>
 8003c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd f854 	bl	8000d48 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e38d      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cae:	4b64      	ldr	r3, [pc, #400]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0xe4>
 8003cba:	e014      	b.n	8003ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd f844 	bl	8000d48 <HAL_GetTick>
 8003cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc4:	f7fd f840 	bl	8000d48 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	; 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e379      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cd6:	4b5a      	ldr	r3, [pc, #360]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x10c>
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80ae 	beq.w	8003e50 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cf4:	4b52      	ldr	r3, [pc, #328]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cfc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cfe:	4b50      	ldr	r3, [pc, #320]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <HAL_RCC_OscConfig+0x162>
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	2b18      	cmp	r3, #24
 8003d0e:	d13a      	bne.n	8003d86 <HAL_RCC_OscConfig+0x1ce>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d135      	bne.n	8003d86 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d1a:	4b49      	ldr	r3, [pc, #292]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_RCC_OscConfig+0x17a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e34b      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d32:	f7fd f837 	bl	8000da4 <HAL_GetREVID>
 8003d36:	4602      	mov	r2, r0
 8003d38:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d817      	bhi.n	8003d70 <HAL_RCC_OscConfig+0x1b8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d108      	bne.n	8003d5a <HAL_RCC_OscConfig+0x1a2>
 8003d48:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003d50:	4a3b      	ldr	r2, [pc, #236]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d56:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d58:	e07a      	b.n	8003e50 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	031b      	lsls	r3, r3, #12
 8003d68:	4935      	ldr	r1, [pc, #212]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d6e:	e06f      	b.n	8003e50 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b33      	ldr	r3, [pc, #204]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	061b      	lsls	r3, r3, #24
 8003d7e:	4930      	ldr	r1, [pc, #192]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d84:	e064      	b.n	8003e50 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d045      	beq.n	8003e1a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d8e:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 0219 	bic.w	r2, r3, #25
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	4929      	ldr	r1, [pc, #164]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fc ffd2 	bl	8000d48 <HAL_GetTick>
 8003da4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da8:	f7fc ffce 	bl	8000d48 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e307      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dba:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	f7fc ffed 	bl	8000da4 <HAL_GetREVID>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d817      	bhi.n	8003e04 <HAL_RCC_OscConfig+0x24c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d108      	bne.n	8003dee <HAL_RCC_OscConfig+0x236>
 8003ddc:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003de4:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	6053      	str	r3, [r2, #4]
 8003dec:	e030      	b.n	8003e50 <HAL_RCC_OscConfig+0x298>
 8003dee:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	031b      	lsls	r3, r3, #12
 8003dfc:	4910      	ldr	r1, [pc, #64]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
 8003e02:	e025      	b.n	8003e50 <HAL_RCC_OscConfig+0x298>
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	490b      	ldr	r1, [pc, #44]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
 8003e18:	e01a      	b.n	8003e50 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <HAL_RCC_OscConfig+0x288>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fc ff8f 	bl	8000d48 <HAL_GetTick>
 8003e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e2e:	f7fc ff8b 	bl	8000d48 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d903      	bls.n	8003e44 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e2c4      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
 8003e40:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e44:	4ba4      	ldr	r3, [pc, #656]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ee      	bne.n	8003e2e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80a9 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5e:	4b9e      	ldr	r3, [pc, #632]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e68:	4b9b      	ldr	r3, [pc, #620]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d007      	beq.n	8003e84 <HAL_RCC_OscConfig+0x2cc>
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2b18      	cmp	r3, #24
 8003e78:	d13a      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x338>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d135      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e84:	4b94      	ldr	r3, [pc, #592]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x2e4>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	2b80      	cmp	r3, #128	; 0x80
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e296      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e9c:	f7fc ff82 	bl	8000da4 <HAL_GetREVID>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d817      	bhi.n	8003eda <HAL_RCC_OscConfig+0x322>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d108      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x30c>
 8003eb2:	4b89      	ldr	r3, [pc, #548]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003eba:	4a87      	ldr	r2, [pc, #540]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003ebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ec0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ec2:	e075      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ec4:	4b84      	ldr	r3, [pc, #528]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	069b      	lsls	r3, r3, #26
 8003ed2:	4981      	ldr	r1, [pc, #516]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ed8:	e06a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eda:	4b7f      	ldr	r3, [pc, #508]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	497b      	ldr	r1, [pc, #492]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003eee:	e05f      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d042      	beq.n	8003f7e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ef8:	4b77      	ldr	r3, [pc, #476]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a76      	ldr	r2, [pc, #472]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f04:	f7fc ff20 	bl	8000d48 <HAL_GetTick>
 8003f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f0c:	f7fc ff1c 	bl	8000d48 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e255      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f1e:	4b6e      	ldr	r3, [pc, #440]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f2a:	f7fc ff3b 	bl	8000da4 <HAL_GetREVID>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d817      	bhi.n	8003f68 <HAL_RCC_OscConfig+0x3b0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d108      	bne.n	8003f52 <HAL_RCC_OscConfig+0x39a>
 8003f40:	4b65      	ldr	r3, [pc, #404]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f48:	4a63      	ldr	r2, [pc, #396]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f4e:	6053      	str	r3, [r2, #4]
 8003f50:	e02e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3f8>
 8003f52:	4b61      	ldr	r3, [pc, #388]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	069b      	lsls	r3, r3, #26
 8003f60:	495d      	ldr	r1, [pc, #372]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	604b      	str	r3, [r1, #4]
 8003f66:	e023      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3f8>
 8003f68:	4b5b      	ldr	r3, [pc, #364]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	4958      	ldr	r1, [pc, #352]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60cb      	str	r3, [r1, #12]
 8003f7c:	e018      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f7e:	4b56      	ldr	r3, [pc, #344]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a55      	ldr	r2, [pc, #340]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fc fedd 	bl	8000d48 <HAL_GetTick>
 8003f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f92:	f7fc fed9 	bl	8000d48 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e212      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d036      	beq.n	800402a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d019      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc4:	4b44      	ldr	r3, [pc, #272]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc8:	4a43      	ldr	r2, [pc, #268]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7fc feba 	bl	8000d48 <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd8:	f7fc feb6 	bl	8000d48 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e1ef      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fea:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x420>
 8003ff6:	e018      	b.n	800402a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff8:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffc:	4a36      	ldr	r2, [pc, #216]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7fc fea0 	bl	8000d48 <HAL_GetTick>
 8004008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400c:	f7fc fe9c 	bl	8000d48 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e1d5      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d036      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d019      	beq.n	8004072 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800403e:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8004044:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004048:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800404a:	f7fc fe7d 	bl	8000d48 <HAL_GetTick>
 800404e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004050:	e008      	b.n	8004064 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004052:	f7fc fe79 	bl	8000d48 <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e1b2      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004064:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0f0      	beq.n	8004052 <HAL_RCC_OscConfig+0x49a>
 8004070:	e018      	b.n	80040a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004072:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 8004078:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800407c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800407e:	f7fc fe63 	bl	8000d48 <HAL_GetTick>
 8004082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004086:	f7fc fe5f 	bl	8000d48 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e198      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <HAL_RCC_OscConfig+0x520>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8085 	beq.w	80041bc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_RCC_OscConfig+0x524>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <HAL_RCC_OscConfig+0x524>)
 80040b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040be:	f7fc fe43 	bl	8000d48 <HAL_GetTick>
 80040c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040c4:	e00c      	b.n	80040e0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040c6:	f7fc fe3f 	bl	8000d48 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b64      	cmp	r3, #100	; 0x64
 80040d2:	d905      	bls.n	80040e0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e178      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
 80040d8:	58024400 	.word	0x58024400
 80040dc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040e0:	4b96      	ldr	r3, [pc, #600]	; (800433c <HAL_RCC_OscConfig+0x784>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0ec      	beq.n	80040c6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d106      	bne.n	8004102 <HAL_RCC_OscConfig+0x54a>
 80040f4:	4b92      	ldr	r3, [pc, #584]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4a91      	ldr	r2, [pc, #580]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004100:	e02d      	b.n	800415e <HAL_RCC_OscConfig+0x5a6>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x56c>
 800410a:	4b8d      	ldr	r3, [pc, #564]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a8c      	ldr	r2, [pc, #560]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
 8004116:	4b8a      	ldr	r3, [pc, #552]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a89      	ldr	r2, [pc, #548]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
 8004122:	e01c      	b.n	800415e <HAL_RCC_OscConfig+0x5a6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b05      	cmp	r3, #5
 800412a:	d10c      	bne.n	8004146 <HAL_RCC_OscConfig+0x58e>
 800412c:	4b84      	ldr	r3, [pc, #528]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a83      	ldr	r2, [pc, #524]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004132:	f043 0304 	orr.w	r3, r3, #4
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
 8004138:	4b81      	ldr	r3, [pc, #516]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	4a80      	ldr	r2, [pc, #512]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	; 0x70
 8004144:	e00b      	b.n	800415e <HAL_RCC_OscConfig+0x5a6>
 8004146:	4b7e      	ldr	r3, [pc, #504]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	4a7d      	ldr	r2, [pc, #500]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	6713      	str	r3, [r2, #112]	; 0x70
 8004152:	4b7b      	ldr	r3, [pc, #492]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	4a7a      	ldr	r2, [pc, #488]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004158:	f023 0304 	bic.w	r3, r3, #4
 800415c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d015      	beq.n	8004192 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004166:	f7fc fdef 	bl	8000d48 <HAL_GetTick>
 800416a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800416c:	e00a      	b.n	8004184 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416e:	f7fc fdeb 	bl	8000d48 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f241 3288 	movw	r2, #5000	; 0x1388
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e122      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004184:	4b6e      	ldr	r3, [pc, #440]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0ee      	beq.n	800416e <HAL_RCC_OscConfig+0x5b6>
 8004190:	e014      	b.n	80041bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004192:	f7fc fdd9 	bl	8000d48 <HAL_GetTick>
 8004196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800419a:	f7fc fdd5 	bl	8000d48 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e10c      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041b0:	4b63      	ldr	r3, [pc, #396]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ee      	bne.n	800419a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8101 	beq.w	80043c8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80041c6:	4b5e      	ldr	r3, [pc, #376]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ce:	2b18      	cmp	r3, #24
 80041d0:	f000 80bc 	beq.w	800434c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2b02      	cmp	r3, #2
 80041da:	f040 8095 	bne.w	8004308 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041de:	4b58      	ldr	r3, [pc, #352]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a57      	ldr	r2, [pc, #348]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80041e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fc fdad 	bl	8000d48 <HAL_GetTick>
 80041ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f2:	f7fc fda9 	bl	8000d48 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e0e2      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004204:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1f0      	bne.n	80041f2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004210:	4b4b      	ldr	r3, [pc, #300]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004214:	4b4b      	ldr	r3, [pc, #300]	; (8004344 <HAL_RCC_OscConfig+0x78c>)
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004220:	0112      	lsls	r2, r2, #4
 8004222:	430a      	orrs	r2, r1
 8004224:	4946      	ldr	r1, [pc, #280]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004226:	4313      	orrs	r3, r2
 8004228:	628b      	str	r3, [r1, #40]	; 0x28
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	3b01      	subs	r3, #1
 8004230:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004238:	3b01      	subs	r3, #1
 800423a:	025b      	lsls	r3, r3, #9
 800423c:	b29b      	uxth	r3, r3
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	3b01      	subs	r3, #1
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	3b01      	subs	r3, #1
 8004254:	061b      	lsls	r3, r3, #24
 8004256:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800425a:	4939      	ldr	r1, [pc, #228]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800425c:	4313      	orrs	r3, r2
 800425e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004260:	4b37      	ldr	r3, [pc, #220]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	4a36      	ldr	r2, [pc, #216]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800426c:	4b34      	ldr	r3, [pc, #208]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800426e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004270:	4b35      	ldr	r3, [pc, #212]	; (8004348 <HAL_RCC_OscConfig+0x790>)
 8004272:	4013      	ands	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004278:	00d2      	lsls	r2, r2, #3
 800427a:	4931      	ldr	r1, [pc, #196]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800427c:	4313      	orrs	r3, r2
 800427e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004280:	4b2f      	ldr	r3, [pc, #188]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	f023 020c 	bic.w	r2, r3, #12
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	492c      	ldr	r1, [pc, #176]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800428e:	4313      	orrs	r3, r2
 8004290:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004292:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	f023 0202 	bic.w	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	4928      	ldr	r1, [pc, #160]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042a4:	4b26      	ldr	r3, [pc, #152]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	4a25      	ldr	r2, [pc, #148]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b0:	4b23      	ldr	r3, [pc, #140]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	4a22      	ldr	r2, [pc, #136]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042bc:	4b20      	ldr	r3, [pc, #128]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	4a1c      	ldr	r2, [pc, #112]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a19      	ldr	r2, [pc, #100]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e0:	f7fc fd32 	bl	8000d48 <HAL_GetTick>
 80042e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fc fd2e 	bl	8000d48 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e067      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x730>
 8004306:	e05f      	b.n	80043c8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004308:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0c      	ldr	r2, [pc, #48]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 800430e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fc fd18 	bl	8000d48 <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431c:	f7fc fd14 	bl	8000d48 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e04d      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <HAL_RCC_OscConfig+0x788>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x764>
 800433a:	e045      	b.n	80043c8 <HAL_RCC_OscConfig+0x810>
 800433c:	58024800 	.word	0x58024800
 8004340:	58024400 	.word	0x58024400
 8004344:	fffffc0c 	.word	0xfffffc0c
 8004348:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800434c:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_RCC_OscConfig+0x81c>)
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004352:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <HAL_RCC_OscConfig+0x81c>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	2b01      	cmp	r3, #1
 800435e:	d031      	beq.n	80043c4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0203 	and.w	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d12a      	bne.n	80043c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d122      	bne.n	80043c4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800438a:	429a      	cmp	r2, r3
 800438c:	d11a      	bne.n	80043c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	0a5b      	lsrs	r3, r3, #9
 8004392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d111      	bne.n	80043c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	0c1b      	lsrs	r3, r3, #16
 80043a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d108      	bne.n	80043c4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	0e1b      	lsrs	r3, r3, #24
 80043b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3730      	adds	r7, #48	; 0x30
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	58024400 	.word	0x58024400

080043d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e19c      	b.n	8004726 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043ec:	4b8a      	ldr	r3, [pc, #552]	; (8004618 <HAL_RCC_ClockConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d910      	bls.n	800441c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b87      	ldr	r3, [pc, #540]	; (8004618 <HAL_RCC_ClockConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 020f 	bic.w	r2, r3, #15
 8004402:	4985      	ldr	r1, [pc, #532]	; (8004618 <HAL_RCC_ClockConfig+0x240>)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b83      	ldr	r3, [pc, #524]	; (8004618 <HAL_RCC_ClockConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e184      	b.n	8004726 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d010      	beq.n	800444a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	4b7b      	ldr	r3, [pc, #492]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004434:	429a      	cmp	r2, r3
 8004436:	d908      	bls.n	800444a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004438:	4b78      	ldr	r3, [pc, #480]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	4975      	ldr	r1, [pc, #468]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 8004446:	4313      	orrs	r3, r2
 8004448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d010      	beq.n	8004478 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	4b70      	ldr	r3, [pc, #448]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004462:	429a      	cmp	r2, r3
 8004464:	d908      	bls.n	8004478 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004466:	4b6d      	ldr	r3, [pc, #436]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	496a      	ldr	r1, [pc, #424]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 8004474:	4313      	orrs	r3, r2
 8004476:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	d010      	beq.n	80044a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	4b64      	ldr	r3, [pc, #400]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004490:	429a      	cmp	r2, r3
 8004492:	d908      	bls.n	80044a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004494:	4b61      	ldr	r3, [pc, #388]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	495e      	ldr	r1, [pc, #376]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d010      	beq.n	80044d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044be:	429a      	cmp	r2, r3
 80044c0:	d908      	bls.n	80044d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80044c2:	4b56      	ldr	r3, [pc, #344]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	4953      	ldr	r1, [pc, #332]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d010      	beq.n	8004502 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	4b4d      	ldr	r3, [pc, #308]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d908      	bls.n	8004502 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f0:	4b4a      	ldr	r3, [pc, #296]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f023 020f 	bic.w	r2, r3, #15
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4947      	ldr	r1, [pc, #284]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d055      	beq.n	80045ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800450e:	4b43      	ldr	r3, [pc, #268]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	4940      	ldr	r1, [pc, #256]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 800451c:	4313      	orrs	r3, r2
 800451e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d107      	bne.n	8004538 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004528:	4b3c      	ldr	r3, [pc, #240]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d121      	bne.n	8004578 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0f6      	b.n	8004726 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d107      	bne.n	8004550 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004540:	4b36      	ldr	r3, [pc, #216]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d115      	bne.n	8004578 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0ea      	b.n	8004726 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d107      	bne.n	8004568 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004558:	4b30      	ldr	r3, [pc, #192]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0de      	b.n	8004726 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004568:	4b2c      	ldr	r3, [pc, #176]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0d6      	b.n	8004726 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004578:	4b28      	ldr	r3, [pc, #160]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f023 0207 	bic.w	r2, r3, #7
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4925      	ldr	r1, [pc, #148]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 8004586:	4313      	orrs	r3, r2
 8004588:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458a:	f7fc fbdd 	bl	8000d48 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004592:	f7fc fbd9 	bl	8000d48 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0be      	b.n	8004726 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a8:	4b1c      	ldr	r3, [pc, #112]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d1eb      	bne.n	8004592 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d010      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d208      	bcs.n	80045e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f023 020f 	bic.w	r2, r3, #15
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	490e      	ldr	r1, [pc, #56]	; (800461c <HAL_RCC_ClockConfig+0x244>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCC_ClockConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d214      	bcs.n	8004620 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <HAL_RCC_ClockConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 020f 	bic.w	r2, r3, #15
 80045fe:	4906      	ldr	r1, [pc, #24]	; (8004618 <HAL_RCC_ClockConfig+0x240>)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <HAL_RCC_ClockConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e086      	b.n	8004726 <HAL_RCC_ClockConfig+0x34e>
 8004618:	52002000 	.word	0x52002000
 800461c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d010      	beq.n	800464e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	4b3f      	ldr	r3, [pc, #252]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004638:	429a      	cmp	r2, r3
 800463a:	d208      	bcs.n	800464e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800463c:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	4939      	ldr	r1, [pc, #228]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 800464a:	4313      	orrs	r3, r2
 800464c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d010      	beq.n	800467c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	4b34      	ldr	r3, [pc, #208]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004666:	429a      	cmp	r2, r3
 8004668:	d208      	bcs.n	800467c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800466a:	4b31      	ldr	r3, [pc, #196]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	492e      	ldr	r1, [pc, #184]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 8004678:	4313      	orrs	r3, r2
 800467a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b00      	cmp	r3, #0
 8004686:	d010      	beq.n	80046aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	4b28      	ldr	r3, [pc, #160]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004694:	429a      	cmp	r2, r3
 8004696:	d208      	bcs.n	80046aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	4922      	ldr	r1, [pc, #136]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d010      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d208      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046c6:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4917      	ldr	r1, [pc, #92]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80046d8:	f000 f834 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 80046dc:	4601      	mov	r1, r0
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	4a12      	ldr	r2, [pc, #72]	; (8004734 <HAL_RCC_ClockConfig+0x35c>)
 80046ea:	5cd3      	ldrb	r3, [r2, r3]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	fa21 f303 	lsr.w	r3, r1, r3
 80046f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046f6:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <HAL_RCC_ClockConfig+0x358>)
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	4a0d      	ldr	r2, [pc, #52]	; (8004734 <HAL_RCC_ClockConfig+0x35c>)
 8004700:	5cd3      	ldrb	r3, [r2, r3]
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
 800470c:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <HAL_RCC_ClockConfig+0x360>)
 800470e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004710:	4a0a      	ldr	r2, [pc, #40]	; (800473c <HAL_RCC_ClockConfig+0x364>)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_ClockConfig+0x368>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fc faca 	bl	8000cb4 <HAL_InitTick>
 8004720:	4603      	mov	r3, r0
 8004722:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004724:	7bfb      	ldrb	r3, [r7, #15]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	58024400 	.word	0x58024400
 8004734:	08005f80 	.word	0x08005f80
 8004738:	20000004 	.word	0x20000004
 800473c:	20000000 	.word	0x20000000
 8004740:	20000008 	.word	0x20000008

08004744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	; 0x24
 8004748:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800474a:	4baf      	ldr	r3, [pc, #700]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004752:	2b18      	cmp	r3, #24
 8004754:	f200 814e 	bhi.w	80049f4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <HAL_RCC_GetSysClockFreq+0x1c>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	080047c5 	.word	0x080047c5
 8004764:	080049f5 	.word	0x080049f5
 8004768:	080049f5 	.word	0x080049f5
 800476c:	080049f5 	.word	0x080049f5
 8004770:	080049f5 	.word	0x080049f5
 8004774:	080049f5 	.word	0x080049f5
 8004778:	080049f5 	.word	0x080049f5
 800477c:	080049f5 	.word	0x080049f5
 8004780:	080047eb 	.word	0x080047eb
 8004784:	080049f5 	.word	0x080049f5
 8004788:	080049f5 	.word	0x080049f5
 800478c:	080049f5 	.word	0x080049f5
 8004790:	080049f5 	.word	0x080049f5
 8004794:	080049f5 	.word	0x080049f5
 8004798:	080049f5 	.word	0x080049f5
 800479c:	080049f5 	.word	0x080049f5
 80047a0:	080047f1 	.word	0x080047f1
 80047a4:	080049f5 	.word	0x080049f5
 80047a8:	080049f5 	.word	0x080049f5
 80047ac:	080049f5 	.word	0x080049f5
 80047b0:	080049f5 	.word	0x080049f5
 80047b4:	080049f5 	.word	0x080049f5
 80047b8:	080049f5 	.word	0x080049f5
 80047bc:	080049f5 	.word	0x080049f5
 80047c0:	080047f7 	.word	0x080047f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c4:	4b90      	ldr	r3, [pc, #576]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047d0:	4b8d      	ldr	r3, [pc, #564]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	08db      	lsrs	r3, r3, #3
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	4a8c      	ldr	r2, [pc, #560]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
 80047e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80047e2:	e10a      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047e4:	4b89      	ldr	r3, [pc, #548]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80047e6:	61bb      	str	r3, [r7, #24]
    break;
 80047e8:	e107      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80047ea:	4b89      	ldr	r3, [pc, #548]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80047ec:	61bb      	str	r3, [r7, #24]
    break;
 80047ee:	e104      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80047f0:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80047f2:	61bb      	str	r3, [r7, #24]
    break;
 80047f4:	e101      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f6:	4b84      	ldr	r3, [pc, #528]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004800:	4b81      	ldr	r3, [pc, #516]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800480a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800480c:	4b7e      	ldr	r3, [pc, #504]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004816:	4b7c      	ldr	r3, [pc, #496]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80da 	beq.w	80049ee <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d05a      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004840:	2b01      	cmp	r3, #1
 8004842:	d302      	bcc.n	800484a <HAL_RCC_GetSysClockFreq+0x106>
 8004844:	2b02      	cmp	r3, #2
 8004846:	d078      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x1f6>
 8004848:	e099      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484a:	4b6f      	ldr	r3, [pc, #444]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d02d      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004856:	4b6c      	ldr	r3, [pc, #432]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	08db      	lsrs	r3, r3, #3
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	4a6a      	ldr	r2, [pc, #424]	; (8004a0c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004880:	4b61      	ldr	r3, [pc, #388]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004890:	ed97 6a02 	vldr	s12, [r7, #8]
 8004894:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80048b0:	e087      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048bc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004a1c <HAL_RCC_GetSysClockFreq+0x2d8>
 80048c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c4:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80048d8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 80048dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f4:	e065      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004900:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004a20 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004908:	4b3f      	ldr	r3, [pc, #252]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004918:	ed97 6a02 	vldr	s12, [r7, #8]
 800491c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004934:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004938:	e043      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004a24 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494c:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004960:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497c:	e021      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004988:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004a20 <HAL_RCC_GetSysClockFreq+0x2dc>
 800498c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004990:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80049a4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004a18 <HAL_RCC_GetSysClockFreq+0x2d4>
 80049a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049c0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80049c2:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	0a5b      	lsrs	r3, r3, #9
 80049c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049cc:	3301      	adds	r3, #1
 80049ce:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049da:	edd7 6a07 	vldr	s13, [r7, #28]
 80049de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e6:	ee17 3a90 	vmov	r3, s15
 80049ea:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80049ec:	e005      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61bb      	str	r3, [r7, #24]
    break;
 80049f2:	e002      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80049f6:	61bb      	str	r3, [r7, #24]
    break;
 80049f8:	bf00      	nop
  }

  return sysclockfreq;
 80049fa:	69bb      	ldr	r3, [r7, #24]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3724      	adds	r7, #36	; 0x24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	58024400 	.word	0x58024400
 8004a0c:	03d09000 	.word	0x03d09000
 8004a10:	003d0900 	.word	0x003d0900
 8004a14:	007a1200 	.word	0x007a1200
 8004a18:	46000000 	.word	0x46000000
 8004a1c:	4c742400 	.word	0x4c742400
 8004a20:	4a742400 	.word	0x4a742400
 8004a24:	4af42400 	.word	0x4af42400

08004a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e049      	b.n	8004ace <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc f862 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f000 fa86 	bl	8004f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d001      	beq.n	8004af0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e019      	b.n	8004b24 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <HAL_TIM_Base_Start+0x58>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d00b      	beq.n	8004b22 <HAL_TIM_Base_Start+0x4a>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b10:	d007      	beq.n	8004b22 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	00010007 	.word	0x00010007

08004b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0202 	mvn.w	r2, #2
 8004b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9e0 	bl	8004f3c <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9d2 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f9e3 	bl	8004f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0204 	mvn.w	r2, #4
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9b6 	bl	8004f3c <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f9a8 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9b9 	bl	8004f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0208 	mvn.w	r2, #8
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f98c 	bl	8004f3c <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f97e 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f98f 	bl	8004f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0210 	mvn.w	r2, #16
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f962 	bl	8004f3c <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f954 	bl	8004f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f965 	bl	8004f50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0201 	mvn.w	r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f92e 	bl	8004f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fb14 	bl	800530c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d10e      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d107      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fb07 	bl	8005320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d10e      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d107      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f913 	bl	8004f64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d10e      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d107      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f06f 0220 	mvn.w	r2, #32
 8004d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fac7 	bl	80052f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_TIM_ConfigClockSource+0x18>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e0b7      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x188>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4b57      	ldr	r3, [pc, #348]	; (8004f04 <HAL_TIM_ConfigClockSource+0x190>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b70      	cmp	r3, #112	; 0x70
 8004dc2:	d02e      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0xae>
 8004dc4:	2b70      	cmp	r3, #112	; 0x70
 8004dc6:	d812      	bhi.n	8004dee <HAL_TIM_ConfigClockSource+0x7a>
 8004dc8:	2b30      	cmp	r3, #48	; 0x30
 8004dca:	f000 8084 	beq.w	8004ed6 <HAL_TIM_ConfigClockSource+0x162>
 8004dce:	2b30      	cmp	r3, #48	; 0x30
 8004dd0:	d806      	bhi.n	8004de0 <HAL_TIM_ConfigClockSource+0x6c>
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d07f      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x162>
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d07d      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x162>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d07b      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004dde:	e084      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004de0:	2b50      	cmp	r3, #80	; 0x50
 8004de2:	d048      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0x102>
 8004de4:	2b60      	cmp	r3, #96	; 0x60
 8004de6:	d056      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x122>
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d064      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8004dec:	e07d      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004dee:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004df2:	d070      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x162>
 8004df4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004df8:	d809      	bhi.n	8004e0e <HAL_TIM_ConfigClockSource+0x9a>
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfe:	d027      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0xdc>
 8004e00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e04:	d067      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x162>
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0a:	d06d      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e0c:	e06d      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8004e0e:	4a3e      	ldr	r2, [pc, #248]	; (8004f08 <HAL_TIM_ConfigClockSource+0x194>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d060      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x162>
 8004e14:	4a3d      	ldr	r2, [pc, #244]	; (8004f0c <HAL_TIM_ConfigClockSource+0x198>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d05d      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x162>
 8004e1a:	4a3d      	ldr	r2, [pc, #244]	; (8004f10 <HAL_TIM_ConfigClockSource+0x19c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d05a      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8004e20:	e063      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6899      	ldr	r1, [r3, #8]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f000 f9b9 	bl	80051a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	609a      	str	r2, [r3, #8]
      break;
 8004e4e:	e04c      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	6899      	ldr	r1, [r3, #8]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f000 f9a2 	bl	80051a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e72:	609a      	str	r2, [r3, #8]
      break;
 8004e74:	e039      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f000 f912 	bl	80050ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2150      	movs	r1, #80	; 0x50
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f96c 	bl	800516c <TIM_ITRx_SetConfig>
      break;
 8004e94:	e029      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 f931 	bl	800510a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2160      	movs	r1, #96	; 0x60
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f95c 	bl	800516c <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e019      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 f8f2 	bl	80050ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2140      	movs	r1, #64	; 0x40
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f94c 	bl	800516c <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e009      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f000 f943 	bl	800516c <TIM_ITRx_SetConfig>
      break;
 8004ee6:	e000      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004ee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	ffceff88 	.word	0xffceff88
 8004f08:	00100030 	.word	0x00100030
 8004f0c:	00100040 	.word	0x00100040
 8004f10:	00100020 	.word	0x00100020

08004f14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a40      	ldr	r2, [pc, #256]	; (800508c <TIM_Base_SetConfig+0x114>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f96:	d00f      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a3d      	ldr	r2, [pc, #244]	; (8005090 <TIM_Base_SetConfig+0x118>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00b      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a3c      	ldr	r2, [pc, #240]	; (8005094 <TIM_Base_SetConfig+0x11c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d007      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3b      	ldr	r2, [pc, #236]	; (8005098 <TIM_Base_SetConfig+0x120>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3a      	ldr	r2, [pc, #232]	; (800509c <TIM_Base_SetConfig+0x124>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d108      	bne.n	8004fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2f      	ldr	r2, [pc, #188]	; (800508c <TIM_Base_SetConfig+0x114>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01f      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd8:	d01b      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	; (8005090 <TIM_Base_SetConfig+0x118>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d017      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	; (8005094 <TIM_Base_SetConfig+0x11c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <TIM_Base_SetConfig+0x120>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00f      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a29      	ldr	r2, [pc, #164]	; (800509c <TIM_Base_SetConfig+0x124>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00b      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a28      	ldr	r2, [pc, #160]	; (80050a0 <TIM_Base_SetConfig+0x128>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <TIM_Base_SetConfig+0x12c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_Base_SetConfig+0x9a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a26      	ldr	r2, [pc, #152]	; (80050a8 <TIM_Base_SetConfig+0x130>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d108      	bne.n	8005024 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a10      	ldr	r2, [pc, #64]	; (800508c <TIM_Base_SetConfig+0x114>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00f      	beq.n	8005070 <TIM_Base_SetConfig+0xf8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <TIM_Base_SetConfig+0x124>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00b      	beq.n	8005070 <TIM_Base_SetConfig+0xf8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <TIM_Base_SetConfig+0x128>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_Base_SetConfig+0xf8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a10      	ldr	r2, [pc, #64]	; (80050a4 <TIM_Base_SetConfig+0x12c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_Base_SetConfig+0xf8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a0f      	ldr	r2, [pc, #60]	; (80050a8 <TIM_Base_SetConfig+0x130>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d103      	bne.n	8005078 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	615a      	str	r2, [r3, #20]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40010400 	.word	0x40010400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400
 80050a8:	40014800 	.word	0x40014800

080050ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 030a 	bic.w	r3, r3, #10
 80050e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f023 0210 	bic.w	r2, r3, #16
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	031b      	lsls	r3, r3, #12
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005146:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <TIM_ITRx_SetConfig+0x38>)
 8005180:	4013      	ands	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	f043 0307 	orr.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	609a      	str	r2, [r3, #8]
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	ffcfff8f 	.word	0xffcfff8f

080051a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e068      	b.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2e      	ldr	r2, [pc, #184]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2d      	ldr	r2, [pc, #180]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d108      	bne.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800523a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01d      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005272:	d018      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a18      	ldr	r2, [pc, #96]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a14      	ldr	r2, [pc, #80]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d10c      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40010400 	.word	0x40010400
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40001800 	.word	0x40001800

080052f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <__libc_init_array>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	4e0d      	ldr	r6, [pc, #52]	; (800536c <__libc_init_array+0x38>)
 8005338:	4c0d      	ldr	r4, [pc, #52]	; (8005370 <__libc_init_array+0x3c>)
 800533a:	1ba4      	subs	r4, r4, r6
 800533c:	10a4      	asrs	r4, r4, #2
 800533e:	2500      	movs	r5, #0
 8005340:	42a5      	cmp	r5, r4
 8005342:	d109      	bne.n	8005358 <__libc_init_array+0x24>
 8005344:	4e0b      	ldr	r6, [pc, #44]	; (8005374 <__libc_init_array+0x40>)
 8005346:	4c0c      	ldr	r4, [pc, #48]	; (8005378 <__libc_init_array+0x44>)
 8005348:	f000 fe0c 	bl	8005f64 <_init>
 800534c:	1ba4      	subs	r4, r4, r6
 800534e:	10a4      	asrs	r4, r4, #2
 8005350:	2500      	movs	r5, #0
 8005352:	42a5      	cmp	r5, r4
 8005354:	d105      	bne.n	8005362 <__libc_init_array+0x2e>
 8005356:	bd70      	pop	{r4, r5, r6, pc}
 8005358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800535c:	4798      	blx	r3
 800535e:	3501      	adds	r5, #1
 8005360:	e7ee      	b.n	8005340 <__libc_init_array+0xc>
 8005362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005366:	4798      	blx	r3
 8005368:	3501      	adds	r5, #1
 800536a:	e7f2      	b.n	8005352 <__libc_init_array+0x1e>
 800536c:	08006170 	.word	0x08006170
 8005370:	08006170 	.word	0x08006170
 8005374:	08006170 	.word	0x08006170
 8005378:	08006174 	.word	0x08006174

0800537c <memset>:
 800537c:	4402      	add	r2, r0
 800537e:	4603      	mov	r3, r0
 8005380:	4293      	cmp	r3, r2
 8005382:	d100      	bne.n	8005386 <memset+0xa>
 8005384:	4770      	bx	lr
 8005386:	f803 1b01 	strb.w	r1, [r3], #1
 800538a:	e7f9      	b.n	8005380 <memset+0x4>
 800538c:	0000      	movs	r0, r0
	...

08005390 <sin>:
 8005390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005392:	eeb0 7b40 	vmov.f64	d7, d0
 8005396:	ee17 3a90 	vmov	r3, s15
 800539a:	4a19      	ldr	r2, [pc, #100]	; (8005400 <sin+0x70>)
 800539c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053a0:	4293      	cmp	r3, r2
 80053a2:	dc05      	bgt.n	80053b0 <sin+0x20>
 80053a4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80053f8 <sin+0x68>
 80053a8:	2000      	movs	r0, #0
 80053aa:	f000 fc71 	bl	8005c90 <__kernel_sin>
 80053ae:	e004      	b.n	80053ba <sin+0x2a>
 80053b0:	4a14      	ldr	r2, [pc, #80]	; (8005404 <sin+0x74>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	dd04      	ble.n	80053c0 <sin+0x30>
 80053b6:	ee30 0b40 	vsub.f64	d0, d0, d0
 80053ba:	b005      	add	sp, #20
 80053bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80053c0:	4668      	mov	r0, sp
 80053c2:	f000 f821 	bl	8005408 <__ieee754_rem_pio2>
 80053c6:	f000 0003 	and.w	r0, r0, #3
 80053ca:	2801      	cmp	r0, #1
 80053cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053d0:	ed9d 0b00 	vldr	d0, [sp]
 80053d4:	d004      	beq.n	80053e0 <sin+0x50>
 80053d6:	2802      	cmp	r0, #2
 80053d8:	d005      	beq.n	80053e6 <sin+0x56>
 80053da:	b950      	cbnz	r0, 80053f2 <sin+0x62>
 80053dc:	2001      	movs	r0, #1
 80053de:	e7e4      	b.n	80053aa <sin+0x1a>
 80053e0:	f000 f94e 	bl	8005680 <__kernel_cos>
 80053e4:	e7e9      	b.n	80053ba <sin+0x2a>
 80053e6:	2001      	movs	r0, #1
 80053e8:	f000 fc52 	bl	8005c90 <__kernel_sin>
 80053ec:	eeb1 0b40 	vneg.f64	d0, d0
 80053f0:	e7e3      	b.n	80053ba <sin+0x2a>
 80053f2:	f000 f945 	bl	8005680 <__kernel_cos>
 80053f6:	e7f9      	b.n	80053ec <sin+0x5c>
	...
 8005400:	3fe921fb 	.word	0x3fe921fb
 8005404:	7fefffff 	.word	0x7fefffff

08005408 <__ieee754_rem_pio2>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	eeb0 7b40 	vmov.f64	d7, d0
 800540e:	ee17 5a90 	vmov	r5, s15
 8005412:	4b95      	ldr	r3, [pc, #596]	; (8005668 <__ieee754_rem_pio2+0x260>)
 8005414:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005418:	429e      	cmp	r6, r3
 800541a:	b088      	sub	sp, #32
 800541c:	4604      	mov	r4, r0
 800541e:	dc07      	bgt.n	8005430 <__ieee754_rem_pio2+0x28>
 8005420:	2200      	movs	r2, #0
 8005422:	2300      	movs	r3, #0
 8005424:	ed84 0b00 	vstr	d0, [r4]
 8005428:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800542c:	2000      	movs	r0, #0
 800542e:	e01b      	b.n	8005468 <__ieee754_rem_pio2+0x60>
 8005430:	4b8e      	ldr	r3, [pc, #568]	; (800566c <__ieee754_rem_pio2+0x264>)
 8005432:	429e      	cmp	r6, r3
 8005434:	dc3b      	bgt.n	80054ae <__ieee754_rem_pio2+0xa6>
 8005436:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800543a:	2d00      	cmp	r5, #0
 800543c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8005628 <__ieee754_rem_pio2+0x220>
 8005440:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8005444:	dd19      	ble.n	800547a <__ieee754_rem_pio2+0x72>
 8005446:	ee30 7b46 	vsub.f64	d7, d0, d6
 800544a:	429e      	cmp	r6, r3
 800544c:	d00e      	beq.n	800546c <__ieee754_rem_pio2+0x64>
 800544e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8005630 <__ieee754_rem_pio2+0x228>
 8005452:	ee37 5b46 	vsub.f64	d5, d7, d6
 8005456:	ee37 7b45 	vsub.f64	d7, d7, d5
 800545a:	ed84 5b00 	vstr	d5, [r4]
 800545e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005462:	ed84 7b02 	vstr	d7, [r4, #8]
 8005466:	2001      	movs	r0, #1
 8005468:	b008      	add	sp, #32
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005638 <__ieee754_rem_pio2+0x230>
 8005470:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005474:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005640 <__ieee754_rem_pio2+0x238>
 8005478:	e7eb      	b.n	8005452 <__ieee754_rem_pio2+0x4a>
 800547a:	429e      	cmp	r6, r3
 800547c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8005480:	d00e      	beq.n	80054a0 <__ieee754_rem_pio2+0x98>
 8005482:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8005630 <__ieee754_rem_pio2+0x228>
 8005486:	ee37 5b06 	vadd.f64	d5, d7, d6
 800548a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800548e:	ed84 5b00 	vstr	d5, [r4]
 8005492:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005496:	f04f 30ff 	mov.w	r0, #4294967295
 800549a:	ed84 7b02 	vstr	d7, [r4, #8]
 800549e:	e7e3      	b.n	8005468 <__ieee754_rem_pio2+0x60>
 80054a0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8005638 <__ieee754_rem_pio2+0x230>
 80054a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80054a8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8005640 <__ieee754_rem_pio2+0x238>
 80054ac:	e7eb      	b.n	8005486 <__ieee754_rem_pio2+0x7e>
 80054ae:	4b70      	ldr	r3, [pc, #448]	; (8005670 <__ieee754_rem_pio2+0x268>)
 80054b0:	429e      	cmp	r6, r3
 80054b2:	dc6c      	bgt.n	800558e <__ieee754_rem_pio2+0x186>
 80054b4:	f000 fc44 	bl	8005d40 <fabs>
 80054b8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80054bc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8005648 <__ieee754_rem_pio2+0x240>
 80054c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80054c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80054c8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80054cc:	ee17 0a90 	vmov	r0, s15
 80054d0:	eeb1 5b44 	vneg.f64	d5, d4
 80054d4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8005628 <__ieee754_rem_pio2+0x220>
 80054d8:	eea5 0b07 	vfma.f64	d0, d5, d7
 80054dc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8005630 <__ieee754_rem_pio2+0x228>
 80054e0:	281f      	cmp	r0, #31
 80054e2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80054e6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80054ea:	dc08      	bgt.n	80054fe <__ieee754_rem_pio2+0xf6>
 80054ec:	1e42      	subs	r2, r0, #1
 80054ee:	4b61      	ldr	r3, [pc, #388]	; (8005674 <__ieee754_rem_pio2+0x26c>)
 80054f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f4:	42b3      	cmp	r3, r6
 80054f6:	d002      	beq.n	80054fe <__ieee754_rem_pio2+0xf6>
 80054f8:	ed84 6b00 	vstr	d6, [r4]
 80054fc:	e022      	b.n	8005544 <__ieee754_rem_pio2+0x13c>
 80054fe:	ee16 3a90 	vmov	r3, s13
 8005502:	1536      	asrs	r6, r6, #20
 8005504:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8005508:	1af3      	subs	r3, r6, r3
 800550a:	2b10      	cmp	r3, #16
 800550c:	ddf4      	ble.n	80054f8 <__ieee754_rem_pio2+0xf0>
 800550e:	eeb0 6b40 	vmov.f64	d6, d0
 8005512:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8005638 <__ieee754_rem_pio2+0x230>
 8005516:	eea5 6b03 	vfma.f64	d6, d5, d3
 800551a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800551e:	eea5 7b03 	vfma.f64	d7, d5, d3
 8005522:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8005640 <__ieee754_rem_pio2+0x238>
 8005526:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800552a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800552e:	ee13 3a90 	vmov	r3, s7
 8005532:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8005536:	1af6      	subs	r6, r6, r3
 8005538:	2e31      	cmp	r6, #49	; 0x31
 800553a:	dc17      	bgt.n	800556c <__ieee754_rem_pio2+0x164>
 800553c:	eeb0 0b46 	vmov.f64	d0, d6
 8005540:	ed84 3b00 	vstr	d3, [r4]
 8005544:	ed94 6b00 	vldr	d6, [r4]
 8005548:	2d00      	cmp	r5, #0
 800554a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800554e:	ee30 7b47 	vsub.f64	d7, d0, d7
 8005552:	ed84 7b02 	vstr	d7, [r4, #8]
 8005556:	da87      	bge.n	8005468 <__ieee754_rem_pio2+0x60>
 8005558:	eeb1 6b46 	vneg.f64	d6, d6
 800555c:	ed84 6b00 	vstr	d6, [r4]
 8005560:	eeb1 7b47 	vneg.f64	d7, d7
 8005564:	4240      	negs	r0, r0
 8005566:	ed84 7b02 	vstr	d7, [r4, #8]
 800556a:	e77d      	b.n	8005468 <__ieee754_rem_pio2+0x60>
 800556c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8005650 <__ieee754_rem_pio2+0x248>
 8005570:	eeb0 0b46 	vmov.f64	d0, d6
 8005574:	eea5 0b03 	vfma.f64	d0, d5, d3
 8005578:	ee36 7b40 	vsub.f64	d7, d6, d0
 800557c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8005658 <__ieee754_rem_pio2+0x250>
 8005580:	eea5 7b03 	vfma.f64	d7, d5, d3
 8005584:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8005588:	ee30 6b47 	vsub.f64	d6, d0, d7
 800558c:	e7b4      	b.n	80054f8 <__ieee754_rem_pio2+0xf0>
 800558e:	4b3a      	ldr	r3, [pc, #232]	; (8005678 <__ieee754_rem_pio2+0x270>)
 8005590:	429e      	cmp	r6, r3
 8005592:	dd06      	ble.n	80055a2 <__ieee754_rem_pio2+0x19a>
 8005594:	ee30 7b40 	vsub.f64	d7, d0, d0
 8005598:	ed80 7b02 	vstr	d7, [r0, #8]
 800559c:	ed80 7b00 	vstr	d7, [r0]
 80055a0:	e744      	b.n	800542c <__ieee754_rem_pio2+0x24>
 80055a2:	1532      	asrs	r2, r6, #20
 80055a4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80055a8:	ee10 0a10 	vmov	r0, s0
 80055ac:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80055b0:	ec41 0b17 	vmov	d7, r0, r1
 80055b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80055b8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8005660 <__ieee754_rem_pio2+0x258>
 80055bc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80055c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80055c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80055cc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80055d0:	a908      	add	r1, sp, #32
 80055d2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80055d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055da:	ed8d 6b04 	vstr	d6, [sp, #16]
 80055de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80055e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80055e6:	2303      	movs	r3, #3
 80055e8:	ed31 7b02 	vldmdb	r1!, {d7}
 80055ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80055f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80055f8:	d013      	beq.n	8005622 <__ieee754_rem_pio2+0x21a>
 80055fa:	4920      	ldr	r1, [pc, #128]	; (800567c <__ieee754_rem_pio2+0x274>)
 80055fc:	9101      	str	r1, [sp, #4]
 80055fe:	2102      	movs	r1, #2
 8005600:	9100      	str	r1, [sp, #0]
 8005602:	a802      	add	r0, sp, #8
 8005604:	4621      	mov	r1, r4
 8005606:	f000 f8a7 	bl	8005758 <__kernel_rem_pio2>
 800560a:	2d00      	cmp	r5, #0
 800560c:	f6bf af2c 	bge.w	8005468 <__ieee754_rem_pio2+0x60>
 8005610:	ed94 7b00 	vldr	d7, [r4]
 8005614:	eeb1 7b47 	vneg.f64	d7, d7
 8005618:	ed84 7b00 	vstr	d7, [r4]
 800561c:	ed94 7b02 	vldr	d7, [r4, #8]
 8005620:	e79e      	b.n	8005560 <__ieee754_rem_pio2+0x158>
 8005622:	4603      	mov	r3, r0
 8005624:	e7e0      	b.n	80055e8 <__ieee754_rem_pio2+0x1e0>
 8005626:	bf00      	nop
 8005628:	54400000 	.word	0x54400000
 800562c:	3ff921fb 	.word	0x3ff921fb
 8005630:	1a626331 	.word	0x1a626331
 8005634:	3dd0b461 	.word	0x3dd0b461
 8005638:	1a600000 	.word	0x1a600000
 800563c:	3dd0b461 	.word	0x3dd0b461
 8005640:	2e037073 	.word	0x2e037073
 8005644:	3ba3198a 	.word	0x3ba3198a
 8005648:	6dc9c883 	.word	0x6dc9c883
 800564c:	3fe45f30 	.word	0x3fe45f30
 8005650:	2e000000 	.word	0x2e000000
 8005654:	3ba3198a 	.word	0x3ba3198a
 8005658:	252049c1 	.word	0x252049c1
 800565c:	397b839a 	.word	0x397b839a
 8005660:	00000000 	.word	0x00000000
 8005664:	41700000 	.word	0x41700000
 8005668:	3fe921fb 	.word	0x3fe921fb
 800566c:	4002d97b 	.word	0x4002d97b
 8005670:	413921fb 	.word	0x413921fb
 8005674:	08005f98 	.word	0x08005f98
 8005678:	7fefffff 	.word	0x7fefffff
 800567c:	08006018 	.word	0x08006018

08005680 <__kernel_cos>:
 8005680:	ee10 1a90 	vmov	r1, s1
 8005684:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8005688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800568c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8005690:	da05      	bge.n	800569e <__kernel_cos+0x1e>
 8005692:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8005696:	ee16 3a90 	vmov	r3, s13
 800569a:	2b00      	cmp	r3, #0
 800569c:	d03d      	beq.n	800571a <__kernel_cos+0x9a>
 800569e:	ee20 4b00 	vmul.f64	d4, d0, d0
 80056a2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80056a6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 8005720 <__kernel_cos+0xa0>
 80056aa:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80056ae:	ee24 6b06 	vmul.f64	d6, d4, d6
 80056b2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8005728 <__kernel_cos+0xa8>
 80056b6:	eea4 5b03 	vfma.f64	d5, d4, d3
 80056ba:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8005730 <__kernel_cos+0xb0>
 80056be:	eea5 3b04 	vfma.f64	d3, d5, d4
 80056c2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 8005738 <__kernel_cos+0xb8>
 80056c6:	eea3 5b04 	vfma.f64	d5, d3, d4
 80056ca:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8005740 <__kernel_cos+0xc0>
 80056ce:	4b20      	ldr	r3, [pc, #128]	; (8005750 <__kernel_cos+0xd0>)
 80056d0:	eea5 3b04 	vfma.f64	d3, d5, d4
 80056d4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8005748 <__kernel_cos+0xc8>
 80056d8:	4299      	cmp	r1, r3
 80056da:	eea3 5b04 	vfma.f64	d5, d3, d4
 80056de:	ee25 5b04 	vmul.f64	d5, d5, d4
 80056e2:	eea4 1b05 	vfma.f64	d1, d4, d5
 80056e6:	dc04      	bgt.n	80056f2 <__kernel_cos+0x72>
 80056e8:	ee36 6b41 	vsub.f64	d6, d6, d1
 80056ec:	ee37 0b46 	vsub.f64	d0, d7, d6
 80056f0:	4770      	bx	lr
 80056f2:	4b18      	ldr	r3, [pc, #96]	; (8005754 <__kernel_cos+0xd4>)
 80056f4:	4299      	cmp	r1, r3
 80056f6:	dc0d      	bgt.n	8005714 <__kernel_cos+0x94>
 80056f8:	2200      	movs	r2, #0
 80056fa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80056fe:	ec43 2b15 	vmov	d5, r2, r3
 8005702:	ee37 0b45 	vsub.f64	d0, d7, d5
 8005706:	ee36 6b45 	vsub.f64	d6, d6, d5
 800570a:	ee36 6b41 	vsub.f64	d6, d6, d1
 800570e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8005712:	4770      	bx	lr
 8005714:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8005718:	e7f3      	b.n	8005702 <__kernel_cos+0x82>
 800571a:	eeb0 0b47 	vmov.f64	d0, d7
 800571e:	4770      	bx	lr
 8005720:	be8838d4 	.word	0xbe8838d4
 8005724:	bda8fae9 	.word	0xbda8fae9
 8005728:	bdb4b1c4 	.word	0xbdb4b1c4
 800572c:	3e21ee9e 	.word	0x3e21ee9e
 8005730:	809c52ad 	.word	0x809c52ad
 8005734:	be927e4f 	.word	0xbe927e4f
 8005738:	19cb1590 	.word	0x19cb1590
 800573c:	3efa01a0 	.word	0x3efa01a0
 8005740:	16c15177 	.word	0x16c15177
 8005744:	bf56c16c 	.word	0xbf56c16c
 8005748:	5555554c 	.word	0x5555554c
 800574c:	3fa55555 	.word	0x3fa55555
 8005750:	3fd33332 	.word	0x3fd33332
 8005754:	3fe90000 	.word	0x3fe90000

08005758 <__kernel_rem_pio2>:
 8005758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575c:	ed2d 8b06 	vpush	{d8-d10}
 8005760:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8005764:	469b      	mov	fp, r3
 8005766:	460e      	mov	r6, r1
 8005768:	4bc7      	ldr	r3, [pc, #796]	; (8005a88 <__kernel_rem_pio2+0x330>)
 800576a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800576c:	9002      	str	r0, [sp, #8]
 800576e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8005772:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8005774:	1ed1      	subs	r1, r2, #3
 8005776:	2318      	movs	r3, #24
 8005778:	f06f 0417 	mvn.w	r4, #23
 800577c:	fb91 f1f3 	sdiv	r1, r1, r3
 8005780:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005784:	f10b 3aff 	add.w	sl, fp, #4294967295
 8005788:	fb01 4404 	mla	r4, r1, r4, r4
 800578c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8005a70 <__kernel_rem_pio2+0x318>
 8005790:	4414      	add	r4, r2
 8005792:	eba1 050a 	sub.w	r5, r1, sl
 8005796:	aa1a      	add	r2, sp, #104	; 0x68
 8005798:	eb09 070a 	add.w	r7, r9, sl
 800579c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 80057a0:	4696      	mov	lr, r2
 80057a2:	2300      	movs	r3, #0
 80057a4:	42bb      	cmp	r3, r7
 80057a6:	dd0f      	ble.n	80057c8 <__kernel_rem_pio2+0x70>
 80057a8:	af6a      	add	r7, sp, #424	; 0x1a8
 80057aa:	2200      	movs	r2, #0
 80057ac:	454a      	cmp	r2, r9
 80057ae:	dc28      	bgt.n	8005802 <__kernel_rem_pio2+0xaa>
 80057b0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80057b4:	eb0b 0302 	add.w	r3, fp, r2
 80057b8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 80057bc:	9d02      	ldr	r5, [sp, #8]
 80057be:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8005a70 <__kernel_rem_pio2+0x318>
 80057c2:	f04f 0c00 	mov.w	ip, #0
 80057c6:	e016      	b.n	80057f6 <__kernel_rem_pio2+0x9e>
 80057c8:	42dd      	cmn	r5, r3
 80057ca:	d409      	bmi.n	80057e0 <__kernel_rem_pio2+0x88>
 80057cc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80057d0:	ee07 2a90 	vmov	s15, r2
 80057d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80057d8:	ecae 7b02 	vstmia	lr!, {d7}
 80057dc:	3301      	adds	r3, #1
 80057de:	e7e1      	b.n	80057a4 <__kernel_rem_pio2+0x4c>
 80057e0:	eeb0 7b46 	vmov.f64	d7, d6
 80057e4:	e7f8      	b.n	80057d8 <__kernel_rem_pio2+0x80>
 80057e6:	ecb5 5b02 	vldmia	r5!, {d5}
 80057ea:	ed33 6b02 	vldmdb	r3!, {d6}
 80057ee:	f10c 0c01 	add.w	ip, ip, #1
 80057f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80057f6:	45d4      	cmp	ip, sl
 80057f8:	ddf5      	ble.n	80057e6 <__kernel_rem_pio2+0x8e>
 80057fa:	eca7 7b02 	vstmia	r7!, {d7}
 80057fe:	3201      	adds	r2, #1
 8005800:	e7d4      	b.n	80057ac <__kernel_rem_pio2+0x54>
 8005802:	ab06      	add	r3, sp, #24
 8005804:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8005808:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8005a78 <__kernel_rem_pio2+0x320>
 800580c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8005a80 <__kernel_rem_pio2+0x328>
 8005810:	9304      	str	r3, [sp, #16]
 8005812:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8005816:	9303      	str	r3, [sp, #12]
 8005818:	464d      	mov	r5, r9
 800581a:	ab92      	add	r3, sp, #584	; 0x248
 800581c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 8005820:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005824:	3f01      	subs	r7, #1
 8005826:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800582a:	00ff      	lsls	r7, r7, #3
 800582c:	ab92      	add	r3, sp, #584	; 0x248
 800582e:	19da      	adds	r2, r3, r7
 8005830:	3a98      	subs	r2, #152	; 0x98
 8005832:	2300      	movs	r3, #0
 8005834:	1ae9      	subs	r1, r5, r3
 8005836:	2900      	cmp	r1, #0
 8005838:	dc4e      	bgt.n	80058d8 <__kernel_rem_pio2+0x180>
 800583a:	4620      	mov	r0, r4
 800583c:	f000 fb04 	bl	8005e48 <scalbn>
 8005840:	eeb0 8b40 	vmov.f64	d8, d0
 8005844:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8005848:	ee28 0b00 	vmul.f64	d0, d8, d0
 800584c:	f000 fa84 	bl	8005d58 <floor>
 8005850:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8005854:	eea0 8b47 	vfms.f64	d8, d0, d7
 8005858:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800585c:	2c00      	cmp	r4, #0
 800585e:	edcd 7a01 	vstr	s15, [sp, #4]
 8005862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005866:	ee38 8b47 	vsub.f64	d8, d8, d7
 800586a:	dd4a      	ble.n	8005902 <__kernel_rem_pio2+0x1aa>
 800586c:	1e69      	subs	r1, r5, #1
 800586e:	ab06      	add	r3, sp, #24
 8005870:	f1c4 0018 	rsb	r0, r4, #24
 8005874:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8005878:	9a01      	ldr	r2, [sp, #4]
 800587a:	fa4c f300 	asr.w	r3, ip, r0
 800587e:	441a      	add	r2, r3
 8005880:	4083      	lsls	r3, r0
 8005882:	9201      	str	r2, [sp, #4]
 8005884:	ebac 0203 	sub.w	r2, ip, r3
 8005888:	ab06      	add	r3, sp, #24
 800588a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800588e:	f1c4 0317 	rsb	r3, r4, #23
 8005892:	fa42 f803 	asr.w	r8, r2, r3
 8005896:	f1b8 0f00 	cmp.w	r8, #0
 800589a:	dd43      	ble.n	8005924 <__kernel_rem_pio2+0x1cc>
 800589c:	9b01      	ldr	r3, [sp, #4]
 800589e:	2000      	movs	r0, #0
 80058a0:	3301      	adds	r3, #1
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	4601      	mov	r1, r0
 80058a6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 80058aa:	4285      	cmp	r5, r0
 80058ac:	dc6e      	bgt.n	800598c <__kernel_rem_pio2+0x234>
 80058ae:	2c00      	cmp	r4, #0
 80058b0:	dd04      	ble.n	80058bc <__kernel_rem_pio2+0x164>
 80058b2:	2c01      	cmp	r4, #1
 80058b4:	d07f      	beq.n	80059b6 <__kernel_rem_pio2+0x25e>
 80058b6:	2c02      	cmp	r4, #2
 80058b8:	f000 8087 	beq.w	80059ca <__kernel_rem_pio2+0x272>
 80058bc:	f1b8 0f02 	cmp.w	r8, #2
 80058c0:	d130      	bne.n	8005924 <__kernel_rem_pio2+0x1cc>
 80058c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80058c6:	ee30 8b48 	vsub.f64	d8, d0, d8
 80058ca:	b359      	cbz	r1, 8005924 <__kernel_rem_pio2+0x1cc>
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 fabb 	bl	8005e48 <scalbn>
 80058d2:	ee38 8b40 	vsub.f64	d8, d8, d0
 80058d6:	e025      	b.n	8005924 <__kernel_rem_pio2+0x1cc>
 80058d8:	ee20 7b09 	vmul.f64	d7, d0, d9
 80058dc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80058e0:	a806      	add	r0, sp, #24
 80058e2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80058e6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80058ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80058ee:	ee10 1a10 	vmov	r1, s0
 80058f2:	ed32 0b02 	vldmdb	r2!, {d0}
 80058f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80058fa:	ee37 0b00 	vadd.f64	d0, d7, d0
 80058fe:	3301      	adds	r3, #1
 8005900:	e798      	b.n	8005834 <__kernel_rem_pio2+0xdc>
 8005902:	d106      	bne.n	8005912 <__kernel_rem_pio2+0x1ba>
 8005904:	1e6b      	subs	r3, r5, #1
 8005906:	aa06      	add	r2, sp, #24
 8005908:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800590c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 8005910:	e7c1      	b.n	8005896 <__kernel_rem_pio2+0x13e>
 8005912:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005916:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591e:	da32      	bge.n	8005986 <__kernel_rem_pio2+0x22e>
 8005920:	f04f 0800 	mov.w	r8, #0
 8005924:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592c:	f040 80b0 	bne.w	8005a90 <__kernel_rem_pio2+0x338>
 8005930:	1e6b      	subs	r3, r5, #1
 8005932:	4618      	mov	r0, r3
 8005934:	2200      	movs	r2, #0
 8005936:	4548      	cmp	r0, r9
 8005938:	da4e      	bge.n	80059d8 <__kernel_rem_pio2+0x280>
 800593a:	2a00      	cmp	r2, #0
 800593c:	f000 8088 	beq.w	8005a50 <__kernel_rem_pio2+0x2f8>
 8005940:	aa06      	add	r2, sp, #24
 8005942:	3c18      	subs	r4, #24
 8005944:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005948:	2900      	cmp	r1, #0
 800594a:	f000 808e 	beq.w	8005a6a <__kernel_rem_pio2+0x312>
 800594e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8005952:	4620      	mov	r0, r4
 8005954:	9302      	str	r3, [sp, #8]
 8005956:	f000 fa77 	bl	8005e48 <scalbn>
 800595a:	9b02      	ldr	r3, [sp, #8]
 800595c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800595e:	00d9      	lsls	r1, r3, #3
 8005960:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8005a78 <__kernel_rem_pio2+0x320>
 8005964:	1850      	adds	r0, r2, r1
 8005966:	f100 0508 	add.w	r5, r0, #8
 800596a:	461c      	mov	r4, r3
 800596c:	2c00      	cmp	r4, #0
 800596e:	f280 80bd 	bge.w	8005aec <__kernel_rem_pio2+0x394>
 8005972:	2500      	movs	r5, #0
 8005974:	1b5c      	subs	r4, r3, r5
 8005976:	2c00      	cmp	r4, #0
 8005978:	f2c0 80dd 	blt.w	8005b36 <__kernel_rem_pio2+0x3de>
 800597c:	4f43      	ldr	r7, [pc, #268]	; (8005a8c <__kernel_rem_pio2+0x334>)
 800597e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8005a70 <__kernel_rem_pio2+0x318>
 8005982:	2400      	movs	r4, #0
 8005984:	e0cb      	b.n	8005b1e <__kernel_rem_pio2+0x3c6>
 8005986:	f04f 0802 	mov.w	r8, #2
 800598a:	e787      	b.n	800589c <__kernel_rem_pio2+0x144>
 800598c:	ab06      	add	r3, sp, #24
 800598e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005992:	b949      	cbnz	r1, 80059a8 <__kernel_rem_pio2+0x250>
 8005994:	b12b      	cbz	r3, 80059a2 <__kernel_rem_pio2+0x24a>
 8005996:	aa06      	add	r2, sp, #24
 8005998:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800599c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80059a0:	2301      	movs	r3, #1
 80059a2:	3001      	adds	r0, #1
 80059a4:	4619      	mov	r1, r3
 80059a6:	e780      	b.n	80058aa <__kernel_rem_pio2+0x152>
 80059a8:	aa06      	add	r2, sp, #24
 80059aa:	ebac 0303 	sub.w	r3, ip, r3
 80059ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80059b2:	460b      	mov	r3, r1
 80059b4:	e7f5      	b.n	80059a2 <__kernel_rem_pio2+0x24a>
 80059b6:	1e68      	subs	r0, r5, #1
 80059b8:	ab06      	add	r3, sp, #24
 80059ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80059be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059c2:	aa06      	add	r2, sp, #24
 80059c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80059c8:	e778      	b.n	80058bc <__kernel_rem_pio2+0x164>
 80059ca:	1e68      	subs	r0, r5, #1
 80059cc:	ab06      	add	r3, sp, #24
 80059ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80059d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80059d6:	e7f4      	b.n	80059c2 <__kernel_rem_pio2+0x26a>
 80059d8:	a906      	add	r1, sp, #24
 80059da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80059de:	3801      	subs	r0, #1
 80059e0:	430a      	orrs	r2, r1
 80059e2:	e7a8      	b.n	8005936 <__kernel_rem_pio2+0x1de>
 80059e4:	f10c 0c01 	add.w	ip, ip, #1
 80059e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80059ec:	2a00      	cmp	r2, #0
 80059ee:	d0f9      	beq.n	80059e4 <__kernel_rem_pio2+0x28c>
 80059f0:	eb0b 0305 	add.w	r3, fp, r5
 80059f4:	aa1a      	add	r2, sp, #104	; 0x68
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	1898      	adds	r0, r3, r2
 80059fa:	3008      	adds	r0, #8
 80059fc:	1c69      	adds	r1, r5, #1
 80059fe:	3708      	adds	r7, #8
 8005a00:	2200      	movs	r2, #0
 8005a02:	4465      	add	r5, ip
 8005a04:	9005      	str	r0, [sp, #20]
 8005a06:	428d      	cmp	r5, r1
 8005a08:	f6ff af07 	blt.w	800581a <__kernel_rem_pio2+0xc2>
 8005a0c:	a81a      	add	r0, sp, #104	; 0x68
 8005a0e:	eb02 0c03 	add.w	ip, r2, r3
 8005a12:	4484      	add	ip, r0
 8005a14:	9803      	ldr	r0, [sp, #12]
 8005a16:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005a1a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8005a1e:	9001      	str	r0, [sp, #4]
 8005a20:	ee07 0a90 	vmov	s15, r0
 8005a24:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005a28:	9805      	ldr	r0, [sp, #20]
 8005a2a:	ed8c 7b00 	vstr	d7, [ip]
 8005a2e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005a70 <__kernel_rem_pio2+0x318>
 8005a32:	eb00 0802 	add.w	r8, r0, r2
 8005a36:	f04f 0c00 	mov.w	ip, #0
 8005a3a:	45d4      	cmp	ip, sl
 8005a3c:	dd0c      	ble.n	8005a58 <__kernel_rem_pio2+0x300>
 8005a3e:	eb02 0c07 	add.w	ip, r2, r7
 8005a42:	a86a      	add	r0, sp, #424	; 0x1a8
 8005a44:	4484      	add	ip, r0
 8005a46:	ed8c 7b02 	vstr	d7, [ip, #8]
 8005a4a:	3101      	adds	r1, #1
 8005a4c:	3208      	adds	r2, #8
 8005a4e:	e7da      	b.n	8005a06 <__kernel_rem_pio2+0x2ae>
 8005a50:	9b04      	ldr	r3, [sp, #16]
 8005a52:	f04f 0c01 	mov.w	ip, #1
 8005a56:	e7c7      	b.n	80059e8 <__kernel_rem_pio2+0x290>
 8005a58:	ecbe 5b02 	vldmia	lr!, {d5}
 8005a5c:	ed38 6b02 	vldmdb	r8!, {d6}
 8005a60:	f10c 0c01 	add.w	ip, ip, #1
 8005a64:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005a68:	e7e7      	b.n	8005a3a <__kernel_rem_pio2+0x2e2>
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	e768      	b.n	8005940 <__kernel_rem_pio2+0x1e8>
 8005a6e:	bf00      	nop
	...
 8005a7c:	3e700000 	.word	0x3e700000
 8005a80:	00000000 	.word	0x00000000
 8005a84:	41700000 	.word	0x41700000
 8005a88:	08006160 	.word	0x08006160
 8005a8c:	08006120 	.word	0x08006120
 8005a90:	4260      	negs	r0, r4
 8005a92:	eeb0 0b48 	vmov.f64	d0, d8
 8005a96:	f000 f9d7 	bl	8005e48 <scalbn>
 8005a9a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8005c78 <__kernel_rem_pio2+0x520>
 8005a9e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8005aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa6:	db18      	blt.n	8005ada <__kernel_rem_pio2+0x382>
 8005aa8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8005c80 <__kernel_rem_pio2+0x528>
 8005aac:	ee20 7b07 	vmul.f64	d7, d0, d7
 8005ab0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8005ab4:	aa06      	add	r2, sp, #24
 8005ab6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8005aba:	eea5 0b46 	vfms.f64	d0, d5, d6
 8005abe:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8005ac2:	a906      	add	r1, sp, #24
 8005ac4:	ee10 3a10 	vmov	r3, s0
 8005ac8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005acc:	1c6b      	adds	r3, r5, #1
 8005ace:	ee17 2a10 	vmov	r2, s14
 8005ad2:	3418      	adds	r4, #24
 8005ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ad8:	e739      	b.n	800594e <__kernel_rem_pio2+0x1f6>
 8005ada:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8005ade:	aa06      	add	r2, sp, #24
 8005ae0:	ee10 3a10 	vmov	r3, s0
 8005ae4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005ae8:	462b      	mov	r3, r5
 8005aea:	e730      	b.n	800594e <__kernel_rem_pio2+0x1f6>
 8005aec:	aa06      	add	r2, sp, #24
 8005aee:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8005af2:	9202      	str	r2, [sp, #8]
 8005af4:	ee07 2a90 	vmov	s15, r2
 8005af8:	3c01      	subs	r4, #1
 8005afa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005afe:	ee27 7b00 	vmul.f64	d7, d7, d0
 8005b02:	ee20 0b06 	vmul.f64	d0, d0, d6
 8005b06:	ed25 7b02 	vstmdb	r5!, {d7}
 8005b0a:	e72f      	b.n	800596c <__kernel_rem_pio2+0x214>
 8005b0c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8005b10:	ecb7 5b02 	vldmia	r7!, {d5}
 8005b14:	ed9c 6b00 	vldr	d6, [ip]
 8005b18:	3401      	adds	r4, #1
 8005b1a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005b1e:	454c      	cmp	r4, r9
 8005b20:	dc01      	bgt.n	8005b26 <__kernel_rem_pio2+0x3ce>
 8005b22:	42a5      	cmp	r5, r4
 8005b24:	daf2      	bge.n	8005b0c <__kernel_rem_pio2+0x3b4>
 8005b26:	aa42      	add	r2, sp, #264	; 0x108
 8005b28:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 8005b2c:	ed84 7b00 	vstr	d7, [r4]
 8005b30:	3501      	adds	r5, #1
 8005b32:	3808      	subs	r0, #8
 8005b34:	e71e      	b.n	8005974 <__kernel_rem_pio2+0x21c>
 8005b36:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8005b38:	2a03      	cmp	r2, #3
 8005b3a:	d84e      	bhi.n	8005bda <__kernel_rem_pio2+0x482>
 8005b3c:	e8df f002 	tbb	[pc, r2]
 8005b40:	021f1f3e 	.word	0x021f1f3e
 8005b44:	3108      	adds	r1, #8
 8005b46:	aa42      	add	r2, sp, #264	; 0x108
 8005b48:	4411      	add	r1, r2
 8005b4a:	4608      	mov	r0, r1
 8005b4c:	461c      	mov	r4, r3
 8005b4e:	2c00      	cmp	r4, #0
 8005b50:	dc61      	bgt.n	8005c16 <__kernel_rem_pio2+0x4be>
 8005b52:	4608      	mov	r0, r1
 8005b54:	461c      	mov	r4, r3
 8005b56:	2c01      	cmp	r4, #1
 8005b58:	dc6d      	bgt.n	8005c36 <__kernel_rem_pio2+0x4de>
 8005b5a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8005c88 <__kernel_rem_pio2+0x530>
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	dc79      	bgt.n	8005c56 <__kernel_rem_pio2+0x4fe>
 8005b62:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8005b66:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8005b6a:	f1b8 0f00 	cmp.w	r8, #0
 8005b6e:	d178      	bne.n	8005c62 <__kernel_rem_pio2+0x50a>
 8005b70:	ed86 5b00 	vstr	d5, [r6]
 8005b74:	ed86 6b02 	vstr	d6, [r6, #8]
 8005b78:	ed86 7b04 	vstr	d7, [r6, #16]
 8005b7c:	e02d      	b.n	8005bda <__kernel_rem_pio2+0x482>
 8005b7e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8005c88 <__kernel_rem_pio2+0x530>
 8005b82:	3108      	adds	r1, #8
 8005b84:	aa42      	add	r2, sp, #264	; 0x108
 8005b86:	4411      	add	r1, r2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	da34      	bge.n	8005bf8 <__kernel_rem_pio2+0x4a0>
 8005b8e:	f1b8 0f00 	cmp.w	r8, #0
 8005b92:	d037      	beq.n	8005c04 <__kernel_rem_pio2+0x4ac>
 8005b94:	eeb1 7b46 	vneg.f64	d7, d6
 8005b98:	ed86 7b00 	vstr	d7, [r6]
 8005b9c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8005ba0:	a844      	add	r0, sp, #272	; 0x110
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	da2e      	bge.n	8005c0a <__kernel_rem_pio2+0x4b2>
 8005bac:	f1b8 0f00 	cmp.w	r8, #0
 8005bb0:	d001      	beq.n	8005bb6 <__kernel_rem_pio2+0x45e>
 8005bb2:	eeb1 7b47 	vneg.f64	d7, d7
 8005bb6:	ed86 7b02 	vstr	d7, [r6, #8]
 8005bba:	e00e      	b.n	8005bda <__kernel_rem_pio2+0x482>
 8005bbc:	aa92      	add	r2, sp, #584	; 0x248
 8005bbe:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8005c88 <__kernel_rem_pio2+0x530>
 8005bc2:	4411      	add	r1, r2
 8005bc4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	da0f      	bge.n	8005bec <__kernel_rem_pio2+0x494>
 8005bcc:	f1b8 0f00 	cmp.w	r8, #0
 8005bd0:	d001      	beq.n	8005bd6 <__kernel_rem_pio2+0x47e>
 8005bd2:	eeb1 7b47 	vneg.f64	d7, d7
 8005bd6:	ed86 7b00 	vstr	d7, [r6]
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	f003 0007 	and.w	r0, r3, #7
 8005be0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8005be4:	ecbd 8b06 	vpop	{d8-d10}
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	ed31 6b02 	vldmdb	r1!, {d6}
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bf6:	e7e7      	b.n	8005bc8 <__kernel_rem_pio2+0x470>
 8005bf8:	ed31 7b02 	vldmdb	r1!, {d7}
 8005bfc:	3801      	subs	r0, #1
 8005bfe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c02:	e7c2      	b.n	8005b8a <__kernel_rem_pio2+0x432>
 8005c04:	eeb0 7b46 	vmov.f64	d7, d6
 8005c08:	e7c6      	b.n	8005b98 <__kernel_rem_pio2+0x440>
 8005c0a:	ecb0 6b02 	vldmia	r0!, {d6}
 8005c0e:	3101      	adds	r1, #1
 8005c10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c14:	e7c8      	b.n	8005ba8 <__kernel_rem_pio2+0x450>
 8005c16:	ed10 7b04 	vldr	d7, [r0, #-16]
 8005c1a:	ed30 5b02 	vldmdb	r0!, {d5}
 8005c1e:	3c01      	subs	r4, #1
 8005c20:	ee37 6b05 	vadd.f64	d6, d7, d5
 8005c24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c28:	ed00 6b02 	vstr	d6, [r0, #-8]
 8005c2c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8005c30:	ed80 7b00 	vstr	d7, [r0]
 8005c34:	e78b      	b.n	8005b4e <__kernel_rem_pio2+0x3f6>
 8005c36:	ed10 7b04 	vldr	d7, [r0, #-16]
 8005c3a:	ed30 5b02 	vldmdb	r0!, {d5}
 8005c3e:	3c01      	subs	r4, #1
 8005c40:	ee37 6b05 	vadd.f64	d6, d7, d5
 8005c44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c48:	ed00 6b02 	vstr	d6, [r0, #-8]
 8005c4c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8005c50:	ed80 7b00 	vstr	d7, [r0]
 8005c54:	e77f      	b.n	8005b56 <__kernel_rem_pio2+0x3fe>
 8005c56:	ed31 6b02 	vldmdb	r1!, {d6}
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c60:	e77d      	b.n	8005b5e <__kernel_rem_pio2+0x406>
 8005c62:	eeb1 5b45 	vneg.f64	d5, d5
 8005c66:	eeb1 6b46 	vneg.f64	d6, d6
 8005c6a:	ed86 5b00 	vstr	d5, [r6]
 8005c6e:	eeb1 7b47 	vneg.f64	d7, d7
 8005c72:	ed86 6b02 	vstr	d6, [r6, #8]
 8005c76:	e77f      	b.n	8005b78 <__kernel_rem_pio2+0x420>
 8005c78:	00000000 	.word	0x00000000
 8005c7c:	41700000 	.word	0x41700000
 8005c80:	00000000 	.word	0x00000000
 8005c84:	3e700000 	.word	0x3e700000
	...

08005c90 <__kernel_sin>:
 8005c90:	ee10 3a90 	vmov	r3, s1
 8005c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c98:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005c9c:	da04      	bge.n	8005ca8 <__kernel_sin+0x18>
 8005c9e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8005ca2:	ee17 3a90 	vmov	r3, s15
 8005ca6:	b35b      	cbz	r3, 8005d00 <__kernel_sin+0x70>
 8005ca8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8005cac:	ee20 5b06 	vmul.f64	d5, d0, d6
 8005cb0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8005d08 <__kernel_sin+0x78>
 8005cb4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005d10 <__kernel_sin+0x80>
 8005cb8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8005cbc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8005d18 <__kernel_sin+0x88>
 8005cc0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8005cc4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005d20 <__kernel_sin+0x90>
 8005cc8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8005ccc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8005d28 <__kernel_sin+0x98>
 8005cd0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8005cd4:	b930      	cbnz	r0, 8005ce4 <__kernel_sin+0x54>
 8005cd6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8005d30 <__kernel_sin+0xa0>
 8005cda:	eea6 4b07 	vfma.f64	d4, d6, d7
 8005cde:	eea4 0b05 	vfma.f64	d0, d4, d5
 8005ce2:	4770      	bx	lr
 8005ce4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8005ce8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8005cec:	eea1 7b04 	vfma.f64	d7, d1, d4
 8005cf0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8005cf4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8005d38 <__kernel_sin+0xa8>
 8005cf8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8005cfc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	f3af 8000 	nop.w
 8005d08:	5acfd57c 	.word	0x5acfd57c
 8005d0c:	3de5d93a 	.word	0x3de5d93a
 8005d10:	8a2b9ceb 	.word	0x8a2b9ceb
 8005d14:	be5ae5e6 	.word	0xbe5ae5e6
 8005d18:	57b1fe7d 	.word	0x57b1fe7d
 8005d1c:	3ec71de3 	.word	0x3ec71de3
 8005d20:	19c161d5 	.word	0x19c161d5
 8005d24:	bf2a01a0 	.word	0xbf2a01a0
 8005d28:	1110f8a6 	.word	0x1110f8a6
 8005d2c:	3f811111 	.word	0x3f811111
 8005d30:	55555549 	.word	0x55555549
 8005d34:	bfc55555 	.word	0xbfc55555
 8005d38:	55555549 	.word	0x55555549
 8005d3c:	3fc55555 	.word	0x3fc55555

08005d40 <fabs>:
 8005d40:	ec51 0b10 	vmov	r0, r1, d0
 8005d44:	ee10 2a10 	vmov	r2, s0
 8005d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d4c:	ec43 2b10 	vmov	d0, r2, r3
 8005d50:	4770      	bx	lr
 8005d52:	0000      	movs	r0, r0
 8005d54:	0000      	movs	r0, r0
	...

08005d58 <floor>:
 8005d58:	ee10 1a90 	vmov	r1, s1
 8005d5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d60:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8005d64:	2b13      	cmp	r3, #19
 8005d66:	b530      	push	{r4, r5, lr}
 8005d68:	ee10 0a10 	vmov	r0, s0
 8005d6c:	ee10 5a10 	vmov	r5, s0
 8005d70:	dc33      	bgt.n	8005dda <floor+0x82>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	da17      	bge.n	8005da6 <floor+0x4e>
 8005d76:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8005e38 <floor+0xe0>
 8005d7a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8005d7e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d86:	dd09      	ble.n	8005d9c <floor+0x44>
 8005d88:	2900      	cmp	r1, #0
 8005d8a:	da50      	bge.n	8005e2e <floor+0xd6>
 8005d8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d90:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <floor+0xe8>)
 8005d92:	4303      	orrs	r3, r0
 8005d94:	2000      	movs	r0, #0
 8005d96:	4283      	cmp	r3, r0
 8005d98:	bf18      	it	ne
 8005d9a:	4611      	movne	r1, r2
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4602      	mov	r2, r0
 8005da0:	ec43 2b10 	vmov	d0, r2, r3
 8005da4:	e020      	b.n	8005de8 <floor+0x90>
 8005da6:	4a27      	ldr	r2, [pc, #156]	; (8005e44 <floor+0xec>)
 8005da8:	411a      	asrs	r2, r3
 8005daa:	ea01 0402 	and.w	r4, r1, r2
 8005dae:	4304      	orrs	r4, r0
 8005db0:	d01a      	beq.n	8005de8 <floor+0x90>
 8005db2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8005e38 <floor+0xe0>
 8005db6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8005dba:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc2:	ddeb      	ble.n	8005d9c <floor+0x44>
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	bfbe      	ittt	lt
 8005dc8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8005dcc:	fa40 f303 	asrlt.w	r3, r0, r3
 8005dd0:	18c9      	addlt	r1, r1, r3
 8005dd2:	ea21 0102 	bic.w	r1, r1, r2
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	e7e0      	b.n	8005d9c <floor+0x44>
 8005dda:	2b33      	cmp	r3, #51	; 0x33
 8005ddc:	dd05      	ble.n	8005dea <floor+0x92>
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de2:	d101      	bne.n	8005de8 <floor+0x90>
 8005de4:	ee30 0b00 	vadd.f64	d0, d0, d0
 8005de8:	bd30      	pop	{r4, r5, pc}
 8005dea:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8005dee:	f04f 32ff 	mov.w	r2, #4294967295
 8005df2:	40e2      	lsrs	r2, r4
 8005df4:	4202      	tst	r2, r0
 8005df6:	d0f7      	beq.n	8005de8 <floor+0x90>
 8005df8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8005e38 <floor+0xe0>
 8005dfc:	ee30 0b07 	vadd.f64	d0, d0, d7
 8005e00:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e08:	ddc8      	ble.n	8005d9c <floor+0x44>
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	da02      	bge.n	8005e14 <floor+0xbc>
 8005e0e:	2b14      	cmp	r3, #20
 8005e10:	d103      	bne.n	8005e1a <floor+0xc2>
 8005e12:	3101      	adds	r1, #1
 8005e14:	ea20 0002 	bic.w	r0, r0, r2
 8005e18:	e7c0      	b.n	8005d9c <floor+0x44>
 8005e1a:	2401      	movs	r4, #1
 8005e1c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005e20:	fa04 f303 	lsl.w	r3, r4, r3
 8005e24:	4418      	add	r0, r3
 8005e26:	42a8      	cmp	r0, r5
 8005e28:	bf38      	it	cc
 8005e2a:	1909      	addcc	r1, r1, r4
 8005e2c:	e7f2      	b.n	8005e14 <floor+0xbc>
 8005e2e:	2000      	movs	r0, #0
 8005e30:	4601      	mov	r1, r0
 8005e32:	e7b3      	b.n	8005d9c <floor+0x44>
 8005e34:	f3af 8000 	nop.w
 8005e38:	8800759c 	.word	0x8800759c
 8005e3c:	7e37e43c 	.word	0x7e37e43c
 8005e40:	bff00000 	.word	0xbff00000
 8005e44:	000fffff 	.word	0x000fffff

08005e48 <scalbn>:
 8005e48:	b500      	push	{lr}
 8005e4a:	ed2d 8b02 	vpush	{d8}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	ed8d 0b00 	vstr	d0, [sp]
 8005e54:	9b01      	ldr	r3, [sp, #4]
 8005e56:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005e5a:	b9a2      	cbnz	r2, 8005e86 <scalbn+0x3e>
 8005e5c:	9a00      	ldr	r2, [sp, #0]
 8005e5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e62:	4313      	orrs	r3, r2
 8005e64:	d03a      	beq.n	8005edc <scalbn+0x94>
 8005e66:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005f20 <scalbn+0xd8>
 8005e6a:	4b35      	ldr	r3, [pc, #212]	; (8005f40 <scalbn+0xf8>)
 8005e6c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8005e70:	4298      	cmp	r0, r3
 8005e72:	ed8d 7b00 	vstr	d7, [sp]
 8005e76:	da11      	bge.n	8005e9c <scalbn+0x54>
 8005e78:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8005f28 <scalbn+0xe0>
 8005e7c:	ed9d 6b00 	vldr	d6, [sp]
 8005e80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e84:	e007      	b.n	8005e96 <scalbn+0x4e>
 8005e86:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005e8a:	428a      	cmp	r2, r1
 8005e8c:	d10a      	bne.n	8005ea4 <scalbn+0x5c>
 8005e8e:	ed9d 7b00 	vldr	d7, [sp]
 8005e92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e96:	ed8d 7b00 	vstr	d7, [sp]
 8005e9a:	e01f      	b.n	8005edc <scalbn+0x94>
 8005e9c:	9b01      	ldr	r3, [sp, #4]
 8005e9e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005ea2:	3a36      	subs	r2, #54	; 0x36
 8005ea4:	4402      	add	r2, r0
 8005ea6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005eaa:	428a      	cmp	r2, r1
 8005eac:	dd0a      	ble.n	8005ec4 <scalbn+0x7c>
 8005eae:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8005f30 <scalbn+0xe8>
 8005eb2:	eeb0 0b48 	vmov.f64	d0, d8
 8005eb6:	ed9d 1b00 	vldr	d1, [sp]
 8005eba:	f000 f843 	bl	8005f44 <copysign>
 8005ebe:	ee20 7b08 	vmul.f64	d7, d0, d8
 8005ec2:	e7e8      	b.n	8005e96 <scalbn+0x4e>
 8005ec4:	2a00      	cmp	r2, #0
 8005ec6:	dd10      	ble.n	8005eea <scalbn+0xa2>
 8005ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ecc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ed0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ed4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005ed8:	e9cd 0100 	strd	r0, r1, [sp]
 8005edc:	ed9d 0b00 	vldr	d0, [sp]
 8005ee0:	b003      	add	sp, #12
 8005ee2:	ecbd 8b02 	vpop	{d8}
 8005ee6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eea:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005eee:	da06      	bge.n	8005efe <scalbn+0xb6>
 8005ef0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005ef4:	4298      	cmp	r0, r3
 8005ef6:	dcda      	bgt.n	8005eae <scalbn+0x66>
 8005ef8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8005f28 <scalbn+0xe0>
 8005efc:	e7d9      	b.n	8005eb2 <scalbn+0x6a>
 8005efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f06:	3236      	adds	r2, #54	; 0x36
 8005f08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f0c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005f10:	ec41 0b17 	vmov	d7, r0, r1
 8005f14:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8005f38 <scalbn+0xf0>
 8005f18:	e7b2      	b.n	8005e80 <scalbn+0x38>
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w
 8005f20:	00000000 	.word	0x00000000
 8005f24:	43500000 	.word	0x43500000
 8005f28:	c2f8f359 	.word	0xc2f8f359
 8005f2c:	01a56e1f 	.word	0x01a56e1f
 8005f30:	8800759c 	.word	0x8800759c
 8005f34:	7e37e43c 	.word	0x7e37e43c
 8005f38:	00000000 	.word	0x00000000
 8005f3c:	3c900000 	.word	0x3c900000
 8005f40:	ffff3cb0 	.word	0xffff3cb0

08005f44 <copysign>:
 8005f44:	ec51 0b10 	vmov	r0, r1, d0
 8005f48:	ee11 0a90 	vmov	r0, s3
 8005f4c:	ee10 2a10 	vmov	r2, s0
 8005f50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005f54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005f58:	ea41 0300 	orr.w	r3, r1, r0
 8005f5c:	ec43 2b10 	vmov	d0, r2, r3
 8005f60:	4770      	bx	lr
	...

08005f64 <_init>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr

08005f70 <_fini>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr
