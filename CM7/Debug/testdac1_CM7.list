
testdac1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc84  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800bf28  0800bf28  0001bf28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c180  0800c180  0001c180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c188  0800c188  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c18c  0800c18c  0001c18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800c190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000013e4  20000078  0800c208  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000145c  0800c208  0002145c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025045  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000037fa  00000000  00000000  000450eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016e8  00000000  00000000  000488e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001590  00000000  00000000  00049fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c358  00000000  00000000  0004b560  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00014c81  00000000  00000000  000878b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001980c8  00000000  00000000  0009c539  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00234601  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067c0  00000000  00000000  0023467c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000078 	.word	0x20000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bf0c 	.word	0x0800bf0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000007c 	.word	0x2000007c
 80002dc:	0800bf0c 	.word	0x0800bf0c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000
 80007b4:	00000000 	.word	0x00000000

080007b8 <get_sineval>:

float scale=0.5; //fattore di scala: posso modificare l'ampiezza dell'onda generata


void get_sineval ()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
		//il +1000 serve solo se applichiamo il fattore di scala e va modulato in base ad esso
		//1000 va bene per il fattore di scala 0.1, poichè mi fa uscire dal limite della risoluzione del DAC
		//sin_val[i]=sin_val[i]*scale; //fattore di scala
	}

	for (i=0;i<300;i++)
 80007be:	4ba6      	ldr	r3, [pc, #664]	; (8000a58 <get_sineval+0x2a0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	e039      	b.n	800083a <get_sineval+0x82>
	{
		sin_val[i] = ((sin(i*2*PI/100) + 1)*((4095+1)/2) + shift)*scale;
 80007c6:	4ba4      	ldr	r3, [pc, #656]	; (8000a58 <get_sineval+0x2a0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	ee07 3a90 	vmov	s15, r3
 80007d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007d4:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8000a40 <get_sineval+0x288>
 80007d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007dc:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8000a48 <get_sineval+0x290>
 80007e0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007e4:	eeb0 0b45 	vmov.f64	d0, d5
 80007e8:	f00a fda6 	bl	800b338 <sin>
 80007ec:	eeb0 6b40 	vmov.f64	d6, d0
 80007f0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80007f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007f8:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8000a50 <get_sineval+0x298>
 80007fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000800:	4b96      	ldr	r3, [pc, #600]	; (8000a5c <get_sineval+0x2a4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	ee07 3a90 	vmov	s15, r3
 8000808:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800080c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000810:	4b93      	ldr	r3, [pc, #588]	; (8000a60 <get_sineval+0x2a8>)
 8000812:	edd3 7a00 	vldr	s15, [r3]
 8000816:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800081a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800081e:	4b8e      	ldr	r3, [pc, #568]	; (8000a58 <get_sineval+0x2a0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000826:	ee17 1a90 	vmov	r1, s15
 800082a:	4a8e      	ldr	r2, [pc, #568]	; (8000a64 <get_sineval+0x2ac>)
 800082c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<300;i++)
 8000830:	4b89      	ldr	r3, [pc, #548]	; (8000a58 <get_sineval+0x2a0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a88      	ldr	r2, [pc, #544]	; (8000a58 <get_sineval+0x2a0>)
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	4b87      	ldr	r3, [pc, #540]	; (8000a58 <get_sineval+0x2a0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000842:	dbc0      	blt.n	80007c6 <get_sineval+0xe>

	}

	for (i=0;i<100;i++)
 8000844:	4b84      	ldr	r3, [pc, #528]	; (8000a58 <get_sineval+0x2a0>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e01a      	b.n	8000882 <get_sineval+0xca>
	{
		ground[i] = (i-i+2048+shift)*scale;
 800084c:	4b83      	ldr	r3, [pc, #524]	; (8000a5c <get_sineval+0x2a4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000854:	ee07 3a90 	vmov	s15, r3
 8000858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800085c:	4b80      	ldr	r3, [pc, #512]	; (8000a60 <get_sineval+0x2a8>)
 800085e:	edd3 7a00 	vldr	s15, [r3]
 8000862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000866:	4b7c      	ldr	r3, [pc, #496]	; (8000a58 <get_sineval+0x2a0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800086e:	ee17 1a90 	vmov	r1, s15
 8000872:	4a7d      	ldr	r2, [pc, #500]	; (8000a68 <get_sineval+0x2b0>)
 8000874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<100;i++)
 8000878:	4b77      	ldr	r3, [pc, #476]	; (8000a58 <get_sineval+0x2a0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	4a76      	ldr	r2, [pc, #472]	; (8000a58 <get_sineval+0x2a0>)
 8000880:	6013      	str	r3, [r2, #0]
 8000882:	4b75      	ldr	r3, [pc, #468]	; (8000a58 <get_sineval+0x2a0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b63      	cmp	r3, #99	; 0x63
 8000888:	dde0      	ble.n	800084c <get_sineval+0x94>

	}

	for (i=0;i<100;i++)
 800088a:	4b73      	ldr	r3, [pc, #460]	; (8000a58 <get_sineval+0x2a0>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	e01a      	b.n	80008c8 <get_sineval+0x110>
	{
		peakpositive[i] = (i-i+4096+shift)*scale;
 8000892:	4b72      	ldr	r3, [pc, #456]	; (8000a5c <get_sineval+0x2a4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008a2:	4b6f      	ldr	r3, [pc, #444]	; (8000a60 <get_sineval+0x2a8>)
 80008a4:	edd3 7a00 	vldr	s15, [r3]
 80008a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ac:	4b6a      	ldr	r3, [pc, #424]	; (8000a58 <get_sineval+0x2a0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b4:	ee17 1a90 	vmov	r1, s15
 80008b8:	4a6c      	ldr	r2, [pc, #432]	; (8000a6c <get_sineval+0x2b4>)
 80008ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<100;i++)
 80008be:	4b66      	ldr	r3, [pc, #408]	; (8000a58 <get_sineval+0x2a0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a64      	ldr	r2, [pc, #400]	; (8000a58 <get_sineval+0x2a0>)
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b63      	ldr	r3, [pc, #396]	; (8000a58 <get_sineval+0x2a0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b63      	cmp	r3, #99	; 0x63
 80008ce:	dde0      	ble.n	8000892 <get_sineval+0xda>

	}

	for (i=0;i<100;i++)
 80008d0:	4b61      	ldr	r3, [pc, #388]	; (8000a58 <get_sineval+0x2a0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	e018      	b.n	800090a <get_sineval+0x152>
	{
		peaknegative[i] = (i-i+shift)*scale;
 80008d8:	4b60      	ldr	r3, [pc, #384]	; (8000a5c <get_sineval+0x2a4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008e4:	4b5e      	ldr	r3, [pc, #376]	; (8000a60 <get_sineval+0x2a8>)
 80008e6:	edd3 7a00 	vldr	s15, [r3]
 80008ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ee:	4b5a      	ldr	r3, [pc, #360]	; (8000a58 <get_sineval+0x2a0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f6:	ee17 1a90 	vmov	r1, s15
 80008fa:	4a5d      	ldr	r2, [pc, #372]	; (8000a70 <get_sineval+0x2b8>)
 80008fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<100;i++)
 8000900:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <get_sineval+0x2a0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	3301      	adds	r3, #1
 8000906:	4a54      	ldr	r2, [pc, #336]	; (8000a58 <get_sineval+0x2a0>)
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	4b53      	ldr	r3, [pc, #332]	; (8000a58 <get_sineval+0x2a0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b63      	cmp	r3, #99	; 0x63
 8000910:	dde2      	ble.n	80008d8 <get_sineval+0x120>

	}

	int index2=0;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
	for (i=0; i<40;i++)
 8000916:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <get_sineval+0x2a0>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e00f      	b.n	800093e <get_sineval+0x186>
	{
		signal[index2++]=ground[i];
 800091e:	4b4e      	ldr	r3, [pc, #312]	; (8000a58 <get_sineval+0x2a0>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	1c59      	adds	r1, r3, #1
 8000926:	6079      	str	r1, [r7, #4]
 8000928:	494f      	ldr	r1, [pc, #316]	; (8000a68 <get_sineval+0x2b0>)
 800092a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800092e:	4951      	ldr	r1, [pc, #324]	; (8000a74 <get_sineval+0x2bc>)
 8000930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<40;i++)
 8000934:	4b48      	ldr	r3, [pc, #288]	; (8000a58 <get_sineval+0x2a0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a47      	ldr	r2, [pc, #284]	; (8000a58 <get_sineval+0x2a0>)
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	4b46      	ldr	r3, [pc, #280]	; (8000a58 <get_sineval+0x2a0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b27      	cmp	r3, #39	; 0x27
 8000944:	ddeb      	ble.n	800091e <get_sineval+0x166>
	}

	for (i=0; i<10;i++)
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <get_sineval+0x2a0>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	e00f      	b.n	800096e <get_sineval+0x1b6>
	{
		signal[index2++]=peakpositive[i];
 800094e:	4b42      	ldr	r3, [pc, #264]	; (8000a58 <get_sineval+0x2a0>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	1c59      	adds	r1, r3, #1
 8000956:	6079      	str	r1, [r7, #4]
 8000958:	4944      	ldr	r1, [pc, #272]	; (8000a6c <get_sineval+0x2b4>)
 800095a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800095e:	4945      	ldr	r1, [pc, #276]	; (8000a74 <get_sineval+0x2bc>)
 8000960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<10;i++)
 8000964:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <get_sineval+0x2a0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a3b      	ldr	r2, [pc, #236]	; (8000a58 <get_sineval+0x2a0>)
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	4b3a      	ldr	r3, [pc, #232]	; (8000a58 <get_sineval+0x2a0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b09      	cmp	r3, #9
 8000974:	ddeb      	ble.n	800094e <get_sineval+0x196>
	}

	for (i=0; i<10;i++)
 8000976:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <get_sineval+0x2a0>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	e00f      	b.n	800099e <get_sineval+0x1e6>
	{
		signal[index2++]=peaknegative[i];
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <get_sineval+0x2a0>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	1c59      	adds	r1, r3, #1
 8000986:	6079      	str	r1, [r7, #4]
 8000988:	4939      	ldr	r1, [pc, #228]	; (8000a70 <get_sineval+0x2b8>)
 800098a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800098e:	4939      	ldr	r1, [pc, #228]	; (8000a74 <get_sineval+0x2bc>)
 8000990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<10;i++)
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <get_sineval+0x2a0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <get_sineval+0x2a0>)
 800099c:	6013      	str	r3, [r2, #0]
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <get_sineval+0x2a0>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b09      	cmp	r3, #9
 80009a4:	ddeb      	ble.n	800097e <get_sineval+0x1c6>
	}

	for (i=0; i<40;i++)
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <get_sineval+0x2a0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e00f      	b.n	80009ce <get_sineval+0x216>
	{
		signal[index2++]=ground[i];
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <get_sineval+0x2a0>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	1c59      	adds	r1, r3, #1
 80009b6:	6079      	str	r1, [r7, #4]
 80009b8:	492b      	ldr	r1, [pc, #172]	; (8000a68 <get_sineval+0x2b0>)
 80009ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009be:	492d      	ldr	r1, [pc, #180]	; (8000a74 <get_sineval+0x2bc>)
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<40;i++)
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <get_sineval+0x2a0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	3301      	adds	r3, #1
 80009ca:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <get_sineval+0x2a0>)
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <get_sineval+0x2a0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b27      	cmp	r3, #39	; 0x27
 80009d4:	ddeb      	ble.n	80009ae <get_sineval+0x1f6>
	}

	for (i=0; i<300;i++)
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <get_sineval+0x2a0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	e00f      	b.n	80009fe <get_sineval+0x246>
	{
		signal[index2++]=sin_val[i];
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <get_sineval+0x2a0>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	1c59      	adds	r1, r3, #1
 80009e6:	6079      	str	r1, [r7, #4]
 80009e8:	491e      	ldr	r1, [pc, #120]	; (8000a64 <get_sineval+0x2ac>)
 80009ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ee:	4921      	ldr	r1, [pc, #132]	; (8000a74 <get_sineval+0x2bc>)
 80009f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<300;i++)
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <get_sineval+0x2a0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <get_sineval+0x2a0>)
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <get_sineval+0x2a0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000a06:	dbea      	blt.n	80009de <get_sineval+0x226>
	}

	for (i=0; i<40;i++)
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <get_sineval+0x2a0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e00f      	b.n	8000a30 <get_sineval+0x278>
	{
		signal[index2++]=ground[i];
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <get_sineval+0x2a0>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	1c59      	adds	r1, r3, #1
 8000a18:	6079      	str	r1, [r7, #4]
 8000a1a:	4913      	ldr	r1, [pc, #76]	; (8000a68 <get_sineval+0x2b0>)
 8000a1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a20:	4914      	ldr	r1, [pc, #80]	; (8000a74 <get_sineval+0x2bc>)
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<40;i++)
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <get_sineval+0x2a0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <get_sineval+0x2a0>)
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <get_sineval+0x2a0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b27      	cmp	r3, #39	; 0x27
 8000a36:	ddeb      	ble.n	8000a10 <get_sineval+0x258>
	}

	for (i=0; i<10;i++)
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <get_sineval+0x2a0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	e02b      	b.n	8000a98 <get_sineval+0x2e0>
 8000a40:	4d12d84a 	.word	0x4d12d84a
 8000a44:	400921fb 	.word	0x400921fb
 8000a48:	00000000 	.word	0x00000000
 8000a4c:	40590000 	.word	0x40590000
 8000a50:	00000000 	.word	0x00000000
 8000a54:	40a00000 	.word	0x40a00000
 8000a58:	20000094 	.word	0x20000094
 8000a5c:	20000098 	.word	0x20000098
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000d7c 	.word	0x20000d7c
 8000a68:	200012c4 	.word	0x200012c4
 8000a6c:	20000228 	.word	0x20000228
 8000a70:	2000041c 	.word	0x2000041c
 8000a74:	200005ac 	.word	0x200005ac
	{
		signal[index2++]=peakpositive[i];
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <get_sineval+0x350>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	1c59      	adds	r1, r3, #1
 8000a80:	6079      	str	r1, [r7, #4]
 8000a82:	4922      	ldr	r1, [pc, #136]	; (8000b0c <get_sineval+0x354>)
 8000a84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a88:	4921      	ldr	r1, [pc, #132]	; (8000b10 <get_sineval+0x358>)
 8000a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<10;i++)
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <get_sineval+0x350>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <get_sineval+0x350>)
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <get_sineval+0x350>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b09      	cmp	r3, #9
 8000a9e:	ddeb      	ble.n	8000a78 <get_sineval+0x2c0>
	}

	for (i=0; i<10;i++)
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <get_sineval+0x350>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e00f      	b.n	8000ac8 <get_sineval+0x310>
	{
		signal[index2++]=peaknegative[i];
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <get_sineval+0x350>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	1c59      	adds	r1, r3, #1
 8000ab0:	6079      	str	r1, [r7, #4]
 8000ab2:	4918      	ldr	r1, [pc, #96]	; (8000b14 <get_sineval+0x35c>)
 8000ab4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ab8:	4915      	ldr	r1, [pc, #84]	; (8000b10 <get_sineval+0x358>)
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<10;i++)
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <get_sineval+0x350>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <get_sineval+0x350>)
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <get_sineval+0x350>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b09      	cmp	r3, #9
 8000ace:	ddeb      	ble.n	8000aa8 <get_sineval+0x2f0>
	}

	for (i=0; i<40;i++)
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <get_sineval+0x350>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	e00f      	b.n	8000af8 <get_sineval+0x340>
	{
		signal[index2++]=ground[i];
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <get_sineval+0x350>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	1c59      	adds	r1, r3, #1
 8000ae0:	6079      	str	r1, [r7, #4]
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <get_sineval+0x360>)
 8000ae4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ae8:	4909      	ldr	r1, [pc, #36]	; (8000b10 <get_sineval+0x358>)
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0; i<40;i++)
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <get_sineval+0x350>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <get_sineval+0x350>)
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <get_sineval+0x350>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b27      	cmp	r3, #39	; 0x27
 8000afe:	ddeb      	ble.n	8000ad8 <get_sineval+0x320>
	}


}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000094 	.word	0x20000094
 8000b0c:	20000228 	.word	0x20000228
 8000b10:	200005ac 	.word	0x200005ac
 8000b14:	2000041c 	.word	0x2000041c
 8000b18:	200012c4 	.word	0x200012c4

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	f5ad 5d9d 	sub.w	sp, sp, #5024	; 0x13a0
 8000b22:	b084      	sub	sp, #16
 8000b24:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2a:	f241 32a4 	movw	r2, #5028	; 0x13a4
 8000b2e:	443a      	add	r2, r7
 8000b30:	6013      	str	r3, [r2, #0]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b32:	bf00      	nop
 8000b34:	4bb5      	ldr	r3, [pc, #724]	; (8000e0c <main+0x2f0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00a      	beq.n	8000b56 <main+0x3a>
 8000b40:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8000b44:	443b      	add	r3, r7
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	1e5a      	subs	r2, r3, #1
 8000b4a:	f241 31a4 	movw	r1, #5028	; 0x13a4
 8000b4e:	4439      	add	r1, r7
 8000b50:	600a      	str	r2, [r1, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	dcee      	bgt.n	8000b34 <main+0x18>
  if ( timeout < 0 )
 8000b56:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8000b5a:	443b      	add	r3, r7
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	da01      	bge.n	8000b66 <main+0x4a>
  {
  Error_Handler();
 8000b62:	f000 fd2d 	bl	80015c0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f000 ff8f 	bl	8001a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f965 	bl	8000e38 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b6e:	4ba7      	ldr	r3, [pc, #668]	; (8000e0c <main+0x2f0>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4aa5      	ldr	r2, [pc, #660]	; (8000e0c <main+0x2f0>)
 8000b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4ba3      	ldr	r3, [pc, #652]	; (8000e0c <main+0x2f0>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000b88:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8000b92:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f005 fb13 	bl	80061c0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f005 fb29 	bl	80061f4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba6:	f241 32a4 	movw	r2, #5028	; 0x13a4
 8000baa:	443a      	add	r2, r7
 8000bac:	6013      	str	r3, [r2, #0]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000bae:	bf00      	nop
 8000bb0:	4b96      	ldr	r3, [pc, #600]	; (8000e0c <main+0x2f0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10a      	bne.n	8000bd2 <main+0xb6>
 8000bbc:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8000bc0:	443b      	add	r3, r7
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1e5a      	subs	r2, r3, #1
 8000bc6:	f241 31a4 	movw	r1, #5028	; 0x13a4
 8000bca:	4439      	add	r1, r7
 8000bcc:	600a      	str	r2, [r1, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	dcee      	bgt.n	8000bb0 <main+0x94>
if ( timeout < 0 )
 8000bd2:	f241 33a4 	movw	r3, #5028	; 0x13a4
 8000bd6:	443b      	add	r3, r7
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	da01      	bge.n	8000be2 <main+0xc6>
{
Error_Handler();
 8000bde:	f000 fcef 	bl	80015c0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be2:	f000 fc27 	bl	8001434 <MX_GPIO_Init>
  MX_DMA_Init();
 8000be6:	f000 fc05 	bl	80013f4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000bea:	f000 fae3 	bl	80011b4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000bee:	f000 fb67 	bl	80012c0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000bf2:	f000 fa01 	bl	8000ff8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000bf6:	f000 fbb1 	bl	800135c <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8000bfa:	f000 fa75 	bl	80010e8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000bfe:	f000 fb0b 	bl	8001218 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


 HAL_TIM_Base_Start(&htim2);
 8000c02:	4883      	ldr	r0, [pc, #524]	; (8000e10 <main+0x2f4>)
 8000c04:	f008 fa14 	bl	8009030 <HAL_TIM_Base_Start>

 get_sineval();
 8000c08:	f7ff fdd6 	bl	80007b8 <get_sineval>

 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, signal, 500, DAC_ALIGN_12B_R);
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c14:	4a7f      	ldr	r2, [pc, #508]	; (8000e14 <main+0x2f8>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	487f      	ldr	r0, [pc, #508]	; (8000e18 <main+0x2fc>)
 8000c1a:	f002 fd8d 	bl	8003738 <HAL_DAC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  uint8_t buffertx[1000]="";
 8000c1e:	4b7f      	ldr	r3, [pc, #508]	; (8000e1c <main+0x300>)
 8000c20:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8000c24:	443a      	add	r2, r7
 8000c26:	4413      	add	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f009 ff71 	bl	800ab1c <memset>
int cont=0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8000c40:	6013      	str	r3, [r2, #0]
int j=0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f241 329c 	movw	r2, #5020	; 0x139c
 8000c48:	443a      	add	r2, r7
 8000c4a:	6013      	str	r3, [r2, #0]
int alfa=100000;
 8000c4c:	4b74      	ldr	r3, [pc, #464]	; (8000e20 <main+0x304>)
 8000c4e:	f241 3294 	movw	r2, #5012	; 0x1394
 8000c52:	443a      	add	r2, r7
 8000c54:	6013      	str	r3, [r2, #0]
int k=0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f241 3290 	movw	r2, #5008	; 0x1390
 8000c5c:	443a      	add	r2, r7
 8000c5e:	6013      	str	r3, [r2, #0]

        //DAC
		//enable timer
		for (i=0;i<500;i++)
 8000c60:	4b70      	ldr	r3, [pc, #448]	; (8000e24 <main+0x308>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e05a      	b.n	8000d1e <main+0x202>
           VEF+ is the input voltage reference (refer to the device datasheet)
         e.g. To set DAC_OUT1 to 0.7V, use
           Assuming that VREF+ = 3.3V, DAC_OUT1 = (3.3 * 868) / 4095 = 0.7V

		   */
      		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, signal[i]);
 8000c68:	4b6e      	ldr	r3, [pc, #440]	; (8000e24 <main+0x308>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a69      	ldr	r2, [pc, #420]	; (8000e14 <main+0x2f8>)
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	4868      	ldr	r0, [pc, #416]	; (8000e18 <main+0x2fc>)
 8000c78:	f002 fe1c 	bl	80038b4 <HAL_DAC_SetValue>

     		for (j=0;j<alfa;j++)  //ritardo sintetico
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f241 329c 	movw	r2, #5020	; 0x139c
 8000c82:	443a      	add	r2, r7
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e00f      	b.n	8000ca8 <main+0x18c>
     		{
     			cont++;
 8000c88:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8000c94:	6013      	str	r3, [r2, #0]
     		for (j=0;j<alfa;j++)  //ritardo sintetico
 8000c96:	f241 339c 	movw	r3, #5020	; 0x139c
 8000c9a:	443b      	add	r3, r7
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f241 329c 	movw	r2, #5020	; 0x139c
 8000ca4:	443a      	add	r2, r7
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	f241 339c 	movw	r3, #5020	; 0x139c
 8000cac:	443b      	add	r3, r7
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	f241 3394 	movw	r3, #5012	; 0x1394
 8000cb4:	443b      	add	r3, r7
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbe5      	blt.n	8000c88 <main+0x16c>

     		// disabilito timer e sposto la parte seguente nell'interrupt del timer


     	  //Acquisizione dati dopo il passaggio dal sensore
		  HAL_ADC_Start(&hadc1);
 8000cbc:	485a      	ldr	r0, [pc, #360]	; (8000e28 <main+0x30c>)
 8000cbe:	f001 fb75 	bl	80023ac <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000cc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc6:	4858      	ldr	r0, [pc, #352]	; (8000e28 <main+0x30c>)
 8000cc8:	f001 fc6e 	bl	80025a8 <HAL_ADC_PollForConversion>
		  uiAnalogData[i]=HAL_ADC_GetValue(&hadc1);
 8000ccc:	4856      	ldr	r0, [pc, #344]	; (8000e28 <main+0x30c>)
 8000cce:	f001 fd57 	bl	8002780 <HAL_ADC_GetValue>
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	4b53      	ldr	r3, [pc, #332]	; (8000e24 <main+0x308>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	b289      	uxth	r1, r1
 8000cda:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8000cde:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  //uiAnalogData=HAL_ADC_GetValue(&hadc1);
		  HAL_ADC_Stop(&hadc1);
 8000ce2:	4851      	ldr	r0, [pc, #324]	; (8000e28 <main+0x30c>)
 8000ce4:	f001 fc2c 	bl	8002540 <HAL_ADC_Stop>

		  //Acquisizione dati prima il passaggio dal sensore
		  HAL_ADC_Start(&hadc2);
 8000ce8:	4850      	ldr	r0, [pc, #320]	; (8000e2c <main+0x310>)
 8000cea:	f001 fb5f 	bl	80023ac <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc2, 1000);
 8000cee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cf2:	484e      	ldr	r0, [pc, #312]	; (8000e2c <main+0x310>)
 8000cf4:	f001 fc58 	bl	80025a8 <HAL_ADC_PollForConversion>
		  uiAnalogData2[i]=HAL_ADC_GetValue(&hadc2);
 8000cf8:	484c      	ldr	r0, [pc, #304]	; (8000e2c <main+0x310>)
 8000cfa:	f001 fd41 	bl	8002780 <HAL_ADC_GetValue>
 8000cfe:	4601      	mov	r1, r0
 8000d00:	4b48      	ldr	r3, [pc, #288]	; (8000e24 <main+0x308>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	b289      	uxth	r1, r1
 8000d06:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8000d0a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  //uiAnalogData=HAL_ADC_GetValue(&hadc1);
		  HAL_ADC_Stop(&hadc2);
 8000d0e:	4847      	ldr	r0, [pc, #284]	; (8000e2c <main+0x310>)
 8000d10:	f001 fc16 	bl	8002540 <HAL_ADC_Stop>
		for (i=0;i<500;i++)
 8000d14:	4b43      	ldr	r3, [pc, #268]	; (8000e24 <main+0x308>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	4a42      	ldr	r2, [pc, #264]	; (8000e24 <main+0x308>)
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <main+0x308>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d26:	db9f      	blt.n	8000c68 <main+0x14c>
		//}

		//Unione dei vettori Tensione e corrente e successivo invio a seriale


		int index=0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f241 3298 	movw	r2, #5016	; 0x1398
 8000d2e:	443a      	add	r2, r7
 8000d30:	6013      	str	r3, [r2, #0]
		for (i=0;i<500;i++)
 8000d32:	4b3c      	ldr	r3, [pc, #240]	; (8000e24 <main+0x308>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e017      	b.n	8000d6a <main+0x24e>
		{
			VIval[index++]=uiAnalogData2[i];
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <main+0x308>)
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	f241 3398 	movw	r3, #5016	; 0x1398
 8000d42:	443b      	add	r3, r7
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	f241 3098 	movw	r0, #5016	; 0x1398
 8000d4c:	4438      	add	r0, r7
 8000d4e:	6002      	str	r2, [r0, #0]
 8000d50:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8000d54:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000d58:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8000d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0;i<500;i++)
 8000d60:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <main+0x308>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <main+0x308>)
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	; (8000e24 <main+0x308>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d72:	dbe2      	blt.n	8000d3a <main+0x21e>
		}

		for (i=0;i<500;i++)
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <main+0x308>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e017      	b.n	8000dac <main+0x290>
		{
			VIval[index++]=uiAnalogData[i];
 8000d7c:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <main+0x308>)
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	f241 3398 	movw	r3, #5016	; 0x1398
 8000d84:	443b      	add	r3, r7
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	f241 3098 	movw	r0, #5016	; 0x1398
 8000d8e:	4438      	add	r0, r7
 8000d90:	6002      	str	r2, [r0, #0]
 8000d92:	f607 72a8 	addw	r2, r7, #4008	; 0xfa8
 8000d96:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000d9a:	f507 727c 	add.w	r2, r7, #1008	; 0x3f0
 8000d9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0;i<500;i++)
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <main+0x308>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a1e      	ldr	r2, [pc, #120]	; (8000e24 <main+0x308>)
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <main+0x308>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000db4:	dbe2      	blt.n	8000d7c <main+0x260>
		}

		for (i=0;i<1000;i++)
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <main+0x308>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	e01f      	b.n	8000dfe <main+0x2e2>
		{
			sprintf(buffertx, "%d\n\r", VIval[i]);
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <main+0x308>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8000dc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <main+0x300>)
 8000dce:	f241 31a8 	movw	r1, #5032	; 0x13a8
 8000dd2:	4439      	add	r1, r7
 8000dd4:	440b      	add	r3, r1
 8000dd6:	4916      	ldr	r1, [pc, #88]	; (8000e30 <main+0x314>)
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f009 fea7 	bl	800ab2c <siprintf>

			HAL_UART_Transmit(&huart3, buffertx, 1000, 1);
 8000dde:	490f      	ldr	r1, [pc, #60]	; (8000e1c <main+0x300>)
 8000de0:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8000de4:	443b      	add	r3, r7
 8000de6:	4419      	add	r1, r3
 8000de8:	2301      	movs	r3, #1
 8000dea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <main+0x318>)
 8000df0:	f008 fd9c 	bl	800992c <HAL_UART_Transmit>
		for (i=0;i<1000;i++)
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <main+0x308>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <main+0x308>)
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <main+0x308>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e06:	dbda      	blt.n	8000dbe <main+0x2a2>
  {
 8000e08:	e709      	b.n	8000c1e <main+0x102>
 8000e0a:	bf00      	nop
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	20001278 	.word	0x20001278
 8000e14:	200005ac 	.word	0x200005ac
 8000e18:	200000ac 	.word	0x200000ac
 8000e1c:	ffffec5c 	.word	0xffffec5c
 8000e20:	000186a0 	.word	0x000186a0
 8000e24:	20000094 	.word	0x20000094
 8000e28:	200003b8 	.word	0x200003b8
 8000e2c:	2000014c 	.word	0x2000014c
 8000e30:	0800bf28 	.word	0x0800bf28
 8000e34:	200000c0 	.word	0x200000c0

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0cc      	sub	sp, #304	; 0x130
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e42:	224c      	movs	r2, #76	; 0x4c
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f009 fe68 	bl	800ab1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e50:	2220      	movs	r2, #32
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f009 fe61 	bl	800ab1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4618      	mov	r0, r3
 8000e60:	23bc      	movs	r3, #188	; 0xbc
 8000e62:	461a      	mov	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	f009 fe59 	bl	800ab1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	f005 f9d6 	bl	800621c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	4b5c      	ldr	r3, [pc, #368]	; (8000fe8 <SystemClock_Config+0x1b0>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a5b      	ldr	r2, [pc, #364]	; (8000fe8 <SystemClock_Config+0x1b0>)
 8000e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b59      	ldr	r3, [pc, #356]	; (8000fe8 <SystemClock_Config+0x1b0>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	4b57      	ldr	r3, [pc, #348]	; (8000fec <SystemClock_Config+0x1b4>)
 8000e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e92:	4a56      	ldr	r2, [pc, #344]	; (8000fec <SystemClock_Config+0x1b4>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e9a:	4b54      	ldr	r3, [pc, #336]	; (8000fec <SystemClock_Config+0x1b4>)
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	f003 0201 	and.w	r2, r3, #1
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eaa:	bf00      	nop
 8000eac:	4b4e      	ldr	r3, [pc, #312]	; (8000fe8 <SystemClock_Config+0x1b0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb8:	d1f8      	bne.n	8000eac <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000eba:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <SystemClock_Config+0x1b8>)
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	f023 0303 	bic.w	r3, r3, #3
 8000ec2:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <SystemClock_Config+0x1b8>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000eea:	2378      	movs	r3, #120	; 0x78
 8000eec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f02:	230c      	movs	r3, #12
 8000f04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 f9d9 	bl	80062d0 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000f24:	f000 fb4c 	bl	80015c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	233f      	movs	r3, #63	; 0x3f
 8000f2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f40:	2340      	movs	r3, #64	; 0x40
 8000f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f46:	2340      	movs	r3, #64	; 0x40
 8000f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f54:	2340      	movs	r3, #64	; 0x40
 8000f56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f5a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f5e:	2104      	movs	r1, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 fdc5 	bl	8006af0 <HAL_RCC_ClockConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000f6c:	f000 fb28 	bl	80015c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <SystemClock_Config+0x1bc>)
 8000f76:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2213      	movs	r2, #19
 8000f86:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2202      	movs	r2, #2
 8000f96:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	22c0      	movs	r2, #192	; 0xc0
 8000fa6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	2220      	movs	r2, #32
 8000fae:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f006 f912 	bl	80071f8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 8000fda:	f000 faf1 	bl	80015c0 <Error_Handler>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	58024800 	.word	0x58024800
 8000fec:	58000400 	.word	0x58000400
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	00080002 	.word	0x00080002

08000ff8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <MX_ADC1_Init+0xe4>)
 800101e:	4a30      	ldr	r2, [pc, #192]	; (80010e0 <MX_ADC1_Init+0xe8>)
 8001020:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <MX_ADC1_Init+0xe4>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001036:	2204      	movs	r2, #4
 8001038:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_ADC1_Init+0xe4>)
 800103c:	2200      	movs	r2, #0
 800103e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001042:	2200      	movs	r2, #0
 8001044:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001048:	2201      	movs	r2, #1
 800104a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <MX_ADC1_Init+0xe4>)
 800104e:	2200      	movs	r2, #0
 8001050:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_ADC1_Init+0xe4>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001066:	2200      	movs	r2, #0
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <MX_ADC1_Init+0xe4>)
 800106c:	2200      	movs	r2, #0
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001078:	4818      	ldr	r0, [pc, #96]	; (80010dc <MX_ADC1_Init+0xe4>)
 800107a:	f000 fff7 	bl	800206c <HAL_ADC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 fa9c 	bl	80015c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4812      	ldr	r0, [pc, #72]	; (80010dc <MX_ADC1_Init+0xe4>)
 8001094:	f002 f944 	bl	8003320 <HAL_ADCEx_MultiModeConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800109e:	f000 fa8f 	bl	80015c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_ADC1_Init+0xec>)
 80010a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a6:	2306      	movs	r3, #6
 80010a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010b4:	2304      	movs	r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_ADC1_Init+0xe4>)
 80010c6:	f001 fb69 	bl	800279c <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80010d0:	f000 fa76 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200003b8 	.word	0x200003b8
 80010e0:	40022000 	.word	0x40022000
 80010e4:	3ef08000 	.word	0x3ef08000

080010e8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
 80010fc:	615a      	str	r2, [r3, #20]
 80010fe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <MX_ADC2_Init+0xc4>)
 8001104:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001106:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800111a:	2204      	movs	r2, #4
 800111c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001120:	2200      	movs	r2, #0
 8001122:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001126:	2200      	movs	r2, #0
 8001128:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800112c:	2201      	movs	r2, #1
 800112e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001132:	2200      	movs	r2, #0
 8001134:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800113e:	2200      	movs	r2, #0
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001144:	2200      	movs	r2, #0
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800114a:	2200      	movs	r2, #0
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800115c:	4812      	ldr	r0, [pc, #72]	; (80011a8 <MX_ADC2_Init+0xc0>)
 800115e:	f000 ff85 	bl	800206c <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001168:	f000 fa2a 	bl	80015c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_ADC2_Init+0xc8>)
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001170:	2306      	movs	r3, #6
 8001172:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001178:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800117c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800117e:	2304      	movs	r3, #4
 8001180:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_ADC2_Init+0xc0>)
 8001190:	f001 fb04 	bl	800279c <HAL_ADC_ConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800119a:	f000 fa11 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000014c 	.word	0x2000014c
 80011ac:	40022100 	.word	0x40022100
 80011b0:	0c900008 	.word	0x0c900008

080011b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2224      	movs	r2, #36	; 0x24
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f009 fcab 	bl	800ab1c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_DAC1_Init+0x5c>)
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <MX_DAC1_Init+0x60>)
 80011ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011cc:	4810      	ldr	r0, [pc, #64]	; (8001210 <MX_DAC1_Init+0x5c>)
 80011ce:	f002 fa90 	bl	80036f2 <HAL_DAC_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011d8:	f000 f9f2 	bl	80015c0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011e0:	230a      	movs	r3, #10
 80011e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <MX_DAC1_Init+0x5c>)
 80011f8:	f002 fba0 	bl	800393c <HAL_DAC_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001202:	f000 f9dd 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200000ac 	.word	0x200000ac
 8001214:	40007400 	.word	0x40007400

08001218 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_TIM1_Init+0xa0>)
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <MX_TIM1_Init+0xa4>)
 800123a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <MX_TIM1_Init+0xa0>)
 800123e:	2264      	movs	r2, #100	; 0x64
 8001240:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM1_Init+0xa0>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4730;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_TIM1_Init+0xa0>)
 800124a:	f241 227a 	movw	r2, #4730	; 0x127a
 800124e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM1_Init+0xa0>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM1_Init+0xa0>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_TIM1_Init+0xa0>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001262:	4815      	ldr	r0, [pc, #84]	; (80012b8 <MX_TIM1_Init+0xa0>)
 8001264:	f007 fe8c 	bl	8008f80 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800126e:	f000 f9a7 	bl	80015c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	480e      	ldr	r0, [pc, #56]	; (80012b8 <MX_TIM1_Init+0xa0>)
 8001280:	f008 f824 	bl	80092cc <HAL_TIM_ConfigClockSource>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800128a:	f000 f999 	bl	80015c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <MX_TIM1_Init+0xa0>)
 80012a0:	f008 fa4e 	bl	8009740 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012aa:	f000 f989 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000122c 	.word	0x2000122c
 80012bc:	40010000 	.word	0x40010000

080012c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_TIM2_Init+0x98>)
 80012e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_TIM2_Init+0x98>)
 80012e8:	2259      	movs	r2, #89	; 0x59
 80012ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM2_Init+0x98>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM2_Init+0x98>)
 80012f4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80012f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_TIM2_Init+0x98>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_TIM2_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <MX_TIM2_Init+0x98>)
 8001308:	f007 fe3a 	bl	8008f80 <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001312:	f000 f955 	bl	80015c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM2_Init+0x98>)
 8001324:	f007 ffd2 	bl	80092cc <HAL_TIM_ConfigClockSource>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800132e:	f000 f947 	bl	80015c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001332:	2320      	movs	r3, #32
 8001334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM2_Init+0x98>)
 8001340:	f008 f9fe 	bl	8009740 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800134a:	f000 f939 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20001278 	.word	0x20001278

0800135c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <MX_USART3_UART_Init+0x94>)
 8001364:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001366:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_USART3_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_USART3_UART_Init+0x90>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_USART3_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_USART3_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013a6:	f008 fa71 	bl	800988c <HAL_UART_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013b0:	f000 f906 	bl	80015c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013b8:	f009 faa1 	bl	800a8fe <HAL_UARTEx_SetTxFifoThreshold>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013c2:	f000 f8fd 	bl	80015c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013ca:	f009 fad6 	bl	800a97a <HAL_UARTEx_SetRxFifoThreshold>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013d4:	f000 f8f4 	bl	80015c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_USART3_UART_Init+0x90>)
 80013da:	f009 fa57 	bl	800a88c <HAL_UARTEx_DisableFifoMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013e4:	f000 f8ec 	bl	80015c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200000c0 	.word	0x200000c0
 80013f0:	40004800 	.word	0x40004800

080013f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <MX_DMA_Init+0x3c>)
 80013fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <MX_DMA_Init+0x3c>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_DMA_Init+0x3c>)
 800140c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2010      	movs	r0, #16
 800141e:	f002 f934 	bl	800368a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001422:	2010      	movs	r0, #16
 8001424:	f002 f94b 	bl	80036be <HAL_NVIC_EnableIRQ>

}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58024400 	.word	0x58024400

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	4b58      	ldr	r3, [pc, #352]	; (80015ac <MX_GPIO_Init+0x178>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	4a56      	ldr	r2, [pc, #344]	; (80015ac <MX_GPIO_Init+0x178>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145a:	4b54      	ldr	r3, [pc, #336]	; (80015ac <MX_GPIO_Init+0x178>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001468:	4b50      	ldr	r3, [pc, #320]	; (80015ac <MX_GPIO_Init+0x178>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <MX_GPIO_Init+0x178>)
 8001470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001478:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <MX_GPIO_Init+0x178>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b49      	ldr	r3, [pc, #292]	; (80015ac <MX_GPIO_Init+0x178>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	4a47      	ldr	r2, [pc, #284]	; (80015ac <MX_GPIO_Init+0x178>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001496:	4b45      	ldr	r3, [pc, #276]	; (80015ac <MX_GPIO_Init+0x178>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b41      	ldr	r3, [pc, #260]	; (80015ac <MX_GPIO_Init+0x178>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	4a40      	ldr	r2, [pc, #256]	; (80015ac <MX_GPIO_Init+0x178>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b4:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <MX_GPIO_Init+0x178>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <MX_GPIO_Init+0x178>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	4a38      	ldr	r2, [pc, #224]	; (80015ac <MX_GPIO_Init+0x178>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <MX_GPIO_Init+0x178>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <MX_GPIO_Init+0x178>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	4a31      	ldr	r2, [pc, #196]	; (80015ac <MX_GPIO_Init+0x178>)
 80014e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f0:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <MX_GPIO_Init+0x178>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014fe:	2332      	movs	r3, #50	; 0x32
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150e:	230b      	movs	r3, #11
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	4825      	ldr	r0, [pc, #148]	; (80015b0 <MX_GPIO_Init+0x17c>)
 800151a:	f004 fca1 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800151e:	2386      	movs	r3, #134	; 0x86
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152e:	230b      	movs	r3, #11
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	481e      	ldr	r0, [pc, #120]	; (80015b4 <MX_GPIO_Init+0x180>)
 800153a:	f004 fc91 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800153e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001550:	230b      	movs	r3, #11
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4817      	ldr	r0, [pc, #92]	; (80015b8 <MX_GPIO_Init+0x184>)
 800155c:	f004 fc80 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001560:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001572:	230a      	movs	r3, #10
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_GPIO_Init+0x180>)
 800157e:	f004 fc6f 	bl	8005e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001582:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001594:	230b      	movs	r3, #11
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	4807      	ldr	r0, [pc, #28]	; (80015bc <MX_GPIO_Init+0x188>)
 80015a0:	f004 fc5e 	bl	8005e60 <HAL_GPIO_Init>

}
 80015a4:	bf00      	nop
 80015a6:	3730      	adds	r7, #48	; 0x30
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58020800 	.word	0x58020800
 80015b4:	58020000 	.word	0x58020000
 80015b8:	58020400 	.word	0x58020400
 80015bc:	58021800 	.word	0x58021800

080015c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_MspInit+0x30>)
 80015d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015dc:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x30>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x30>)
 80015e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	58024400 	.word	0x58024400

08001604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a39      	ldr	r2, [pc, #228]	; (8001708 <HAL_ADC_MspInit+0x104>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d133      	bne.n	800168e <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_ADC_MspInit+0x108>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	4a37      	ldr	r2, [pc, #220]	; (800170c <HAL_ADC_MspInit+0x108>)
 800162e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_ADC_MspInit+0x108>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10e      	bne.n	8001656 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 800163a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800163e:	4a34      	ldr	r2, [pc, #208]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 800164a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	4a2c      	ldr	r2, [pc, #176]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001674:	2308      	movs	r3, #8
 8001676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001678:	2303      	movs	r3, #3
 800167a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4823      	ldr	r0, [pc, #140]	; (8001714 <HAL_ADC_MspInit+0x110>)
 8001688:	f004 fbea 	bl	8005e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800168c:	e037      	b.n	80016fe <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a21      	ldr	r2, [pc, #132]	; (8001718 <HAL_ADC_MspInit+0x114>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d132      	bne.n	80016fe <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_ADC_MspInit+0x108>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	4a1b      	ldr	r2, [pc, #108]	; (800170c <HAL_ADC_MspInit+0x108>)
 80016a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_ADC_MspInit+0x108>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10e      	bne.n	80016c8 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 80016ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016b0:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 80016b2:	f043 0320 	orr.w	r3, r3, #32
 80016b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 80016bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_ADC_MspInit+0x10c>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e6:	2340      	movs	r3, #64	; 0x40
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ea:	2303      	movs	r3, #3
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <HAL_ADC_MspInit+0x110>)
 80016fa:	f004 fbb1 	bl	8005e60 <HAL_GPIO_Init>
}
 80016fe:	bf00      	nop
 8001700:	3730      	adds	r7, #48	; 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40022000 	.word	0x40022000
 800170c:	2000009c 	.word	0x2000009c
 8001710:	58024400 	.word	0x58024400
 8001714:	58020000 	.word	0x58020000
 8001718:	40022100 	.word	0x40022100

0800171c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a30      	ldr	r2, [pc, #192]	; (80017fc <HAL_DAC_MspInit+0xe0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d159      	bne.n	80017f2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_DAC_MspInit+0xe4>)
 8001740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001744:	4a2e      	ldr	r2, [pc, #184]	; (8001800 <HAL_DAC_MspInit+0xe4>)
 8001746:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800174a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <HAL_DAC_MspInit+0xe4>)
 8001750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_DAC_MspInit+0xe4>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001762:	4a27      	ldr	r2, [pc, #156]	; (8001800 <HAL_DAC_MspInit+0xe4>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_DAC_MspInit+0xe4>)
 800176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800177a:	2310      	movs	r3, #16
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177e:	2303      	movs	r3, #3
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	481d      	ldr	r0, [pc, #116]	; (8001804 <HAL_DAC_MspInit+0xe8>)
 800178e:	f004 fb67 	bl	8005e60 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_DAC_MspInit+0xec>)
 8001794:	4a1d      	ldr	r2, [pc, #116]	; (800180c <HAL_DAC_MspInit+0xf0>)
 8001796:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_DAC_MspInit+0xec>)
 800179a:	2243      	movs	r2, #67	; 0x43
 800179c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017b8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80017d6:	480c      	ldr	r0, [pc, #48]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017d8:	f002 fa6a 	bl	8003cb0 <HAL_DMA_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80017e2:	f7ff feed 	bl	80015c0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_DAC_MspInit+0xec>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40007400 	.word	0x40007400
 8001800:	58024400 	.word	0x58024400
 8001804:	58020000 	.word	0x58020000
 8001808:	200001b0 	.word	0x200001b0
 800180c:	40020088 	.word	0x40020088

08001810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_TIM_Base_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d117      	bne.n	8001852 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_TIM_Base_MspInit+0x88>)
 8001824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_TIM_Base_MspInit+0x88>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_TIM_Base_MspInit+0x88>)
 8001834:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	2019      	movs	r0, #25
 8001846:	f001 ff20 	bl	800368a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800184a:	2019      	movs	r0, #25
 800184c:	f001 ff37 	bl	80036be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001850:	e01b      	b.n	800188a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM2)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800185a:	d116      	bne.n	800188a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_TIM_Base_MspInit+0x88>)
 800185e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001862:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_TIM_Base_MspInit+0x88>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_TIM_Base_MspInit+0x88>)
 800186e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	201c      	movs	r0, #28
 8001880:	f001 ff03 	bl	800368a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001884:	201c      	movs	r0, #28
 8001886:	f001 ff1a 	bl	80036be <HAL_NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40010000 	.word	0x40010000
 8001898:	58024400 	.word	0x58024400

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_UART_MspInit+0x88>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12e      	bne.n	800191c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_UART_MspInit+0x8c>)
 80018c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018c4:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_UART_MspInit+0x8c>)
 80018c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_UART_MspInit+0x8c>)
 80018d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_UART_MspInit+0x8c>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e2:	4a11      	ldr	r2, [pc, #68]	; (8001928 <HAL_UART_MspInit+0x8c>)
 80018e4:	f043 0308 	orr.w	r3, r3, #8
 80018e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_UART_MspInit+0x8c>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800190c:	2307      	movs	r3, #7
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <HAL_UART_MspInit+0x90>)
 8001918:	f004 faa2 	bl	8005e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40004800 	.word	0x40004800
 8001928:	58024400 	.word	0x58024400
 800192c:	58020c00 	.word	0x58020c00

08001930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 f8f2 	bl	8001b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA1_Stream5_IRQHandler+0x10>)
 8001992:	f002 ff53 	bl	800483c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200001b0 	.word	0x200001b0

080019a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_IRQn 0 */

	// add ADC code, this interrupt fires every ms


  HAL_TIM_IRQHandler(&htim1);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <TIM1_UP_IRQHandler+0x10>)
 80019a6:	f007 fb71 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000122c 	.word	0x2000122c

080019b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <TIM2_IRQHandler+0x10>)
 80019ba:	f007 fb67 	bl	800908c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20001278 	.word	0x20001278

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f009 f866 	bl	800aac8 <__errno>
 80019fc:	4602      	mov	r2, r0
 80019fe:	230c      	movs	r3, #12
 8001a00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20020000 	.word	0x20020000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	200000a0 	.word	0x200000a0
 8001a30:	20001460 	.word	0x20001460

08001a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a6c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a38:	f7fe fe22 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a3e:	e003      	b.n	8001a48 <LoopCopyDataInit>

08001a40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001a42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a46:	3104      	adds	r1, #4

08001a48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001a4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a50:	d3f6      	bcc.n	8001a40 <CopyDataInit>
  ldr  r2, =_sbss
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001a54:	e002      	b.n	8001a5c <LoopFillZerobss>

08001a56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a58:	f842 3b04 	str.w	r3, [r2], #4

08001a5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001a5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a60:	d3f9      	bcc.n	8001a56 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 8001a62:	f009 f837 	bl	800aad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a66:	f7ff f859 	bl	8000b1c <main>
  bx  lr    
 8001a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a70:	0800c190 	.word	0x0800c190
  ldr  r0, =_sdata
 8001a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a78:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001a7c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001a80:	2000145c 	.word	0x2000145c

08001a84 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC3_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8e:	2003      	movs	r0, #3
 8001a90:	f001 fdf0 	bl	8003674 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a94:	f005 f9e2 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8001a98:	4601      	mov	r1, r0
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_Init+0x68>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <HAL_Init+0x6c>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	fa21 f303 	lsr.w	r3, r1, r3
 8001ab0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_Init+0x68>)
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_Init+0x6c>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac8:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <HAL_Init+0x70>)
 8001aca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_Init+0x74>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 f814 	bl	8001b00 <HAL_InitTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e002      	b.n	8001ae8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae2:	f7ff fd75 	bl	80015d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	58024400 	.word	0x58024400
 8001af4:	0800bf40 	.word	0x0800bf40
 8001af8:	20000004 	.word	0x20000004
 8001afc:	20000000 	.word	0x20000000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_InitTick+0x60>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e021      	b.n	8001b58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_InitTick+0x64>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_InitTick+0x60>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 fdd5 	bl	80036da <HAL_SYSTICK_Config>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00e      	b.n	8001b58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d80a      	bhi.n	8001b56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f001 fd9f 	bl	800368a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_InitTick+0x68>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000010 	.word	0x20000010
 8001b64:	20000000 	.word	0x20000000
 8001b68:	2000000c 	.word	0x2000000c

08001b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x20>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x24>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <HAL_IncTick+0x24>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000010 	.word	0x20000010
 8001b90:	20001454 	.word	0x20001454

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20001454 	.word	0x20001454

08001bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff ffee 	bl	8001b94 <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc4:	d005      	beq.n	8001bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_Delay+0x40>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4413      	add	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd2:	bf00      	nop
 8001bd4:	f7ff ffde 	bl	8001b94 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d8f7      	bhi.n	8001bd4 <HAL_Delay+0x28>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000010 	.word	0x20000010

08001bf0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_GetREVID+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	5c001000 	.word	0x5c001000

08001c08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	609a      	str	r2, [r3, #8]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3360      	adds	r3, #96	; 0x60
 8001c82:	461a      	mov	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3360      	adds	r3, #96	; 0x60
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	371c      	adds	r7, #28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b087      	sub	sp, #28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3330      	adds	r3, #48	; 0x30
 8001d4e:	461a      	mov	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	4413      	add	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	211f      	movs	r1, #31
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	0e9b      	lsrs	r3, r3, #26
 8001d76:	f003 011f 	and.w	r1, r3, #31
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	431a      	orrs	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b087      	sub	sp, #28
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3314      	adds	r3, #20
 8001da6:	461a      	mov	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	0e5b      	lsrs	r3, r3, #25
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	4413      	add	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	0d1b      	lsrs	r3, r3, #20
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2107      	movs	r1, #7
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	0d1b      	lsrs	r3, r3, #20
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001de0:	bf00      	nop
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e04:	43db      	mvns	r3, r3
 8001e06:	401a      	ands	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0318 	and.w	r3, r3, #24
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e10:	40d9      	lsrs	r1, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	400b      	ands	r3, r1
 8001e16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	000fffff 	.word	0x000fffff

08001e34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 031f 	and.w	r3, r3, #31
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6093      	str	r3, [r2, #8]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	5fffffc0 	.word	0x5fffffc0

08001e90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea4:	d101      	bne.n	8001eaa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <LL_ADC_EnableInternalRegulator+0x24>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	6fffffc0 	.word	0x6fffffc0

08001ee0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ef4:	d101      	bne.n	8001efa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <LL_ADC_Enable+0x24>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	7fffffc0 	.word	0x7fffffc0

08001f30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <LL_ADC_Disable+0x24>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	f043 0202 	orr.w	r2, r3, #2
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	7fffffc0 	.word	0x7fffffc0

08001f58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <LL_ADC_IsEnabled+0x18>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <LL_ADC_IsEnabled+0x1a>
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d101      	bne.n	8001f96 <LL_ADC_IsDisableOngoing+0x18>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <LL_ADC_IsDisableOngoing+0x1a>
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <LL_ADC_REG_StartConversion+0x24>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	7fffffc0 	.word	0x7fffffc0

08001fcc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <LL_ADC_REG_StopConversion+0x24>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	f043 0210 	orr.w	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	7fffffc0 	.word	0x7fffffc0

08001ff4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b04      	cmp	r3, #4
 8002006:	d101      	bne.n	800200c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <LL_ADC_INJ_StopConversion+0x24>)
 800202a:	4013      	ands	r3, r2
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	7fffffc0 	.word	0x7fffffc0

08002044 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b08      	cmp	r3, #8
 8002056:	d101      	bne.n	800205c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e18e      	b.n	80023a4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fab5 	bl	8001604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff feef 	bl	8001e90 <LL_ADC_IsDeepPowerDownEnabled>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fed5 	bl	8001e6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff0a 	bl	8001ee0 <LL_ADC_IsInternalRegulatorEnabled>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d113      	bne.n	80020fa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff feee 	bl	8001eb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80020dc:	4b9a      	ldr	r3, [pc, #616]	; (8002348 <HAL_ADC_Init+0x2dc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	099b      	lsrs	r3, r3, #6
 80020e2:	4a9a      	ldr	r2, [pc, #616]	; (800234c <HAL_ADC_Init+0x2e0>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020ec:	e002      	b.n	80020f4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff feee 	bl	8001ee0 <LL_ADC_IsInternalRegulatorEnabled>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10d      	bne.n	8002126 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	f043 0210 	orr.w	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff62 	bl	8001ff4 <LL_ADC_REG_IsConversionOngoing>
 8002130:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	f040 8129 	bne.w	8002392 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8125 	bne.w	8002392 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002150:	f043 0202 	orr.w	r2, r3, #2
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fefb 	bl	8001f58 <LL_ADC_IsEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d136      	bne.n	80021d6 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a78      	ldr	r2, [pc, #480]	; (8002350 <HAL_ADC_Init+0x2e4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_ADC_Init+0x110>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a77      	ldr	r2, [pc, #476]	; (8002354 <HAL_ADC_Init+0x2e8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d10e      	bne.n	800219a <HAL_ADC_Init+0x12e>
 800217c:	4874      	ldr	r0, [pc, #464]	; (8002350 <HAL_ADC_Init+0x2e4>)
 800217e:	f7ff feeb 	bl	8001f58 <LL_ADC_IsEnabled>
 8002182:	4604      	mov	r4, r0
 8002184:	4873      	ldr	r0, [pc, #460]	; (8002354 <HAL_ADC_Init+0x2e8>)
 8002186:	f7ff fee7 	bl	8001f58 <LL_ADC_IsEnabled>
 800218a:	4603      	mov	r3, r0
 800218c:	4323      	orrs	r3, r4
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	e008      	b.n	80021ac <HAL_ADC_Init+0x140>
 800219a:	486f      	ldr	r0, [pc, #444]	; (8002358 <HAL_ADC_Init+0x2ec>)
 800219c:	f7ff fedc 	bl	8001f58 <LL_ADC_IsEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d012      	beq.n	80021d6 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a66      	ldr	r2, [pc, #408]	; (8002350 <HAL_ADC_Init+0x2e4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_ADC_Init+0x158>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a65      	ldr	r2, [pc, #404]	; (8002354 <HAL_ADC_Init+0x2e8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_Init+0x15c>
 80021c4:	4a65      	ldr	r2, [pc, #404]	; (800235c <HAL_ADC_Init+0x2f0>)
 80021c6:	e000      	b.n	80021ca <HAL_ADC_Init+0x15e>
 80021c8:	4a65      	ldr	r2, [pc, #404]	; (8002360 <HAL_ADC_Init+0x2f4>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f7ff fd19 	bl	8001c08 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80021d6:	f7ff fd0b 	bl	8001bf0 <HAL_GetREVID>
 80021da:	4602      	mov	r2, r0
 80021dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d914      	bls.n	800220e <HAL_ADC_Init+0x1a2>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d110      	bne.n	800220e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7d5b      	ldrb	r3, [r3, #21]
 80021f0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021f6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80021fc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7f1b      	ldrb	r3, [r3, #28]
 8002202:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002204:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002206:	f043 030c 	orr.w	r3, r3, #12
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e00d      	b.n	800222a <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7d5b      	ldrb	r3, [r3, #21]
 8002212:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002218:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800221e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7f1b      	ldrb	r3, [r3, #28]
 8002224:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7f1b      	ldrb	r3, [r3, #28]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d106      	bne.n	8002240 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	3b01      	subs	r3, #1
 8002238:	045b      	lsls	r3, r3, #17
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	4b40      	ldr	r3, [pc, #256]	; (8002364 <HAL_ADC_Init+0x2f8>)
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	430b      	orrs	r3, r1
 800226e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff febd 	bl	8001ff4 <LL_ADC_REG_IsConversionOngoing>
 800227a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fedf 	bl	8002044 <LL_ADC_INJ_IsConversionOngoing>
 8002286:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d14a      	bne.n	8002324 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d147      	bne.n	8002324 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7d1b      	ldrb	r3, [r3, #20]
 8002298:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_ADC_Init+0x2fc>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	430b      	orrs	r3, r1
 80022b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d11b      	bne.n	80022f8 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_ADC_Init+0x300>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022d4:	3a01      	subs	r2, #1
 80022d6:	0411      	lsls	r1, r2, #16
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022dc:	4311      	orrs	r1, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022e8:	430a      	orrs	r2, r1
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	611a      	str	r2, [r3, #16]
 80022f6:	e007      	b.n	8002308 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fee0 	bl	80030e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d121      	bne.n	8002370 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f023 010f 	bic.w	r1, r3, #15
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	1e5a      	subs	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
 8002344:	e01c      	b.n	8002380 <HAL_ADC_Init+0x314>
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000
 800234c:	053e2d63 	.word	0x053e2d63
 8002350:	40022000 	.word	0x40022000
 8002354:	40022100 	.word	0x40022100
 8002358:	58026000 	.word	0x58026000
 800235c:	40022300 	.word	0x40022300
 8002360:	58026300 	.word	0x58026300
 8002364:	fff0c003 	.word	0xfff0c003
 8002368:	ffffbffc 	.word	0xffffbffc
 800236c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 020f 	bic.w	r2, r2, #15
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f023 0303 	bic.w	r3, r3, #3
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
 8002390:	e007      	b.n	80023a2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	f043 0210 	orr.w	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3724      	adds	r7, #36	; 0x24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}

080023ac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a5c      	ldr	r2, [pc, #368]	; (800252c <HAL_ADC_Start+0x180>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d004      	beq.n	80023c8 <HAL_ADC_Start+0x1c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5b      	ldr	r2, [pc, #364]	; (8002530 <HAL_ADC_Start+0x184>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_Start+0x20>
 80023c8:	4b5a      	ldr	r3, [pc, #360]	; (8002534 <HAL_ADC_Start+0x188>)
 80023ca:	e000      	b.n	80023ce <HAL_ADC_Start+0x22>
 80023cc:	4b5a      	ldr	r3, [pc, #360]	; (8002538 <HAL_ADC_Start+0x18c>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fd30 	bl	8001e34 <LL_ADC_GetMultimode>
 80023d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fe0a 	bl	8001ff4 <LL_ADC_REG_IsConversionOngoing>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 809a 	bne.w	800251c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Start+0x4a>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e095      	b.n	8002522 <HAL_ADC_Start+0x176>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fd94 	bl	8002f2c <ADC_Enable>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8081 	bne.w	8002512 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002414:	4b49      	ldr	r3, [pc, #292]	; (800253c <HAL_ADC_Start+0x190>)
 8002416:	4013      	ands	r3, r2
 8002418:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a42      	ldr	r2, [pc, #264]	; (8002530 <HAL_ADC_Start+0x184>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d002      	beq.n	8002430 <HAL_ADC_Start+0x84>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	e000      	b.n	8002432 <HAL_ADC_Start+0x86>
 8002430:	4b3e      	ldr	r3, [pc, #248]	; (800252c <HAL_ADC_Start+0x180>)
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4293      	cmp	r3, r2
 8002438:	d002      	beq.n	8002440 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002458:	d106      	bne.n	8002468 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f023 0206 	bic.w	r2, r3, #6
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	659a      	str	r2, [r3, #88]	; 0x58
 8002466:	e002      	b.n	800246e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	221c      	movs	r2, #28
 8002474:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2b      	ldr	r2, [pc, #172]	; (8002530 <HAL_ADC_Start+0x184>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d002      	beq.n	800248e <HAL_ADC_Start+0xe2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	e000      	b.n	8002490 <HAL_ADC_Start+0xe4>
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_ADC_Start+0x180>)
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	4293      	cmp	r3, r2
 8002496:	d008      	beq.n	80024aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d002      	beq.n	80024aa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b09      	cmp	r3, #9
 80024a8:	d114      	bne.n	80024d4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fd69 	bl	8001fa4 <LL_ADC_REG_StartConversion>
 80024d2:	e025      	b.n	8002520 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_ADC_Start+0x184>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d002      	beq.n	80024f0 <HAL_ADC_Start+0x144>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	e000      	b.n	80024f2 <HAL_ADC_Start+0x146>
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_ADC_Start+0x180>)
 80024f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00f      	beq.n	8002520 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002508:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
 8002510:	e006      	b.n	8002520 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800251a:	e001      	b.n	8002520 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800251c:	2302      	movs	r3, #2
 800251e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002520:	7dfb      	ldrb	r3, [r7, #23]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40022000 	.word	0x40022000
 8002530:	40022100 	.word	0x40022100
 8002534:	40022300 	.word	0x40022300
 8002538:	58026300 	.word	0x58026300
 800253c:	fffff0fe 	.word	0xfffff0fe

08002540 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_ADC_Stop+0x16>
 8002552:	2302      	movs	r3, #2
 8002554:	e021      	b.n	800259a <HAL_ADC_Stop+0x5a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800255e:	2103      	movs	r1, #3
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fc2f 	bl	8002dc4 <ADC_ConversionStop>
 8002566:	4603      	mov	r3, r0
 8002568:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10f      	bne.n	8002590 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fd5f 	bl	8003034 <ADC_Disable>
 8002576:	4603      	mov	r3, r0
 8002578:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d107      	bne.n	8002590 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <HAL_ADC_Stop+0x64>)
 8002586:	4013      	ands	r3, r2
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	ffffeefe 	.word	0xffffeefe

080025a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6e      	ldr	r2, [pc, #440]	; (8002770 <HAL_ADC_PollForConversion+0x1c8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_PollForConversion+0x1e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a6c      	ldr	r2, [pc, #432]	; (8002774 <HAL_ADC_PollForConversion+0x1cc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_PollForConversion+0x22>
 80025c6:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_ADC_PollForConversion+0x1d0>)
 80025c8:	e000      	b.n	80025cc <HAL_ADC_PollForConversion+0x24>
 80025ca:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_ADC_PollForConversion+0x1d4>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fc31 	bl	8001e34 <LL_ADC_GetMultimode>
 80025d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d102      	bne.n	80025e2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025dc:	2308      	movs	r3, #8
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	e037      	b.n	8002652 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d002      	beq.n	80025f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2b09      	cmp	r3, #9
 80025f2:	d111      	bne.n	8002618 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f043 0220 	orr.w	r2, r3, #32
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0aa      	b.n	8002768 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002612:	2304      	movs	r3, #4
 8002614:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002616:	e01c      	b.n	8002652 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a54      	ldr	r2, [pc, #336]	; (8002770 <HAL_ADC_PollForConversion+0x1c8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_ADC_PollForConversion+0x84>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a53      	ldr	r2, [pc, #332]	; (8002774 <HAL_ADC_PollForConversion+0x1cc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_ADC_PollForConversion+0x88>
 800262c:	4b52      	ldr	r3, [pc, #328]	; (8002778 <HAL_ADC_PollForConversion+0x1d0>)
 800262e:	e000      	b.n	8002632 <HAL_ADC_PollForConversion+0x8a>
 8002630:	4b52      	ldr	r3, [pc, #328]	; (800277c <HAL_ADC_PollForConversion+0x1d4>)
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fc0c 	bl	8001e50 <LL_ADC_GetMultiDMATransfer>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d007      	beq.n	800264e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e08c      	b.n	8002768 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800264e:	2304      	movs	r3, #4
 8002650:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002652:	f7ff fa9f 	bl	8001b94 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002658:	e01a      	b.n	8002690 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d016      	beq.n	8002690 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002662:	f7ff fa97 	bl	8001b94 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <HAL_ADC_PollForConversion+0xd0>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10b      	bne.n	8002690 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f043 0204 	orr.w	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e06b      	b.n	8002768 <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0dd      	beq.n	800265a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fb32 	bl	8001d18 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01c      	beq.n	80026f4 <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7d5b      	ldrb	r3, [r3, #21]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d111      	bne.n	80026f4 <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <HAL_ADC_PollForConversion+0x1cc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d002      	beq.n	8002704 <HAL_ADC_PollForConversion+0x15c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	e000      	b.n	8002706 <HAL_ADC_PollForConversion+0x15e>
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <HAL_ADC_PollForConversion+0x1c8>)
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	4293      	cmp	r3, r2
 800270c:	d008      	beq.n	8002720 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d002      	beq.n	8002720 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b09      	cmp	r3, #9
 800271e:	d104      	bne.n	800272a <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e00c      	b.n	8002744 <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a11      	ldr	r2, [pc, #68]	; (8002774 <HAL_ADC_PollForConversion+0x1cc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d002      	beq.n	800273a <HAL_ADC_PollForConversion+0x192>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	e000      	b.n	800273c <HAL_ADC_PollForConversion+0x194>
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_ADC_PollForConversion+0x1c8>)
 800273c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b08      	cmp	r3, #8
 8002748:	d104      	bne.n	8002754 <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2208      	movs	r2, #8
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e008      	b.n	8002766 <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40022000 	.word	0x40022000
 8002774:	40022100 	.word	0x40022100
 8002778:	40022300 	.word	0x40022300
 800277c:	58026300 	.word	0x58026300

08002780 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b099      	sub	sp, #100	; 0x64
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a99      	ldr	r2, [pc, #612]	; (8002a1c <HAL_ADC_ConfigChannel+0x280>)
 80027b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x2a>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e2e6      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x5f8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fc0e 	bl	8001ff4 <LL_ADC_REG_IsConversionOngoing>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 82cb 	bne.w	8002d76 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d108      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x62>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	0e9b      	lsrs	r3, r3, #26
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2201      	movs	r2, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	e00f      	b.n	800281e <HAL_ADC_ConfigChannel+0x82>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2201      	movs	r2, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	69d1      	ldr	r1, [r2, #28]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	430b      	orrs	r3, r1
 800282a:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	f7ff fa80 	bl	8001d3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fbd6 	bl	8001ff4 <LL_ADC_REG_IsConversionOngoing>
 8002848:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fbf8 	bl	8002044 <LL_ADC_INJ_IsConversionOngoing>
 8002854:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 80b3 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800285e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002860:	2b00      	cmp	r3, #0
 8002862:	f040 80af 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	461a      	mov	r2, r3
 8002874:	f7ff fa8f 	bl	8001d96 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002878:	4b69      	ldr	r3, [pc, #420]	; (8002a20 <HAL_ADC_ConfigChannel+0x284>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002884:	d10b      	bne.n	800289e <HAL_ADC_ConfigChannel+0x102>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	e01d      	b.n	80028da <HAL_ADC_ConfigChannel+0x13e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x128>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	e00a      	b.n	80028da <HAL_ADC_ConfigChannel+0x13e>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	d027      	beq.n	8002934 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6919      	ldr	r1, [r3, #16]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028f2:	f7ff f9bd 	bl	8001c70 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6919      	ldr	r1, [r3, #16]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	7e5b      	ldrb	r3, [r3, #25]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d102      	bne.n	800290c <HAL_ADC_ConfigChannel+0x170>
 8002906:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800290a:	e000      	b.n	800290e <HAL_ADC_ConfigChannel+0x172>
 800290c:	2300      	movs	r3, #0
 800290e:	461a      	mov	r2, r3
 8002910:	f7ff f9e7 	bl	8001ce2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6919      	ldr	r1, [r3, #16]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	7e1b      	ldrb	r3, [r3, #24]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_ADC_ConfigChannel+0x18e>
 8002924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002928:	e000      	b.n	800292c <HAL_ADC_ConfigChannel+0x190>
 800292a:	2300      	movs	r3, #0
 800292c:	461a      	mov	r2, r3
 800292e:	f7ff f9bf 	bl	8001cb0 <LL_ADC_SetDataRightShift>
 8002932:	e047      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	069b      	lsls	r3, r3, #26
 8002944:	429a      	cmp	r2, r3
 8002946:	d107      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002956:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	069b      	lsls	r3, r3, #26
 8002968:	429a      	cmp	r2, r3
 800296a:	d107      	bne.n	800297c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800297a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002982:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	069b      	lsls	r3, r3, #26
 800298c:	429a      	cmp	r2, r3
 800298e:	d107      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800299e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	069b      	lsls	r3, r3, #26
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d107      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fac5 	bl	8001f58 <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 81d9 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7ff fa02 	bl	8001dec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <HAL_ADC_ConfigChannel+0x280>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	f040 8101 	bne.w	8002bf6 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10f      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x288>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e016      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x2ae>
 8002a1c:	47ff0000 	.word	0x47ff0000
 8002a20:	5c001000 	.word	0x5c001000
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	bf94      	ite	ls
 8002a44:	2301      	movls	r3, #1
 8002a46:	2300      	movhi	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d064      	beq.n	8002b18 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d107      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x2ce>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0e9b      	lsrs	r3, r3, #26
 8002a60:	3301      	adds	r3, #1
 8002a62:	069b      	lsls	r3, r3, #26
 8002a64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a68:	e00e      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x2ec>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x30c>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	e010      	b.n	8002aca <HAL_ADC_ConfigChannel+0x32e>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	ea42 0103 	orr.w	r1, r2, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x354>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	0e9b      	lsrs	r3, r3, #26
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 021f 	and.w	r2, r3, #31
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	051b      	lsls	r3, r3, #20
 8002aee:	e011      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x378>
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b14:	430b      	orrs	r3, r1
 8002b16:	e069      	b.n	8002bec <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x398>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	069b      	lsls	r3, r3, #26
 8002b2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b32:	e00e      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x3b6>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	61fb      	str	r3, [r7, #28]
  return result;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	069b      	lsls	r3, r3, #26
 8002b4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d109      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x3d6>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	3301      	adds	r3, #1
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b70:	e010      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x3f8>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	617b      	str	r3, [r7, #20]
  return result;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	ea42 0103 	orr.w	r1, r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10d      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x424>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	3301      	adds	r3, #1
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3b1e      	subs	r3, #30
 8002bb8:	051b      	lsls	r3, r3, #20
 8002bba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	e014      	b.n	8002bea <HAL_ADC_ConfigChannel+0x44e>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	60fb      	str	r3, [r7, #12]
  return result;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	3b1e      	subs	r3, #30
 8002be4:	051b      	lsls	r3, r3, #20
 8002be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bea:	430b      	orrs	r3, r1
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	6892      	ldr	r2, [r2, #8]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7ff f8d0 	bl	8001d96 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f280 80c4 	bge.w	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	; (8002d9c <HAL_ADC_ConfigChannel+0x600>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_ADC_ConfigChannel+0x478>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a64      	ldr	r2, [pc, #400]	; (8002da0 <HAL_ADC_ConfigChannel+0x604>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x47c>
 8002c14:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <HAL_ADC_ConfigChannel+0x608>)
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x47e>
 8002c18:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_ADC_ConfigChannel+0x60c>)
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff f81a 	bl	8001c54 <LL_ADC_GetCommonPathInternalCh>
 8002c20:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a5d      	ldr	r2, [pc, #372]	; (8002d9c <HAL_ADC_ConfigChannel+0x600>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x49a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5b      	ldr	r2, [pc, #364]	; (8002da0 <HAL_ADC_ConfigChannel+0x604>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10e      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x4b8>
 8002c36:	4859      	ldr	r0, [pc, #356]	; (8002d9c <HAL_ADC_ConfigChannel+0x600>)
 8002c38:	f7ff f98e 	bl	8001f58 <LL_ADC_IsEnabled>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	4858      	ldr	r0, [pc, #352]	; (8002da0 <HAL_ADC_ConfigChannel+0x604>)
 8002c40:	f7ff f98a 	bl	8001f58 <LL_ADC_IsEnabled>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4323      	orrs	r3, r4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	e008      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x4ca>
 8002c54:	4855      	ldr	r0, [pc, #340]	; (8002dac <HAL_ADC_ConfigChannel+0x610>)
 8002c56:	f7ff f97f 	bl	8001f58 <LL_ADC_IsEnabled>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d07b      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a50      	ldr	r2, [pc, #320]	; (8002db0 <HAL_ADC_ConfigChannel+0x614>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d12e      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x536>
 8002c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d129      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a4a      	ldr	r2, [pc, #296]	; (8002dac <HAL_ADC_ConfigChannel+0x610>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d17f      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a43      	ldr	r2, [pc, #268]	; (8002d9c <HAL_ADC_ConfigChannel+0x600>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x500>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <HAL_ADC_ConfigChannel+0x604>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x504>
 8002c9c:	4a41      	ldr	r2, [pc, #260]	; (8002da4 <HAL_ADC_ConfigChannel+0x608>)
 8002c9e:	e000      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x506>
 8002ca0:	4a41      	ldr	r2, [pc, #260]	; (8002da8 <HAL_ADC_ConfigChannel+0x60c>)
 8002ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f7fe ffbf 	bl	8001c2e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002cb0:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <HAL_ADC_ConfigChannel+0x618>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	4a40      	ldr	r2, [pc, #256]	; (8002db8 <HAL_ADC_ConfigChannel+0x61c>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cc2:	e002      	b.n	8002cca <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f9      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cd0:	e05a      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a39      	ldr	r2, [pc, #228]	; (8002dbc <HAL_ADC_ConfigChannel+0x620>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d11e      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x57e>
 8002cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d119      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a30      	ldr	r2, [pc, #192]	; (8002dac <HAL_ADC_ConfigChannel+0x610>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d14b      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a29      	ldr	r2, [pc, #164]	; (8002d9c <HAL_ADC_ConfigChannel+0x600>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d004      	beq.n	8002d04 <HAL_ADC_ConfigChannel+0x568>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <HAL_ADC_ConfigChannel+0x604>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x56c>
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_ADC_ConfigChannel+0x608>)
 8002d06:	e000      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x56e>
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <HAL_ADC_ConfigChannel+0x60c>)
 8002d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f7fe ff8b 	bl	8001c2e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d18:	e036      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <HAL_ADC_ConfigChannel+0x624>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d131      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
 8002d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d12c      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_ADC_ConfigChannel+0x610>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d127      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_ADC_ConfigChannel+0x600>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_ADC_ConfigChannel+0x5b0>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <HAL_ADC_ConfigChannel+0x604>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x5b4>
 8002d4c:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_ADC_ConfigChannel+0x608>)
 8002d4e:	e000      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x5b6>
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <HAL_ADC_ConfigChannel+0x60c>)
 8002d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f7fe ff67 	bl	8001c2e <LL_ADC_SetCommonPathInternalCh>
 8002d60:	e012      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002d74:	e008      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3764      	adds	r7, #100	; 0x64
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40022100 	.word	0x40022100
 8002da4:	40022300 	.word	0x40022300
 8002da8:	58026300 	.word	0x58026300
 8002dac:	58026000 	.word	0x58026000
 8002db0:	cb840000 	.word	0xcb840000
 8002db4:	20000000 	.word	0x20000000
 8002db8:	053e2d63 	.word	0x053e2d63
 8002dbc:	c7520000 	.word	0xc7520000
 8002dc0:	cfb80000 	.word	0xcfb80000

08002dc4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f90a 	bl	8001ff4 <LL_ADC_REG_IsConversionOngoing>
 8002de0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff f92c 	bl	8002044 <LL_ADC_INJ_IsConversionOngoing>
 8002dec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d103      	bne.n	8002dfc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8090 	beq.w	8002f1c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d02a      	beq.n	8002e60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7d5b      	ldrb	r3, [r3, #21]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d126      	bne.n	8002e60 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7d1b      	ldrb	r3, [r3, #20]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d122      	bne.n	8002e60 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e1e:	e014      	b.n	8002e4a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	4a41      	ldr	r2, [pc, #260]	; (8002f28 <ADC_ConversionStop+0x164>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d90d      	bls.n	8002e44 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2c:	f043 0210 	orr.w	r2, r3, #16
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e06c      	b.n	8002f1e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d1e3      	bne.n	8002e20 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2240      	movs	r2, #64	; 0x40
 8002e5e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d014      	beq.n	8002e90 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff f8c2 	bl	8001ff4 <LL_ADC_REG_IsConversionOngoing>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f87f 	bl	8001f7e <LL_ADC_IsDisableOngoing>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff f89e 	bl	8001fcc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d014      	beq.n	8002ec0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff f8d2 	bl	8002044 <LL_ADC_INJ_IsConversionOngoing>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00c      	beq.n	8002ec0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff f867 	bl	8001f7e <LL_ADC_IsDisableOngoing>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d104      	bne.n	8002ec0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff f8ae 	bl	800201c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d004      	beq.n	8002ed0 <ADC_ConversionStop+0x10c>
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d105      	bne.n	8002ed6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002eca:	230c      	movs	r3, #12
 8002ecc:	617b      	str	r3, [r7, #20]
        break;
 8002ece:	e005      	b.n	8002edc <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	617b      	str	r3, [r7, #20]
        break;
 8002ed4:	e002      	b.n	8002edc <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	617b      	str	r3, [r7, #20]
        break;
 8002eda:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fe5a 	bl	8001b94 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002ee2:	e014      	b.n	8002f0e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002ee4:	f7fe fe56 	bl	8001b94 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d90d      	bls.n	8002f0e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f043 0210 	orr.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f043 0201 	orr.w	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e007      	b.n	8002f1e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e3      	bne.n	8002ee4 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	000cdbff 	.word	0x000cdbff

08002f2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f80d 	bl	8001f58 <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d167      	bne.n	8003014 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	4b35      	ldr	r3, [pc, #212]	; (8003020 <ADC_Enable+0xf4>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f043 0210 	orr.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e053      	b.n	8003016 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe ffc8 	bl	8001f08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f78:	f7fe fe0c 	bl	8001b94 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a28      	ldr	r2, [pc, #160]	; (8003024 <ADC_Enable+0xf8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <ADC_Enable+0x66>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a26      	ldr	r2, [pc, #152]	; (8003028 <ADC_Enable+0xfc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d101      	bne.n	8002f96 <ADC_Enable+0x6a>
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <ADC_Enable+0x100>)
 8002f94:	e000      	b.n	8002f98 <ADC_Enable+0x6c>
 8002f96:	4b26      	ldr	r3, [pc, #152]	; (8003030 <ADC_Enable+0x104>)
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe ff4b 	bl	8001e34 <LL_ADC_GetMultimode>
 8002f9e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <ADC_Enable+0xfc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d002      	beq.n	8002fb0 <ADC_Enable+0x84>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	e000      	b.n	8002fb2 <ADC_Enable+0x86>
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <ADC_Enable+0xf8>)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d025      	beq.n	8003006 <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d129      	bne.n	8003014 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fc0:	e021      	b.n	8003006 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe ffc6 	bl	8001f58 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d104      	bne.n	8002fdc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe ff96 	bl	8001f08 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fdc:	f7fe fdda 	bl	8001b94 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d90d      	bls.n	8003006 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f043 0210 	orr.w	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e007      	b.n	8003016 <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d1d6      	bne.n	8002fc2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	8000003f 	.word	0x8000003f
 8003024:	40022000 	.word	0x40022000
 8003028:	40022100 	.word	0x40022100
 800302c:	40022300 	.word	0x40022300
 8003030:	58026300 	.word	0x58026300

08003034 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe ff9c 	bl	8001f7e <LL_ADC_IsDisableOngoing>
 8003046:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe ff83 	bl	8001f58 <LL_ADC_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d040      	beq.n	80030da <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d13d      	bne.n	80030da <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030d 	and.w	r3, r3, #13
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10c      	bne.n	8003086 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe ff5d 	bl	8001f30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2203      	movs	r2, #3
 800307c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800307e:	f7fe fd89 	bl	8001b94 <HAL_GetTick>
 8003082:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003084:	e022      	b.n	80030cc <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308a:	f043 0210 	orr.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e01c      	b.n	80030dc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030a2:	f7fe fd77 	bl	8001b94 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d90d      	bls.n	80030cc <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f043 0210 	orr.w	r2, r3, #16
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f043 0201 	orr.w	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e007      	b.n	80030dc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e3      	bne.n	80030a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a70      	ldr	r2, [pc, #448]	; (80032b4 <ADC_ConfigureBoostMode+0x1d0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <ADC_ConfigureBoostMode+0x1c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6f      	ldr	r2, [pc, #444]	; (80032b8 <ADC_ConfigureBoostMode+0x1d4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d109      	bne.n	8003114 <ADC_ConfigureBoostMode+0x30>
 8003100:	4b6e      	ldr	r3, [pc, #440]	; (80032bc <ADC_ConfigureBoostMode+0x1d8>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e008      	b.n	8003126 <ADC_ConfigureBoostMode+0x42>
 8003114:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <ADC_ConfigureBoostMode+0x1dc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01a      	beq.n	8003160 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800312a:	f004 f809 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 800312e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003138:	d006      	beq.n	8003148 <ADC_ConfigureBoostMode+0x64>
 800313a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800313e:	d00b      	beq.n	8003158 <ADC_ConfigureBoostMode+0x74>
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d000      	beq.n	8003148 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003146:	e05d      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	60fb      	str	r3, [r7, #12]
        break;
 8003156:	e055      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	60fb      	str	r3, [r7, #12]
        break;
 800315e:	e051      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003160:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003164:	f004 ff36 	bl	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003168:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003172:	d02a      	beq.n	80031ca <ADC_ConfigureBoostMode+0xe6>
 8003174:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003178:	d813      	bhi.n	80031a2 <ADC_ConfigureBoostMode+0xbe>
 800317a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800317e:	d024      	beq.n	80031ca <ADC_ConfigureBoostMode+0xe6>
 8003180:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003184:	d806      	bhi.n	8003194 <ADC_ConfigureBoostMode+0xb0>
 8003186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800318a:	d01e      	beq.n	80031ca <ADC_ConfigureBoostMode+0xe6>
 800318c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003190:	d01b      	beq.n	80031ca <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003192:	e037      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003198:	d017      	beq.n	80031ca <ADC_ConfigureBoostMode+0xe6>
 800319a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800319e:	d014      	beq.n	80031ca <ADC_ConfigureBoostMode+0xe6>
        break;
 80031a0:	e030      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80031a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031a6:	d021      	beq.n	80031ec <ADC_ConfigureBoostMode+0x108>
 80031a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031ac:	d806      	bhi.n	80031bc <ADC_ConfigureBoostMode+0xd8>
 80031ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031b2:	d013      	beq.n	80031dc <ADC_ConfigureBoostMode+0xf8>
 80031b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b8:	d014      	beq.n	80031e4 <ADC_ConfigureBoostMode+0x100>
        break;
 80031ba:	e023      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 80031bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031c0:	d018      	beq.n	80031f4 <ADC_ConfigureBoostMode+0x110>
 80031c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80031c6:	d019      	beq.n	80031fc <ADC_ConfigureBoostMode+0x118>
        break;
 80031c8:	e01c      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	0c9b      	lsrs	r3, r3, #18
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d8:	60fb      	str	r3, [r7, #12]
        break;
 80031da:	e013      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	60fb      	str	r3, [r7, #12]
        break;
 80031e2:	e00f      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	60fb      	str	r3, [r7, #12]
        break;
 80031ea:	e00b      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	60fb      	str	r3, [r7, #12]
        break;
 80031f2:	e007      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	09db      	lsrs	r3, r3, #7
 80031f8:	60fb      	str	r3, [r7, #12]
        break;
 80031fa:	e003      	b.n	8003204 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	60fb      	str	r3, [r7, #12]
        break;
 8003202:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003204:	f7fe fcf4 	bl	8001bf0 <HAL_GetREVID>
 8003208:	4602      	mov	r2, r0
 800320a:	f241 0303 	movw	r3, #4099	; 0x1003
 800320e:	429a      	cmp	r2, r3
 8003210:	d815      	bhi.n	800323e <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <ADC_ConfigureBoostMode+0x1e0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d908      	bls.n	800322c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003228:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800322a:	e03e      	b.n	80032aa <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800323a:	609a      	str	r2, [r3, #8]
}
 800323c:	e035      	b.n	80032aa <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a20      	ldr	r2, [pc, #128]	; (80032c8 <ADC_ConfigureBoostMode+0x1e4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d808      	bhi.n	800325e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800325a:	609a      	str	r2, [r3, #8]
}
 800325c:	e025      	b.n	80032aa <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <ADC_ConfigureBoostMode+0x1e8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d80a      	bhi.n	800327c <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	e016      	b.n	80032aa <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a14      	ldr	r2, [pc, #80]	; (80032d0 <ADC_ConfigureBoostMode+0x1ec>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d80a      	bhi.n	800329a <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	e007      	b.n	80032aa <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032a8:	609a      	str	r2, [r3, #8]
}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40022000 	.word	0x40022000
 80032b8:	40022100 	.word	0x40022100
 80032bc:	40022300 	.word	0x40022300
 80032c0:	58026300 	.word	0x58026300
 80032c4:	01312d00 	.word	0x01312d00
 80032c8:	005f5e10 	.word	0x005f5e10
 80032cc:	00bebc20 	.word	0x00bebc20
 80032d0:	017d7840 	.word	0x017d7840

080032d4 <LL_ADC_IsEnabled>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <LL_ADC_IsEnabled+0x18>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <LL_ADC_IsEnabled+0x1a>
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <LL_ADC_REG_IsConversionOngoing>:
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d101      	bne.n	8003312 <LL_ADC_REG_IsConversionOngoing+0x18>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b09f      	sub	sp, #124	; 0x7c
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800333a:	2302      	movs	r3, #2
 800333c:	e0ba      	b.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a5c      	ldr	r2, [pc, #368]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d102      	bne.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003350:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	e001      	b.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e09d      	b.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f7ff ffbd 	bl	80032fa <LL_ADC_REG_IsConversionOngoing>
 8003380:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ffb7 	bl	80032fa <LL_ADC_REG_IsConversionOngoing>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d17f      	bne.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003394:	2b00      	cmp	r3, #0
 8003396:	d17c      	bne.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a47      	ldr	r2, [pc, #284]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a46      	ldr	r2, [pc, #280]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80033ac:	4b45      	ldr	r3, [pc, #276]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033ae:	e000      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80033b0:	4b45      	ldr	r3, [pc, #276]	; (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d039      	beq.n	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80033bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033cc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3a      	ldr	r2, [pc, #232]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10e      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80033e2:	4836      	ldr	r0, [pc, #216]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80033e4:	f7ff ff76 	bl	80032d4 <LL_ADC_IsEnabled>
 80033e8:	4604      	mov	r4, r0
 80033ea:	4835      	ldr	r0, [pc, #212]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80033ec:	f7ff ff72 	bl	80032d4 <LL_ADC_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4323      	orrs	r3, r4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e008      	b.n	8003412 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003400:	4832      	ldr	r0, [pc, #200]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003402:	f7ff ff67 	bl	80032d4 <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d047      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	4b2d      	ldr	r3, [pc, #180]	; (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800341c:	4013      	ands	r3, r2
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	6811      	ldr	r1, [r2, #0]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	6892      	ldr	r2, [r2, #8]
 8003426:	430a      	orrs	r2, r1
 8003428:	431a      	orrs	r2, r3
 800342a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800342e:	e03a      	b.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d10e      	bne.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003450:	481a      	ldr	r0, [pc, #104]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003452:	f7ff ff3f 	bl	80032d4 <LL_ADC_IsEnabled>
 8003456:	4604      	mov	r4, r0
 8003458:	4819      	ldr	r0, [pc, #100]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800345a:	f7ff ff3b 	bl	80032d4 <LL_ADC_IsEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	4323      	orrs	r3, r4
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e008      	b.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 800346e:	4817      	ldr	r0, [pc, #92]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003470:	f7ff ff30 	bl	80032d4 <LL_ADC_IsEnabled>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	bf0c      	ite	eq
 800347a:	2301      	moveq	r3, #1
 800347c:	2300      	movne	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d010      	beq.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800348a:	4013      	ands	r3, r2
 800348c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800348e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003490:	e009      	b.n	80034a6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034a4:	e000      	b.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034a6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	377c      	adds	r7, #124	; 0x7c
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd90      	pop	{r4, r7, pc}
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40022100 	.word	0x40022100
 80034c4:	40022300 	.word	0x40022300
 80034c8:	58026300 	.word	0x58026300
 80034cc:	58026000 	.word	0x58026000
 80034d0:	fffff0e0 	.word	0xfffff0e0

080034d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <__NVIC_SetPriorityGrouping+0x40>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <__NVIC_SetPriorityGrouping+0x44>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003502:	4a04      	ldr	r2, [pc, #16]	; (8003514 <__NVIC_SetPriorityGrouping+0x40>)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	60d3      	str	r3, [r2, #12]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00
 8003518:	05fa0000 	.word	0x05fa0000

0800351c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <__NVIC_GetPriorityGrouping+0x18>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	0a1b      	lsrs	r3, r3, #8
 8003526:	f003 0307 	and.w	r3, r3, #7
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003546:	2b00      	cmp	r3, #0
 8003548:	db0b      	blt.n	8003562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	f003 021f 	and.w	r2, r3, #31
 8003550:	4907      	ldr	r1, [pc, #28]	; (8003570 <__NVIC_EnableIRQ+0x38>)
 8003552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	2001      	movs	r0, #1
 800355a:	fa00 f202 	lsl.w	r2, r0, r2
 800355e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000e100 	.word	0xe000e100

08003574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	6039      	str	r1, [r7, #0]
 800357e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003584:	2b00      	cmp	r3, #0
 8003586:	db0a      	blt.n	800359e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	b2da      	uxtb	r2, r3
 800358c:	490c      	ldr	r1, [pc, #48]	; (80035c0 <__NVIC_SetPriority+0x4c>)
 800358e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003592:	0112      	lsls	r2, r2, #4
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	440b      	add	r3, r1
 8003598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800359c:	e00a      	b.n	80035b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	4908      	ldr	r1, [pc, #32]	; (80035c4 <__NVIC_SetPriority+0x50>)
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	3b04      	subs	r3, #4
 80035ac:	0112      	lsls	r2, r2, #4
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	440b      	add	r3, r1
 80035b2:	761a      	strb	r2, [r3, #24]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000e100 	.word	0xe000e100
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f1c3 0307 	rsb	r3, r3, #7
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	bf28      	it	cs
 80035e6:	2304      	movcs	r3, #4
 80035e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2b06      	cmp	r3, #6
 80035f0:	d902      	bls.n	80035f8 <NVIC_EncodePriority+0x30>
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3b03      	subs	r3, #3
 80035f6:	e000      	b.n	80035fa <NVIC_EncodePriority+0x32>
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	401a      	ands	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003610:	f04f 31ff 	mov.w	r1, #4294967295
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	fa01 f303 	lsl.w	r3, r1, r3
 800361a:	43d9      	mvns	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	4313      	orrs	r3, r2
         );
}
 8003622:	4618      	mov	r0, r3
 8003624:	3724      	adds	r7, #36	; 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3b01      	subs	r3, #1
 800363c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003640:	d301      	bcc.n	8003646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003642:	2301      	movs	r3, #1
 8003644:	e00f      	b.n	8003666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003646:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <SysTick_Config+0x40>)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3b01      	subs	r3, #1
 800364c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800364e:	210f      	movs	r1, #15
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	f7ff ff8e 	bl	8003574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <SysTick_Config+0x40>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800365e:	4b04      	ldr	r3, [pc, #16]	; (8003670 <SysTick_Config+0x40>)
 8003660:	2207      	movs	r2, #7
 8003662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	e000e010 	.word	0xe000e010

08003674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff29 	bl	80034d4 <__NVIC_SetPriorityGrouping>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b086      	sub	sp, #24
 800368e:	af00      	add	r7, sp, #0
 8003690:	4603      	mov	r3, r0
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003698:	f7ff ff40 	bl	800351c <__NVIC_GetPriorityGrouping>
 800369c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7ff ff90 	bl	80035c8 <NVIC_EncodePriority>
 80036a8:	4602      	mov	r2, r0
 80036aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff ff5f 	bl	8003574 <__NVIC_SetPriority>
}
 80036b6:	bf00      	nop
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff33 	bl	8003538 <__NVIC_EnableIRQ>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ffa4 	bl	8003630 <SysTick_Config>
 80036e8:	4603      	mov	r3, r0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e014      	b.n	800372e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	791b      	ldrb	r3, [r3, #4]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d105      	bne.n	800371a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7fe f801 	bl	800171c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	795b      	ldrb	r3, [r3, #5]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_DAC_Start_DMA+0x1e>
 8003752:	2302      	movs	r3, #2
 8003754:	e09e      	b.n	8003894 <HAL_DAC_Start_DMA+0x15c>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2202      	movs	r2, #2
 8003760:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d12a      	bne.n	80037be <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a4b      	ldr	r2, [pc, #300]	; (800389c <HAL_DAC_Start_DMA+0x164>)
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	4a4a      	ldr	r2, [pc, #296]	; (80038a0 <HAL_DAC_Start_DMA+0x168>)
 8003776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a49      	ldr	r2, [pc, #292]	; (80038a4 <HAL_DAC_Start_DMA+0x16c>)
 800377e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800378e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	2b04      	cmp	r3, #4
 8003794:	d009      	beq.n	80037aa <HAL_DAC_Start_DMA+0x72>
 8003796:	2b08      	cmp	r3, #8
 8003798:	d00c      	beq.n	80037b4 <HAL_DAC_Start_DMA+0x7c>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d000      	beq.n	80037a0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800379e:	e039      	b.n	8003814 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3308      	adds	r3, #8
 80037a6:	613b      	str	r3, [r7, #16]
        break;
 80037a8:	e034      	b.n	8003814 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	613b      	str	r3, [r7, #16]
        break;
 80037b2:	e02f      	b.n	8003814 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3310      	adds	r3, #16
 80037ba:	613b      	str	r3, [r7, #16]
        break;
 80037bc:	e02a      	b.n	8003814 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4a39      	ldr	r2, [pc, #228]	; (80038a8 <HAL_DAC_Start_DMA+0x170>)
 80037c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4a38      	ldr	r2, [pc, #224]	; (80038ac <HAL_DAC_Start_DMA+0x174>)
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a37      	ldr	r2, [pc, #220]	; (80038b0 <HAL_DAC_Start_DMA+0x178>)
 80037d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d009      	beq.n	8003800 <HAL_DAC_Start_DMA+0xc8>
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d00c      	beq.n	800380a <HAL_DAC_Start_DMA+0xd2>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d000      	beq.n	80037f6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80037f4:	e00e      	b.n	8003814 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3314      	adds	r3, #20
 80037fc:	613b      	str	r3, [r7, #16]
        break;
 80037fe:	e009      	b.n	8003814 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3318      	adds	r3, #24
 8003806:	613b      	str	r3, [r7, #16]
        break;
 8003808:	e004      	b.n	8003814 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	331c      	adds	r3, #28
 8003810:	613b      	str	r3, [r7, #16]
        break;
 8003812:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d111      	bne.n	800383e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003828:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6898      	ldr	r0, [r3, #8]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	f000 fd98 	bl	8004368 <HAL_DMA_Start_IT>
 8003838:	4603      	mov	r3, r0
 800383a:	75fb      	strb	r3, [r7, #23]
 800383c:	e010      	b.n	8003860 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800384c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68d8      	ldr	r0, [r3, #12]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	f000 fd86 	bl	8004368 <HAL_DMA_Start_IT>
 800385c:	4603      	mov	r3, r0
 800385e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10c      	bne.n	8003886 <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6819      	ldr	r1, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2201      	movs	r2, #1
 800387a:	409a      	lsls	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e005      	b.n	8003892 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f043 0204 	orr.w	r2, r3, #4
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	08003b9d 	.word	0x08003b9d
 80038a0:	08003bbf 	.word	0x08003bbf
 80038a4:	08003bdb 	.word	0x08003bdb
 80038a8:	08003c45 	.word	0x08003c45
 80038ac:	08003c67 	.word	0x08003c67
 80038b0:	08003c83 	.word	0x08003c83

080038b4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	3308      	adds	r3, #8
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e004      	b.n	80038e8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	3314      	adds	r3, #20
 80038e6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	461a      	mov	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	795b      	ldrb	r3, [r3, #5]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_DAC_ConfigChannel+0x18>
 8003950:	2302      	movs	r3, #2
 8003952:	e11d      	b.n	8003b90 <HAL_DAC_ConfigChannel+0x254>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2202      	movs	r2, #2
 800395e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d174      	bne.n	8003a52 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003968:	f7fe f914 	bl	8001b94 <HAL_GetTick>
 800396c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d134      	bne.n	80039de <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003974:	e011      	b.n	800399a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003976:	f7fe f90d 	bl	8001b94 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d90a      	bls.n	800399a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f043 0208 	orr.w	r2, r3, #8
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2203      	movs	r2, #3
 8003994:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0fa      	b.n	8003b90 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039a0:	4b7d      	ldr	r3, [pc, #500]	; (8003b98 <HAL_DAC_ConfigChannel+0x25c>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e6      	bne.n	8003976 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80039a8:	2001      	movs	r0, #1
 80039aa:	f7fe f8ff 	bl	8001bac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	6992      	ldr	r2, [r2, #24]
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
 80039b8:	e01e      	b.n	80039f8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039ba:	f7fe f8eb 	bl	8001b94 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d90a      	bls.n	80039de <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f043 0208 	orr.w	r2, r3, #8
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2203      	movs	r2, #3
 80039d8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0d8      	b.n	8003b90 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	dbe8      	blt.n	80039ba <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80039e8:	2001      	movs	r0, #1
 80039ea:	f7fe f8df 	bl	8001bac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	6992      	ldr	r2, [r2, #24]
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	ea02 0103 	and.w	r1, r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	21ff      	movs	r1, #255	; 0xff
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	ea02 0103 	and.w	r1, r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	6a1a      	ldr	r2, [r3, #32]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d11d      	bne.n	8003a96 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	221f      	movs	r2, #31
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4013      	ands	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d102      	bne.n	8003ac0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	e00f      	b.n	8003ae0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d102      	bne.n	8003ace <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	e008      	b.n	8003ae0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	e001      	b.n	8003ae0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6819      	ldr	r1, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4013      	ands	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	22c0      	movs	r2, #192	; 0xc0
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43da      	mvns	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	400a      	ands	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20008000 	.word	0x20008000

08003b9c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f7ff fea7 	bl	80038fe <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	711a      	strb	r2, [r3, #4]
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff fea0 	bl	8003912 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f043 0204 	orr.w	r2, r3, #4
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f7ff fe96 	bl	8003926 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	711a      	strb	r2, [r3, #4]
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff ffd8 	bl	8003c08 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	711a      	strb	r2, [r3, #4]
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff ffd1 	bl	8003c1c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f043 0204 	orr.w	r2, r3, #4
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff ffc7 	bl	8003c30 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	711a      	strb	r2, [r3, #4]
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003cb8:	f7fd ff6c 	bl	8001b94 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e316      	b.n	80042f6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a66      	ldr	r2, [pc, #408]	; (8003e68 <HAL_DMA_Init+0x1b8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d04a      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a65      	ldr	r2, [pc, #404]	; (8003e6c <HAL_DMA_Init+0x1bc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d045      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a63      	ldr	r2, [pc, #396]	; (8003e70 <HAL_DMA_Init+0x1c0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d040      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a62      	ldr	r2, [pc, #392]	; (8003e74 <HAL_DMA_Init+0x1c4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d03b      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a60      	ldr	r2, [pc, #384]	; (8003e78 <HAL_DMA_Init+0x1c8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d036      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a5f      	ldr	r2, [pc, #380]	; (8003e7c <HAL_DMA_Init+0x1cc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d031      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a5d      	ldr	r2, [pc, #372]	; (8003e80 <HAL_DMA_Init+0x1d0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02c      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a5c      	ldr	r2, [pc, #368]	; (8003e84 <HAL_DMA_Init+0x1d4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d027      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a5a      	ldr	r2, [pc, #360]	; (8003e88 <HAL_DMA_Init+0x1d8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d022      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a59      	ldr	r2, [pc, #356]	; (8003e8c <HAL_DMA_Init+0x1dc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01d      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a57      	ldr	r2, [pc, #348]	; (8003e90 <HAL_DMA_Init+0x1e0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d018      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a56      	ldr	r2, [pc, #344]	; (8003e94 <HAL_DMA_Init+0x1e4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a54      	ldr	r2, [pc, #336]	; (8003e98 <HAL_DMA_Init+0x1e8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00e      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a53      	ldr	r2, [pc, #332]	; (8003e9c <HAL_DMA_Init+0x1ec>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a51      	ldr	r2, [pc, #324]	; (8003ea0 <HAL_DMA_Init+0x1f0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_DMA_Init+0xb8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a50      	ldr	r2, [pc, #320]	; (8003ea4 <HAL_DMA_Init+0x1f4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_DMA_Init+0xbc>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_DMA_Init+0xbe>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 813b 	beq.w	8003fea <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a37      	ldr	r2, [pc, #220]	; (8003e68 <HAL_DMA_Init+0x1b8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d04a      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a36      	ldr	r2, [pc, #216]	; (8003e6c <HAL_DMA_Init+0x1bc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d045      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a34      	ldr	r2, [pc, #208]	; (8003e70 <HAL_DMA_Init+0x1c0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d040      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a33      	ldr	r2, [pc, #204]	; (8003e74 <HAL_DMA_Init+0x1c4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d03b      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a31      	ldr	r2, [pc, #196]	; (8003e78 <HAL_DMA_Init+0x1c8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d036      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <HAL_DMA_Init+0x1cc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d031      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2e      	ldr	r2, [pc, #184]	; (8003e80 <HAL_DMA_Init+0x1d0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d02c      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a2d      	ldr	r2, [pc, #180]	; (8003e84 <HAL_DMA_Init+0x1d4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d027      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	; (8003e88 <HAL_DMA_Init+0x1d8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d022      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <HAL_DMA_Init+0x1dc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d01d      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <HAL_DMA_Init+0x1e0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d018      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a27      	ldr	r2, [pc, #156]	; (8003e94 <HAL_DMA_Init+0x1e4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d013      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a25      	ldr	r2, [pc, #148]	; (8003e98 <HAL_DMA_Init+0x1e8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a24      	ldr	r2, [pc, #144]	; (8003e9c <HAL_DMA_Init+0x1ec>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a22      	ldr	r2, [pc, #136]	; (8003ea0 <HAL_DMA_Init+0x1f0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_DMA_Init+0x174>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <HAL_DMA_Init+0x1f4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d108      	bne.n	8003e36 <HAL_DMA_Init+0x186>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e007      	b.n	8003e46 <HAL_DMA_Init+0x196>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e46:	e02f      	b.n	8003ea8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e48:	f7fd fea4 	bl	8001b94 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	d928      	bls.n	8003ea8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e246      	b.n	80042f6 <HAL_DMA_Init+0x646>
 8003e68:	40020010 	.word	0x40020010
 8003e6c:	40020028 	.word	0x40020028
 8003e70:	40020040 	.word	0x40020040
 8003e74:	40020058 	.word	0x40020058
 8003e78:	40020070 	.word	0x40020070
 8003e7c:	40020088 	.word	0x40020088
 8003e80:	400200a0 	.word	0x400200a0
 8003e84:	400200b8 	.word	0x400200b8
 8003e88:	40020410 	.word	0x40020410
 8003e8c:	40020428 	.word	0x40020428
 8003e90:	40020440 	.word	0x40020440
 8003e94:	40020458 	.word	0x40020458
 8003e98:	40020470 	.word	0x40020470
 8003e9c:	40020488 	.word	0x40020488
 8003ea0:	400204a0 	.word	0x400204a0
 8003ea4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1c8      	bne.n	8003e48 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4b83      	ldr	r3, [pc, #524]	; (80040d0 <HAL_DMA_Init+0x420>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003ece:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eda:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d107      	bne.n	8003f0c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	4313      	orrs	r3, r2
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f0c:	4b71      	ldr	r3, [pc, #452]	; (80040d4 <HAL_DMA_Init+0x424>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b71      	ldr	r3, [pc, #452]	; (80040d8 <HAL_DMA_Init+0x428>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f18:	d328      	bcc.n	8003f6c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b28      	cmp	r3, #40	; 0x28
 8003f20:	d903      	bls.n	8003f2a <HAL_DMA_Init+0x27a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b2e      	cmp	r3, #46	; 0x2e
 8003f28:	d917      	bls.n	8003f5a <HAL_DMA_Init+0x2aa>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8003f30:	d903      	bls.n	8003f3a <HAL_DMA_Init+0x28a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b42      	cmp	r3, #66	; 0x42
 8003f38:	d90f      	bls.n	8003f5a <HAL_DMA_Init+0x2aa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b46      	cmp	r3, #70	; 0x46
 8003f40:	d903      	bls.n	8003f4a <HAL_DMA_Init+0x29a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b48      	cmp	r3, #72	; 0x48
 8003f48:	d907      	bls.n	8003f5a <HAL_DMA_Init+0x2aa>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b4e      	cmp	r3, #78	; 0x4e
 8003f50:	d905      	bls.n	8003f5e <HAL_DMA_Init+0x2ae>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b52      	cmp	r3, #82	; 0x52
 8003f58:	d801      	bhi.n	8003f5e <HAL_DMA_Init+0x2ae>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_DMA_Init+0x2b0>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0307 	bic.w	r3, r3, #7
 8003f82:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d117      	bne.n	8003fc6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f001 fdcf 	bl	8005b4c <DMA_CheckFifoParam>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2240      	movs	r2, #64	; 0x40
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e197      	b.n	80042f6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f001 fd0a 	bl	80059e8 <DMA_CalcBaseAndBitshift>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	223f      	movs	r2, #63	; 0x3f
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	609a      	str	r2, [r3, #8]
 8003fe8:	e0cd      	b.n	8004186 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3b      	ldr	r2, [pc, #236]	; (80040dc <HAL_DMA_Init+0x42c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_DMA_Init+0x38a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a39      	ldr	r2, [pc, #228]	; (80040e0 <HAL_DMA_Init+0x430>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01d      	beq.n	800403a <HAL_DMA_Init+0x38a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a38      	ldr	r2, [pc, #224]	; (80040e4 <HAL_DMA_Init+0x434>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_DMA_Init+0x38a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a36      	ldr	r2, [pc, #216]	; (80040e8 <HAL_DMA_Init+0x438>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_DMA_Init+0x38a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a35      	ldr	r2, [pc, #212]	; (80040ec <HAL_DMA_Init+0x43c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_DMA_Init+0x38a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a33      	ldr	r2, [pc, #204]	; (80040f0 <HAL_DMA_Init+0x440>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_DMA_Init+0x38a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a32      	ldr	r2, [pc, #200]	; (80040f4 <HAL_DMA_Init+0x444>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_DMA_Init+0x38a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a30      	ldr	r2, [pc, #192]	; (80040f8 <HAL_DMA_Init+0x448>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_DMA_Init+0x38e>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_DMA_Init+0x390>
 800403e:	2300      	movs	r3, #0
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8097 	beq.w	8004174 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a24      	ldr	r2, [pc, #144]	; (80040dc <HAL_DMA_Init+0x42c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d021      	beq.n	8004094 <HAL_DMA_Init+0x3e4>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a22      	ldr	r2, [pc, #136]	; (80040e0 <HAL_DMA_Init+0x430>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01c      	beq.n	8004094 <HAL_DMA_Init+0x3e4>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a21      	ldr	r2, [pc, #132]	; (80040e4 <HAL_DMA_Init+0x434>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d017      	beq.n	8004094 <HAL_DMA_Init+0x3e4>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a1f      	ldr	r2, [pc, #124]	; (80040e8 <HAL_DMA_Init+0x438>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d012      	beq.n	8004094 <HAL_DMA_Init+0x3e4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_DMA_Init+0x43c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00d      	beq.n	8004094 <HAL_DMA_Init+0x3e4>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1c      	ldr	r2, [pc, #112]	; (80040f0 <HAL_DMA_Init+0x440>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d008      	beq.n	8004094 <HAL_DMA_Init+0x3e4>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <HAL_DMA_Init+0x444>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <HAL_DMA_Init+0x3e4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_DMA_Init+0x448>)
 8004092:	4293      	cmp	r3, r2
 8004094:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <HAL_DMA_Init+0x44c>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d020      	beq.n	8004100 <HAL_DMA_Init+0x450>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	d102      	bne.n	80040cc <HAL_DMA_Init+0x41c>
 80040c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040ca:	e01a      	b.n	8004102 <HAL_DMA_Init+0x452>
 80040cc:	2300      	movs	r3, #0
 80040ce:	e018      	b.n	8004102 <HAL_DMA_Init+0x452>
 80040d0:	fe10803f 	.word	0xfe10803f
 80040d4:	5c001000 	.word	0x5c001000
 80040d8:	ffff0000 	.word	0xffff0000
 80040dc:	58025408 	.word	0x58025408
 80040e0:	5802541c 	.word	0x5802541c
 80040e4:	58025430 	.word	0x58025430
 80040e8:	58025444 	.word	0x58025444
 80040ec:	58025458 	.word	0x58025458
 80040f0:	5802546c 	.word	0x5802546c
 80040f4:	58025480 	.word	0x58025480
 80040f8:	58025494 	.word	0x58025494
 80040fc:	fffe000f 	.word	0xfffe000f
 8004100:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68d2      	ldr	r2, [r2, #12]
 8004106:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004108:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004110:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004130:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	4b6e      	ldr	r3, [pc, #440]	; (8004300 <HAL_DMA_Init+0x650>)
 8004148:	4413      	add	r3, r2
 800414a:	4a6e      	ldr	r2, [pc, #440]	; (8004304 <HAL_DMA_Init+0x654>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	009a      	lsls	r2, r3, #2
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 fc45 	bl	80059e8 <DMA_CalcBaseAndBitshift>
 800415e:	4603      	mov	r3, r0
 8004160:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2201      	movs	r2, #1
 800416c:	409a      	lsls	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	e008      	b.n	8004186 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2240      	movs	r2, #64	; 0x40
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e0b7      	b.n	80042f6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a5f      	ldr	r2, [pc, #380]	; (8004308 <HAL_DMA_Init+0x658>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d072      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a5d      	ldr	r2, [pc, #372]	; (800430c <HAL_DMA_Init+0x65c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d06d      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a5c      	ldr	r2, [pc, #368]	; (8004310 <HAL_DMA_Init+0x660>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d068      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a5a      	ldr	r2, [pc, #360]	; (8004314 <HAL_DMA_Init+0x664>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d063      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a59      	ldr	r2, [pc, #356]	; (8004318 <HAL_DMA_Init+0x668>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d05e      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a57      	ldr	r2, [pc, #348]	; (800431c <HAL_DMA_Init+0x66c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d059      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a56      	ldr	r2, [pc, #344]	; (8004320 <HAL_DMA_Init+0x670>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d054      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a54      	ldr	r2, [pc, #336]	; (8004324 <HAL_DMA_Init+0x674>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d04f      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a53      	ldr	r2, [pc, #332]	; (8004328 <HAL_DMA_Init+0x678>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d04a      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a51      	ldr	r2, [pc, #324]	; (800432c <HAL_DMA_Init+0x67c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d045      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a50      	ldr	r2, [pc, #320]	; (8004330 <HAL_DMA_Init+0x680>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d040      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a4e      	ldr	r2, [pc, #312]	; (8004334 <HAL_DMA_Init+0x684>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d03b      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a4d      	ldr	r2, [pc, #308]	; (8004338 <HAL_DMA_Init+0x688>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d036      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a4b      	ldr	r2, [pc, #300]	; (800433c <HAL_DMA_Init+0x68c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d031      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a4a      	ldr	r2, [pc, #296]	; (8004340 <HAL_DMA_Init+0x690>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d02c      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a48      	ldr	r2, [pc, #288]	; (8004344 <HAL_DMA_Init+0x694>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d027      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a47      	ldr	r2, [pc, #284]	; (8004348 <HAL_DMA_Init+0x698>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d022      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a45      	ldr	r2, [pc, #276]	; (800434c <HAL_DMA_Init+0x69c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d01d      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a44      	ldr	r2, [pc, #272]	; (8004350 <HAL_DMA_Init+0x6a0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d018      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a42      	ldr	r2, [pc, #264]	; (8004354 <HAL_DMA_Init+0x6a4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a41      	ldr	r2, [pc, #260]	; (8004358 <HAL_DMA_Init+0x6a8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a3f      	ldr	r2, [pc, #252]	; (800435c <HAL_DMA_Init+0x6ac>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d009      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3e      	ldr	r2, [pc, #248]	; (8004360 <HAL_DMA_Init+0x6b0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_DMA_Init+0x5c6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a3c      	ldr	r2, [pc, #240]	; (8004364 <HAL_DMA_Init+0x6b4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_DMA_Init+0x5ca>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_DMA_Init+0x5cc>
 800427a:	2300      	movs	r3, #0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d032      	beq.n	80042e6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f001 fcdf 	bl	8005c44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b80      	cmp	r3, #128	; 0x80
 800428c:	d102      	bne.n	8004294 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d010      	beq.n	80042d4 <HAL_DMA_Init+0x624>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d80c      	bhi.n	80042d4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f001 fd5c 	bl	8005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	e008      	b.n	80042e6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	a7fdabf8 	.word	0xa7fdabf8
 8004304:	cccccccd 	.word	0xcccccccd
 8004308:	40020010 	.word	0x40020010
 800430c:	40020028 	.word	0x40020028
 8004310:	40020040 	.word	0x40020040
 8004314:	40020058 	.word	0x40020058
 8004318:	40020070 	.word	0x40020070
 800431c:	40020088 	.word	0x40020088
 8004320:	400200a0 	.word	0x400200a0
 8004324:	400200b8 	.word	0x400200b8
 8004328:	40020410 	.word	0x40020410
 800432c:	40020428 	.word	0x40020428
 8004330:	40020440 	.word	0x40020440
 8004334:	40020458 	.word	0x40020458
 8004338:	40020470 	.word	0x40020470
 800433c:	40020488 	.word	0x40020488
 8004340:	400204a0 	.word	0x400204a0
 8004344:	400204b8 	.word	0x400204b8
 8004348:	58025408 	.word	0x58025408
 800434c:	5802541c 	.word	0x5802541c
 8004350:	58025430 	.word	0x58025430
 8004354:	58025444 	.word	0x58025444
 8004358:	58025458 	.word	0x58025458
 800435c:	5802546c 	.word	0x5802546c
 8004360:	58025480 	.word	0x58025480
 8004364:	58025494 	.word	0x58025494

08004368 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e226      	b.n	80047d2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_DMA_Start_IT+0x2a>
 800438e:	2302      	movs	r3, #2
 8004390:	e21f      	b.n	80047d2 <HAL_DMA_Start_IT+0x46a>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	f040 820a 	bne.w	80047bc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a68      	ldr	r2, [pc, #416]	; (800455c <HAL_DMA_Start_IT+0x1f4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d04a      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a66      	ldr	r2, [pc, #408]	; (8004560 <HAL_DMA_Start_IT+0x1f8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d045      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a65      	ldr	r2, [pc, #404]	; (8004564 <HAL_DMA_Start_IT+0x1fc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d040      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a63      	ldr	r2, [pc, #396]	; (8004568 <HAL_DMA_Start_IT+0x200>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d03b      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a62      	ldr	r2, [pc, #392]	; (800456c <HAL_DMA_Start_IT+0x204>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d036      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a60      	ldr	r2, [pc, #384]	; (8004570 <HAL_DMA_Start_IT+0x208>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d031      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a5f      	ldr	r2, [pc, #380]	; (8004574 <HAL_DMA_Start_IT+0x20c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d02c      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a5d      	ldr	r2, [pc, #372]	; (8004578 <HAL_DMA_Start_IT+0x210>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d027      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a5c      	ldr	r2, [pc, #368]	; (800457c <HAL_DMA_Start_IT+0x214>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d022      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a5a      	ldr	r2, [pc, #360]	; (8004580 <HAL_DMA_Start_IT+0x218>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01d      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a59      	ldr	r2, [pc, #356]	; (8004584 <HAL_DMA_Start_IT+0x21c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d018      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a57      	ldr	r2, [pc, #348]	; (8004588 <HAL_DMA_Start_IT+0x220>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a56      	ldr	r2, [pc, #344]	; (800458c <HAL_DMA_Start_IT+0x224>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00e      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a54      	ldr	r2, [pc, #336]	; (8004590 <HAL_DMA_Start_IT+0x228>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a53      	ldr	r2, [pc, #332]	; (8004594 <HAL_DMA_Start_IT+0x22c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_DMA_Start_IT+0xee>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a51      	ldr	r2, [pc, #324]	; (8004598 <HAL_DMA_Start_IT+0x230>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d108      	bne.n	8004468 <HAL_DMA_Start_IT+0x100>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e007      	b.n	8004478 <HAL_DMA_Start_IT+0x110>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f001 f906 	bl	8005690 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a34      	ldr	r2, [pc, #208]	; (800455c <HAL_DMA_Start_IT+0x1f4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d04a      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a33      	ldr	r2, [pc, #204]	; (8004560 <HAL_DMA_Start_IT+0x1f8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d045      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a31      	ldr	r2, [pc, #196]	; (8004564 <HAL_DMA_Start_IT+0x1fc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d040      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a30      	ldr	r2, [pc, #192]	; (8004568 <HAL_DMA_Start_IT+0x200>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d03b      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2e      	ldr	r2, [pc, #184]	; (800456c <HAL_DMA_Start_IT+0x204>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d036      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a2d      	ldr	r2, [pc, #180]	; (8004570 <HAL_DMA_Start_IT+0x208>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d031      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2b      	ldr	r2, [pc, #172]	; (8004574 <HAL_DMA_Start_IT+0x20c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02c      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <HAL_DMA_Start_IT+0x210>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d027      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a28      	ldr	r2, [pc, #160]	; (800457c <HAL_DMA_Start_IT+0x214>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d022      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a27      	ldr	r2, [pc, #156]	; (8004580 <HAL_DMA_Start_IT+0x218>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d01d      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a25      	ldr	r2, [pc, #148]	; (8004584 <HAL_DMA_Start_IT+0x21c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d018      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a24      	ldr	r2, [pc, #144]	; (8004588 <HAL_DMA_Start_IT+0x220>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a22      	ldr	r2, [pc, #136]	; (800458c <HAL_DMA_Start_IT+0x224>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a21      	ldr	r2, [pc, #132]	; (8004590 <HAL_DMA_Start_IT+0x228>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d009      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <HAL_DMA_Start_IT+0x22c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_DMA_Start_IT+0x1bc>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1e      	ldr	r2, [pc, #120]	; (8004598 <HAL_DMA_Start_IT+0x230>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <HAL_DMA_Start_IT+0x1c0>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_DMA_Start_IT+0x1c2>
 8004528:	2300      	movs	r3, #0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d036      	beq.n	800459c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 021e 	bic.w	r2, r3, #30
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0216 	orr.w	r2, r2, #22
 8004540:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d03e      	beq.n	80045c8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0208 	orr.w	r2, r2, #8
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e035      	b.n	80045c8 <HAL_DMA_Start_IT+0x260>
 800455c:	40020010 	.word	0x40020010
 8004560:	40020028 	.word	0x40020028
 8004564:	40020040 	.word	0x40020040
 8004568:	40020058 	.word	0x40020058
 800456c:	40020070 	.word	0x40020070
 8004570:	40020088 	.word	0x40020088
 8004574:	400200a0 	.word	0x400200a0
 8004578:	400200b8 	.word	0x400200b8
 800457c:	40020410 	.word	0x40020410
 8004580:	40020428 	.word	0x40020428
 8004584:	40020440 	.word	0x40020440
 8004588:	40020458 	.word	0x40020458
 800458c:	40020470 	.word	0x40020470
 8004590:	40020488 	.word	0x40020488
 8004594:	400204a0 	.word	0x400204a0
 8004598:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 020e 	bic.w	r2, r3, #14
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 020a 	orr.w	r2, r2, #10
 80045ae:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0204 	orr.w	r2, r2, #4
 80045c6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a83      	ldr	r2, [pc, #524]	; (80047dc <HAL_DMA_Start_IT+0x474>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d072      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a82      	ldr	r2, [pc, #520]	; (80047e0 <HAL_DMA_Start_IT+0x478>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d06d      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a80      	ldr	r2, [pc, #512]	; (80047e4 <HAL_DMA_Start_IT+0x47c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d068      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7f      	ldr	r2, [pc, #508]	; (80047e8 <HAL_DMA_Start_IT+0x480>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d063      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7d      	ldr	r2, [pc, #500]	; (80047ec <HAL_DMA_Start_IT+0x484>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d05e      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a7c      	ldr	r2, [pc, #496]	; (80047f0 <HAL_DMA_Start_IT+0x488>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d059      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a7a      	ldr	r2, [pc, #488]	; (80047f4 <HAL_DMA_Start_IT+0x48c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d054      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a79      	ldr	r2, [pc, #484]	; (80047f8 <HAL_DMA_Start_IT+0x490>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d04f      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a77      	ldr	r2, [pc, #476]	; (80047fc <HAL_DMA_Start_IT+0x494>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d04a      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a76      	ldr	r2, [pc, #472]	; (8004800 <HAL_DMA_Start_IT+0x498>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d045      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a74      	ldr	r2, [pc, #464]	; (8004804 <HAL_DMA_Start_IT+0x49c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d040      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a73      	ldr	r2, [pc, #460]	; (8004808 <HAL_DMA_Start_IT+0x4a0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d03b      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a71      	ldr	r2, [pc, #452]	; (800480c <HAL_DMA_Start_IT+0x4a4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d036      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a70      	ldr	r2, [pc, #448]	; (8004810 <HAL_DMA_Start_IT+0x4a8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d031      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a6e      	ldr	r2, [pc, #440]	; (8004814 <HAL_DMA_Start_IT+0x4ac>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d02c      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a6d      	ldr	r2, [pc, #436]	; (8004818 <HAL_DMA_Start_IT+0x4b0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d027      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6b      	ldr	r2, [pc, #428]	; (800481c <HAL_DMA_Start_IT+0x4b4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d022      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6a      	ldr	r2, [pc, #424]	; (8004820 <HAL_DMA_Start_IT+0x4b8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d01d      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a68      	ldr	r2, [pc, #416]	; (8004824 <HAL_DMA_Start_IT+0x4bc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d018      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a67      	ldr	r2, [pc, #412]	; (8004828 <HAL_DMA_Start_IT+0x4c0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a65      	ldr	r2, [pc, #404]	; (800482c <HAL_DMA_Start_IT+0x4c4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00e      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a64      	ldr	r2, [pc, #400]	; (8004830 <HAL_DMA_Start_IT+0x4c8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a62      	ldr	r2, [pc, #392]	; (8004834 <HAL_DMA_Start_IT+0x4cc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_DMA_Start_IT+0x350>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a61      	ldr	r2, [pc, #388]	; (8004838 <HAL_DMA_Start_IT+0x4d0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_DMA_Start_IT+0x354>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <HAL_DMA_Start_IT+0x356>
 80046bc:	2300      	movs	r3, #0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01a      	beq.n	80046f8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046de:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a37      	ldr	r2, [pc, #220]	; (80047dc <HAL_DMA_Start_IT+0x474>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04a      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a36      	ldr	r2, [pc, #216]	; (80047e0 <HAL_DMA_Start_IT+0x478>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d045      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a34      	ldr	r2, [pc, #208]	; (80047e4 <HAL_DMA_Start_IT+0x47c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d040      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a33      	ldr	r2, [pc, #204]	; (80047e8 <HAL_DMA_Start_IT+0x480>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d03b      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a31      	ldr	r2, [pc, #196]	; (80047ec <HAL_DMA_Start_IT+0x484>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d036      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <HAL_DMA_Start_IT+0x488>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d031      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2e      	ldr	r2, [pc, #184]	; (80047f4 <HAL_DMA_Start_IT+0x48c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2d      	ldr	r2, [pc, #180]	; (80047f8 <HAL_DMA_Start_IT+0x490>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d027      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <HAL_DMA_Start_IT+0x494>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2a      	ldr	r2, [pc, #168]	; (8004800 <HAL_DMA_Start_IT+0x498>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01d      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a28      	ldr	r2, [pc, #160]	; (8004804 <HAL_DMA_Start_IT+0x49c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a27      	ldr	r2, [pc, #156]	; (8004808 <HAL_DMA_Start_IT+0x4a0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a25      	ldr	r2, [pc, #148]	; (800480c <HAL_DMA_Start_IT+0x4a4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a24      	ldr	r2, [pc, #144]	; (8004810 <HAL_DMA_Start_IT+0x4a8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a22      	ldr	r2, [pc, #136]	; (8004814 <HAL_DMA_Start_IT+0x4ac>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_DMA_Start_IT+0x430>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a21      	ldr	r2, [pc, #132]	; (8004818 <HAL_DMA_Start_IT+0x4b0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d108      	bne.n	80047aa <HAL_DMA_Start_IT+0x442>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e012      	b.n	80047d0 <HAL_DMA_Start_IT+0x468>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e009      	b.n	80047d0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40020010 	.word	0x40020010
 80047e0:	40020028 	.word	0x40020028
 80047e4:	40020040 	.word	0x40020040
 80047e8:	40020058 	.word	0x40020058
 80047ec:	40020070 	.word	0x40020070
 80047f0:	40020088 	.word	0x40020088
 80047f4:	400200a0 	.word	0x400200a0
 80047f8:	400200b8 	.word	0x400200b8
 80047fc:	40020410 	.word	0x40020410
 8004800:	40020428 	.word	0x40020428
 8004804:	40020440 	.word	0x40020440
 8004808:	40020458 	.word	0x40020458
 800480c:	40020470 	.word	0x40020470
 8004810:	40020488 	.word	0x40020488
 8004814:	400204a0 	.word	0x400204a0
 8004818:	400204b8 	.word	0x400204b8
 800481c:	58025408 	.word	0x58025408
 8004820:	5802541c 	.word	0x5802541c
 8004824:	58025430 	.word	0x58025430
 8004828:	58025444 	.word	0x58025444
 800482c:	58025458 	.word	0x58025458
 8004830:	5802546c 	.word	0x5802546c
 8004834:	58025480 	.word	0x58025480
 8004838:	58025494 	.word	0x58025494

0800483c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004848:	4b67      	ldr	r3, [pc, #412]	; (80049e8 <HAL_DMA_IRQHandler+0x1ac>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a67      	ldr	r2, [pc, #412]	; (80049ec <HAL_DMA_IRQHandler+0x1b0>)
 800484e:	fba2 2303 	umull	r2, r3, r2, r3
 8004852:	0a9b      	lsrs	r3, r3, #10
 8004854:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a5f      	ldr	r2, [pc, #380]	; (80049f0 <HAL_DMA_IRQHandler+0x1b4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d04a      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a5d      	ldr	r2, [pc, #372]	; (80049f4 <HAL_DMA_IRQHandler+0x1b8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d045      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a5c      	ldr	r2, [pc, #368]	; (80049f8 <HAL_DMA_IRQHandler+0x1bc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d040      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a5a      	ldr	r2, [pc, #360]	; (80049fc <HAL_DMA_IRQHandler+0x1c0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d03b      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a59      	ldr	r2, [pc, #356]	; (8004a00 <HAL_DMA_IRQHandler+0x1c4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d036      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a57      	ldr	r2, [pc, #348]	; (8004a04 <HAL_DMA_IRQHandler+0x1c8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d031      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a56      	ldr	r2, [pc, #344]	; (8004a08 <HAL_DMA_IRQHandler+0x1cc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d02c      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a54      	ldr	r2, [pc, #336]	; (8004a0c <HAL_DMA_IRQHandler+0x1d0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d027      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a53      	ldr	r2, [pc, #332]	; (8004a10 <HAL_DMA_IRQHandler+0x1d4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d022      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a51      	ldr	r2, [pc, #324]	; (8004a14 <HAL_DMA_IRQHandler+0x1d8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d01d      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a50      	ldr	r2, [pc, #320]	; (8004a18 <HAL_DMA_IRQHandler+0x1dc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d018      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a4e      	ldr	r2, [pc, #312]	; (8004a1c <HAL_DMA_IRQHandler+0x1e0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a4d      	ldr	r2, [pc, #308]	; (8004a20 <HAL_DMA_IRQHandler+0x1e4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a4b      	ldr	r2, [pc, #300]	; (8004a24 <HAL_DMA_IRQHandler+0x1e8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d009      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4a      	ldr	r2, [pc, #296]	; (8004a28 <HAL_DMA_IRQHandler+0x1ec>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_DMA_IRQHandler+0xd2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a48      	ldr	r2, [pc, #288]	; (8004a2c <HAL_DMA_IRQHandler+0x1f0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <HAL_DMA_IRQHandler+0xd6>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_DMA_IRQHandler+0xd8>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 842b 	beq.w	8005170 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2208      	movs	r2, #8
 8004924:	409a      	lsls	r2, r3
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 80a2 	beq.w	8004a74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2e      	ldr	r2, [pc, #184]	; (80049f0 <HAL_DMA_IRQHandler+0x1b4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d04a      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2d      	ldr	r2, [pc, #180]	; (80049f4 <HAL_DMA_IRQHandler+0x1b8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d045      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <HAL_DMA_IRQHandler+0x1bc>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d040      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <HAL_DMA_IRQHandler+0x1c0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d03b      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <HAL_DMA_IRQHandler+0x1c4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d036      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a27      	ldr	r2, [pc, #156]	; (8004a04 <HAL_DMA_IRQHandler+0x1c8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d031      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <HAL_DMA_IRQHandler+0x1cc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d02c      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <HAL_DMA_IRQHandler+0x1d0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d027      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <HAL_DMA_IRQHandler+0x1d4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <HAL_DMA_IRQHandler+0x1d8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d01d      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_DMA_IRQHandler+0x1dc>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_DMA_IRQHandler+0x1e0>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <HAL_DMA_IRQHandler+0x1e4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_DMA_IRQHandler+0x1e8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_DMA_IRQHandler+0x1ec>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_DMA_IRQHandler+0x194>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_DMA_IRQHandler+0x1f0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d12f      	bne.n	8004a30 <HAL_DMA_IRQHandler+0x1f4>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	e02e      	b.n	8004a44 <HAL_DMA_IRQHandler+0x208>
 80049e6:	bf00      	nop
 80049e8:	20000000 	.word	0x20000000
 80049ec:	1b4e81b5 	.word	0x1b4e81b5
 80049f0:	40020010 	.word	0x40020010
 80049f4:	40020028 	.word	0x40020028
 80049f8:	40020040 	.word	0x40020040
 80049fc:	40020058 	.word	0x40020058
 8004a00:	40020070 	.word	0x40020070
 8004a04:	40020088 	.word	0x40020088
 8004a08:	400200a0 	.word	0x400200a0
 8004a0c:	400200b8 	.word	0x400200b8
 8004a10:	40020410 	.word	0x40020410
 8004a14:	40020428 	.word	0x40020428
 8004a18:	40020440 	.word	0x40020440
 8004a1c:	40020458 	.word	0x40020458
 8004a20:	40020470 	.word	0x40020470
 8004a24:	40020488 	.word	0x40020488
 8004a28:	400204a0 	.word	0x400204a0
 8004a2c:	400204b8 	.word	0x400204b8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf14      	ite	ne
 8004a3e:	2301      	movne	r3, #1
 8004a40:	2300      	moveq	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0204 	bic.w	r2, r2, #4
 8004a56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	2208      	movs	r2, #8
 8004a62:	409a      	lsls	r2, r3
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f043 0201 	orr.w	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d06e      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a69      	ldr	r2, [pc, #420]	; (8004c34 <HAL_DMA_IRQHandler+0x3f8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d04a      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a67      	ldr	r2, [pc, #412]	; (8004c38 <HAL_DMA_IRQHandler+0x3fc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d045      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a66      	ldr	r2, [pc, #408]	; (8004c3c <HAL_DMA_IRQHandler+0x400>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d040      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a64      	ldr	r2, [pc, #400]	; (8004c40 <HAL_DMA_IRQHandler+0x404>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d03b      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a63      	ldr	r2, [pc, #396]	; (8004c44 <HAL_DMA_IRQHandler+0x408>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d036      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a61      	ldr	r2, [pc, #388]	; (8004c48 <HAL_DMA_IRQHandler+0x40c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d031      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a60      	ldr	r2, [pc, #384]	; (8004c4c <HAL_DMA_IRQHandler+0x410>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d02c      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a5e      	ldr	r2, [pc, #376]	; (8004c50 <HAL_DMA_IRQHandler+0x414>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d027      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a5d      	ldr	r2, [pc, #372]	; (8004c54 <HAL_DMA_IRQHandler+0x418>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a5b      	ldr	r2, [pc, #364]	; (8004c58 <HAL_DMA_IRQHandler+0x41c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01d      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a5a      	ldr	r2, [pc, #360]	; (8004c5c <HAL_DMA_IRQHandler+0x420>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a58      	ldr	r2, [pc, #352]	; (8004c60 <HAL_DMA_IRQHandler+0x424>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a57      	ldr	r2, [pc, #348]	; (8004c64 <HAL_DMA_IRQHandler+0x428>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a55      	ldr	r2, [pc, #340]	; (8004c68 <HAL_DMA_IRQHandler+0x42c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a54      	ldr	r2, [pc, #336]	; (8004c6c <HAL_DMA_IRQHandler+0x430>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x2ee>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a52      	ldr	r2, [pc, #328]	; (8004c70 <HAL_DMA_IRQHandler+0x434>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10a      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x304>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e003      	b.n	8004b48 <HAL_DMA_IRQHandler+0x30c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2201      	movs	r2, #1
 8004b56:	409a      	lsls	r2, r3
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	f043 0202 	orr.w	r2, r3, #2
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2204      	movs	r2, #4
 8004b72:	409a      	lsls	r2, r3
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 808f 	beq.w	8004c9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a2c      	ldr	r2, [pc, #176]	; (8004c34 <HAL_DMA_IRQHandler+0x3f8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d04a      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2a      	ldr	r2, [pc, #168]	; (8004c38 <HAL_DMA_IRQHandler+0x3fc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d045      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a29      	ldr	r2, [pc, #164]	; (8004c3c <HAL_DMA_IRQHandler+0x400>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d040      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <HAL_DMA_IRQHandler+0x404>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d03b      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a26      	ldr	r2, [pc, #152]	; (8004c44 <HAL_DMA_IRQHandler+0x408>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d036      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a24      	ldr	r2, [pc, #144]	; (8004c48 <HAL_DMA_IRQHandler+0x40c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d031      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a23      	ldr	r2, [pc, #140]	; (8004c4c <HAL_DMA_IRQHandler+0x410>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d02c      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <HAL_DMA_IRQHandler+0x414>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d027      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <HAL_DMA_IRQHandler+0x418>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d022      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <HAL_DMA_IRQHandler+0x41c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01d      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <HAL_DMA_IRQHandler+0x420>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d018      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1b      	ldr	r2, [pc, #108]	; (8004c60 <HAL_DMA_IRQHandler+0x424>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <HAL_DMA_IRQHandler+0x428>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a18      	ldr	r2, [pc, #96]	; (8004c68 <HAL_DMA_IRQHandler+0x42c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <HAL_DMA_IRQHandler+0x430>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x3e2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <HAL_DMA_IRQHandler+0x434>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d12a      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x438>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e023      	b.n	8004c7c <HAL_DMA_IRQHandler+0x440>
 8004c34:	40020010 	.word	0x40020010
 8004c38:	40020028 	.word	0x40020028
 8004c3c:	40020040 	.word	0x40020040
 8004c40:	40020058 	.word	0x40020058
 8004c44:	40020070 	.word	0x40020070
 8004c48:	40020088 	.word	0x40020088
 8004c4c:	400200a0 	.word	0x400200a0
 8004c50:	400200b8 	.word	0x400200b8
 8004c54:	40020410 	.word	0x40020410
 8004c58:	40020428 	.word	0x40020428
 8004c5c:	40020440 	.word	0x40020440
 8004c60:	40020458 	.word	0x40020458
 8004c64:	40020470 	.word	0x40020470
 8004c68:	40020488 	.word	0x40020488
 8004c6c:	400204a0 	.word	0x400204a0
 8004c70:	400204b8 	.word	0x400204b8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	2204      	movs	r2, #4
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	f043 0204 	orr.w	r2, r3, #4
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a6 	beq.w	8004dfe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a85      	ldr	r2, [pc, #532]	; (8004ecc <HAL_DMA_IRQHandler+0x690>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d04a      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a83      	ldr	r2, [pc, #524]	; (8004ed0 <HAL_DMA_IRQHandler+0x694>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d045      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a82      	ldr	r2, [pc, #520]	; (8004ed4 <HAL_DMA_IRQHandler+0x698>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d040      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a80      	ldr	r2, [pc, #512]	; (8004ed8 <HAL_DMA_IRQHandler+0x69c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d03b      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a7f      	ldr	r2, [pc, #508]	; (8004edc <HAL_DMA_IRQHandler+0x6a0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d036      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a7d      	ldr	r2, [pc, #500]	; (8004ee0 <HAL_DMA_IRQHandler+0x6a4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d031      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7c      	ldr	r2, [pc, #496]	; (8004ee4 <HAL_DMA_IRQHandler+0x6a8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d02c      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a7a      	ldr	r2, [pc, #488]	; (8004ee8 <HAL_DMA_IRQHandler+0x6ac>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d027      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a79      	ldr	r2, [pc, #484]	; (8004eec <HAL_DMA_IRQHandler+0x6b0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d022      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a77      	ldr	r2, [pc, #476]	; (8004ef0 <HAL_DMA_IRQHandler+0x6b4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01d      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a76      	ldr	r2, [pc, #472]	; (8004ef4 <HAL_DMA_IRQHandler+0x6b8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d018      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a74      	ldr	r2, [pc, #464]	; (8004ef8 <HAL_DMA_IRQHandler+0x6bc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a73      	ldr	r2, [pc, #460]	; (8004efc <HAL_DMA_IRQHandler+0x6c0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a71      	ldr	r2, [pc, #452]	; (8004f00 <HAL_DMA_IRQHandler+0x6c4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a70      	ldr	r2, [pc, #448]	; (8004f04 <HAL_DMA_IRQHandler+0x6c8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x516>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a6e      	ldr	r2, [pc, #440]	; (8004f08 <HAL_DMA_IRQHandler+0x6cc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10a      	bne.n	8004d68 <HAL_DMA_IRQHandler+0x52c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e009      	b.n	8004d7c <HAL_DMA_IRQHandler+0x540>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf14      	ite	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	2300      	moveq	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d03e      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	2210      	movs	r2, #16
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d018      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d108      	bne.n	8004dbe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d024      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	4798      	blx	r3
 8004dbc:	e01f      	b.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01b      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
 8004dce:	e016      	b.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d107      	bne.n	8004dee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0208 	bic.w	r2, r2, #8
 8004dec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2220      	movs	r2, #32
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8110 	beq.w	8005034 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2c      	ldr	r2, [pc, #176]	; (8004ecc <HAL_DMA_IRQHandler+0x690>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d04a      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a2b      	ldr	r2, [pc, #172]	; (8004ed0 <HAL_DMA_IRQHandler+0x694>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d045      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a29      	ldr	r2, [pc, #164]	; (8004ed4 <HAL_DMA_IRQHandler+0x698>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d040      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a28      	ldr	r2, [pc, #160]	; (8004ed8 <HAL_DMA_IRQHandler+0x69c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d03b      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <HAL_DMA_IRQHandler+0x6a0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d036      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <HAL_DMA_IRQHandler+0x6a4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d031      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a23      	ldr	r2, [pc, #140]	; (8004ee4 <HAL_DMA_IRQHandler+0x6a8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02c      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a22      	ldr	r2, [pc, #136]	; (8004ee8 <HAL_DMA_IRQHandler+0x6ac>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d027      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a20      	ldr	r2, [pc, #128]	; (8004eec <HAL_DMA_IRQHandler+0x6b0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1f      	ldr	r2, [pc, #124]	; (8004ef0 <HAL_DMA_IRQHandler+0x6b4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01d      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <HAL_DMA_IRQHandler+0x6b8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <HAL_DMA_IRQHandler+0x6bc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1a      	ldr	r2, [pc, #104]	; (8004efc <HAL_DMA_IRQHandler+0x6c0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <HAL_DMA_IRQHandler+0x6c4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a17      	ldr	r2, [pc, #92]	; (8004f04 <HAL_DMA_IRQHandler+0x6c8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x678>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a16      	ldr	r2, [pc, #88]	; (8004f08 <HAL_DMA_IRQHandler+0x6cc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d12b      	bne.n	8004f0c <HAL_DMA_IRQHandler+0x6d0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bf14      	ite	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	2300      	moveq	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	e02a      	b.n	8004f20 <HAL_DMA_IRQHandler+0x6e4>
 8004eca:	bf00      	nop
 8004ecc:	40020010 	.word	0x40020010
 8004ed0:	40020028 	.word	0x40020028
 8004ed4:	40020040 	.word	0x40020040
 8004ed8:	40020058 	.word	0x40020058
 8004edc:	40020070 	.word	0x40020070
 8004ee0:	40020088 	.word	0x40020088
 8004ee4:	400200a0 	.word	0x400200a0
 8004ee8:	400200b8 	.word	0x400200b8
 8004eec:	40020410 	.word	0x40020410
 8004ef0:	40020428 	.word	0x40020428
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	40020458 	.word	0x40020458
 8004efc:	40020470 	.word	0x40020470
 8004f00:	40020488 	.word	0x40020488
 8004f04:	400204a0 	.word	0x400204a0
 8004f08:	400204b8 	.word	0x400204b8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8087 	beq.w	8005034 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	f003 031f 	and.w	r3, r3, #31
 8004f2e:	2220      	movs	r2, #32
 8004f30:	409a      	lsls	r2, r3
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d139      	bne.n	8004fb6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0216 	bic.w	r2, r2, #22
 8004f50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <HAL_DMA_IRQHandler+0x736>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0208 	bic.w	r2, r2, #8
 8004f80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	223f      	movs	r2, #63	; 0x3f
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 834a 	beq.w	8005640 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
          }
          return;
 8004fb4:	e344      	b.n	8005640 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d018      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d108      	bne.n	8004fe4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d02c      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4798      	blx	r3
 8004fe2:	e027      	b.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d023      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
 8004ff4:	e01e      	b.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10f      	bne.n	8005024 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0210 	bic.w	r2, r2, #16
 8005012:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8306 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8088 	beq.w	800515c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2204      	movs	r2, #4
 8005050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a7a      	ldr	r2, [pc, #488]	; (8005244 <HAL_DMA_IRQHandler+0xa08>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d04a      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a79      	ldr	r2, [pc, #484]	; (8005248 <HAL_DMA_IRQHandler+0xa0c>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d045      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a77      	ldr	r2, [pc, #476]	; (800524c <HAL_DMA_IRQHandler+0xa10>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d040      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a76      	ldr	r2, [pc, #472]	; (8005250 <HAL_DMA_IRQHandler+0xa14>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d03b      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a74      	ldr	r2, [pc, #464]	; (8005254 <HAL_DMA_IRQHandler+0xa18>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d036      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a73      	ldr	r2, [pc, #460]	; (8005258 <HAL_DMA_IRQHandler+0xa1c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d031      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a71      	ldr	r2, [pc, #452]	; (800525c <HAL_DMA_IRQHandler+0xa20>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d02c      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a70      	ldr	r2, [pc, #448]	; (8005260 <HAL_DMA_IRQHandler+0xa24>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d027      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a6e      	ldr	r2, [pc, #440]	; (8005264 <HAL_DMA_IRQHandler+0xa28>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d022      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a6d      	ldr	r2, [pc, #436]	; (8005268 <HAL_DMA_IRQHandler+0xa2c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d01d      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a6b      	ldr	r2, [pc, #428]	; (800526c <HAL_DMA_IRQHandler+0xa30>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6a      	ldr	r2, [pc, #424]	; (8005270 <HAL_DMA_IRQHandler+0xa34>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a68      	ldr	r2, [pc, #416]	; (8005274 <HAL_DMA_IRQHandler+0xa38>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a67      	ldr	r2, [pc, #412]	; (8005278 <HAL_DMA_IRQHandler+0xa3c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a65      	ldr	r2, [pc, #404]	; (800527c <HAL_DMA_IRQHandler+0xa40>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x8b8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a64      	ldr	r2, [pc, #400]	; (8005280 <HAL_DMA_IRQHandler+0xa44>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d108      	bne.n	8005106 <HAL_DMA_IRQHandler+0x8ca>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e007      	b.n	8005116 <HAL_DMA_IRQHandler+0x8da>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3301      	adds	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511e:	429a      	cmp	r2, r3
 8005120:	d307      	bcc.n	8005132 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f2      	bne.n	8005116 <HAL_DMA_IRQHandler+0x8da>
 8005130:	e000      	b.n	8005134 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005132:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005152:	e003      	b.n	800515c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8272 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
 800516e:	e26c      	b.n	800564a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a43      	ldr	r2, [pc, #268]	; (8005284 <HAL_DMA_IRQHandler+0xa48>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a42      	ldr	r2, [pc, #264]	; (8005288 <HAL_DMA_IRQHandler+0xa4c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d01d      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a40      	ldr	r2, [pc, #256]	; (800528c <HAL_DMA_IRQHandler+0xa50>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a3f      	ldr	r2, [pc, #252]	; (8005290 <HAL_DMA_IRQHandler+0xa54>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a3d      	ldr	r2, [pc, #244]	; (8005294 <HAL_DMA_IRQHandler+0xa58>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a3c      	ldr	r2, [pc, #240]	; (8005298 <HAL_DMA_IRQHandler+0xa5c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a3a      	ldr	r2, [pc, #232]	; (800529c <HAL_DMA_IRQHandler+0xa60>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x984>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <HAL_DMA_IRQHandler+0xa64>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <HAL_DMA_IRQHandler+0x988>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <HAL_DMA_IRQHandler+0x98a>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 823f 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	2204      	movs	r2, #4
 80051de:	409a      	lsls	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 80cd 	beq.w	8005384 <HAL_DMA_IRQHandler+0xb48>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80c7 	beq.w	8005384 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2204      	movs	r2, #4
 8005200:	409a      	lsls	r2, r3
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d049      	beq.n	80052a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 8210 	beq.w	8005644 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800522c:	e20a      	b.n	8005644 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8206 	beq.w	8005644 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005240:	e200      	b.n	8005644 <HAL_DMA_IRQHandler+0xe08>
 8005242:	bf00      	nop
 8005244:	40020010 	.word	0x40020010
 8005248:	40020028 	.word	0x40020028
 800524c:	40020040 	.word	0x40020040
 8005250:	40020058 	.word	0x40020058
 8005254:	40020070 	.word	0x40020070
 8005258:	40020088 	.word	0x40020088
 800525c:	400200a0 	.word	0x400200a0
 8005260:	400200b8 	.word	0x400200b8
 8005264:	40020410 	.word	0x40020410
 8005268:	40020428 	.word	0x40020428
 800526c:	40020440 	.word	0x40020440
 8005270:	40020458 	.word	0x40020458
 8005274:	40020470 	.word	0x40020470
 8005278:	40020488 	.word	0x40020488
 800527c:	400204a0 	.word	0x400204a0
 8005280:	400204b8 	.word	0x400204b8
 8005284:	58025408 	.word	0x58025408
 8005288:	5802541c 	.word	0x5802541c
 800528c:	58025430 	.word	0x58025430
 8005290:	58025444 	.word	0x58025444
 8005294:	58025458 	.word	0x58025458
 8005298:	5802546c 	.word	0x5802546c
 800529c:	58025480 	.word	0x58025480
 80052a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d160      	bne.n	8005370 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a8c      	ldr	r2, [pc, #560]	; (80054e4 <HAL_DMA_IRQHandler+0xca8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d04a      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a8a      	ldr	r2, [pc, #552]	; (80054e8 <HAL_DMA_IRQHandler+0xcac>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d045      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a89      	ldr	r2, [pc, #548]	; (80054ec <HAL_DMA_IRQHandler+0xcb0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d040      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a87      	ldr	r2, [pc, #540]	; (80054f0 <HAL_DMA_IRQHandler+0xcb4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d03b      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a86      	ldr	r2, [pc, #536]	; (80054f4 <HAL_DMA_IRQHandler+0xcb8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d036      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a84      	ldr	r2, [pc, #528]	; (80054f8 <HAL_DMA_IRQHandler+0xcbc>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d031      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a83      	ldr	r2, [pc, #524]	; (80054fc <HAL_DMA_IRQHandler+0xcc0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d02c      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a81      	ldr	r2, [pc, #516]	; (8005500 <HAL_DMA_IRQHandler+0xcc4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d027      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a80      	ldr	r2, [pc, #512]	; (8005504 <HAL_DMA_IRQHandler+0xcc8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a7e      	ldr	r2, [pc, #504]	; (8005508 <HAL_DMA_IRQHandler+0xccc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01d      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a7d      	ldr	r2, [pc, #500]	; (800550c <HAL_DMA_IRQHandler+0xcd0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a7b      	ldr	r2, [pc, #492]	; (8005510 <HAL_DMA_IRQHandler+0xcd4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a7a      	ldr	r2, [pc, #488]	; (8005514 <HAL_DMA_IRQHandler+0xcd8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a78      	ldr	r2, [pc, #480]	; (8005518 <HAL_DMA_IRQHandler+0xcdc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a77      	ldr	r2, [pc, #476]	; (800551c <HAL_DMA_IRQHandler+0xce0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_DMA_IRQHandler+0xb12>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a75      	ldr	r2, [pc, #468]	; (8005520 <HAL_DMA_IRQHandler+0xce4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d108      	bne.n	8005360 <HAL_DMA_IRQHandler+0xb24>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0208 	bic.w	r2, r2, #8
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e007      	b.n	8005370 <HAL_DMA_IRQHandler+0xb34>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8165 	beq.w	8005644 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005382:	e15f      	b.n	8005644 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2202      	movs	r2, #2
 800538e:	409a      	lsls	r2, r3
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80c5 	beq.w	8005524 <HAL_DMA_IRQHandler+0xce8>
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80bf 	beq.w	8005524 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	2202      	movs	r2, #2
 80053b0:	409a      	lsls	r2, r3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d018      	beq.n	80053f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 813a 	beq.w	8005648 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053dc:	e134      	b.n	8005648 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 8130 	beq.w	8005648 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053f0:	e12a      	b.n	8005648 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d168      	bne.n	80054ce <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a38      	ldr	r2, [pc, #224]	; (80054e4 <HAL_DMA_IRQHandler+0xca8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d04a      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a37      	ldr	r2, [pc, #220]	; (80054e8 <HAL_DMA_IRQHandler+0xcac>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d045      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a35      	ldr	r2, [pc, #212]	; (80054ec <HAL_DMA_IRQHandler+0xcb0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d040      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <HAL_DMA_IRQHandler+0xcb4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d03b      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a32      	ldr	r2, [pc, #200]	; (80054f4 <HAL_DMA_IRQHandler+0xcb8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d036      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a31      	ldr	r2, [pc, #196]	; (80054f8 <HAL_DMA_IRQHandler+0xcbc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d031      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2f      	ldr	r2, [pc, #188]	; (80054fc <HAL_DMA_IRQHandler+0xcc0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d02c      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2e      	ldr	r2, [pc, #184]	; (8005500 <HAL_DMA_IRQHandler+0xcc4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d027      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2c      	ldr	r2, [pc, #176]	; (8005504 <HAL_DMA_IRQHandler+0xcc8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2b      	ldr	r2, [pc, #172]	; (8005508 <HAL_DMA_IRQHandler+0xccc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d01d      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a29      	ldr	r2, [pc, #164]	; (800550c <HAL_DMA_IRQHandler+0xcd0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a28      	ldr	r2, [pc, #160]	; (8005510 <HAL_DMA_IRQHandler+0xcd4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a26      	ldr	r2, [pc, #152]	; (8005514 <HAL_DMA_IRQHandler+0xcd8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a25      	ldr	r2, [pc, #148]	; (8005518 <HAL_DMA_IRQHandler+0xcdc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a23      	ldr	r2, [pc, #140]	; (800551c <HAL_DMA_IRQHandler+0xce0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_DMA_IRQHandler+0xc60>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a22      	ldr	r2, [pc, #136]	; (8005520 <HAL_DMA_IRQHandler+0xce4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d108      	bne.n	80054ae <HAL_DMA_IRQHandler+0xc72>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0214 	bic.w	r2, r2, #20
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e007      	b.n	80054be <HAL_DMA_IRQHandler+0xc82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 020a 	bic.w	r2, r2, #10
 80054bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80b8 	beq.w	8005648 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054e0:	e0b2      	b.n	8005648 <HAL_DMA_IRQHandler+0xe0c>
 80054e2:	bf00      	nop
 80054e4:	40020010 	.word	0x40020010
 80054e8:	40020028 	.word	0x40020028
 80054ec:	40020040 	.word	0x40020040
 80054f0:	40020058 	.word	0x40020058
 80054f4:	40020070 	.word	0x40020070
 80054f8:	40020088 	.word	0x40020088
 80054fc:	400200a0 	.word	0x400200a0
 8005500:	400200b8 	.word	0x400200b8
 8005504:	40020410 	.word	0x40020410
 8005508:	40020428 	.word	0x40020428
 800550c:	40020440 	.word	0x40020440
 8005510:	40020458 	.word	0x40020458
 8005514:	40020470 	.word	0x40020470
 8005518:	40020488 	.word	0x40020488
 800551c:	400204a0 	.word	0x400204a0
 8005520:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	2208      	movs	r2, #8
 800552e:	409a      	lsls	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8088 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8082 	beq.w	800564a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a41      	ldr	r2, [pc, #260]	; (8005650 <HAL_DMA_IRQHandler+0xe14>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d04a      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a3f      	ldr	r2, [pc, #252]	; (8005654 <HAL_DMA_IRQHandler+0xe18>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d045      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a3e      	ldr	r2, [pc, #248]	; (8005658 <HAL_DMA_IRQHandler+0xe1c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d040      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a3c      	ldr	r2, [pc, #240]	; (800565c <HAL_DMA_IRQHandler+0xe20>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d03b      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a3b      	ldr	r2, [pc, #236]	; (8005660 <HAL_DMA_IRQHandler+0xe24>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d036      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a39      	ldr	r2, [pc, #228]	; (8005664 <HAL_DMA_IRQHandler+0xe28>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a38      	ldr	r2, [pc, #224]	; (8005668 <HAL_DMA_IRQHandler+0xe2c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d02c      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a36      	ldr	r2, [pc, #216]	; (800566c <HAL_DMA_IRQHandler+0xe30>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a35      	ldr	r2, [pc, #212]	; (8005670 <HAL_DMA_IRQHandler+0xe34>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a33      	ldr	r2, [pc, #204]	; (8005674 <HAL_DMA_IRQHandler+0xe38>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01d      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a32      	ldr	r2, [pc, #200]	; (8005678 <HAL_DMA_IRQHandler+0xe3c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a30      	ldr	r2, [pc, #192]	; (800567c <HAL_DMA_IRQHandler+0xe40>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2f      	ldr	r2, [pc, #188]	; (8005680 <HAL_DMA_IRQHandler+0xe44>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2d      	ldr	r2, [pc, #180]	; (8005684 <HAL_DMA_IRQHandler+0xe48>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <HAL_DMA_IRQHandler+0xe4c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_IRQHandler+0xdaa>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2a      	ldr	r2, [pc, #168]	; (800568c <HAL_DMA_IRQHandler+0xe50>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d108      	bne.n	80055f8 <HAL_DMA_IRQHandler+0xdbc>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 021c 	bic.w	r2, r2, #28
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e007      	b.n	8005608 <HAL_DMA_IRQHandler+0xdcc>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 020e 	bic.w	r2, r2, #14
 8005606:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	2201      	movs	r2, #1
 8005612:	409a      	lsls	r2, r3
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
 800563e:	e004      	b.n	800564a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005640:	bf00      	nop
 8005642:	e002      	b.n	800564a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005648:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800564a:	3728      	adds	r7, #40	; 0x28
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40020010 	.word	0x40020010
 8005654:	40020028 	.word	0x40020028
 8005658:	40020040 	.word	0x40020040
 800565c:	40020058 	.word	0x40020058
 8005660:	40020070 	.word	0x40020070
 8005664:	40020088 	.word	0x40020088
 8005668:	400200a0 	.word	0x400200a0
 800566c:	400200b8 	.word	0x400200b8
 8005670:	40020410 	.word	0x40020410
 8005674:	40020428 	.word	0x40020428
 8005678:	40020440 	.word	0x40020440
 800567c:	40020458 	.word	0x40020458
 8005680:	40020470 	.word	0x40020470
 8005684:	40020488 	.word	0x40020488
 8005688:	400204a0 	.word	0x400204a0
 800568c:	400204b8 	.word	0x400204b8

08005690 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a84      	ldr	r2, [pc, #528]	; (80058c0 <DMA_SetConfig+0x230>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d072      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a82      	ldr	r2, [pc, #520]	; (80058c4 <DMA_SetConfig+0x234>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d06d      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a81      	ldr	r2, [pc, #516]	; (80058c8 <DMA_SetConfig+0x238>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d068      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a7f      	ldr	r2, [pc, #508]	; (80058cc <DMA_SetConfig+0x23c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d063      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a7e      	ldr	r2, [pc, #504]	; (80058d0 <DMA_SetConfig+0x240>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d05e      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7c      	ldr	r2, [pc, #496]	; (80058d4 <DMA_SetConfig+0x244>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d059      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a7b      	ldr	r2, [pc, #492]	; (80058d8 <DMA_SetConfig+0x248>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d054      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a79      	ldr	r2, [pc, #484]	; (80058dc <DMA_SetConfig+0x24c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d04f      	beq.n	800579a <DMA_SetConfig+0x10a>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a78      	ldr	r2, [pc, #480]	; (80058e0 <DMA_SetConfig+0x250>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d04a      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a76      	ldr	r2, [pc, #472]	; (80058e4 <DMA_SetConfig+0x254>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d045      	beq.n	800579a <DMA_SetConfig+0x10a>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a75      	ldr	r2, [pc, #468]	; (80058e8 <DMA_SetConfig+0x258>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d040      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a73      	ldr	r2, [pc, #460]	; (80058ec <DMA_SetConfig+0x25c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d03b      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a72      	ldr	r2, [pc, #456]	; (80058f0 <DMA_SetConfig+0x260>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d036      	beq.n	800579a <DMA_SetConfig+0x10a>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a70      	ldr	r2, [pc, #448]	; (80058f4 <DMA_SetConfig+0x264>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d031      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a6f      	ldr	r2, [pc, #444]	; (80058f8 <DMA_SetConfig+0x268>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d02c      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6d      	ldr	r2, [pc, #436]	; (80058fc <DMA_SetConfig+0x26c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d027      	beq.n	800579a <DMA_SetConfig+0x10a>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6c      	ldr	r2, [pc, #432]	; (8005900 <DMA_SetConfig+0x270>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d022      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a6a      	ldr	r2, [pc, #424]	; (8005904 <DMA_SetConfig+0x274>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d01d      	beq.n	800579a <DMA_SetConfig+0x10a>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a69      	ldr	r2, [pc, #420]	; (8005908 <DMA_SetConfig+0x278>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d018      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a67      	ldr	r2, [pc, #412]	; (800590c <DMA_SetConfig+0x27c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a66      	ldr	r2, [pc, #408]	; (8005910 <DMA_SetConfig+0x280>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00e      	beq.n	800579a <DMA_SetConfig+0x10a>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a64      	ldr	r2, [pc, #400]	; (8005914 <DMA_SetConfig+0x284>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d009      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a63      	ldr	r2, [pc, #396]	; (8005918 <DMA_SetConfig+0x288>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d004      	beq.n	800579a <DMA_SetConfig+0x10a>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a61      	ldr	r2, [pc, #388]	; (800591c <DMA_SetConfig+0x28c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d101      	bne.n	800579e <DMA_SetConfig+0x10e>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <DMA_SetConfig+0x110>
 800579e:	2300      	movs	r3, #0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00d      	beq.n	80057c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a3e      	ldr	r2, [pc, #248]	; (80058c0 <DMA_SetConfig+0x230>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d04a      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3d      	ldr	r2, [pc, #244]	; (80058c4 <DMA_SetConfig+0x234>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d045      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a3b      	ldr	r2, [pc, #236]	; (80058c8 <DMA_SetConfig+0x238>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d040      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a3a      	ldr	r2, [pc, #232]	; (80058cc <DMA_SetConfig+0x23c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d03b      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a38      	ldr	r2, [pc, #224]	; (80058d0 <DMA_SetConfig+0x240>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d036      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a37      	ldr	r2, [pc, #220]	; (80058d4 <DMA_SetConfig+0x244>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d031      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a35      	ldr	r2, [pc, #212]	; (80058d8 <DMA_SetConfig+0x248>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d02c      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a34      	ldr	r2, [pc, #208]	; (80058dc <DMA_SetConfig+0x24c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d027      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a32      	ldr	r2, [pc, #200]	; (80058e0 <DMA_SetConfig+0x250>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d022      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a31      	ldr	r2, [pc, #196]	; (80058e4 <DMA_SetConfig+0x254>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d01d      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <DMA_SetConfig+0x258>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d018      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a2e      	ldr	r2, [pc, #184]	; (80058ec <DMA_SetConfig+0x25c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2c      	ldr	r2, [pc, #176]	; (80058f0 <DMA_SetConfig+0x260>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00e      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2b      	ldr	r2, [pc, #172]	; (80058f4 <DMA_SetConfig+0x264>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <DMA_SetConfig+0x268>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <DMA_SetConfig+0x1d0>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a28      	ldr	r2, [pc, #160]	; (80058fc <DMA_SetConfig+0x26c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <DMA_SetConfig+0x1d4>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <DMA_SetConfig+0x1d6>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d05a      	beq.n	8005920 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	223f      	movs	r2, #63	; 0x3f
 8005874:	409a      	lsls	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005888:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d108      	bne.n	80058ac <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058aa:	e087      	b.n	80059bc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	60da      	str	r2, [r3, #12]
}
 80058bc:	e07e      	b.n	80059bc <DMA_SetConfig+0x32c>
 80058be:	bf00      	nop
 80058c0:	40020010 	.word	0x40020010
 80058c4:	40020028 	.word	0x40020028
 80058c8:	40020040 	.word	0x40020040
 80058cc:	40020058 	.word	0x40020058
 80058d0:	40020070 	.word	0x40020070
 80058d4:	40020088 	.word	0x40020088
 80058d8:	400200a0 	.word	0x400200a0
 80058dc:	400200b8 	.word	0x400200b8
 80058e0:	40020410 	.word	0x40020410
 80058e4:	40020428 	.word	0x40020428
 80058e8:	40020440 	.word	0x40020440
 80058ec:	40020458 	.word	0x40020458
 80058f0:	40020470 	.word	0x40020470
 80058f4:	40020488 	.word	0x40020488
 80058f8:	400204a0 	.word	0x400204a0
 80058fc:	400204b8 	.word	0x400204b8
 8005900:	58025408 	.word	0x58025408
 8005904:	5802541c 	.word	0x5802541c
 8005908:	58025430 	.word	0x58025430
 800590c:	58025444 	.word	0x58025444
 8005910:	58025458 	.word	0x58025458
 8005914:	5802546c 	.word	0x5802546c
 8005918:	58025480 	.word	0x58025480
 800591c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <DMA_SetConfig+0x338>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d022      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a27      	ldr	r2, [pc, #156]	; (80059cc <DMA_SetConfig+0x33c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01d      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a25      	ldr	r2, [pc, #148]	; (80059d0 <DMA_SetConfig+0x340>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a24      	ldr	r2, [pc, #144]	; (80059d4 <DMA_SetConfig+0x344>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a22      	ldr	r2, [pc, #136]	; (80059d8 <DMA_SetConfig+0x348>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a21      	ldr	r2, [pc, #132]	; (80059dc <DMA_SetConfig+0x34c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <DMA_SetConfig+0x350>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <DMA_SetConfig+0x2e0>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <DMA_SetConfig+0x354>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d101      	bne.n	8005974 <DMA_SetConfig+0x2e4>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <DMA_SetConfig+0x2e6>
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d020      	beq.n	80059bc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2201      	movs	r2, #1
 8005984:	409a      	lsls	r2, r3
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d108      	bne.n	80059ac <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	60da      	str	r2, [r3, #12]
}
 80059aa:	e007      	b.n	80059bc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	58025408 	.word	0x58025408
 80059cc:	5802541c 	.word	0x5802541c
 80059d0:	58025430 	.word	0x58025430
 80059d4:	58025444 	.word	0x58025444
 80059d8:	58025458 	.word	0x58025458
 80059dc:	5802546c 	.word	0x5802546c
 80059e0:	58025480 	.word	0x58025480
 80059e4:	58025494 	.word	0x58025494

080059e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a42      	ldr	r2, [pc, #264]	; (8005b00 <DMA_CalcBaseAndBitshift+0x118>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d04a      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a41      	ldr	r2, [pc, #260]	; (8005b04 <DMA_CalcBaseAndBitshift+0x11c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d045      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a3f      	ldr	r2, [pc, #252]	; (8005b08 <DMA_CalcBaseAndBitshift+0x120>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d040      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a3e      	ldr	r2, [pc, #248]	; (8005b0c <DMA_CalcBaseAndBitshift+0x124>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d03b      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a3c      	ldr	r2, [pc, #240]	; (8005b10 <DMA_CalcBaseAndBitshift+0x128>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d036      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a3b      	ldr	r2, [pc, #236]	; (8005b14 <DMA_CalcBaseAndBitshift+0x12c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d031      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a39      	ldr	r2, [pc, #228]	; (8005b18 <DMA_CalcBaseAndBitshift+0x130>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d02c      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a38      	ldr	r2, [pc, #224]	; (8005b1c <DMA_CalcBaseAndBitshift+0x134>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d027      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a36      	ldr	r2, [pc, #216]	; (8005b20 <DMA_CalcBaseAndBitshift+0x138>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d022      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a35      	ldr	r2, [pc, #212]	; (8005b24 <DMA_CalcBaseAndBitshift+0x13c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d01d      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a33      	ldr	r2, [pc, #204]	; (8005b28 <DMA_CalcBaseAndBitshift+0x140>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a32      	ldr	r2, [pc, #200]	; (8005b2c <DMA_CalcBaseAndBitshift+0x144>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <DMA_CalcBaseAndBitshift+0x148>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2f      	ldr	r2, [pc, #188]	; (8005b34 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2d      	ldr	r2, [pc, #180]	; (8005b38 <DMA_CalcBaseAndBitshift+0x150>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <DMA_CalcBaseAndBitshift+0xa8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <DMA_CalcBaseAndBitshift+0x154>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <DMA_CalcBaseAndBitshift+0xac>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <DMA_CalcBaseAndBitshift+0xae>
 8005a94:	2300      	movs	r3, #0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d024      	beq.n	8005ae4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	3b10      	subs	r3, #16
 8005aa2:	4a27      	ldr	r2, [pc, #156]	; (8005b40 <DMA_CalcBaseAndBitshift+0x158>)
 8005aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d908      	bls.n	8005ad4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4b1f      	ldr	r3, [pc, #124]	; (8005b48 <DMA_CalcBaseAndBitshift+0x160>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	1d1a      	adds	r2, r3, #4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	659a      	str	r2, [r3, #88]	; 0x58
 8005ad2:	e00d      	b.n	8005af0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <DMA_CalcBaseAndBitshift+0x160>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ae2:	e005      	b.n	8005af0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40020010 	.word	0x40020010
 8005b04:	40020028 	.word	0x40020028
 8005b08:	40020040 	.word	0x40020040
 8005b0c:	40020058 	.word	0x40020058
 8005b10:	40020070 	.word	0x40020070
 8005b14:	40020088 	.word	0x40020088
 8005b18:	400200a0 	.word	0x400200a0
 8005b1c:	400200b8 	.word	0x400200b8
 8005b20:	40020410 	.word	0x40020410
 8005b24:	40020428 	.word	0x40020428
 8005b28:	40020440 	.word	0x40020440
 8005b2c:	40020458 	.word	0x40020458
 8005b30:	40020470 	.word	0x40020470
 8005b34:	40020488 	.word	0x40020488
 8005b38:	400204a0 	.word	0x400204a0
 8005b3c:	400204b8 	.word	0x400204b8
 8005b40:	aaaaaaab 	.word	0xaaaaaaab
 8005b44:	0800bf50 	.word	0x0800bf50
 8005b48:	fffffc00 	.word	0xfffffc00

08005b4c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d120      	bne.n	8005ba2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d858      	bhi.n	8005c1a <DMA_CheckFifoParam+0xce>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <DMA_CheckFifoParam+0x24>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b93 	.word	0x08005b93
 8005b78:	08005b81 	.word	0x08005b81
 8005b7c:	08005c1b 	.word	0x08005c1b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d048      	beq.n	8005c1e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b90:	e045      	b.n	8005c1e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b9a:	d142      	bne.n	8005c22 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ba0:	e03f      	b.n	8005c22 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005baa:	d123      	bne.n	8005bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d838      	bhi.n	8005c26 <DMA_CheckFifoParam+0xda>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <DMA_CheckFifoParam+0x70>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005bd3 	.word	0x08005bd3
 8005bc4:	08005bcd 	.word	0x08005bcd
 8005bc8:	08005be5 	.word	0x08005be5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
        break;
 8005bd0:	e030      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d025      	beq.n	8005c2a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005be2:	e022      	b.n	8005c2a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bec:	d11f      	bne.n	8005c2e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bf2:	e01c      	b.n	8005c2e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d902      	bls.n	8005c02 <DMA_CheckFifoParam+0xb6>
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d003      	beq.n	8005c08 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c00:	e018      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	73fb      	strb	r3, [r7, #15]
        break;
 8005c06:	e015      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00e      	beq.n	8005c32 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]
    break;
 8005c18:	e00b      	b.n	8005c32 <DMA_CheckFifoParam+0xe6>
        break;
 8005c1a:	bf00      	nop
 8005c1c:	e00a      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c1e:	bf00      	nop
 8005c20:	e008      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c22:	bf00      	nop
 8005c24:	e006      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c26:	bf00      	nop
 8005c28:	e004      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c2a:	bf00      	nop
 8005c2c:	e002      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
        break;
 8005c2e:	bf00      	nop
 8005c30:	e000      	b.n	8005c34 <DMA_CheckFifoParam+0xe8>
    break;
 8005c32:	bf00      	nop
    }
  }

  return status;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop

08005c44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a38      	ldr	r2, [pc, #224]	; (8005d38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a36      	ldr	r2, [pc, #216]	; (8005d3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01d      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a35      	ldr	r2, [pc, #212]	; (8005d40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d018      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a33      	ldr	r2, [pc, #204]	; (8005d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a32      	ldr	r2, [pc, #200]	; (8005d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a30      	ldr	r2, [pc, #192]	; (8005d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a2f      	ldr	r2, [pc, #188]	; (8005d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2d      	ldr	r2, [pc, #180]	; (8005d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d101      	bne.n	8005ca6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01a      	beq.n	8005ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	3b08      	subs	r3, #8
 8005cb4:	4a28      	ldr	r2, [pc, #160]	; (8005d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4b26      	ldr	r3, [pc, #152]	; (8005d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005cd0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f003 031f 	and.w	r3, r3, #31
 8005cd8:	2201      	movs	r2, #1
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ce0:	e024      	b.n	8005d2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	3b10      	subs	r3, #16
 8005cea:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d806      	bhi.n	8005d0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d902      	bls.n	8005d0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	3308      	adds	r3, #8
 8005d08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005d1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	2201      	movs	r2, #1
 8005d26:	409a      	lsls	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	58025408 	.word	0x58025408
 8005d3c:	5802541c 	.word	0x5802541c
 8005d40:	58025430 	.word	0x58025430
 8005d44:	58025444 	.word	0x58025444
 8005d48:	58025458 	.word	0x58025458
 8005d4c:	5802546c 	.word	0x5802546c
 8005d50:	58025480 	.word	0x58025480
 8005d54:	58025494 	.word	0x58025494
 8005d58:	cccccccd 	.word	0xcccccccd
 8005d5c:	16009600 	.word	0x16009600
 8005d60:	58025880 	.word	0x58025880
 8005d64:	aaaaaaab 	.word	0xaaaaaaab
 8005d68:	400204b8 	.word	0x400204b8
 8005d6c:	4002040f 	.word	0x4002040f
 8005d70:	10008200 	.word	0x10008200
 8005d74:	40020880 	.word	0x40020880

08005d78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d04a      	beq.n	8005e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d847      	bhi.n	8005e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d022      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a24      	ldr	r2, [pc, #144]	; (8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d01d      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d018      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a21      	ldr	r2, [pc, #132]	; (8005e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d013      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00e      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d009      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d101      	bne.n	8005de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005de8:	2300      	movs	r3, #0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	461a      	mov	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e00:	671a      	str	r2, [r3, #112]	; 0x70
 8005e02:	e009      	b.n	8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4b14      	ldr	r3, [pc, #80]	; (8005e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005e16:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	409a      	lsls	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	58025408 	.word	0x58025408
 8005e34:	5802541c 	.word	0x5802541c
 8005e38:	58025430 	.word	0x58025430
 8005e3c:	58025444 	.word	0x58025444
 8005e40:	58025458 	.word	0x58025458
 8005e44:	5802546c 	.word	0x5802546c
 8005e48:	58025480 	.word	0x58025480
 8005e4c:	58025494 	.word	0x58025494
 8005e50:	1600963f 	.word	0x1600963f
 8005e54:	58025940 	.word	0x58025940
 8005e58:	1000823f 	.word	0x1000823f
 8005e5c:	40020940 	.word	0x40020940

08005e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b089      	sub	sp, #36	; 0x24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e6e:	4b89      	ldr	r3, [pc, #548]	; (8006094 <HAL_GPIO_Init+0x234>)
 8005e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e72:	e194      	b.n	800619e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	2101      	movs	r1, #1
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8186 	beq.w	8006198 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d00b      	beq.n	8005eac <HAL_GPIO_Init+0x4c>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d007      	beq.n	8005eac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005ea0:	2b11      	cmp	r3, #17
 8005ea2:	d003      	beq.n	8005eac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b12      	cmp	r3, #18
 8005eaa:	d130      	bne.n	8005f0e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	43db      	mvns	r3, r3
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	f003 0201 	and.w	r2, r3, #1
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	2203      	movs	r2, #3
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4013      	ands	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d003      	beq.n	8005f4e <HAL_GPIO_Init+0xee>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b12      	cmp	r3, #18
 8005f4c:	d123      	bne.n	8005f96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	08da      	lsrs	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	3208      	adds	r2, #8
 8005f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	220f      	movs	r2, #15
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43db      	mvns	r3, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	691a      	ldr	r2, [r3, #16]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	08da      	lsrs	r2, r3, #3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3208      	adds	r2, #8
 8005f90:	69b9      	ldr	r1, [r7, #24]
 8005f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4013      	ands	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f003 0203 	and.w	r2, r3, #3
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 80e0 	beq.w	8006198 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fd8:	4b2f      	ldr	r3, [pc, #188]	; (8006098 <HAL_GPIO_Init+0x238>)
 8005fda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fde:	4a2e      	ldr	r2, [pc, #184]	; (8006098 <HAL_GPIO_Init+0x238>)
 8005fe0:	f043 0302 	orr.w	r3, r3, #2
 8005fe4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005fe8:	4b2b      	ldr	r3, [pc, #172]	; (8006098 <HAL_GPIO_Init+0x238>)
 8005fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ff6:	4a29      	ldr	r2, [pc, #164]	; (800609c <HAL_GPIO_Init+0x23c>)
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	089b      	lsrs	r3, r3, #2
 8005ffc:	3302      	adds	r3, #2
 8005ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	220f      	movs	r2, #15
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a20      	ldr	r2, [pc, #128]	; (80060a0 <HAL_GPIO_Init+0x240>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d052      	beq.n	80060c8 <HAL_GPIO_Init+0x268>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <HAL_GPIO_Init+0x244>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d031      	beq.n	800608e <HAL_GPIO_Init+0x22e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <HAL_GPIO_Init+0x248>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02b      	beq.n	800608a <HAL_GPIO_Init+0x22a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_GPIO_Init+0x24c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d025      	beq.n	8006086 <HAL_GPIO_Init+0x226>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_GPIO_Init+0x250>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01f      	beq.n	8006082 <HAL_GPIO_Init+0x222>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_GPIO_Init+0x254>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d019      	beq.n	800607e <HAL_GPIO_Init+0x21e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1a      	ldr	r2, [pc, #104]	; (80060b8 <HAL_GPIO_Init+0x258>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_GPIO_Init+0x21a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_GPIO_Init+0x25c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00d      	beq.n	8006076 <HAL_GPIO_Init+0x216>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a18      	ldr	r2, [pc, #96]	; (80060c0 <HAL_GPIO_Init+0x260>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <HAL_GPIO_Init+0x212>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_GPIO_Init+0x264>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <HAL_GPIO_Init+0x20e>
 800606a:	2309      	movs	r3, #9
 800606c:	e02d      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800606e:	230a      	movs	r3, #10
 8006070:	e02b      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006072:	2308      	movs	r3, #8
 8006074:	e029      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006076:	2307      	movs	r3, #7
 8006078:	e027      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800607a:	2306      	movs	r3, #6
 800607c:	e025      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800607e:	2305      	movs	r3, #5
 8006080:	e023      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006082:	2304      	movs	r3, #4
 8006084:	e021      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006086:	2303      	movs	r3, #3
 8006088:	e01f      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800608a:	2302      	movs	r3, #2
 800608c:	e01d      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 800608e:	2301      	movs	r3, #1
 8006090:	e01b      	b.n	80060ca <HAL_GPIO_Init+0x26a>
 8006092:	bf00      	nop
 8006094:	58000080 	.word	0x58000080
 8006098:	58024400 	.word	0x58024400
 800609c:	58000400 	.word	0x58000400
 80060a0:	58020000 	.word	0x58020000
 80060a4:	58020400 	.word	0x58020400
 80060a8:	58020800 	.word	0x58020800
 80060ac:	58020c00 	.word	0x58020c00
 80060b0:	58021000 	.word	0x58021000
 80060b4:	58021400 	.word	0x58021400
 80060b8:	58021800 	.word	0x58021800
 80060bc:	58021c00 	.word	0x58021c00
 80060c0:	58022000 	.word	0x58022000
 80060c4:	58022400 	.word	0x58022400
 80060c8:	2300      	movs	r3, #0
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	f002 0203 	and.w	r2, r2, #3
 80060d0:	0092      	lsls	r2, r2, #2
 80060d2:	4093      	lsls	r3, r2
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060da:	4938      	ldr	r1, [pc, #224]	; (80061bc <HAL_GPIO_Init+0x35c>)
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	089b      	lsrs	r3, r3, #2
 80060e0:	3302      	adds	r3, #2
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	43db      	mvns	r3, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4013      	ands	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	43db      	mvns	r3, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800613c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	3301      	adds	r3, #1
 800619c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f47f ae63 	bne.w	8005e74 <HAL_GPIO_Init+0x14>
  }
}
 80061ae:	bf00      	nop
 80061b0:	3724      	adds	r7, #36	; 0x24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	58000400 	.word	0x58000400

080061c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80061c8:	4a08      	ldr	r2, [pc, #32]	; (80061ec <HAL_HSEM_FastTake+0x2c>)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3320      	adds	r3, #32
 80061ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d2:	4a07      	ldr	r2, [pc, #28]	; (80061f0 <HAL_HSEM_FastTake+0x30>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d101      	bne.n	80061dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
}
 80061de:	4618      	mov	r0, r3
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	58026400 	.word	0x58026400
 80061f0:	80000300 	.word	0x80000300

080061f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80061fe:	4906      	ldr	r1, [pc, #24]	; (8006218 <HAL_HSEM_Release+0x24>)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	58026400 	.word	0x58026400

0800621c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006224:	4b29      	ldr	r3, [pc, #164]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	2b06      	cmp	r3, #6
 800622e:	d00a      	beq.n	8006246 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006230:	4b26      	ldr	r3, [pc, #152]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d001      	beq.n	8006242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e040      	b.n	80062c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	e03e      	b.n	80062c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006246:	4b21      	ldr	r3, [pc, #132]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800624e:	491f      	ldr	r1, [pc, #124]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4313      	orrs	r3, r2
 8006254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006256:	f7fb fc9d 	bl	8001b94 <HAL_GetTick>
 800625a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800625c:	e009      	b.n	8006272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800625e:	f7fb fc99 	bl	8001b94 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800626c:	d901      	bls.n	8006272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e028      	b.n	80062c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006272:	4b16      	ldr	r3, [pc, #88]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627e:	d1ee      	bne.n	800625e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b1e      	cmp	r3, #30
 8006284:	d008      	beq.n	8006298 <HAL_PWREx_ConfigSupply+0x7c>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b2e      	cmp	r3, #46	; 0x2e
 800628a:	d005      	beq.n	8006298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b1d      	cmp	r3, #29
 8006290:	d002      	beq.n	8006298 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b2d      	cmp	r3, #45	; 0x2d
 8006296:	d114      	bne.n	80062c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006298:	f7fb fc7c 	bl	8001b94 <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800629e:	e009      	b.n	80062b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062a0:	f7fb fc78 	bl	8001b94 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ae:	d901      	bls.n	80062b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e007      	b.n	80062c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <HAL_PWREx_ConfigSupply+0xb0>)
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c0:	d1ee      	bne.n	80062a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	58024800 	.word	0x58024800

080062d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08c      	sub	sp, #48	; 0x30
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e3ff      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 8087 	beq.w	80063fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062f0:	4b99      	ldr	r3, [pc, #612]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062fa:	4b97      	ldr	r3, [pc, #604]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	2b10      	cmp	r3, #16
 8006304:	d007      	beq.n	8006316 <HAL_RCC_OscConfig+0x46>
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	2b18      	cmp	r3, #24
 800630a:	d110      	bne.n	800632e <HAL_RCC_OscConfig+0x5e>
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d10b      	bne.n	800632e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006316:	4b90      	ldr	r3, [pc, #576]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d06c      	beq.n	80063fc <HAL_RCC_OscConfig+0x12c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d168      	bne.n	80063fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e3d9      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006336:	d106      	bne.n	8006346 <HAL_RCC_OscConfig+0x76>
 8006338:	4b87      	ldr	r3, [pc, #540]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a86      	ldr	r2, [pc, #536]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800633e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	e02e      	b.n	80063a4 <HAL_RCC_OscConfig+0xd4>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10c      	bne.n	8006368 <HAL_RCC_OscConfig+0x98>
 800634e:	4b82      	ldr	r3, [pc, #520]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a81      	ldr	r2, [pc, #516]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	4b7f      	ldr	r3, [pc, #508]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a7e      	ldr	r2, [pc, #504]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e01d      	b.n	80063a4 <HAL_RCC_OscConfig+0xd4>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006370:	d10c      	bne.n	800638c <HAL_RCC_OscConfig+0xbc>
 8006372:	4b79      	ldr	r3, [pc, #484]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a78      	ldr	r2, [pc, #480]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4b76      	ldr	r3, [pc, #472]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a75      	ldr	r2, [pc, #468]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e00b      	b.n	80063a4 <HAL_RCC_OscConfig+0xd4>
 800638c:	4b72      	ldr	r3, [pc, #456]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a71      	ldr	r2, [pc, #452]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	4b6f      	ldr	r3, [pc, #444]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a6e      	ldr	r2, [pc, #440]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800639e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d013      	beq.n	80063d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fb fbf2 	bl	8001b94 <HAL_GetTick>
 80063b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063b4:	f7fb fbee 	bl	8001b94 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	; 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e38d      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80063c6:	4b64      	ldr	r3, [pc, #400]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0xe4>
 80063d2:	e014      	b.n	80063fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fb fbde 	bl	8001b94 <HAL_GetTick>
 80063d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063dc:	f7fb fbda 	bl	8001b94 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	; 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e379      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80063ee:	4b5a      	ldr	r3, [pc, #360]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x10c>
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 80ae 	beq.w	8006568 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800640c:	4b52      	ldr	r3, [pc, #328]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006414:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006416:	4b50      	ldr	r3, [pc, #320]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <HAL_RCC_OscConfig+0x162>
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	2b18      	cmp	r3, #24
 8006426:	d13a      	bne.n	800649e <HAL_RCC_OscConfig+0x1ce>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d135      	bne.n	800649e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006432:	4b49      	ldr	r3, [pc, #292]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_RCC_OscConfig+0x17a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e34b      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644a:	f7fb fbd1 	bl	8001bf0 <HAL_GetREVID>
 800644e:	4602      	mov	r2, r0
 8006450:	f241 0303 	movw	r3, #4099	; 0x1003
 8006454:	429a      	cmp	r2, r3
 8006456:	d817      	bhi.n	8006488 <HAL_RCC_OscConfig+0x1b8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d108      	bne.n	8006472 <HAL_RCC_OscConfig+0x1a2>
 8006460:	4b3d      	ldr	r3, [pc, #244]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006468:	4a3b      	ldr	r2, [pc, #236]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006470:	e07a      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006472:	4b39      	ldr	r3, [pc, #228]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	031b      	lsls	r3, r3, #12
 8006480:	4935      	ldr	r1, [pc, #212]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006482:	4313      	orrs	r3, r2
 8006484:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006486:	e06f      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006488:	4b33      	ldr	r3, [pc, #204]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	061b      	lsls	r3, r3, #24
 8006496:	4930      	ldr	r1, [pc, #192]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006498:	4313      	orrs	r3, r2
 800649a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800649c:	e064      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d045      	beq.n	8006532 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064a6:	4b2c      	ldr	r3, [pc, #176]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 0219 	bic.w	r2, r3, #25
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	4929      	ldr	r1, [pc, #164]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fb fb6c 	bl	8001b94 <HAL_GetTick>
 80064bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064c0:	f7fb fb68 	bl	8001b94 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e307      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064d2:	4b21      	ldr	r3, [pc, #132]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0304 	and.w	r3, r3, #4
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064de:	f7fb fb87 	bl	8001bf0 <HAL_GetREVID>
 80064e2:	4602      	mov	r2, r0
 80064e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d817      	bhi.n	800651c <HAL_RCC_OscConfig+0x24c>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d108      	bne.n	8006506 <HAL_RCC_OscConfig+0x236>
 80064f4:	4b18      	ldr	r3, [pc, #96]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80064fc:	4a16      	ldr	r2, [pc, #88]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 80064fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006502:	6053      	str	r3, [r2, #4]
 8006504:	e030      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	031b      	lsls	r3, r3, #12
 8006514:	4910      	ldr	r1, [pc, #64]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006516:	4313      	orrs	r3, r2
 8006518:	604b      	str	r3, [r1, #4]
 800651a:	e025      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
 800651c:	4b0e      	ldr	r3, [pc, #56]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	061b      	lsls	r3, r3, #24
 800652a:	490b      	ldr	r1, [pc, #44]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 800652c:	4313      	orrs	r3, r2
 800652e:	604b      	str	r3, [r1, #4]
 8006530:	e01a      	b.n	8006568 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a08      	ldr	r2, [pc, #32]	; (8006558 <HAL_RCC_OscConfig+0x288>)
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653e:	f7fb fb29 	bl	8001b94 <HAL_GetTick>
 8006542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006544:	e00a      	b.n	800655c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006546:	f7fb fb25 	bl	8001b94 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d903      	bls.n	800655c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e2c4      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
 8006558:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800655c:	4ba4      	ldr	r3, [pc, #656]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ee      	bne.n	8006546 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80a9 	beq.w	80066c8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006576:	4b9e      	ldr	r3, [pc, #632]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006580:	4b9b      	ldr	r3, [pc, #620]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d007      	beq.n	800659c <HAL_RCC_OscConfig+0x2cc>
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b18      	cmp	r3, #24
 8006590:	d13a      	bne.n	8006608 <HAL_RCC_OscConfig+0x338>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d135      	bne.n	8006608 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800659c:	4b94      	ldr	r3, [pc, #592]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_OscConfig+0x2e4>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2b80      	cmp	r3, #128	; 0x80
 80065ae:	d001      	beq.n	80065b4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e296      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065b4:	f7fb fb1c 	bl	8001bf0 <HAL_GetREVID>
 80065b8:	4602      	mov	r2, r0
 80065ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80065be:	429a      	cmp	r2, r3
 80065c0:	d817      	bhi.n	80065f2 <HAL_RCC_OscConfig+0x322>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d108      	bne.n	80065dc <HAL_RCC_OscConfig+0x30c>
 80065ca:	4b89      	ldr	r3, [pc, #548]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80065d2:	4a87      	ldr	r2, [pc, #540]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065da:	e075      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065dc:	4b84      	ldr	r3, [pc, #528]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	069b      	lsls	r3, r3, #26
 80065ea:	4981      	ldr	r1, [pc, #516]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065f0:	e06a      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065f2:	4b7f      	ldr	r3, [pc, #508]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	061b      	lsls	r3, r3, #24
 8006600:	497b      	ldr	r1, [pc, #492]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006602:	4313      	orrs	r3, r2
 8006604:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006606:	e05f      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d042      	beq.n	8006696 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006610:	4b77      	ldr	r3, [pc, #476]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a76      	ldr	r2, [pc, #472]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fb faba 	bl	8001b94 <HAL_GetTick>
 8006620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006622:	e008      	b.n	8006636 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006624:	f7fb fab6 	bl	8001b94 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e255      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006636:	4b6e      	ldr	r3, [pc, #440]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0f0      	beq.n	8006624 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006642:	f7fb fad5 	bl	8001bf0 <HAL_GetREVID>
 8006646:	4602      	mov	r2, r0
 8006648:	f241 0303 	movw	r3, #4099	; 0x1003
 800664c:	429a      	cmp	r2, r3
 800664e:	d817      	bhi.n	8006680 <HAL_RCC_OscConfig+0x3b0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	2b20      	cmp	r3, #32
 8006656:	d108      	bne.n	800666a <HAL_RCC_OscConfig+0x39a>
 8006658:	4b65      	ldr	r3, [pc, #404]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006660:	4a63      	ldr	r2, [pc, #396]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006666:	6053      	str	r3, [r2, #4]
 8006668:	e02e      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
 800666a:	4b61      	ldr	r3, [pc, #388]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	069b      	lsls	r3, r3, #26
 8006678:	495d      	ldr	r1, [pc, #372]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800667a:	4313      	orrs	r3, r2
 800667c:	604b      	str	r3, [r1, #4]
 800667e:	e023      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
 8006680:	4b5b      	ldr	r3, [pc, #364]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	4958      	ldr	r1, [pc, #352]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006690:	4313      	orrs	r3, r2
 8006692:	60cb      	str	r3, [r1, #12]
 8006694:	e018      	b.n	80066c8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006696:	4b56      	ldr	r3, [pc, #344]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a55      	ldr	r2, [pc, #340]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800669c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a2:	f7fb fa77 	bl	8001b94 <HAL_GetTick>
 80066a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80066aa:	f7fb fa73 	bl	8001b94 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e212      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066bc:	4b4c      	ldr	r3, [pc, #304]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f0      	bne.n	80066aa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d036      	beq.n	8006742 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d019      	beq.n	8006710 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066dc:	4b44      	ldr	r3, [pc, #272]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80066de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e0:	4a43      	ldr	r2, [pc, #268]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e8:	f7fb fa54 	bl	8001b94 <HAL_GetTick>
 80066ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066f0:	f7fb fa50 	bl	8001b94 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e1ef      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0f0      	beq.n	80066f0 <HAL_RCC_OscConfig+0x420>
 800670e:	e018      	b.n	8006742 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006710:	4b37      	ldr	r3, [pc, #220]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006714:	4a36      	ldr	r2, [pc, #216]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800671c:	f7fb fa3a 	bl	8001b94 <HAL_GetTick>
 8006720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006724:	f7fb fa36 	bl	8001b94 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e1d5      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006736:	4b2e      	ldr	r3, [pc, #184]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d036      	beq.n	80067bc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d019      	beq.n	800678a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006756:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a25      	ldr	r2, [pc, #148]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800675c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006760:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006762:	f7fb fa17 	bl	8001b94 <HAL_GetTick>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800676a:	f7fb fa13 	bl	8001b94 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e1b2      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800677c:	4b1c      	ldr	r3, [pc, #112]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x49a>
 8006788:	e018      	b.n	80067bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800678a:	4b19      	ldr	r3, [pc, #100]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a18      	ldr	r2, [pc, #96]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 8006790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006794:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006796:	f7fb f9fd 	bl	8001b94 <HAL_GetTick>
 800679a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800679e:	f7fb f9f9 	bl	8001b94 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e198      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067b0:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <HAL_RCC_OscConfig+0x520>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f0      	bne.n	800679e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8085 	beq.w	80068d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067ca:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <HAL_RCC_OscConfig+0x524>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <HAL_RCC_OscConfig+0x524>)
 80067d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067d6:	f7fb f9dd 	bl	8001b94 <HAL_GetTick>
 80067da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067dc:	e00c      	b.n	80067f8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80067de:	f7fb f9d9 	bl	8001b94 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b64      	cmp	r3, #100	; 0x64
 80067ea:	d905      	bls.n	80067f8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e178      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
 80067f0:	58024400 	.word	0x58024400
 80067f4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067f8:	4b96      	ldr	r3, [pc, #600]	; (8006a54 <HAL_RCC_OscConfig+0x784>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0ec      	beq.n	80067de <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d106      	bne.n	800681a <HAL_RCC_OscConfig+0x54a>
 800680c:	4b92      	ldr	r3, [pc, #584]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800680e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006810:	4a91      	ldr	r2, [pc, #580]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006812:	f043 0301 	orr.w	r3, r3, #1
 8006816:	6713      	str	r3, [r2, #112]	; 0x70
 8006818:	e02d      	b.n	8006876 <HAL_RCC_OscConfig+0x5a6>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10c      	bne.n	800683c <HAL_RCC_OscConfig+0x56c>
 8006822:	4b8d      	ldr	r3, [pc, #564]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	4a8c      	ldr	r2, [pc, #560]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	6713      	str	r3, [r2, #112]	; 0x70
 800682e:	4b8a      	ldr	r3, [pc, #552]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	4a89      	ldr	r2, [pc, #548]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006834:	f023 0304 	bic.w	r3, r3, #4
 8006838:	6713      	str	r3, [r2, #112]	; 0x70
 800683a:	e01c      	b.n	8006876 <HAL_RCC_OscConfig+0x5a6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b05      	cmp	r3, #5
 8006842:	d10c      	bne.n	800685e <HAL_RCC_OscConfig+0x58e>
 8006844:	4b84      	ldr	r3, [pc, #528]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006848:	4a83      	ldr	r2, [pc, #524]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800684a:	f043 0304 	orr.w	r3, r3, #4
 800684e:	6713      	str	r3, [r2, #112]	; 0x70
 8006850:	4b81      	ldr	r3, [pc, #516]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	4a80      	ldr	r2, [pc, #512]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006856:	f043 0301 	orr.w	r3, r3, #1
 800685a:	6713      	str	r3, [r2, #112]	; 0x70
 800685c:	e00b      	b.n	8006876 <HAL_RCC_OscConfig+0x5a6>
 800685e:	4b7e      	ldr	r3, [pc, #504]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	4a7d      	ldr	r2, [pc, #500]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	6713      	str	r3, [r2, #112]	; 0x70
 800686a:	4b7b      	ldr	r3, [pc, #492]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	4a7a      	ldr	r2, [pc, #488]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006870:	f023 0304 	bic.w	r3, r3, #4
 8006874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d015      	beq.n	80068aa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687e:	f7fb f989 	bl	8001b94 <HAL_GetTick>
 8006882:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006884:	e00a      	b.n	800689c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006886:	f7fb f985 	bl	8001b94 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	f241 3288 	movw	r2, #5000	; 0x1388
 8006894:	4293      	cmp	r3, r2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e122      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800689c:	4b6e      	ldr	r3, [pc, #440]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0ee      	beq.n	8006886 <HAL_RCC_OscConfig+0x5b6>
 80068a8:	e014      	b.n	80068d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068aa:	f7fb f973 	bl	8001b94 <HAL_GetTick>
 80068ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068b0:	e00a      	b.n	80068c8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b2:	f7fb f96f 	bl	8001b94 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e10c      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068c8:	4b63      	ldr	r3, [pc, #396]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1ee      	bne.n	80068b2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8101 	beq.w	8006ae0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80068de:	4b5e      	ldr	r3, [pc, #376]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068e6:	2b18      	cmp	r3, #24
 80068e8:	f000 80bc 	beq.w	8006a64 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	f040 8095 	bne.w	8006a20 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f6:	4b58      	ldr	r3, [pc, #352]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a57      	ldr	r2, [pc, #348]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80068fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006902:	f7fb f947 	bl	8001b94 <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800690a:	f7fb f943 	bl	8001b94 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e0e2      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800691c:	4b4e      	ldr	r3, [pc, #312]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f0      	bne.n	800690a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006928:	4b4b      	ldr	r3, [pc, #300]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800692a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800692c:	4b4b      	ldr	r3, [pc, #300]	; (8006a5c <HAL_RCC_OscConfig+0x78c>)
 800692e:	4013      	ands	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006938:	0112      	lsls	r2, r2, #4
 800693a:	430a      	orrs	r2, r1
 800693c:	4946      	ldr	r1, [pc, #280]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800693e:	4313      	orrs	r3, r2
 8006940:	628b      	str	r3, [r1, #40]	; 0x28
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	3b01      	subs	r3, #1
 8006948:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	3b01      	subs	r3, #1
 8006952:	025b      	lsls	r3, r3, #9
 8006954:	b29b      	uxth	r3, r3
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	3b01      	subs	r3, #1
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696a:	3b01      	subs	r3, #1
 800696c:	061b      	lsls	r3, r3, #24
 800696e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006972:	4939      	ldr	r1, [pc, #228]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006974:	4313      	orrs	r3, r2
 8006976:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006978:	4b37      	ldr	r3, [pc, #220]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	4a36      	ldr	r2, [pc, #216]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006984:	4b34      	ldr	r3, [pc, #208]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006988:	4b35      	ldr	r3, [pc, #212]	; (8006a60 <HAL_RCC_OscConfig+0x790>)
 800698a:	4013      	ands	r3, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006990:	00d2      	lsls	r2, r2, #3
 8006992:	4931      	ldr	r1, [pc, #196]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006994:	4313      	orrs	r3, r2
 8006996:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006998:	4b2f      	ldr	r3, [pc, #188]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	f023 020c 	bic.w	r2, r3, #12
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	492c      	ldr	r1, [pc, #176]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069aa:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	f023 0202 	bic.w	r2, r3, #2
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	4928      	ldr	r1, [pc, #160]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069bc:	4b26      	ldr	r3, [pc, #152]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	4a25      	ldr	r2, [pc, #148]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c8:	4b23      	ldr	r3, [pc, #140]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	4a22      	ldr	r2, [pc, #136]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80069d4:	4b20      	ldr	r3, [pc, #128]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d8:	4a1f      	ldr	r2, [pc, #124]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80069e0:	4b1d      	ldr	r3, [pc, #116]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ec:	4b1a      	ldr	r3, [pc, #104]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a19      	ldr	r2, [pc, #100]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 80069f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fb f8cc 	bl	8001b94 <HAL_GetTick>
 80069fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fb f8c8 	bl	8001b94 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e067      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a12:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x730>
 8006a1e:	e05f      	b.n	8006ae0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fb f8b2 	bl	8001b94 <HAL_GetTick>
 8006a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fb f8ae 	bl	8001b94 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e04d      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a46:	4b04      	ldr	r3, [pc, #16]	; (8006a58 <HAL_RCC_OscConfig+0x788>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x764>
 8006a52:	e045      	b.n	8006ae0 <HAL_RCC_OscConfig+0x810>
 8006a54:	58024800 	.word	0x58024800
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	fffffc0c 	.word	0xfffffc0c
 8006a60:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a64:	4b21      	ldr	r3, [pc, #132]	; (8006aec <HAL_RCC_OscConfig+0x81c>)
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a6a:	4b20      	ldr	r3, [pc, #128]	; (8006aec <HAL_RCC_OscConfig+0x81c>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d031      	beq.n	8006adc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f003 0203 	and.w	r2, r3, #3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d12a      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d122      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d11a      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	0a5b      	lsrs	r3, r3, #9
 8006aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d111      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d108      	bne.n	8006adc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	0e1b      	lsrs	r3, r3, #24
 8006ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3730      	adds	r7, #48	; 0x30
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	58024400 	.word	0x58024400

08006af0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e19c      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b04:	4b8a      	ldr	r3, [pc, #552]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d910      	bls.n	8006b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b12:	4b87      	ldr	r3, [pc, #540]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f023 020f 	bic.w	r2, r3, #15
 8006b1a:	4985      	ldr	r1, [pc, #532]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b22:	4b83      	ldr	r3, [pc, #524]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d001      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e184      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d010      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	4b7b      	ldr	r3, [pc, #492]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d908      	bls.n	8006b62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b50:	4b78      	ldr	r3, [pc, #480]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	4975      	ldr	r1, [pc, #468]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d010      	beq.n	8006b90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695a      	ldr	r2, [r3, #20]
 8006b72:	4b70      	ldr	r3, [pc, #448]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d908      	bls.n	8006b90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b7e:	4b6d      	ldr	r3, [pc, #436]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	496a      	ldr	r1, [pc, #424]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d010      	beq.n	8006bbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699a      	ldr	r2, [r3, #24]
 8006ba0:	4b64      	ldr	r3, [pc, #400]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d908      	bls.n	8006bbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bac:	4b61      	ldr	r3, [pc, #388]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	495e      	ldr	r1, [pc, #376]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d010      	beq.n	8006bec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69da      	ldr	r2, [r3, #28]
 8006bce:	4b59      	ldr	r3, [pc, #356]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d908      	bls.n	8006bec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006bda:	4b56      	ldr	r3, [pc, #344]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	4953      	ldr	r1, [pc, #332]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d010      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	4b4d      	ldr	r3, [pc, #308]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d908      	bls.n	8006c1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c08:	4b4a      	ldr	r3, [pc, #296]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f023 020f 	bic.w	r2, r3, #15
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4947      	ldr	r1, [pc, #284]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d055      	beq.n	8006cd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006c26:	4b43      	ldr	r3, [pc, #268]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	4940      	ldr	r1, [pc, #256]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d107      	bne.n	8006c50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c40:	4b3c      	ldr	r3, [pc, #240]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d121      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0f6      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d107      	bne.n	8006c68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c58:	4b36      	ldr	r3, [pc, #216]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d115      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0ea      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c70:	4b30      	ldr	r3, [pc, #192]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e0de      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c80:	4b2c      	ldr	r3, [pc, #176]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0d6      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c90:	4b28      	ldr	r3, [pc, #160]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	f023 0207 	bic.w	r2, r3, #7
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4925      	ldr	r1, [pc, #148]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca2:	f7fa ff77 	bl	8001b94 <HAL_GetTick>
 8006ca6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca8:	e00a      	b.n	8006cc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006caa:	f7fa ff73 	bl	8001b94 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e0be      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc0:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d1eb      	bne.n	8006caa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d010      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d208      	bcs.n	8006d00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cee:	4b11      	ldr	r3, [pc, #68]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	f023 020f 	bic.w	r2, r3, #15
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	490e      	ldr	r1, [pc, #56]	; (8006d34 <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d214      	bcs.n	8006d38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0e:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 020f 	bic.w	r2, r3, #15
 8006d16:	4906      	ldr	r1, [pc, #24]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1e:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <HAL_RCC_ClockConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d005      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e086      	b.n	8006e3e <HAL_RCC_ClockConfig+0x34e>
 8006d30:	52002000 	.word	0x52002000
 8006d34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d010      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	4b3f      	ldr	r3, [pc, #252]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d208      	bcs.n	8006d66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d54:	4b3c      	ldr	r3, [pc, #240]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	4939      	ldr	r1, [pc, #228]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d010      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	695a      	ldr	r2, [r3, #20]
 8006d76:	4b34      	ldr	r3, [pc, #208]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d208      	bcs.n	8006d94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d82:	4b31      	ldr	r3, [pc, #196]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	492e      	ldr	r1, [pc, #184]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0310 	and.w	r3, r3, #16
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d010      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699a      	ldr	r2, [r3, #24]
 8006da4:	4b28      	ldr	r3, [pc, #160]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d208      	bcs.n	8006dc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006db0:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	4922      	ldr	r1, [pc, #136]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0320 	and.w	r3, r3, #32
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d010      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69da      	ldr	r2, [r3, #28]
 8006dd2:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d208      	bcs.n	8006df0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006dde:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	4917      	ldr	r1, [pc, #92]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006df0:	f000 f834 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 8006df4:	4601      	mov	r1, r0
 8006df6:	4b14      	ldr	r3, [pc, #80]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	0a1b      	lsrs	r3, r3, #8
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	4a12      	ldr	r2, [pc, #72]	; (8006e4c <HAL_RCC_ClockConfig+0x35c>)
 8006e02:	5cd3      	ldrb	r3, [r2, r3]
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	fa21 f303 	lsr.w	r3, r1, r3
 8006e0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e0e:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <HAL_RCC_ClockConfig+0x358>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <HAL_RCC_ClockConfig+0x35c>)
 8006e18:	5cd3      	ldrb	r3, [r2, r3]
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <HAL_RCC_ClockConfig+0x360>)
 8006e26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e28:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <HAL_RCC_ClockConfig+0x364>)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <HAL_RCC_ClockConfig+0x368>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fa fe64 	bl	8001b00 <HAL_InitTick>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	0800bf40 	.word	0x0800bf40
 8006e50:	20000004 	.word	0x20000004
 8006e54:	20000000 	.word	0x20000000
 8006e58:	2000000c 	.word	0x2000000c

08006e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b089      	sub	sp, #36	; 0x24
 8006e60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e62:	4baf      	ldr	r3, [pc, #700]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e6a:	2b18      	cmp	r3, #24
 8006e6c:	f200 814e 	bhi.w	800710c <HAL_RCC_GetSysClockFreq+0x2b0>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006edd 	.word	0x08006edd
 8006e7c:	0800710d 	.word	0x0800710d
 8006e80:	0800710d 	.word	0x0800710d
 8006e84:	0800710d 	.word	0x0800710d
 8006e88:	0800710d 	.word	0x0800710d
 8006e8c:	0800710d 	.word	0x0800710d
 8006e90:	0800710d 	.word	0x0800710d
 8006e94:	0800710d 	.word	0x0800710d
 8006e98:	08006f03 	.word	0x08006f03
 8006e9c:	0800710d 	.word	0x0800710d
 8006ea0:	0800710d 	.word	0x0800710d
 8006ea4:	0800710d 	.word	0x0800710d
 8006ea8:	0800710d 	.word	0x0800710d
 8006eac:	0800710d 	.word	0x0800710d
 8006eb0:	0800710d 	.word	0x0800710d
 8006eb4:	0800710d 	.word	0x0800710d
 8006eb8:	08006f09 	.word	0x08006f09
 8006ebc:	0800710d 	.word	0x0800710d
 8006ec0:	0800710d 	.word	0x0800710d
 8006ec4:	0800710d 	.word	0x0800710d
 8006ec8:	0800710d 	.word	0x0800710d
 8006ecc:	0800710d 	.word	0x0800710d
 8006ed0:	0800710d 	.word	0x0800710d
 8006ed4:	0800710d 	.word	0x0800710d
 8006ed8:	08006f0f 	.word	0x08006f0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006edc:	4b90      	ldr	r3, [pc, #576]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d009      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ee8:	4b8d      	ldr	r3, [pc, #564]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	08db      	lsrs	r3, r3, #3
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	4a8c      	ldr	r2, [pc, #560]	; (8007124 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006efa:	e10a      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006efc:	4b89      	ldr	r3, [pc, #548]	; (8007124 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006efe:	61bb      	str	r3, [r7, #24]
    break;
 8006f00:	e107      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006f02:	4b89      	ldr	r3, [pc, #548]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006f04:	61bb      	str	r3, [r7, #24]
    break;
 8006f06:	e104      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006f08:	4b88      	ldr	r3, [pc, #544]	; (800712c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006f0a:	61bb      	str	r3, [r7, #24]
    break;
 8006f0c:	e101      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f0e:	4b84      	ldr	r3, [pc, #528]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006f18:	4b81      	ldr	r3, [pc, #516]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f24:	4b7e      	ldr	r3, [pc, #504]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f2e:	4b7c      	ldr	r3, [pc, #496]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	08db      	lsrs	r3, r3, #3
 8006f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80da 	beq.w	8007106 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d05a      	beq.n	800700e <HAL_RCC_GetSysClockFreq+0x1b2>
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d302      	bcc.n	8006f62 <HAL_RCC_GetSysClockFreq+0x106>
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d078      	beq.n	8007052 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006f60:	e099      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f62:	4b6f      	ldr	r3, [pc, #444]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d02d      	beq.n	8006fca <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f6e:	4b6c      	ldr	r3, [pc, #432]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	08db      	lsrs	r3, r3, #3
 8006f74:	f003 0303 	and.w	r3, r3, #3
 8006f78:	4a6a      	ldr	r2, [pc, #424]	; (8007124 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f98:	4b61      	ldr	r3, [pc, #388]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa0:	ee07 3a90 	vmov	s15, r3
 8006fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fac:	eddf 5a60 	vldr	s11, [pc, #384]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006fc8:	e087      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	ee07 3a90 	vmov	s15, r3
 8006fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8007134 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fdc:	4b50      	ldr	r3, [pc, #320]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fec:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ff0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007008:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800700c:	e065      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007018:	eddf 6a47 	vldr	s13, [pc, #284]	; 8007138 <HAL_RCC_GetSysClockFreq+0x2dc>
 800701c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007020:	4b3f      	ldr	r3, [pc, #252]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007030:	ed97 6a02 	vldr	s12, [r7, #8]
 8007034:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007050:	e043      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	ee07 3a90 	vmov	s15, r3
 8007058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800713c <HAL_RCC_GetSysClockFreq+0x2e0>
 8007060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007064:	4b2e      	ldr	r3, [pc, #184]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007074:	ed97 6a02 	vldr	s12, [r7, #8]
 8007078:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 800707c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007090:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007094:	e021      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007138 <HAL_RCC_GetSysClockFreq+0x2dc>
 80070a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a8:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80070bc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8007130 <HAL_RCC_GetSysClockFreq+0x2d4>
 80070c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80070da:	4b11      	ldr	r3, [pc, #68]	; (8007120 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80070dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070de:	0a5b      	lsrs	r3, r3, #9
 80070e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e4:	3301      	adds	r3, #1
 80070e6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070fe:	ee17 3a90 	vmov	r3, s15
 8007102:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007104:	e005      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	61bb      	str	r3, [r7, #24]
    break;
 800710a:	e002      	b.n	8007112 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800710e:	61bb      	str	r3, [r7, #24]
    break;
 8007110:	bf00      	nop
  }

  return sysclockfreq;
 8007112:	69bb      	ldr	r3, [r7, #24]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3724      	adds	r7, #36	; 0x24
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	58024400 	.word	0x58024400
 8007124:	03d09000 	.word	0x03d09000
 8007128:	003d0900 	.word	0x003d0900
 800712c:	007a1200 	.word	0x007a1200
 8007130:	46000000 	.word	0x46000000
 8007134:	4c742400 	.word	0x4c742400
 8007138:	4a742400 	.word	0x4a742400
 800713c:	4af42400 	.word	0x4af42400

08007140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007146:	f7ff fe89 	bl	8006e5c <HAL_RCC_GetSysClockFreq>
 800714a:	4601      	mov	r1, r0
 800714c:	4b10      	ldr	r3, [pc, #64]	; (8007190 <HAL_RCC_GetHCLKFreq+0x50>)
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	0a1b      	lsrs	r3, r3, #8
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	4a0f      	ldr	r2, [pc, #60]	; (8007194 <HAL_RCC_GetHCLKFreq+0x54>)
 8007158:	5cd3      	ldrb	r3, [r2, r3]
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	fa21 f303 	lsr.w	r3, r1, r3
 8007162:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007164:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <HAL_RCC_GetHCLKFreq+0x50>)
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	4a09      	ldr	r2, [pc, #36]	; (8007194 <HAL_RCC_GetHCLKFreq+0x54>)
 800716e:	5cd3      	ldrb	r3, [r2, r3]
 8007170:	f003 031f 	and.w	r3, r3, #31
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	fa22 f303 	lsr.w	r3, r2, r3
 800717a:	4a07      	ldr	r2, [pc, #28]	; (8007198 <HAL_RCC_GetHCLKFreq+0x58>)
 800717c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800717e:	4a07      	ldr	r2, [pc, #28]	; (800719c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <HAL_RCC_GetHCLKFreq+0x58>)
 8007186:	681b      	ldr	r3, [r3, #0]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	58024400 	.word	0x58024400
 8007194:	0800bf40 	.word	0x0800bf40
 8007198:	20000004 	.word	0x20000004
 800719c:	20000000 	.word	0x20000000

080071a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071a4:	f7ff ffcc 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 80071a8:	4601      	mov	r1, r0
 80071aa:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	091b      	lsrs	r3, r3, #4
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	4a04      	ldr	r2, [pc, #16]	; (80071c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071b6:	5cd3      	ldrb	r3, [r2, r3]
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	58024400 	.word	0x58024400
 80071c8:	0800bf40 	.word	0x0800bf40

080071cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80071d0:	f7ff ffb6 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 80071d4:	4601      	mov	r1, r0
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	0a1b      	lsrs	r3, r3, #8
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	4a04      	ldr	r2, [pc, #16]	; (80071f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071e2:	5cd3      	ldrb	r3, [r2, r3]
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	58024400 	.word	0x58024400
 80071f4:	0800bf40 	.word	0x0800bf40

080071f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007200:	2300      	movs	r3, #0
 8007202:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007204:	2300      	movs	r3, #0
 8007206:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d03d      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721c:	d013      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800721e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007222:	d802      	bhi.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d007      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007228:	e01f      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800722a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800722e:	d013      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007230:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007234:	d01c      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007236:	e018      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007238:	4baf      	ldr	r3, [pc, #700]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4aae      	ldr	r2, [pc, #696]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800723e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007244:	e015      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3304      	adds	r3, #4
 800724a:	2102      	movs	r1, #2
 800724c:	4618      	mov	r0, r3
 800724e:	f001 fd33 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007256:	e00c      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3324      	adds	r3, #36	; 0x24
 800725c:	2102      	movs	r1, #2
 800725e:	4618      	mov	r0, r3
 8007260:	f001 fddc 	bl	8008e1c <RCCEx_PLL3_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007268:	e003      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]
      break;
 800726e:	e000      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8007270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007278:	4b9f      	ldr	r3, [pc, #636]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800727a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007284:	499c      	ldr	r1, [pc, #624]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007286:	4313      	orrs	r3, r2
 8007288:	650b      	str	r3, [r1, #80]	; 0x50
 800728a:	e001      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007298:	2b00      	cmp	r3, #0
 800729a:	d03d      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d826      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80072a4:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	080072c1 	.word	0x080072c1
 80072b0:	080072cf 	.word	0x080072cf
 80072b4:	080072e1 	.word	0x080072e1
 80072b8:	080072f9 	.word	0x080072f9
 80072bc:	080072f9 	.word	0x080072f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c0:	4b8d      	ldr	r3, [pc, #564]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	4a8c      	ldr	r2, [pc, #560]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80072c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072cc:	e015      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3304      	adds	r3, #4
 80072d2:	2100      	movs	r1, #0
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 fcef 	bl	8008cb8 <RCCEx_PLL2_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072de:	e00c      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3324      	adds	r3, #36	; 0x24
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fd98 	bl	8008e1c <RCCEx_PLL3_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072f0:	e003      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	75fb      	strb	r3, [r7, #23]
      break;
 80072f6:	e000      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80072f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d109      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007300:	4b7d      	ldr	r3, [pc, #500]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007304:	f023 0207 	bic.w	r2, r3, #7
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730c:	497a      	ldr	r1, [pc, #488]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800730e:	4313      	orrs	r3, r2
 8007310:	650b      	str	r3, [r1, #80]	; 0x50
 8007312:	e001      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007320:	2b00      	cmp	r3, #0
 8007322:	d03e      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	2b80      	cmp	r3, #128	; 0x80
 800732a:	d01c      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800732c:	2b80      	cmp	r3, #128	; 0x80
 800732e:	d804      	bhi.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d00d      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007338:	e01e      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800733a:	2bc0      	cmp	r3, #192	; 0xc0
 800733c:	d01f      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800733e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007342:	d01e      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007344:	e018      	b.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007346:	4b6c      	ldr	r3, [pc, #432]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	4a6b      	ldr	r2, [pc, #428]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800734c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007352:	e017      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3304      	adds	r3, #4
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f001 fcac 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007360:	4603      	mov	r3, r0
 8007362:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007364:	e00e      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3324      	adds	r3, #36	; 0x24
 800736a:	2100      	movs	r1, #0
 800736c:	4618      	mov	r0, r3
 800736e:	f001 fd55 	bl	8008e1c <RCCEx_PLL3_Config>
 8007372:	4603      	mov	r3, r0
 8007374:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007376:	e005      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	75fb      	strb	r3, [r7, #23]
      break;
 800737c:	e002      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800737e:	bf00      	nop
 8007380:	e000      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d109      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800738a:	4b5b      	ldr	r3, [pc, #364]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007396:	4958      	ldr	r1, [pc, #352]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007398:	4313      	orrs	r3, r2
 800739a:	650b      	str	r3, [r1, #80]	; 0x50
 800739c:	e001      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d044      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073b8:	d01f      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x202>
 80073ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073be:	d805      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00a      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80073c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073c8:	d00e      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80073ca:	e01f      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80073cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80073d0:	d01f      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80073d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073d6:	d01e      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80073d8:	e018      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073da:	4b47      	ldr	r3, [pc, #284]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	4a46      	ldr	r2, [pc, #280]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80073e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073e6:	e017      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3304      	adds	r3, #4
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f001 fc62 	bl	8008cb8 <RCCEx_PLL2_Config>
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80073f8:	e00e      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3324      	adds	r3, #36	; 0x24
 80073fe:	2100      	movs	r1, #0
 8007400:	4618      	mov	r0, r3
 8007402:	f001 fd0b 	bl	8008e1c <RCCEx_PLL3_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800740a:	e005      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	75fb      	strb	r3, [r7, #23]
      break;
 8007410:	e002      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007412:	bf00      	nop
 8007414:	e000      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800741e:	4b36      	ldr	r3, [pc, #216]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007422:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800742c:	4932      	ldr	r1, [pc, #200]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800742e:	4313      	orrs	r3, r2
 8007430:	658b      	str	r3, [r1, #88]	; 0x58
 8007432:	e001      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007440:	2b00      	cmp	r3, #0
 8007442:	d044      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800744a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800744e:	d01f      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007454:	d805      	bhi.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800745a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800745e:	d00e      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007460:	e01f      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007462:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007466:	d01f      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007468:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800746c:	d01e      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800746e:	e018      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007470:	4b21      	ldr	r3, [pc, #132]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	4a20      	ldr	r2, [pc, #128]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800747a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800747c:	e017      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3304      	adds	r3, #4
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f001 fc17 	bl	8008cb8 <RCCEx_PLL2_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800748e:	e00e      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3324      	adds	r3, #36	; 0x24
 8007494:	2100      	movs	r1, #0
 8007496:	4618      	mov	r0, r3
 8007498:	f001 fcc0 	bl	8008e1c <RCCEx_PLL3_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074a0:	e005      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	75fb      	strb	r3, [r7, #23]
      break;
 80074a6:	e002      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80074a8:	bf00      	nop
 80074aa:	e000      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80074ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80074b4:	4b10      	ldr	r3, [pc, #64]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80074c2:	490d      	ldr	r1, [pc, #52]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80074c4:	4313      	orrs	r3, r2
 80074c6:	658b      	str	r3, [r1, #88]	; 0x58
 80074c8:	e001      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d035      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d00c      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80074e2:	2b10      	cmp	r3, #16
 80074e4:	d802      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01b      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80074ea:	e017      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d00c      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x312>
 80074f0:	2b30      	cmp	r3, #48	; 0x30
 80074f2:	d018      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80074f4:	e012      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80074f6:	bf00      	nop
 80074f8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074fc:	4baf      	ldr	r3, [pc, #700]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	4aae      	ldr	r2, [pc, #696]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007508:	e00e      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3304      	adds	r3, #4
 800750e:	2102      	movs	r1, #2
 8007510:	4618      	mov	r0, r3
 8007512:	f001 fbd1 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800751a:	e005      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	75fb      	strb	r3, [r7, #23]
      break;
 8007520:	e002      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800752e:	4ba3      	ldr	r3, [pc, #652]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007532:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	49a0      	ldr	r1, [pc, #640]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800753c:	4313      	orrs	r3, r2
 800753e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007540:	e001      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d042      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800755a:	d01f      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800755c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007560:	d805      	bhi.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756a:	d00e      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800756c:	e01f      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800756e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007572:	d01f      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007578:	d01e      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800757a:	e018      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757c:	4b8f      	ldr	r3, [pc, #572]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	4a8e      	ldr	r2, [pc, #568]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007588:	e017      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3304      	adds	r3, #4
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f001 fb91 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800759a:	e00e      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3324      	adds	r3, #36	; 0x24
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 fc3a 	bl	8008e1c <RCCEx_PLL3_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80075ac:	e005      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]
      break;
 80075b2:	e002      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80075b4:	bf00      	nop
 80075b6:	e000      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80075b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d109      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80075c0:	4b7e      	ldr	r3, [pc, #504]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075c4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075cc:	497b      	ldr	r1, [pc, #492]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	650b      	str	r3, [r1, #80]	; 0x50
 80075d2:	e001      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d042      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ec:	d01b      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80075ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075f2:	d805      	bhi.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d022      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fc:	d00a      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80075fe:	e01b      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007604:	d01d      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007606:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800760a:	d01c      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800760c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007610:	d01b      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007612:	e011      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	2101      	movs	r1, #1
 800761a:	4618      	mov	r0, r3
 800761c:	f001 fb4c 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007624:	e012      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3324      	adds	r3, #36	; 0x24
 800762a:	2101      	movs	r1, #1
 800762c:	4618      	mov	r0, r3
 800762e:	f001 fbf5 	bl	8008e1c <RCCEx_PLL3_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007636:	e009      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	75fb      	strb	r3, [r7, #23]
      break;
 800763c:	e006      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800763e:	bf00      	nop
 8007640:	e004      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007642:	bf00      	nop
 8007644:	e002      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007646:	bf00      	nop
 8007648:	e000      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800764a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007652:	4b5a      	ldr	r3, [pc, #360]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007656:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800765e:	4957      	ldr	r1, [pc, #348]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007660:	4313      	orrs	r3, r2
 8007662:	650b      	str	r3, [r1, #80]	; 0x50
 8007664:	e001      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d044      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800767c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007680:	d01b      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007686:	d805      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d022      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800768c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007690:	d00a      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007692:	e01b      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007698:	d01d      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800769a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800769e:	d01c      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80076a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076a4:	d01b      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80076a6:	e011      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	2101      	movs	r1, #1
 80076ae:	4618      	mov	r0, r3
 80076b0:	f001 fb02 	bl	8008cb8 <RCCEx_PLL2_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80076b8:	e012      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3324      	adds	r3, #36	; 0x24
 80076be:	2101      	movs	r1, #1
 80076c0:	4618      	mov	r0, r3
 80076c2:	f001 fbab 	bl	8008e1c <RCCEx_PLL3_Config>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80076ca:	e009      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	75fb      	strb	r3, [r7, #23]
      break;
 80076d0:	e006      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80076d2:	bf00      	nop
 80076d4:	e004      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80076d6:	bf00      	nop
 80076d8:	e002      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80076de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80076e6:	4b35      	ldr	r3, [pc, #212]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076f4:	4931      	ldr	r1, [pc, #196]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	658b      	str	r3, [r1, #88]	; 0x58
 80076fa:	e001      	b.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d02d      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007714:	d005      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800771a:	d009      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d013      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007720:	e00f      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007722:	4b26      	ldr	r3, [pc, #152]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a25      	ldr	r2, [pc, #148]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800772e:	e00c      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	2101      	movs	r1, #1
 8007736:	4618      	mov	r0, r3
 8007738:	f001 fabe 	bl	8008cb8 <RCCEx_PLL2_Config>
 800773c:	4603      	mov	r3, r0
 800773e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007740:	e003      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	75fb      	strb	r3, [r7, #23]
      break;
 8007746:	e000      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007748:	bf00      	nop
    }

    if(ret == HAL_OK)
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007750:	4b1a      	ldr	r3, [pc, #104]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007754:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775c:	4917      	ldr	r1, [pc, #92]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800775e:	4313      	orrs	r3, r2
 8007760:	650b      	str	r3, [r1, #80]	; 0x50
 8007762:	e001      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d035      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007778:	2b03      	cmp	r3, #3
 800777a:	d81b      	bhi.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800777c:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007782:	bf00      	nop
 8007784:	080077c1 	.word	0x080077c1
 8007788:	08007795 	.word	0x08007795
 800778c:	080077a3 	.word	0x080077a3
 8007790:	080077c1 	.word	0x080077c1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007794:	4b09      	ldr	r3, [pc, #36]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	4a08      	ldr	r2, [pc, #32]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800779a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80077a0:	e00f      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	3304      	adds	r3, #4
 80077a6:	2102      	movs	r1, #2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 fa85 	bl	8008cb8 <RCCEx_PLL2_Config>
 80077ae:	4603      	mov	r3, r0
 80077b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80077b2:	e006      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	75fb      	strb	r3, [r7, #23]
      break;
 80077b8:	e003      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80077ba:	bf00      	nop
 80077bc:	58024400 	.word	0x58024400
      break;
 80077c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80077c8:	4bba      	ldr	r3, [pc, #744]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077cc:	f023 0203 	bic.w	r2, r3, #3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	49b7      	ldr	r1, [pc, #732]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077da:	e001      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
 80077de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8086 	beq.w	80078fa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077ee:	4bb2      	ldr	r3, [pc, #712]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4ab1      	ldr	r2, [pc, #708]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80077f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077fa:	f7fa f9cb 	bl	8001b94 <HAL_GetTick>
 80077fe:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007800:	e009      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007802:	f7fa f9c7 	bl	8001b94 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b64      	cmp	r3, #100	; 0x64
 800780e:	d902      	bls.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	75fb      	strb	r3, [r7, #23]
        break;
 8007814:	e005      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007816:	4ba8      	ldr	r3, [pc, #672]	; (8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0ef      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d166      	bne.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007828:	4ba2      	ldr	r3, [pc, #648]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800782a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007832:	4053      	eors	r3, r2
 8007834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007838:	2b00      	cmp	r3, #0
 800783a:	d013      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800783c:	4b9d      	ldr	r3, [pc, #628]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800783e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007844:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007846:	4b9b      	ldr	r3, [pc, #620]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	4a9a      	ldr	r2, [pc, #616]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800784c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007850:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007852:	4b98      	ldr	r3, [pc, #608]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007856:	4a97      	ldr	r2, [pc, #604]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800785c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800785e:	4a95      	ldr	r2, [pc, #596]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800786a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786e:	d115      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007870:	f7fa f990 	bl	8001b94 <HAL_GetTick>
 8007874:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007876:	e00b      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007878:	f7fa f98c 	bl	8001b94 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	f241 3288 	movw	r2, #5000	; 0x1388
 8007886:	4293      	cmp	r3, r2
 8007888:	d902      	bls.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	75fb      	strb	r3, [r7, #23]
            break;
 800788e:	e005      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007890:	4b88      	ldr	r3, [pc, #544]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0ed      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d126      	bne.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078b0:	d10d      	bne.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80078b2:	4b80      	ldr	r3, [pc, #512]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078c0:	0919      	lsrs	r1, r3, #4
 80078c2:	4b7e      	ldr	r3, [pc, #504]	; (8007abc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80078c4:	400b      	ands	r3, r1
 80078c6:	497b      	ldr	r1, [pc, #492]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	610b      	str	r3, [r1, #16]
 80078cc:	e005      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80078ce:	4b79      	ldr	r3, [pc, #484]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	4a78      	ldr	r2, [pc, #480]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80078d8:	6113      	str	r3, [r2, #16]
 80078da:	4b76      	ldr	r3, [pc, #472]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078e8:	4972      	ldr	r1, [pc, #456]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	670b      	str	r3, [r1, #112]	; 0x70
 80078ee:	e004      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	75bb      	strb	r3, [r7, #22]
 80078f4:	e001      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d07d      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790a:	2b28      	cmp	r3, #40	; 0x28
 800790c:	d866      	bhi.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800790e:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	080079e3 	.word	0x080079e3
 8007918:	080079dd 	.word	0x080079dd
 800791c:	080079dd 	.word	0x080079dd
 8007920:	080079dd 	.word	0x080079dd
 8007924:	080079dd 	.word	0x080079dd
 8007928:	080079dd 	.word	0x080079dd
 800792c:	080079dd 	.word	0x080079dd
 8007930:	080079dd 	.word	0x080079dd
 8007934:	080079b9 	.word	0x080079b9
 8007938:	080079dd 	.word	0x080079dd
 800793c:	080079dd 	.word	0x080079dd
 8007940:	080079dd 	.word	0x080079dd
 8007944:	080079dd 	.word	0x080079dd
 8007948:	080079dd 	.word	0x080079dd
 800794c:	080079dd 	.word	0x080079dd
 8007950:	080079dd 	.word	0x080079dd
 8007954:	080079cb 	.word	0x080079cb
 8007958:	080079dd 	.word	0x080079dd
 800795c:	080079dd 	.word	0x080079dd
 8007960:	080079dd 	.word	0x080079dd
 8007964:	080079dd 	.word	0x080079dd
 8007968:	080079dd 	.word	0x080079dd
 800796c:	080079dd 	.word	0x080079dd
 8007970:	080079dd 	.word	0x080079dd
 8007974:	080079e3 	.word	0x080079e3
 8007978:	080079dd 	.word	0x080079dd
 800797c:	080079dd 	.word	0x080079dd
 8007980:	080079dd 	.word	0x080079dd
 8007984:	080079dd 	.word	0x080079dd
 8007988:	080079dd 	.word	0x080079dd
 800798c:	080079dd 	.word	0x080079dd
 8007990:	080079dd 	.word	0x080079dd
 8007994:	080079e3 	.word	0x080079e3
 8007998:	080079dd 	.word	0x080079dd
 800799c:	080079dd 	.word	0x080079dd
 80079a0:	080079dd 	.word	0x080079dd
 80079a4:	080079dd 	.word	0x080079dd
 80079a8:	080079dd 	.word	0x080079dd
 80079ac:	080079dd 	.word	0x080079dd
 80079b0:	080079dd 	.word	0x080079dd
 80079b4:	080079e3 	.word	0x080079e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3304      	adds	r3, #4
 80079bc:	2101      	movs	r1, #1
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 f97a 	bl	8008cb8 <RCCEx_PLL2_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80079c8:	e00c      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3324      	adds	r3, #36	; 0x24
 80079ce:	2101      	movs	r1, #1
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 fa23 	bl	8008e1c <RCCEx_PLL3_Config>
 80079d6:	4603      	mov	r3, r0
 80079d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80079da:	e003      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	75fb      	strb	r3, [r7, #23]
      break;
 80079e0:	e000      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80079e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d109      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079ea:	4b32      	ldr	r3, [pc, #200]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079f6:	492f      	ldr	r1, [pc, #188]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	654b      	str	r3, [r1, #84]	; 0x54
 80079fc:	e001      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d037      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a12:	2b05      	cmp	r3, #5
 8007a14:	d820      	bhi.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a5f 	.word	0x08007a5f
 8007a20:	08007a35 	.word	0x08007a35
 8007a24:	08007a47 	.word	0x08007a47
 8007a28:	08007a5f 	.word	0x08007a5f
 8007a2c:	08007a5f 	.word	0x08007a5f
 8007a30:	08007a5f 	.word	0x08007a5f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3304      	adds	r3, #4
 8007a38:	2101      	movs	r1, #1
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 f93c 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007a40:	4603      	mov	r3, r0
 8007a42:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a44:	e00c      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3324      	adds	r3, #36	; 0x24
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 f9e5 	bl	8008e1c <RCCEx_PLL3_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a56:	e003      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5c:	e000      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a66:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6a:	f023 0207 	bic.w	r2, r3, #7
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a72:	4910      	ldr	r1, [pc, #64]	; (8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	654b      	str	r3, [r1, #84]	; 0x54
 8007a78:	e001      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0304 	and.w	r3, r3, #4
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d040      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a90:	2b05      	cmp	r3, #5
 8007a92:	d827      	bhi.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8007a94:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007aeb 	.word	0x08007aeb
 8007aa0:	08007ac1 	.word	0x08007ac1
 8007aa4:	08007ad3 	.word	0x08007ad3
 8007aa8:	08007aeb 	.word	0x08007aeb
 8007aac:	08007aeb 	.word	0x08007aeb
 8007ab0:	08007aeb 	.word	0x08007aeb
 8007ab4:	58024400 	.word	0x58024400
 8007ab8:	58024800 	.word	0x58024800
 8007abc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 f8f6 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ad0:	e00c      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3324      	adds	r3, #36	; 0x24
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 f99f 	bl	8008e1c <RCCEx_PLL3_Config>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ae2:	e003      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae8:	e000      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007af2:	4bb2      	ldr	r3, [pc, #712]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af6:	f023 0207 	bic.w	r2, r3, #7
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b00:	49ae      	ldr	r1, [pc, #696]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	658b      	str	r3, [r1, #88]	; 0x58
 8007b06:	e001      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d044      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b22:	d01b      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8007b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b28:	d805      	bhi.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d022      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b32:	d00a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007b34:	e01b      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b3a:	d01d      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b40:	d01c      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b46:	d01b      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007b48:	e011      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	2100      	movs	r1, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 f8b1 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b5a:	e012      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	2102      	movs	r1, #2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 f95a 	bl	8008e1c <RCCEx_PLL3_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b6c:	e009      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]
      break;
 8007b72:	e006      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007b74:	bf00      	nop
 8007b76:	e004      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007b78:	bf00      	nop
 8007b7a:	e002      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007b7c:	bf00      	nop
 8007b7e:	e000      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10a      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b88:	4b8c      	ldr	r3, [pc, #560]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b96:	4989      	ldr	r1, [pc, #548]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	654b      	str	r3, [r1, #84]	; 0x54
 8007b9c:	e001      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d044      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bb8:	d01b      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bbe:	d805      	bhi.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d022      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc8:	d00a      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007bca:	e01b      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd0:	d01d      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007bd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007bd6:	d01c      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bdc:	d01b      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007bde:	e011      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3304      	adds	r3, #4
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 f866 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007bf0:	e012      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3324      	adds	r3, #36	; 0x24
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f90f 	bl	8008e1c <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c02:	e009      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]
      break;
 8007c08:	e006      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e004      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c0e:	bf00      	nop
 8007c10:	e002      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c1e:	4b67      	ldr	r3, [pc, #412]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c2c:	4963      	ldr	r1, [pc, #396]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	658b      	str	r3, [r1, #88]	; 0x58
 8007c32:	e001      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d044      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c4e:	d01b      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c54:	d805      	bhi.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d022      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5e:	d00a      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007c60:	e01b      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c66:	d01d      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007c68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c6c:	d01c      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007c6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c72:	d01b      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007c74:	e011      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f001 f81b 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c86:	e012      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3324      	adds	r3, #36	; 0x24
 8007c8c:	2102      	movs	r1, #2
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 f8c4 	bl	8008e1c <RCCEx_PLL3_Config>
 8007c94:	4603      	mov	r3, r0
 8007c96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c98:	e009      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9e:	e006      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ca0:	bf00      	nop
 8007ca2:	e004      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ca4:	bf00      	nop
 8007ca6:	e002      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007ca8:	bf00      	nop
 8007caa:	e000      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007cb4:	4b41      	ldr	r3, [pc, #260]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cc2:	493e      	ldr	r1, [pc, #248]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	658b      	str	r3, [r1, #88]	; 0x58
 8007cc8:	e001      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01a      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce4:	d10a      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3324      	adds	r3, #36	; 0x24
 8007cea:	2102      	movs	r1, #2
 8007cec:	4618      	mov	r0, r3
 8007cee:	f001 f895 	bl	8008e1c <RCCEx_PLL3_Config>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007cfc:	4b2f      	ldr	r3, [pc, #188]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d0a:	492c      	ldr	r1, [pc, #176]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0310 	and.w	r3, r3, #16
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d01a      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d26:	d10a      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3324      	adds	r3, #36	; 0x24
 8007d2c:	2102      	movs	r1, #2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 f874 	bl	8008e1c <RCCEx_PLL3_Config>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d3e:	4b1f      	ldr	r3, [pc, #124]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d4c:	491b      	ldr	r1, [pc, #108]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d032      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d68:	d00d      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d6e:	d016      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d111      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3304      	adds	r3, #4
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 ff9c 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d84:	e00c      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3324      	adds	r3, #36	; 0x24
 8007d8a:	2102      	movs	r1, #2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 f845 	bl	8008e1c <RCCEx_PLL3_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d9c:	e000      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10c      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007da6:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007daa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007db4:	4901      	ldr	r1, [pc, #4]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	658b      	str	r3, [r1, #88]	; 0x58
 8007dba:	e003      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d02f      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dda:	d00c      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007ddc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007de0:	d015      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de6:	d10f      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de8:	4b79      	ldr	r3, [pc, #484]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	4a78      	ldr	r2, [pc, #480]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007df4:	e00c      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3324      	adds	r3, #36	; 0x24
 8007dfa:	2101      	movs	r1, #1
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f001 f80d 	bl	8008e1c <RCCEx_PLL3_Config>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e06:	e003      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0c:	e000      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e16:	4b6e      	ldr	r3, [pc, #440]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e24:	496a      	ldr	r1, [pc, #424]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	654b      	str	r3, [r1, #84]	; 0x54
 8007e2a:	e001      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d029      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d003      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e48:	d007      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007e4a:	e00f      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e4c:	4b60      	ldr	r3, [pc, #384]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	4a5f      	ldr	r2, [pc, #380]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e58:	e00b      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	2102      	movs	r1, #2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 ff29 	bl	8008cb8 <RCCEx_PLL2_Config>
 8007e66:	4603      	mov	r3, r0
 8007e68:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e6a:	e002      	b.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d109      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e78:	4b55      	ldr	r3, [pc, #340]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e84:	4952      	ldr	r1, [pc, #328]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e8a:	e001      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
 8007e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3324      	adds	r3, #36	; 0x24
 8007ea0:	2102      	movs	r1, #2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 ffba 	bl	8008e1c <RCCEx_PLL3_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d02f      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec6:	d00c      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ecc:	d802      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d011      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007ed2:	e00d      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed8:	d00f      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ede:	d00e      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007ee0:	e006      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee2:	4b3b      	ldr	r3, [pc, #236]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee6:	4a3a      	ldr	r2, [pc, #232]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007eee:	e007      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef4:	e004      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007ef6:	bf00      	nop
 8007ef8:	e002      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007efa:	bf00      	nop
 8007efc:	e000      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f06:	4b32      	ldr	r3, [pc, #200]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f12:	492f      	ldr	r1, [pc, #188]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	654b      	str	r3, [r1, #84]	; 0x54
 8007f18:	e001      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d008      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f2a:	4b29      	ldr	r3, [pc, #164]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f36:	4926      	ldr	r1, [pc, #152]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d009      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f48:	4b21      	ldr	r3, [pc, #132]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f56:	491e      	ldr	r1, [pc, #120]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d008      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f68:	4b19      	ldr	r3, [pc, #100]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f74:	4916      	ldr	r1, [pc, #88]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00d      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	4a11      	ldr	r2, [pc, #68]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f90:	6113      	str	r3, [r2, #16]
 8007f92:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f94:	691a      	ldr	r2, [r3, #16]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f9c:	490c      	ldr	r1, [pc, #48]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	da08      	bge.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007faa:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb6:	4906      	ldr	r1, [pc, #24]	; (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007fbc:	7dbb      	ldrb	r3, [r7, #22]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e000      	b.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	58024400 	.word	0x58024400

08007fd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b090      	sub	sp, #64	; 0x40
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe2:	d150      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007fe4:	4ba1      	ldr	r3, [pc, #644]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d844      	bhi.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	08008011 	.word	0x08008011
 8008000:	08008021 	.word	0x08008021
 8008004:	08008031 	.word	0x08008031
 8008008:	08008079 	.word	0x08008079
 800800c:	08008041 	.word	0x08008041
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fd03 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800801e:	e241      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008020:	f107 0318 	add.w	r3, r7, #24
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fa63 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800802e:	e239      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008030:	f107 030c 	add.w	r3, r7, #12
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fba7 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800803e:	e231      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008040:	4b8a      	ldr	r3, [pc, #552]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008048:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008050:	4b87      	ldr	r3, [pc, #540]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008052:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008054:	e226      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008058:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800805c:	d102      	bne.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800805e:	4b85      	ldr	r3, [pc, #532]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008060:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008062:	e21f      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800806a:	d102      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800806c:	4b82      	ldr	r3, [pc, #520]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008070:	e218      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008076:	e215      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008078:	4b80      	ldr	r3, [pc, #512]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800807c:	e212      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008082:	bf00      	nop
 8008084:	e20e      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800808c:	d14f      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800808e:	4b77      	ldr	r3, [pc, #476]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008092:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008096:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	2b80      	cmp	r3, #128	; 0x80
 800809c:	d01c      	beq.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800809e:	2b80      	cmp	r3, #128	; 0x80
 80080a0:	d804      	bhi.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d008      	beq.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d00e      	beq.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80080aa:	e03c      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80080ac:	2bc0      	cmp	r3, #192	; 0xc0
 80080ae:	d037      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80080b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b4:	d018      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80080b6:	e036      	b.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fcaf 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c6:	e1ed      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c8:	f107 0318 	add.w	r3, r7, #24
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fa0f 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d6:	e1e5      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fb53 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080e6:	e1dd      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080e8:	4b60      	ldr	r3, [pc, #384]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80080f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d102      	bne.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80080f8:	4b5d      	ldr	r3, [pc, #372]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80080fc:	e1d2      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008104:	d102      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008106:	4b5b      	ldr	r3, [pc, #364]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800810a:	e1cb      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800810c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008112:	d102      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008114:	4b58      	ldr	r3, [pc, #352]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008118:	e1c4      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800811e:	e1c1      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008120:	4b56      	ldr	r3, [pc, #344]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008124:	e1be      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800812a:	bf00      	nop
 800812c:	e1ba      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008134:	d153      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008136:	4b4d      	ldr	r3, [pc, #308]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800813e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008146:	d01f      	beq.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008148:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800814c:	d805      	bhi.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008156:	d00f      	beq.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008158:	e03d      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800815a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800815e:	d037      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008160:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008164:	d018      	beq.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008166:	e036      	b.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fc57 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008176:	e195      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008178:	f107 0318 	add.w	r3, r7, #24
 800817c:	4618      	mov	r0, r3
 800817e:	f000 f9b7 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008186:	e18d      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008188:	f107 030c 	add.w	r3, r7, #12
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fafb 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008196:	e185      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008198:	4b34      	ldr	r3, [pc, #208]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800819a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80081a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d102      	bne.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80081a8:	4b31      	ldr	r3, [pc, #196]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80081ac:	e17a      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80081ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081b4:	d102      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80081b6:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ba:	e173      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80081bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081c2:	d102      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80081c4:	4b2c      	ldr	r3, [pc, #176]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081c8:	e16c      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ce:	e169      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081d0:	4b2a      	ldr	r3, [pc, #168]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80081d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d4:	e166      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081da:	bf00      	nop
 80081dc:	e162      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e4:	d15d      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80081e6:	4b21      	ldr	r3, [pc, #132]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80081e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80081ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081f6:	d01f      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80081f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081fc:	d805      	bhi.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008202:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008206:	d00f      	beq.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008208:	e047      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800820a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800820e:	d041      	beq.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8008210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008214:	d018      	beq.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008216:	e040      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fbff 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008226:	e13d      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008228:	f107 0318 	add.w	r3, r7, #24
 800822c:	4618      	mov	r0, r3
 800822e:	f000 f95f 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008236:	e135      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	4618      	mov	r0, r3
 800823e:	f000 faa3 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008246:	e12d      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008248:	4b08      	ldr	r3, [pc, #32]	; (800826c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800824a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800824c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008250:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	2b00      	cmp	r3, #0
 8008256:	d102      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008258:	4b05      	ldr	r3, [pc, #20]	; (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800825c:	e122      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800825e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008264:	d10c      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008266:	4b03      	ldr	r3, [pc, #12]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800826a:	e11b      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800826c:	58024400 	.word	0x58024400
 8008270:	03d09000 	.word	0x03d09000
 8008274:	003d0900 	.word	0x003d0900
 8008278:	007a1200 	.word	0x007a1200
 800827c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008286:	d102      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008288:	4b89      	ldr	r3, [pc, #548]	; (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800828c:	e10a      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008292:	e107      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008294:	4b87      	ldr	r3, [pc, #540]	; (80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008298:	e104      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800829e:	bf00      	nop
 80082a0:	e100      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082a8:	d153      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80082aa:	4b83      	ldr	r3, [pc, #524]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80082ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80082b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ba:	d01f      	beq.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80082bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c0:	d805      	bhi.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80082c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ca:	d00f      	beq.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80082cc:	e03d      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80082ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082d2:	d037      	beq.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80082d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082d8:	d018      	beq.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80082da:	e036      	b.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fb9d 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082ea:	e0db      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ec:	f107 0318 	add.w	r3, r7, #24
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f8fd 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082fa:	e0d3      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082fc:	f107 030c 	add.w	r3, r7, #12
 8008300:	4618      	mov	r0, r3
 8008302:	f000 fa41 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800830a:	e0cb      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800830c:	4b6a      	ldr	r3, [pc, #424]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800830e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008314:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800831c:	4b67      	ldr	r3, [pc, #412]	; (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008320:	e0c0      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008324:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008328:	d102      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800832a:	4b65      	ldr	r3, [pc, #404]	; (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800832c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800832e:	e0b9      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008336:	d102      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008338:	4b5d      	ldr	r3, [pc, #372]	; (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800833c:	e0b2      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008342:	e0af      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008344:	4b5b      	ldr	r3, [pc, #364]	; (80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008348:	e0ac      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800834a:	2300      	movs	r3, #0
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800834e:	bf00      	nop
 8008350:	e0a8      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008358:	d13d      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800835a:	4b57      	ldr	r3, [pc, #348]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008362:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836a:	d00c      	beq.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800836c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008370:	d011      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d12b      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008376:	f107 0318 	add.w	r3, r7, #24
 800837a:	4618      	mov	r0, r3
 800837c:	f000 f8b8 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008384:	e08e      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008386:	f107 030c 	add.w	r3, r7, #12
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f9fc 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008394:	e086      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008396:	4b48      	ldr	r3, [pc, #288]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800839e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80083a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d102      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80083a6:	4b45      	ldr	r3, [pc, #276]	; (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80083a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80083aa:	e07b      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80083ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083b2:	d102      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80083b4:	4b42      	ldr	r3, [pc, #264]	; (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083b8:	e074      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083c0:	d102      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80083c2:	4b3b      	ldr	r3, [pc, #236]	; (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083c6:	e06d      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083cc:	e06a      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d2:	bf00      	nop
 80083d4:	e066      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083dc:	d11f      	bne.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80083de:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80083e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80083ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f2:	d008      	beq.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80083f4:	e00f      	b.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 fb10 	bl	8008a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008404:	e04e      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008406:	f107 0318 	add.w	r3, r7, #24
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f870 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008414:	e046      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800841a:	bf00      	nop
 800841c:	e042      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008424:	d13c      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800842e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008436:	d01e      	beq.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800843c:	d805      	bhi.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00d      	beq.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008446:	d00e      	beq.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008448:	e026      	b.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800844a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844e:	d01d      	beq.n	800848c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008454:	d01d      	beq.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800845a:	d014      	beq.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800845c:	e01c      	b.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800845e:	f000 f831 	bl	80084c4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008462:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008464:	e01e      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008466:	f107 0318 	add.w	r3, r7, #24
 800846a:	4618      	mov	r0, r3
 800846c:	f000 f840 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008474:	e016      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f984 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008484:	e00e      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008486:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008488:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800848a:	e00b      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008490:	e008      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008492:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008496:	e005      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800849c:	bf00      	nop
 800849e:	e001      	b.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80084a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3740      	adds	r7, #64	; 0x40
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	007a1200 	.word	0x007a1200
 80084b4:	00bb8000 	.word	0x00bb8000
 80084b8:	58024400 	.word	0x58024400
 80084bc:	03d09000 	.word	0x03d09000
 80084c0:	003d0900 	.word	0x003d0900

080084c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80084c8:	f7fe fe3a 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 80084cc:	4601      	mov	r1, r0
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	091b      	lsrs	r3, r3, #4
 80084d4:	f003 0307 	and.w	r3, r3, #7
 80084d8:	4a04      	ldr	r2, [pc, #16]	; (80084ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80084da:	5cd3      	ldrb	r3, [r2, r3]
 80084dc:	f003 031f 	and.w	r3, r3, #31
 80084e0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	58024400 	.word	0x58024400
 80084ec:	0800bf40 	.word	0x0800bf40

080084f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b089      	sub	sp, #36	; 0x24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084f8:	4b9d      	ldr	r3, [pc, #628]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008502:	4b9b      	ldr	r3, [pc, #620]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	0b1b      	lsrs	r3, r3, #12
 8008508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800850c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800850e:	4b98      	ldr	r3, [pc, #608]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800851a:	4b95      	ldr	r3, [pc, #596]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800851c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851e:	08db      	lsrs	r3, r3, #3
 8008520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	fb02 f303 	mul.w	r3, r2, r3
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008532:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 810a 	beq.w	8008752 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d05a      	beq.n	80085fa <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008544:	2b01      	cmp	r3, #1
 8008546:	d302      	bcc.n	800854e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008548:	2b02      	cmp	r3, #2
 800854a:	d078      	beq.n	800863e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800854c:	e099      	b.n	8008682 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800854e:	4b88      	ldr	r3, [pc, #544]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d02d      	beq.n	80085b6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800855a:	4b85      	ldr	r3, [pc, #532]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	08db      	lsrs	r3, r3, #3
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	4a83      	ldr	r2, [pc, #524]	; (8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008566:	fa22 f303 	lsr.w	r3, r2, r3
 800856a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	ee07 3a90 	vmov	s15, r3
 800857c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008584:	4b7a      	ldr	r3, [pc, #488]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008594:	ed97 6a03 	vldr	s12, [r7, #12]
 8008598:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800859c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085b4:	e087      	b.n	80086c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	ee07 3a90 	vmov	s15, r3
 80085bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800877c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80085c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c8:	4b69      	ldr	r3, [pc, #420]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d0:	ee07 3a90 	vmov	s15, r3
 80085d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80085e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085f8:	e065      	b.n	80086c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	ee07 3a90 	vmov	s15, r3
 8008600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008604:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860c:	4b58      	ldr	r3, [pc, #352]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008620:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008638:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800863c:	e043      	b.n	80086c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008648:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800864c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008650:	4b47      	ldr	r3, [pc, #284]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008658:	ee07 3a90 	vmov	s15, r3
 800865c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008660:	ed97 6a03 	vldr	s12, [r7, #12]
 8008664:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008668:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008670:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008674:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008680:	e021      	b.n	80086c6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	ee07 3a90 	vmov	s15, r3
 8008688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008690:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008694:	4b36      	ldr	r3, [pc, #216]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008778 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80086ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086c4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80086c6:	4b2a      	ldr	r3, [pc, #168]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	0a5b      	lsrs	r3, r3, #9
 80086cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d0:	ee07 3a90 	vmov	s15, r3
 80086d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ec:	ee17 2a90 	vmov	r2, s15
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80086f4:	4b1e      	ldr	r3, [pc, #120]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	0c1b      	lsrs	r3, r3, #16
 80086fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800870a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800870e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800871a:	ee17 2a90 	vmov	r2, s15
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008722:	4b13      	ldr	r3, [pc, #76]	; (8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008726:	0e1b      	lsrs	r3, r3, #24
 8008728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872c:	ee07 3a90 	vmov	s15, r3
 8008730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008738:	ee37 7a87 	vadd.f32	s14, s15, s14
 800873c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008740:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008748:	ee17 2a90 	vmov	r2, s15
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008750:	e008      	b.n	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	609a      	str	r2, [r3, #8]
}
 8008764:	bf00      	nop
 8008766:	3724      	adds	r7, #36	; 0x24
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	58024400 	.word	0x58024400
 8008774:	03d09000 	.word	0x03d09000
 8008778:	46000000 	.word	0x46000000
 800877c:	4c742400 	.word	0x4c742400
 8008780:	4a742400 	.word	0x4a742400
 8008784:	4af42400 	.word	0x4af42400

08008788 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008788:	b480      	push	{r7}
 800878a:	b089      	sub	sp, #36	; 0x24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008790:	4b9d      	ldr	r3, [pc, #628]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800879a:	4b9b      	ldr	r3, [pc, #620]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	0d1b      	lsrs	r3, r3, #20
 80087a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80087a6:	4b98      	ldr	r3, [pc, #608]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087aa:	0a1b      	lsrs	r3, r3, #8
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80087b2:	4b95      	ldr	r3, [pc, #596]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b6:	08db      	lsrs	r3, r3, #3
 80087b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	fb02 f303 	mul.w	r3, r2, r3
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 810a 	beq.w	80089ea <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d05a      	beq.n	8008892 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d302      	bcc.n	80087e6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d078      	beq.n	80088d6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80087e4:	e099      	b.n	800891a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e6:	4b88      	ldr	r3, [pc, #544]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d02d      	beq.n	800884e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087f2:	4b85      	ldr	r3, [pc, #532]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	08db      	lsrs	r3, r3, #3
 80087f8:	f003 0303 	and.w	r3, r3, #3
 80087fc:	4a83      	ldr	r2, [pc, #524]	; (8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80087fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008802:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	ee07 3a90 	vmov	s15, r3
 800880a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	ee07 3a90 	vmov	s15, r3
 8008814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881c:	4b7a      	ldr	r3, [pc, #488]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008830:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008848:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800884c:	e087      	b.n	800895e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	ee07 3a90 	vmov	s15, r3
 8008854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008858:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a14 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800885c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008860:	4b69      	ldr	r3, [pc, #420]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008868:	ee07 3a90 	vmov	s15, r3
 800886c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008870:	ed97 6a03 	vldr	s12, [r7, #12]
 8008874:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008878:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008890:	e065      	b.n	800895e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	ee07 3a90 	vmov	s15, r3
 8008898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80088a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a4:	4b58      	ldr	r3, [pc, #352]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ac:	ee07 3a90 	vmov	s15, r3
 80088b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80088bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088d4:	e043      	b.n	800895e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	ee07 3a90 	vmov	s15, r3
 80088dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80088e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e8:	4b47      	ldr	r3, [pc, #284]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f0:	ee07 3a90 	vmov	s15, r3
 80088f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008900:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008904:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008908:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800890c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008914:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008918:	e021      	b.n	800895e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008924:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892c:	4b36      	ldr	r3, [pc, #216]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800892e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008934:	ee07 3a90 	vmov	s15, r3
 8008938:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008940:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008944:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008948:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008958:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800895c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800895e:	4b2a      	ldr	r3, [pc, #168]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	0a5b      	lsrs	r3, r3, #9
 8008964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008968:	ee07 3a90 	vmov	s15, r3
 800896c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008974:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008978:	edd7 6a07 	vldr	s13, [r7, #28]
 800897c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008984:	ee17 2a90 	vmov	r2, s15
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800898c:	4b1e      	ldr	r3, [pc, #120]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800898e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008990:	0c1b      	lsrs	r3, r3, #16
 8008992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b2:	ee17 2a90 	vmov	r2, s15
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80089ba:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	0e1b      	lsrs	r3, r3, #24
 80089c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c4:	ee07 3a90 	vmov	s15, r3
 80089c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089e0:	ee17 2a90 	vmov	r2, s15
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80089e8:	e008      	b.n	80089fc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	609a      	str	r2, [r3, #8]
}
 80089fc:	bf00      	nop
 80089fe:	3724      	adds	r7, #36	; 0x24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	03d09000 	.word	0x03d09000
 8008a10:	46000000 	.word	0x46000000
 8008a14:	4c742400 	.word	0x4c742400
 8008a18:	4a742400 	.word	0x4a742400
 8008a1c:	4af42400 	.word	0x4af42400

08008a20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b089      	sub	sp, #36	; 0x24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a28:	4b9d      	ldr	r3, [pc, #628]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008a32:	4b9b      	ldr	r3, [pc, #620]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a36:	091b      	lsrs	r3, r3, #4
 8008a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008a3e:	4b98      	ldr	r3, [pc, #608]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008a48:	4b95      	ldr	r3, [pc, #596]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4c:	08db      	lsrs	r3, r3, #3
 8008a4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	fb02 f303 	mul.w	r3, r2, r3
 8008a58:	ee07 3a90 	vmov	s15, r3
 8008a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 810a 	beq.w	8008c80 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d05a      	beq.n	8008b28 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d302      	bcc.n	8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d078      	beq.n	8008b6c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008a7a:	e099      	b.n	8008bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a7c:	4b88      	ldr	r3, [pc, #544]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d02d      	beq.n	8008ae4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a88:	4b85      	ldr	r3, [pc, #532]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	08db      	lsrs	r3, r3, #3
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	4a84      	ldr	r2, [pc, #528]	; (8008ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
 8008a98:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	ee07 3a90 	vmov	s15, r3
 8008aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab2:	4b7b      	ldr	r3, [pc, #492]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ac6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ade:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008ae2:	e087      	b.n	8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8008af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af6:	4b6a      	ldr	r3, [pc, #424]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b26:	e065      	b.n	8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b3a:	4b59      	ldr	r3, [pc, #356]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b6a:	e043      	b.n	8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b7e:	4b48      	ldr	r3, [pc, #288]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bae:	e021      	b.n	8008bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bc2:	4b37      	ldr	r3, [pc, #220]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bf2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008bf4:	4b2a      	ldr	r3, [pc, #168]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf8:	0a5b      	lsrs	r3, r3, #9
 8008bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bfe:	ee07 3a90 	vmov	s15, r3
 8008c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c1a:	ee17 2a90 	vmov	r2, s15
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008c22:	4b1f      	ldr	r3, [pc, #124]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c26:	0c1b      	lsrs	r3, r3, #16
 8008c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c2c:	ee07 3a90 	vmov	s15, r3
 8008c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c48:	ee17 2a90 	vmov	r2, s15
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008c50:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	0e1b      	lsrs	r3, r3, #24
 8008c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c5a:	ee07 3a90 	vmov	s15, r3
 8008c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c76:	ee17 2a90 	vmov	r2, s15
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008c7e:	e008      	b.n	8008c92 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	609a      	str	r2, [r3, #8]
}
 8008c92:	bf00      	nop
 8008c94:	3724      	adds	r7, #36	; 0x24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	58024400 	.word	0x58024400
 8008ca4:	03d09000 	.word	0x03d09000
 8008ca8:	46000000 	.word	0x46000000
 8008cac:	4c742400 	.word	0x4c742400
 8008cb0:	4a742400 	.word	0x4a742400
 8008cb4:	4af42400 	.word	0x4af42400

08008cb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cc6:	4b53      	ldr	r3, [pc, #332]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cca:	f003 0303 	and.w	r3, r3, #3
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d101      	bne.n	8008cd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e099      	b.n	8008e0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008cd6:	4b4f      	ldr	r3, [pc, #316]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a4e      	ldr	r2, [pc, #312]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008cdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ce2:	f7f8 ff57 	bl	8001b94 <HAL_GetTick>
 8008ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ce8:	e008      	b.n	8008cfc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008cea:	f7f8 ff53 	bl	8001b94 <HAL_GetTick>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	1ad3      	subs	r3, r2, r3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d901      	bls.n	8008cfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e086      	b.n	8008e0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cfc:	4b45      	ldr	r3, [pc, #276]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1f0      	bne.n	8008cea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d08:	4b42      	ldr	r3, [pc, #264]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	031b      	lsls	r3, r3, #12
 8008d16:	493f      	ldr	r1, [pc, #252]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	628b      	str	r3, [r1, #40]	; 0x28
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	025b      	lsls	r3, r3, #9
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	431a      	orrs	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	041b      	lsls	r3, r3, #16
 8008d3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	061b      	lsls	r3, r3, #24
 8008d48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d4c:	4931      	ldr	r1, [pc, #196]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d52:	4b30      	ldr	r3, [pc, #192]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	492d      	ldr	r1, [pc, #180]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d64:	4b2b      	ldr	r3, [pc, #172]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	f023 0220 	bic.w	r2, r3, #32
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	699b      	ldr	r3, [r3, #24]
 8008d70:	4928      	ldr	r1, [pc, #160]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008d76:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	4a26      	ldr	r2, [pc, #152]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d7c:	f023 0310 	bic.w	r3, r3, #16
 8008d80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d82:	4b24      	ldr	r3, [pc, #144]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d86:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <RCCEx_PLL2_Config+0x160>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	69d2      	ldr	r2, [r2, #28]
 8008d8e:	00d2      	lsls	r2, r2, #3
 8008d90:	4920      	ldr	r1, [pc, #128]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d96:	4b1f      	ldr	r3, [pc, #124]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9a:	4a1e      	ldr	r2, [pc, #120]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008d9c:	f043 0310 	orr.w	r3, r3, #16
 8008da0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d106      	bne.n	8008db6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008da8:	4b1a      	ldr	r3, [pc, #104]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	4a19      	ldr	r2, [pc, #100]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008dae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008db2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008db4:	e00f      	b.n	8008dd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d106      	bne.n	8008dca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008dbc:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	4a14      	ldr	r2, [pc, #80]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008dc8:	e005      	b.n	8008dd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	4a11      	ldr	r2, [pc, #68]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008dd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008dd6:	4b0f      	ldr	r3, [pc, #60]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a0e      	ldr	r2, [pc, #56]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008ddc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008de2:	f7f8 fed7 	bl	8001b94 <HAL_GetTick>
 8008de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008de8:	e008      	b.n	8008dfc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008dea:	f7f8 fed3 	bl	8001b94 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d901      	bls.n	8008dfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e006      	b.n	8008e0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dfc:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0f0      	beq.n	8008dea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	58024400 	.word	0x58024400
 8008e18:	ffff0007 	.word	0xffff0007

08008e1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e2a:	4b53      	ldr	r3, [pc, #332]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d101      	bne.n	8008e3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e099      	b.n	8008f6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e3a:	4b4f      	ldr	r3, [pc, #316]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a4e      	ldr	r2, [pc, #312]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e46:	f7f8 fea5 	bl	8001b94 <HAL_GetTick>
 8008e4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e4c:	e008      	b.n	8008e60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e4e:	f7f8 fea1 	bl	8001b94 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d901      	bls.n	8008e60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e086      	b.n	8008f6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e60:	4b45      	ldr	r3, [pc, #276]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1f0      	bne.n	8008e4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e6c:	4b42      	ldr	r3, [pc, #264]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	051b      	lsls	r3, r3, #20
 8008e7a:	493f      	ldr	r1, [pc, #252]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	628b      	str	r3, [r1, #40]	; 0x28
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	025b      	lsls	r3, r3, #9
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	431a      	orrs	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	041b      	lsls	r3, r3, #16
 8008e9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	061b      	lsls	r3, r3, #24
 8008eac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008eb0:	4931      	ldr	r1, [pc, #196]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008eb6:	4b30      	ldr	r3, [pc, #192]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	492d      	ldr	r1, [pc, #180]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ec8:	4b2b      	ldr	r3, [pc, #172]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	4928      	ldr	r1, [pc, #160]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008eda:	4b27      	ldr	r3, [pc, #156]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ede:	4a26      	ldr	r2, [pc, #152]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ee6:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eea:	4b24      	ldr	r3, [pc, #144]	; (8008f7c <RCCEx_PLL3_Config+0x160>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	69d2      	ldr	r2, [r2, #28]
 8008ef2:	00d2      	lsls	r2, r2, #3
 8008ef4:	4920      	ldr	r1, [pc, #128]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008efa:	4b1f      	ldr	r3, [pc, #124]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efe:	4a1e      	ldr	r2, [pc, #120]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d106      	bne.n	8008f1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f0c:	4b1a      	ldr	r3, [pc, #104]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	4a19      	ldr	r2, [pc, #100]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f18:	e00f      	b.n	8008f3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d106      	bne.n	8008f2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f20:	4b15      	ldr	r3, [pc, #84]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f24:	4a14      	ldr	r2, [pc, #80]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f2c:	e005      	b.n	8008f3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f2e:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	4a11      	ldr	r2, [pc, #68]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f3a:	4b0f      	ldr	r3, [pc, #60]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a0e      	ldr	r2, [pc, #56]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f46:	f7f8 fe25 	bl	8001b94 <HAL_GetTick>
 8008f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f4c:	e008      	b.n	8008f60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f4e:	f7f8 fe21 	bl	8001b94 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d901      	bls.n	8008f60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e006      	b.n	8008f6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f60:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <RCCEx_PLL3_Config+0x15c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0f0      	beq.n	8008f4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	58024400 	.word	0x58024400
 8008f7c:	ffff0007 	.word	0xffff0007

08008f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e049      	b.n	8009026 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7f8 fc32 	bl	8001810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f000 fa86 	bl	80094d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b01      	cmp	r3, #1
 8009042:	d001      	beq.n	8009048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e019      	b.n	800907c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2202      	movs	r2, #2
 800904c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <HAL_TIM_Base_Start+0x58>)
 8009058:	4013      	ands	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b06      	cmp	r3, #6
 8009060:	d00b      	beq.n	800907a <HAL_TIM_Base_Start+0x4a>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009068:	d007      	beq.n	800907a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 0201 	orr.w	r2, r2, #1
 8009078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	00010007 	.word	0x00010007

0800908c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d122      	bne.n	80090e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f003 0302 	and.w	r3, r3, #2
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d11b      	bne.n	80090e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f06f 0202 	mvn.w	r2, #2
 80090b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f9e0 	bl	8009494 <HAL_TIM_IC_CaptureCallback>
 80090d4:	e005      	b.n	80090e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f9d2 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f9e3 	bl	80094a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d122      	bne.n	800913c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b04      	cmp	r3, #4
 8009102:	d11b      	bne.n	800913c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0204 	mvn.w	r2, #4
 800910c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f9b6 	bl	8009494 <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f9a8 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f9b9 	bl	80094a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	f003 0308 	and.w	r3, r3, #8
 8009146:	2b08      	cmp	r3, #8
 8009148:	d122      	bne.n	8009190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b08      	cmp	r3, #8
 8009156:	d11b      	bne.n	8009190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f06f 0208 	mvn.w	r2, #8
 8009160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2204      	movs	r2, #4
 8009166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f98c 	bl	8009494 <HAL_TIM_IC_CaptureCallback>
 800917c:	e005      	b.n	800918a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f97e 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f98f 	bl	80094a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	f003 0310 	and.w	r3, r3, #16
 800919a:	2b10      	cmp	r3, #16
 800919c:	d122      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	d11b      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f06f 0210 	mvn.w	r2, #16
 80091b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2208      	movs	r2, #8
 80091ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f962 	bl	8009494 <HAL_TIM_IC_CaptureCallback>
 80091d0:	e005      	b.n	80091de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f954 	bl	8009480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f965 	bl	80094a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d10e      	bne.n	8009210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d107      	bne.n	8009210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0201 	mvn.w	r2, #1
 8009208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f92e 	bl	800946c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921a:	2b80      	cmp	r3, #128	; 0x80
 800921c:	d10e      	bne.n	800923c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009228:	2b80      	cmp	r3, #128	; 0x80
 800922a:	d107      	bne.n	800923c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fb14 	bl	8009864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924a:	d10e      	bne.n	800926a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009256:	2b80      	cmp	r3, #128	; 0x80
 8009258:	d107      	bne.n	800926a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fb07 	bl	8009878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	d10e      	bne.n	8009296 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	d107      	bne.n	8009296 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800928e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f913 	bl	80094bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d10e      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d107      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f06f 0220 	mvn.w	r2, #32
 80092ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fac7 	bl	8009850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d101      	bne.n	80092e4 <HAL_TIM_ConfigClockSource+0x18>
 80092e0:	2302      	movs	r3, #2
 80092e2:	e0b7      	b.n	8009454 <HAL_TIM_ConfigClockSource+0x188>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	4b57      	ldr	r3, [pc, #348]	; (800945c <HAL_TIM_ConfigClockSource+0x190>)
 8009300:	4013      	ands	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800930a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b70      	cmp	r3, #112	; 0x70
 800931a:	d02e      	beq.n	800937a <HAL_TIM_ConfigClockSource+0xae>
 800931c:	2b70      	cmp	r3, #112	; 0x70
 800931e:	d812      	bhi.n	8009346 <HAL_TIM_ConfigClockSource+0x7a>
 8009320:	2b30      	cmp	r3, #48	; 0x30
 8009322:	f000 8084 	beq.w	800942e <HAL_TIM_ConfigClockSource+0x162>
 8009326:	2b30      	cmp	r3, #48	; 0x30
 8009328:	d806      	bhi.n	8009338 <HAL_TIM_ConfigClockSource+0x6c>
 800932a:	2b10      	cmp	r3, #16
 800932c:	d07f      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x162>
 800932e:	2b20      	cmp	r3, #32
 8009330:	d07d      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x162>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d07b      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009336:	e084      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009338:	2b50      	cmp	r3, #80	; 0x50
 800933a:	d048      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0x102>
 800933c:	2b60      	cmp	r3, #96	; 0x60
 800933e:	d056      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0x122>
 8009340:	2b40      	cmp	r3, #64	; 0x40
 8009342:	d064      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8009344:	e07d      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009346:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800934a:	d070      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x162>
 800934c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009350:	d809      	bhi.n	8009366 <HAL_TIM_ConfigClockSource+0x9a>
 8009352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009356:	d027      	beq.n	80093a8 <HAL_TIM_ConfigClockSource+0xdc>
 8009358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800935c:	d067      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x162>
 800935e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009362:	d06d      	beq.n	8009440 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009364:	e06d      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8009366:	4a3e      	ldr	r2, [pc, #248]	; (8009460 <HAL_TIM_ConfigClockSource+0x194>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d060      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x162>
 800936c:	4a3d      	ldr	r2, [pc, #244]	; (8009464 <HAL_TIM_ConfigClockSource+0x198>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d05d      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x162>
 8009372:	4a3d      	ldr	r2, [pc, #244]	; (8009468 <HAL_TIM_ConfigClockSource+0x19c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d05a      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x162>
      break;
 8009378:	e063      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6899      	ldr	r1, [r3, #8]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	f000 f9b9 	bl	8009700 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800939c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	609a      	str	r2, [r3, #8]
      break;
 80093a6:	e04c      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	6899      	ldr	r1, [r3, #8]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	f000 f9a2 	bl	8009700 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093ca:	609a      	str	r2, [r3, #8]
      break;
 80093cc:	e039      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6859      	ldr	r1, [r3, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	461a      	mov	r2, r3
 80093dc:	f000 f912 	bl	8009604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2150      	movs	r1, #80	; 0x50
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f96c 	bl	80096c4 <TIM_ITRx_SetConfig>
      break;
 80093ec:	e029      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6859      	ldr	r1, [r3, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f000 f931 	bl	8009662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2160      	movs	r1, #96	; 0x60
 8009406:	4618      	mov	r0, r3
 8009408:	f000 f95c 	bl	80096c4 <TIM_ITRx_SetConfig>
      break;
 800940c:	e019      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	6859      	ldr	r1, [r3, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	461a      	mov	r2, r3
 800941c:	f000 f8f2 	bl	8009604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2140      	movs	r1, #64	; 0x40
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f94c 	bl	80096c4 <TIM_ITRx_SetConfig>
      break;
 800942c:	e009      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f000 f943 	bl	80096c4 <TIM_ITRx_SetConfig>
      break;
 800943e:	e000      	b.n	8009442 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8009440:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	ffceff88 	.word	0xffceff88
 8009460:	00100030 	.word	0x00100030
 8009464:	00100040 	.word	0x00100040
 8009468:	00100020 	.word	0x00100020

0800946c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009488:	bf00      	nop
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a40      	ldr	r2, [pc, #256]	; (80095e4 <TIM_Base_SetConfig+0x114>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d013      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ee:	d00f      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a3d      	ldr	r2, [pc, #244]	; (80095e8 <TIM_Base_SetConfig+0x118>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d00b      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a3c      	ldr	r2, [pc, #240]	; (80095ec <TIM_Base_SetConfig+0x11c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d007      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a3b      	ldr	r2, [pc, #236]	; (80095f0 <TIM_Base_SetConfig+0x120>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d003      	beq.n	8009510 <TIM_Base_SetConfig+0x40>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a3a      	ldr	r2, [pc, #232]	; (80095f4 <TIM_Base_SetConfig+0x124>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d108      	bne.n	8009522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a2f      	ldr	r2, [pc, #188]	; (80095e4 <TIM_Base_SetConfig+0x114>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d01f      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009530:	d01b      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a2c      	ldr	r2, [pc, #176]	; (80095e8 <TIM_Base_SetConfig+0x118>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d017      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a2b      	ldr	r2, [pc, #172]	; (80095ec <TIM_Base_SetConfig+0x11c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d013      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a2a      	ldr	r2, [pc, #168]	; (80095f0 <TIM_Base_SetConfig+0x120>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d00f      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a29      	ldr	r2, [pc, #164]	; (80095f4 <TIM_Base_SetConfig+0x124>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d00b      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a28      	ldr	r2, [pc, #160]	; (80095f8 <TIM_Base_SetConfig+0x128>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d007      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a27      	ldr	r2, [pc, #156]	; (80095fc <TIM_Base_SetConfig+0x12c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d003      	beq.n	800956a <TIM_Base_SetConfig+0x9a>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a26      	ldr	r2, [pc, #152]	; (8009600 <TIM_Base_SetConfig+0x130>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d108      	bne.n	800957c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4313      	orrs	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	695b      	ldr	r3, [r3, #20]
 8009586:	4313      	orrs	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a10      	ldr	r2, [pc, #64]	; (80095e4 <TIM_Base_SetConfig+0x114>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00f      	beq.n	80095c8 <TIM_Base_SetConfig+0xf8>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a12      	ldr	r2, [pc, #72]	; (80095f4 <TIM_Base_SetConfig+0x124>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00b      	beq.n	80095c8 <TIM_Base_SetConfig+0xf8>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a11      	ldr	r2, [pc, #68]	; (80095f8 <TIM_Base_SetConfig+0x128>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d007      	beq.n	80095c8 <TIM_Base_SetConfig+0xf8>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a10      	ldr	r2, [pc, #64]	; (80095fc <TIM_Base_SetConfig+0x12c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d003      	beq.n	80095c8 <TIM_Base_SetConfig+0xf8>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a0f      	ldr	r2, [pc, #60]	; (8009600 <TIM_Base_SetConfig+0x130>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d103      	bne.n	80095d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	615a      	str	r2, [r3, #20]
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	40010000 	.word	0x40010000
 80095e8:	40000400 	.word	0x40000400
 80095ec:	40000800 	.word	0x40000800
 80095f0:	40000c00 	.word	0x40000c00
 80095f4:	40010400 	.word	0x40010400
 80095f8:	40014000 	.word	0x40014000
 80095fc:	40014400 	.word	0x40014400
 8009600:	40014800 	.word	0x40014800

08009604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	f023 0201 	bic.w	r2, r3, #1
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800962e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	011b      	lsls	r3, r3, #4
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	4313      	orrs	r3, r2
 8009638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f023 030a 	bic.w	r3, r3, #10
 8009640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	621a      	str	r2, [r3, #32]
}
 8009656:	bf00      	nop
 8009658:	371c      	adds	r7, #28
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009662:	b480      	push	{r7}
 8009664:	b087      	sub	sp, #28
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	f023 0210 	bic.w	r2, r3, #16
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800968c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	031b      	lsls	r3, r3, #12
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	4313      	orrs	r3, r2
 8009696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800969e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	621a      	str	r2, [r3, #32]
}
 80096b6:	bf00      	nop
 80096b8:	371c      	adds	r7, #28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
	...

080096c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4b09      	ldr	r3, [pc, #36]	; (80096fc <TIM_ITRx_SetConfig+0x38>)
 80096d8:	4013      	ands	r3, r2
 80096da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	f043 0307 	orr.w	r3, r3, #7
 80096e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	609a      	str	r2, [r3, #8]
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	ffcfff8f 	.word	0xffcfff8f

08009700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
 800970c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800971a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	021a      	lsls	r2, r3, #8
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	431a      	orrs	r2, r3
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	4313      	orrs	r3, r2
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	4313      	orrs	r3, r2
 800972c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	609a      	str	r2, [r3, #8]
}
 8009734:	bf00      	nop
 8009736:	371c      	adds	r7, #28
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009754:	2302      	movs	r3, #2
 8009756:	e068      	b.n	800982a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a2e      	ldr	r2, [pc, #184]	; (8009838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d004      	beq.n	800978c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a2d      	ldr	r2, [pc, #180]	; (800983c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d108      	bne.n	800979e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a1e      	ldr	r2, [pc, #120]	; (8009838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d01d      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ca:	d018      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a1b      	ldr	r2, [pc, #108]	; (8009840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d013      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00e      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a18      	ldr	r2, [pc, #96]	; (8009848 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d009      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a13      	ldr	r2, [pc, #76]	; (800983c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d004      	beq.n	80097fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a14      	ldr	r2, [pc, #80]	; (800984c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d10c      	bne.n	8009818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	4313      	orrs	r3, r2
 800980e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	40010000 	.word	0x40010000
 800983c:	40010400 	.word	0x40010400
 8009840:	40000400 	.word	0x40000400
 8009844:	40000800 	.word	0x40000800
 8009848:	40000c00 	.word	0x40000c00
 800984c:	40001800 	.word	0x40001800

08009850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009880:	bf00      	nop
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e042      	b.n	8009924 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7f7 fff3 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2224      	movs	r2, #36	; 0x24
 80098ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0201 	bic.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f8c2 	bl	8009a58 <UART_SetConfig>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d101      	bne.n	80098de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e022      	b.n	8009924 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fe66 	bl	800a5b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800990a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0201 	orr.w	r2, r2, #1
 800991a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 feed 	bl	800a6fc <UART_CheckIdleState>
 8009922:	4603      	mov	r3, r0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08a      	sub	sp, #40	; 0x28
 8009930:	af02      	add	r7, sp, #8
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	4613      	mov	r3, r2
 800993a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009942:	2b20      	cmp	r3, #32
 8009944:	f040 8083 	bne.w	8009a4e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <HAL_UART_Transmit+0x28>
 800994e:	88fb      	ldrh	r3, [r7, #6]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e07b      	b.n	8009a50 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800995e:	2b01      	cmp	r3, #1
 8009960:	d101      	bne.n	8009966 <HAL_UART_Transmit+0x3a>
 8009962:	2302      	movs	r3, #2
 8009964:	e074      	b.n	8009a50 <HAL_UART_Transmit+0x124>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2221      	movs	r2, #33	; 0x21
 800997a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800997e:	f7f8 f909 	bl	8001b94 <HAL_GetTick>
 8009982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	88fa      	ldrh	r2, [r7, #6]
 8009988:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	88fa      	ldrh	r2, [r7, #6]
 8009990:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999c:	d108      	bne.n	80099b0 <HAL_UART_Transmit+0x84>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d104      	bne.n	80099b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	61bb      	str	r3, [r7, #24]
 80099ae:	e003      	b.n	80099b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099b4:	2300      	movs	r3, #0
 80099b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80099c0:	e02c      	b.n	8009a1c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2200      	movs	r2, #0
 80099ca:	2180      	movs	r1, #128	; 0x80
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 fedd 	bl	800a78c <UART_WaitOnFlagUntilTimeout>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e039      	b.n	8009a50 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10b      	bne.n	80099fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	3302      	adds	r3, #2
 80099f6:	61bb      	str	r3, [r7, #24]
 80099f8:	e007      	b.n	8009a0a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	781a      	ldrb	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	3301      	adds	r3, #1
 8009a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	3b01      	subs	r3, #1
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1cc      	bne.n	80099c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2140      	movs	r1, #64	; 0x40
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 feaa 	bl	800a78c <UART_WaitOnFlagUntilTimeout>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e006      	b.n	8009a50 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2220      	movs	r2, #32
 8009a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e000      	b.n	8009a50 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009a4e:	2302      	movs	r3, #2
  }
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3720      	adds	r7, #32
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009a5c:	b08e      	sub	sp, #56	; 0x38
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	431a      	orrs	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a86:	4313      	orrs	r3, r2
 8009a88:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	4bc1      	ldr	r3, [pc, #772]	; (8009d98 <UART_SetConfig+0x340>)
 8009a92:	4013      	ands	r3, r2
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6812      	ldr	r2, [r2, #0]
 8009a98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4ab7      	ldr	r2, [pc, #732]	; (8009d9c <UART_SetConfig+0x344>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d004      	beq.n	8009ace <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aca:	4313      	orrs	r3, r2
 8009acc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	4bb2      	ldr	r3, [pc, #712]	; (8009da0 <UART_SetConfig+0x348>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6812      	ldr	r2, [r2, #0]
 8009adc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ade:	430b      	orrs	r3, r1
 8009ae0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae8:	f023 010f 	bic.w	r1, r3, #15
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4aa9      	ldr	r2, [pc, #676]	; (8009da4 <UART_SetConfig+0x34c>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d177      	bne.n	8009bf2 <UART_SetConfig+0x19a>
 8009b02:	4ba9      	ldr	r3, [pc, #676]	; (8009da8 <UART_SetConfig+0x350>)
 8009b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b0a:	2b28      	cmp	r3, #40	; 0x28
 8009b0c:	d86c      	bhi.n	8009be8 <UART_SetConfig+0x190>
 8009b0e:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <UART_SetConfig+0xbc>)
 8009b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b14:	08009bb9 	.word	0x08009bb9
 8009b18:	08009be9 	.word	0x08009be9
 8009b1c:	08009be9 	.word	0x08009be9
 8009b20:	08009be9 	.word	0x08009be9
 8009b24:	08009be9 	.word	0x08009be9
 8009b28:	08009be9 	.word	0x08009be9
 8009b2c:	08009be9 	.word	0x08009be9
 8009b30:	08009be9 	.word	0x08009be9
 8009b34:	08009bc1 	.word	0x08009bc1
 8009b38:	08009be9 	.word	0x08009be9
 8009b3c:	08009be9 	.word	0x08009be9
 8009b40:	08009be9 	.word	0x08009be9
 8009b44:	08009be9 	.word	0x08009be9
 8009b48:	08009be9 	.word	0x08009be9
 8009b4c:	08009be9 	.word	0x08009be9
 8009b50:	08009be9 	.word	0x08009be9
 8009b54:	08009bc9 	.word	0x08009bc9
 8009b58:	08009be9 	.word	0x08009be9
 8009b5c:	08009be9 	.word	0x08009be9
 8009b60:	08009be9 	.word	0x08009be9
 8009b64:	08009be9 	.word	0x08009be9
 8009b68:	08009be9 	.word	0x08009be9
 8009b6c:	08009be9 	.word	0x08009be9
 8009b70:	08009be9 	.word	0x08009be9
 8009b74:	08009bd1 	.word	0x08009bd1
 8009b78:	08009be9 	.word	0x08009be9
 8009b7c:	08009be9 	.word	0x08009be9
 8009b80:	08009be9 	.word	0x08009be9
 8009b84:	08009be9 	.word	0x08009be9
 8009b88:	08009be9 	.word	0x08009be9
 8009b8c:	08009be9 	.word	0x08009be9
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	08009bd9 	.word	0x08009bd9
 8009b98:	08009be9 	.word	0x08009be9
 8009b9c:	08009be9 	.word	0x08009be9
 8009ba0:	08009be9 	.word	0x08009be9
 8009ba4:	08009be9 	.word	0x08009be9
 8009ba8:	08009be9 	.word	0x08009be9
 8009bac:	08009be9 	.word	0x08009be9
 8009bb0:	08009be9 	.word	0x08009be9
 8009bb4:	08009be1 	.word	0x08009be1
 8009bb8:	2301      	movs	r3, #1
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e233      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc6:	e22f      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009bc8:	2308      	movs	r3, #8
 8009bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bce:	e22b      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009bd0:	2310      	movs	r3, #16
 8009bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd6:	e227      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009bd8:	2320      	movs	r3, #32
 8009bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bde:	e223      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009be0:	2340      	movs	r3, #64	; 0x40
 8009be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be6:	e21f      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009be8:	2380      	movs	r3, #128	; 0x80
 8009bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bee:	bf00      	nop
 8009bf0:	e21a      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a6d      	ldr	r2, [pc, #436]	; (8009dac <UART_SetConfig+0x354>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d132      	bne.n	8009c62 <UART_SetConfig+0x20a>
 8009bfc:	4b6a      	ldr	r3, [pc, #424]	; (8009da8 <UART_SetConfig+0x350>)
 8009bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c00:	f003 0307 	and.w	r3, r3, #7
 8009c04:	2b05      	cmp	r3, #5
 8009c06:	d827      	bhi.n	8009c58 <UART_SetConfig+0x200>
 8009c08:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <UART_SetConfig+0x1b8>)
 8009c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0e:	bf00      	nop
 8009c10:	08009c29 	.word	0x08009c29
 8009c14:	08009c31 	.word	0x08009c31
 8009c18:	08009c39 	.word	0x08009c39
 8009c1c:	08009c41 	.word	0x08009c41
 8009c20:	08009c49 	.word	0x08009c49
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2e:	e1fb      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009c30:	2304      	movs	r3, #4
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e1f7      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009c38:	2308      	movs	r3, #8
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	e1f3      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009c40:	2310      	movs	r3, #16
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e1ef      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009c48:	2320      	movs	r3, #32
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e1eb      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009c50:	2340      	movs	r3, #64	; 0x40
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	e1e7      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009c58:	2380      	movs	r3, #128	; 0x80
 8009c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5e:	bf00      	nop
 8009c60:	e1e2      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a52      	ldr	r2, [pc, #328]	; (8009db0 <UART_SetConfig+0x358>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d132      	bne.n	8009cd2 <UART_SetConfig+0x27a>
 8009c6c:	4b4e      	ldr	r3, [pc, #312]	; (8009da8 <UART_SetConfig+0x350>)
 8009c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	2b05      	cmp	r3, #5
 8009c76:	d827      	bhi.n	8009cc8 <UART_SetConfig+0x270>
 8009c78:	a201      	add	r2, pc, #4	; (adr r2, 8009c80 <UART_SetConfig+0x228>)
 8009c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7e:	bf00      	nop
 8009c80:	08009c99 	.word	0x08009c99
 8009c84:	08009ca1 	.word	0x08009ca1
 8009c88:	08009ca9 	.word	0x08009ca9
 8009c8c:	08009cb1 	.word	0x08009cb1
 8009c90:	08009cb9 	.word	0x08009cb9
 8009c94:	08009cc1 	.word	0x08009cc1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9e:	e1c3      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca6:	e1bf      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009ca8:	2308      	movs	r3, #8
 8009caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cae:	e1bb      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e1b7      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009cb8:	2320      	movs	r3, #32
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e1b3      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009cc0:	2340      	movs	r3, #64	; 0x40
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e1af      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009cc8:	2380      	movs	r3, #128	; 0x80
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	bf00      	nop
 8009cd0:	e1aa      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a37      	ldr	r2, [pc, #220]	; (8009db4 <UART_SetConfig+0x35c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d132      	bne.n	8009d42 <UART_SetConfig+0x2ea>
 8009cdc:	4b32      	ldr	r3, [pc, #200]	; (8009da8 <UART_SetConfig+0x350>)
 8009cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce0:	f003 0307 	and.w	r3, r3, #7
 8009ce4:	2b05      	cmp	r3, #5
 8009ce6:	d827      	bhi.n	8009d38 <UART_SetConfig+0x2e0>
 8009ce8:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <UART_SetConfig+0x298>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d09 	.word	0x08009d09
 8009cf4:	08009d11 	.word	0x08009d11
 8009cf8:	08009d19 	.word	0x08009d19
 8009cfc:	08009d21 	.word	0x08009d21
 8009d00:	08009d29 	.word	0x08009d29
 8009d04:	08009d31 	.word	0x08009d31
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0e:	e18b      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d10:	2304      	movs	r3, #4
 8009d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d16:	e187      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d18:	2308      	movs	r3, #8
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e183      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d20:	2310      	movs	r3, #16
 8009d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d26:	e17f      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d28:	2320      	movs	r3, #32
 8009d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2e:	e17b      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d36:	e177      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d38:	2380      	movs	r3, #128	; 0x80
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	bf00      	nop
 8009d40:	e172      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a1c      	ldr	r2, [pc, #112]	; (8009db8 <UART_SetConfig+0x360>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d144      	bne.n	8009dd6 <UART_SetConfig+0x37e>
 8009d4c:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <UART_SetConfig+0x350>)
 8009d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	2b05      	cmp	r3, #5
 8009d56:	d839      	bhi.n	8009dcc <UART_SetConfig+0x374>
 8009d58:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <UART_SetConfig+0x308>)
 8009d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5e:	bf00      	nop
 8009d60:	08009d79 	.word	0x08009d79
 8009d64:	08009d81 	.word	0x08009d81
 8009d68:	08009d89 	.word	0x08009d89
 8009d6c:	08009d91 	.word	0x08009d91
 8009d70:	08009dbd 	.word	0x08009dbd
 8009d74:	08009dc5 	.word	0x08009dc5
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7e:	e153      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d80:	2304      	movs	r3, #4
 8009d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d86:	e14f      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d88:	2308      	movs	r3, #8
 8009d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d8e:	e14b      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d90:	2310      	movs	r3, #16
 8009d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d96:	e147      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009d98:	cfff69f3 	.word	0xcfff69f3
 8009d9c:	58000c00 	.word	0x58000c00
 8009da0:	11fff4ff 	.word	0x11fff4ff
 8009da4:	40011000 	.word	0x40011000
 8009da8:	58024400 	.word	0x58024400
 8009dac:	40004400 	.word	0x40004400
 8009db0:	40004800 	.word	0x40004800
 8009db4:	40004c00 	.word	0x40004c00
 8009db8:	40005000 	.word	0x40005000
 8009dbc:	2320      	movs	r3, #32
 8009dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc2:	e131      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009dc4:	2340      	movs	r3, #64	; 0x40
 8009dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dca:	e12d      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009dcc:	2380      	movs	r3, #128	; 0x80
 8009dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd2:	bf00      	nop
 8009dd4:	e128      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4ab6      	ldr	r2, [pc, #728]	; (800a0b4 <UART_SetConfig+0x65c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d178      	bne.n	8009ed2 <UART_SetConfig+0x47a>
 8009de0:	4bb5      	ldr	r3, [pc, #724]	; (800a0b8 <UART_SetConfig+0x660>)
 8009de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009de8:	2b28      	cmp	r3, #40	; 0x28
 8009dea:	d86d      	bhi.n	8009ec8 <UART_SetConfig+0x470>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <UART_SetConfig+0x39c>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e99 	.word	0x08009e99
 8009df8:	08009ec9 	.word	0x08009ec9
 8009dfc:	08009ec9 	.word	0x08009ec9
 8009e00:	08009ec9 	.word	0x08009ec9
 8009e04:	08009ec9 	.word	0x08009ec9
 8009e08:	08009ec9 	.word	0x08009ec9
 8009e0c:	08009ec9 	.word	0x08009ec9
 8009e10:	08009ec9 	.word	0x08009ec9
 8009e14:	08009ea1 	.word	0x08009ea1
 8009e18:	08009ec9 	.word	0x08009ec9
 8009e1c:	08009ec9 	.word	0x08009ec9
 8009e20:	08009ec9 	.word	0x08009ec9
 8009e24:	08009ec9 	.word	0x08009ec9
 8009e28:	08009ec9 	.word	0x08009ec9
 8009e2c:	08009ec9 	.word	0x08009ec9
 8009e30:	08009ec9 	.word	0x08009ec9
 8009e34:	08009ea9 	.word	0x08009ea9
 8009e38:	08009ec9 	.word	0x08009ec9
 8009e3c:	08009ec9 	.word	0x08009ec9
 8009e40:	08009ec9 	.word	0x08009ec9
 8009e44:	08009ec9 	.word	0x08009ec9
 8009e48:	08009ec9 	.word	0x08009ec9
 8009e4c:	08009ec9 	.word	0x08009ec9
 8009e50:	08009ec9 	.word	0x08009ec9
 8009e54:	08009eb1 	.word	0x08009eb1
 8009e58:	08009ec9 	.word	0x08009ec9
 8009e5c:	08009ec9 	.word	0x08009ec9
 8009e60:	08009ec9 	.word	0x08009ec9
 8009e64:	08009ec9 	.word	0x08009ec9
 8009e68:	08009ec9 	.word	0x08009ec9
 8009e6c:	08009ec9 	.word	0x08009ec9
 8009e70:	08009ec9 	.word	0x08009ec9
 8009e74:	08009eb9 	.word	0x08009eb9
 8009e78:	08009ec9 	.word	0x08009ec9
 8009e7c:	08009ec9 	.word	0x08009ec9
 8009e80:	08009ec9 	.word	0x08009ec9
 8009e84:	08009ec9 	.word	0x08009ec9
 8009e88:	08009ec9 	.word	0x08009ec9
 8009e8c:	08009ec9 	.word	0x08009ec9
 8009e90:	08009ec9 	.word	0x08009ec9
 8009e94:	08009ec1 	.word	0x08009ec1
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9e:	e0c3      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009ea0:	2304      	movs	r3, #4
 8009ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea6:	e0bf      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009ea8:	2308      	movs	r3, #8
 8009eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eae:	e0bb      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009eb0:	2310      	movs	r3, #16
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e0b7      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009eb8:	2320      	movs	r3, #32
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e0b3      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009ec0:	2340      	movs	r3, #64	; 0x40
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	e0af      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009ec8:	2380      	movs	r3, #128	; 0x80
 8009eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ece:	bf00      	nop
 8009ed0:	e0aa      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a79      	ldr	r2, [pc, #484]	; (800a0bc <UART_SetConfig+0x664>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d132      	bne.n	8009f42 <UART_SetConfig+0x4ea>
 8009edc:	4b76      	ldr	r3, [pc, #472]	; (800a0b8 <UART_SetConfig+0x660>)
 8009ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	2b05      	cmp	r3, #5
 8009ee6:	d827      	bhi.n	8009f38 <UART_SetConfig+0x4e0>
 8009ee8:	a201      	add	r2, pc, #4	; (adr r2, 8009ef0 <UART_SetConfig+0x498>)
 8009eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eee:	bf00      	nop
 8009ef0:	08009f09 	.word	0x08009f09
 8009ef4:	08009f11 	.word	0x08009f11
 8009ef8:	08009f19 	.word	0x08009f19
 8009efc:	08009f21 	.word	0x08009f21
 8009f00:	08009f29 	.word	0x08009f29
 8009f04:	08009f31 	.word	0x08009f31
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0e:	e08b      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f10:	2304      	movs	r3, #4
 8009f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f16:	e087      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f18:	2308      	movs	r3, #8
 8009f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f1e:	e083      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f20:	2310      	movs	r3, #16
 8009f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f26:	e07f      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f28:	2320      	movs	r3, #32
 8009f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2e:	e07b      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f30:	2340      	movs	r3, #64	; 0x40
 8009f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f36:	e077      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f38:	2380      	movs	r3, #128	; 0x80
 8009f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3e:	bf00      	nop
 8009f40:	e072      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a5e      	ldr	r2, [pc, #376]	; (800a0c0 <UART_SetConfig+0x668>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d132      	bne.n	8009fb2 <UART_SetConfig+0x55a>
 8009f4c:	4b5a      	ldr	r3, [pc, #360]	; (800a0b8 <UART_SetConfig+0x660>)
 8009f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f50:	f003 0307 	and.w	r3, r3, #7
 8009f54:	2b05      	cmp	r3, #5
 8009f56:	d827      	bhi.n	8009fa8 <UART_SetConfig+0x550>
 8009f58:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <UART_SetConfig+0x508>)
 8009f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f5e:	bf00      	nop
 8009f60:	08009f79 	.word	0x08009f79
 8009f64:	08009f81 	.word	0x08009f81
 8009f68:	08009f89 	.word	0x08009f89
 8009f6c:	08009f91 	.word	0x08009f91
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009fa1 	.word	0x08009fa1
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7e:	e053      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f80:	2304      	movs	r3, #4
 8009f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f86:	e04f      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f88:	2308      	movs	r3, #8
 8009f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8e:	e04b      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f90:	2310      	movs	r3, #16
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f96:	e047      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009f98:	2320      	movs	r3, #32
 8009f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9e:	e043      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009fa0:	2340      	movs	r3, #64	; 0x40
 8009fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa6:	e03f      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009fa8:	2380      	movs	r3, #128	; 0x80
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fae:	bf00      	nop
 8009fb0:	e03a      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a43      	ldr	r2, [pc, #268]	; (800a0c4 <UART_SetConfig+0x66c>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d132      	bne.n	800a022 <UART_SetConfig+0x5ca>
 8009fbc:	4b3e      	ldr	r3, [pc, #248]	; (800a0b8 <UART_SetConfig+0x660>)
 8009fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc0:	f003 0307 	and.w	r3, r3, #7
 8009fc4:	2b05      	cmp	r3, #5
 8009fc6:	d827      	bhi.n	800a018 <UART_SetConfig+0x5c0>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <UART_SetConfig+0x578>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	08009fe9 	.word	0x08009fe9
 8009fd4:	08009ff1 	.word	0x08009ff1
 8009fd8:	08009ff9 	.word	0x08009ff9
 8009fdc:	0800a001 	.word	0x0800a001
 8009fe0:	0800a009 	.word	0x0800a009
 8009fe4:	0800a011 	.word	0x0800a011
 8009fe8:	2302      	movs	r3, #2
 8009fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fee:	e01b      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009ff0:	2304      	movs	r3, #4
 8009ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff6:	e017      	b.n	800a028 <UART_SetConfig+0x5d0>
 8009ff8:	2308      	movs	r3, #8
 8009ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ffe:	e013      	b.n	800a028 <UART_SetConfig+0x5d0>
 800a000:	2310      	movs	r3, #16
 800a002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a006:	e00f      	b.n	800a028 <UART_SetConfig+0x5d0>
 800a008:	2320      	movs	r3, #32
 800a00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00e:	e00b      	b.n	800a028 <UART_SetConfig+0x5d0>
 800a010:	2340      	movs	r3, #64	; 0x40
 800a012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a016:	e007      	b.n	800a028 <UART_SetConfig+0x5d0>
 800a018:	2380      	movs	r3, #128	; 0x80
 800a01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01e:	bf00      	nop
 800a020:	e002      	b.n	800a028 <UART_SetConfig+0x5d0>
 800a022:	2380      	movs	r3, #128	; 0x80
 800a024:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a25      	ldr	r2, [pc, #148]	; (800a0c4 <UART_SetConfig+0x66c>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	f040 80b8 	bne.w	800a1a4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a034:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a038:	2b08      	cmp	r3, #8
 800a03a:	d019      	beq.n	800a070 <UART_SetConfig+0x618>
 800a03c:	2b08      	cmp	r3, #8
 800a03e:	dc04      	bgt.n	800a04a <UART_SetConfig+0x5f2>
 800a040:	2b02      	cmp	r3, #2
 800a042:	d009      	beq.n	800a058 <UART_SetConfig+0x600>
 800a044:	2b04      	cmp	r3, #4
 800a046:	d00b      	beq.n	800a060 <UART_SetConfig+0x608>
 800a048:	e042      	b.n	800a0d0 <UART_SetConfig+0x678>
 800a04a:	2b20      	cmp	r3, #32
 800a04c:	d02b      	beq.n	800a0a6 <UART_SetConfig+0x64e>
 800a04e:	2b40      	cmp	r3, #64	; 0x40
 800a050:	d02c      	beq.n	800a0ac <UART_SetConfig+0x654>
 800a052:	2b10      	cmp	r3, #16
 800a054:	d014      	beq.n	800a080 <UART_SetConfig+0x628>
 800a056:	e03b      	b.n	800a0d0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a058:	f7fe fa34 	bl	80084c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a05c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a05e:	e03d      	b.n	800a0dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a060:	f107 0314 	add.w	r3, r7, #20
 800a064:	4618      	mov	r0, r3
 800a066:	f7fe fa43 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a06e:	e035      	b.n	800a0dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a070:	f107 0308 	add.w	r3, r7, #8
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe fb87 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a07e:	e02d      	b.n	800a0dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a080:	4b0d      	ldr	r3, [pc, #52]	; (800a0b8 <UART_SetConfig+0x660>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0320 	and.w	r3, r3, #32
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d009      	beq.n	800a0a0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a08c:	4b0a      	ldr	r3, [pc, #40]	; (800a0b8 <UART_SetConfig+0x660>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	08db      	lsrs	r3, r3, #3
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	4a0c      	ldr	r2, [pc, #48]	; (800a0c8 <UART_SetConfig+0x670>)
 800a098:	fa22 f303 	lsr.w	r3, r2, r3
 800a09c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a09e:	e01d      	b.n	800a0dc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a0a0:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <UART_SetConfig+0x670>)
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0a4:	e01a      	b.n	800a0dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <UART_SetConfig+0x674>)
 800a0a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0aa:	e017      	b.n	800a0dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0b2:	e013      	b.n	800a0dc <UART_SetConfig+0x684>
 800a0b4:	40011400 	.word	0x40011400
 800a0b8:	58024400 	.word	0x58024400
 800a0bc:	40007800 	.word	0x40007800
 800a0c0:	40007c00 	.word	0x40007c00
 800a0c4:	58000c00 	.word	0x58000c00
 800a0c8:	03d09000 	.word	0x03d09000
 800a0cc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 824d 	beq.w	800a57e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e8:	4aad      	ldr	r2, [pc, #692]	; (800a3a0 <UART_SetConfig+0x948>)
 800a0ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0f6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	4413      	add	r3, r2
 800a102:	6a3a      	ldr	r2, [r7, #32]
 800a104:	429a      	cmp	r2, r3
 800a106:	d305      	bcc.n	800a114 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a10e:	6a3a      	ldr	r2, [r7, #32]
 800a110:	429a      	cmp	r2, r3
 800a112:	d903      	bls.n	800a11c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a11a:	e230      	b.n	800a57e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a11e:	4618      	mov	r0, r3
 800a120:	f04f 0100 	mov.w	r1, #0
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	4a9d      	ldr	r2, [pc, #628]	; (800a3a0 <UART_SetConfig+0x948>)
 800a12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	f04f 0400 	mov.w	r4, #0
 800a134:	461a      	mov	r2, r3
 800a136:	4623      	mov	r3, r4
 800a138:	f7f6 f922 	bl	8000380 <__aeabi_uldivmod>
 800a13c:	4603      	mov	r3, r0
 800a13e:	460c      	mov	r4, r1
 800a140:	4619      	mov	r1, r3
 800a142:	4622      	mov	r2, r4
 800a144:	f04f 0300 	mov.w	r3, #0
 800a148:	f04f 0400 	mov.w	r4, #0
 800a14c:	0214      	lsls	r4, r2, #8
 800a14e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a152:	020b      	lsls	r3, r1, #8
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6852      	ldr	r2, [r2, #4]
 800a158:	0852      	lsrs	r2, r2, #1
 800a15a:	4611      	mov	r1, r2
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	eb13 0b01 	adds.w	fp, r3, r1
 800a164:	eb44 0c02 	adc.w	ip, r4, r2
 800a168:	4658      	mov	r0, fp
 800a16a:	4661      	mov	r1, ip
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f04f 0400 	mov.w	r4, #0
 800a174:	461a      	mov	r2, r3
 800a176:	4623      	mov	r3, r4
 800a178:	f7f6 f902 	bl	8000380 <__aeabi_uldivmod>
 800a17c:	4603      	mov	r3, r0
 800a17e:	460c      	mov	r4, r1
 800a180:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a188:	d308      	bcc.n	800a19c <UART_SetConfig+0x744>
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a190:	d204      	bcs.n	800a19c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a198:	60da      	str	r2, [r3, #12]
 800a19a:	e1f0      	b.n	800a57e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a1a2:	e1ec      	b.n	800a57e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	69db      	ldr	r3, [r3, #28]
 800a1a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ac:	f040 8100 	bne.w	800a3b0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a1b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1b4:	2b40      	cmp	r3, #64	; 0x40
 800a1b6:	f200 80b7 	bhi.w	800a328 <UART_SetConfig+0x8d0>
 800a1ba:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <UART_SetConfig+0x768>)
 800a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c0:	0800a2c5 	.word	0x0800a2c5
 800a1c4:	0800a2cd 	.word	0x0800a2cd
 800a1c8:	0800a329 	.word	0x0800a329
 800a1cc:	0800a329 	.word	0x0800a329
 800a1d0:	0800a2d5 	.word	0x0800a2d5
 800a1d4:	0800a329 	.word	0x0800a329
 800a1d8:	0800a329 	.word	0x0800a329
 800a1dc:	0800a329 	.word	0x0800a329
 800a1e0:	0800a2e5 	.word	0x0800a2e5
 800a1e4:	0800a329 	.word	0x0800a329
 800a1e8:	0800a329 	.word	0x0800a329
 800a1ec:	0800a329 	.word	0x0800a329
 800a1f0:	0800a329 	.word	0x0800a329
 800a1f4:	0800a329 	.word	0x0800a329
 800a1f8:	0800a329 	.word	0x0800a329
 800a1fc:	0800a329 	.word	0x0800a329
 800a200:	0800a2f5 	.word	0x0800a2f5
 800a204:	0800a329 	.word	0x0800a329
 800a208:	0800a329 	.word	0x0800a329
 800a20c:	0800a329 	.word	0x0800a329
 800a210:	0800a329 	.word	0x0800a329
 800a214:	0800a329 	.word	0x0800a329
 800a218:	0800a329 	.word	0x0800a329
 800a21c:	0800a329 	.word	0x0800a329
 800a220:	0800a329 	.word	0x0800a329
 800a224:	0800a329 	.word	0x0800a329
 800a228:	0800a329 	.word	0x0800a329
 800a22c:	0800a329 	.word	0x0800a329
 800a230:	0800a329 	.word	0x0800a329
 800a234:	0800a329 	.word	0x0800a329
 800a238:	0800a329 	.word	0x0800a329
 800a23c:	0800a329 	.word	0x0800a329
 800a240:	0800a31b 	.word	0x0800a31b
 800a244:	0800a329 	.word	0x0800a329
 800a248:	0800a329 	.word	0x0800a329
 800a24c:	0800a329 	.word	0x0800a329
 800a250:	0800a329 	.word	0x0800a329
 800a254:	0800a329 	.word	0x0800a329
 800a258:	0800a329 	.word	0x0800a329
 800a25c:	0800a329 	.word	0x0800a329
 800a260:	0800a329 	.word	0x0800a329
 800a264:	0800a329 	.word	0x0800a329
 800a268:	0800a329 	.word	0x0800a329
 800a26c:	0800a329 	.word	0x0800a329
 800a270:	0800a329 	.word	0x0800a329
 800a274:	0800a329 	.word	0x0800a329
 800a278:	0800a329 	.word	0x0800a329
 800a27c:	0800a329 	.word	0x0800a329
 800a280:	0800a329 	.word	0x0800a329
 800a284:	0800a329 	.word	0x0800a329
 800a288:	0800a329 	.word	0x0800a329
 800a28c:	0800a329 	.word	0x0800a329
 800a290:	0800a329 	.word	0x0800a329
 800a294:	0800a329 	.word	0x0800a329
 800a298:	0800a329 	.word	0x0800a329
 800a29c:	0800a329 	.word	0x0800a329
 800a2a0:	0800a329 	.word	0x0800a329
 800a2a4:	0800a329 	.word	0x0800a329
 800a2a8:	0800a329 	.word	0x0800a329
 800a2ac:	0800a329 	.word	0x0800a329
 800a2b0:	0800a329 	.word	0x0800a329
 800a2b4:	0800a329 	.word	0x0800a329
 800a2b8:	0800a329 	.word	0x0800a329
 800a2bc:	0800a329 	.word	0x0800a329
 800a2c0:	0800a321 	.word	0x0800a321
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2c4:	f7fc ff6c 	bl	80071a0 <HAL_RCC_GetPCLK1Freq>
 800a2c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2ca:	e033      	b.n	800a334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2cc:	f7fc ff7e 	bl	80071cc <HAL_RCC_GetPCLK2Freq>
 800a2d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2d2:	e02f      	b.n	800a334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2d4:	f107 0314 	add.w	r3, r7, #20
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fe f909 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2e2:	e027      	b.n	800a334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2e4:	f107 0308 	add.w	r3, r7, #8
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fe fa4d 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2f2:	e01f      	b.n	800a334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2f4:	4b2b      	ldr	r3, [pc, #172]	; (800a3a4 <UART_SetConfig+0x94c>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d009      	beq.n	800a314 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a300:	4b28      	ldr	r3, [pc, #160]	; (800a3a4 <UART_SetConfig+0x94c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	08db      	lsrs	r3, r3, #3
 800a306:	f003 0303 	and.w	r3, r3, #3
 800a30a:	4a27      	ldr	r2, [pc, #156]	; (800a3a8 <UART_SetConfig+0x950>)
 800a30c:	fa22 f303 	lsr.w	r3, r2, r3
 800a310:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a312:	e00f      	b.n	800a334 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a314:	4b24      	ldr	r3, [pc, #144]	; (800a3a8 <UART_SetConfig+0x950>)
 800a316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a318:	e00c      	b.n	800a334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a31a:	4b24      	ldr	r3, [pc, #144]	; (800a3ac <UART_SetConfig+0x954>)
 800a31c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a31e:	e009      	b.n	800a334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a326:	e005      	b.n	800a334 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a328:	2300      	movs	r3, #0
 800a32a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 8121 	beq.w	800a57e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	4a17      	ldr	r2, [pc, #92]	; (800a3a0 <UART_SetConfig+0x948>)
 800a342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a346:	461a      	mov	r2, r3
 800a348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a34e:	005a      	lsls	r2, r3, #1
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	085b      	lsrs	r3, r3, #1
 800a356:	441a      	add	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a360:	b29b      	uxth	r3, r3
 800a362:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	2b0f      	cmp	r3, #15
 800a368:	d916      	bls.n	800a398 <UART_SetConfig+0x940>
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a370:	d212      	bcs.n	800a398 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a374:	b29b      	uxth	r3, r3
 800a376:	f023 030f 	bic.w	r3, r3, #15
 800a37a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	085b      	lsrs	r3, r3, #1
 800a380:	b29b      	uxth	r3, r3
 800a382:	f003 0307 	and.w	r3, r3, #7
 800a386:	b29a      	uxth	r2, r3
 800a388:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a38a:	4313      	orrs	r3, r2
 800a38c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a394:	60da      	str	r2, [r3, #12]
 800a396:	e0f2      	b.n	800a57e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a39e:	e0ee      	b.n	800a57e <UART_SetConfig+0xb26>
 800a3a0:	0800bf58 	.word	0x0800bf58
 800a3a4:	58024400 	.word	0x58024400
 800a3a8:	03d09000 	.word	0x03d09000
 800a3ac:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3b4:	2b40      	cmp	r3, #64	; 0x40
 800a3b6:	f200 80b7 	bhi.w	800a528 <UART_SetConfig+0xad0>
 800a3ba:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <UART_SetConfig+0x968>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a4c5 	.word	0x0800a4c5
 800a3c4:	0800a4cd 	.word	0x0800a4cd
 800a3c8:	0800a529 	.word	0x0800a529
 800a3cc:	0800a529 	.word	0x0800a529
 800a3d0:	0800a4d5 	.word	0x0800a4d5
 800a3d4:	0800a529 	.word	0x0800a529
 800a3d8:	0800a529 	.word	0x0800a529
 800a3dc:	0800a529 	.word	0x0800a529
 800a3e0:	0800a4e5 	.word	0x0800a4e5
 800a3e4:	0800a529 	.word	0x0800a529
 800a3e8:	0800a529 	.word	0x0800a529
 800a3ec:	0800a529 	.word	0x0800a529
 800a3f0:	0800a529 	.word	0x0800a529
 800a3f4:	0800a529 	.word	0x0800a529
 800a3f8:	0800a529 	.word	0x0800a529
 800a3fc:	0800a529 	.word	0x0800a529
 800a400:	0800a4f5 	.word	0x0800a4f5
 800a404:	0800a529 	.word	0x0800a529
 800a408:	0800a529 	.word	0x0800a529
 800a40c:	0800a529 	.word	0x0800a529
 800a410:	0800a529 	.word	0x0800a529
 800a414:	0800a529 	.word	0x0800a529
 800a418:	0800a529 	.word	0x0800a529
 800a41c:	0800a529 	.word	0x0800a529
 800a420:	0800a529 	.word	0x0800a529
 800a424:	0800a529 	.word	0x0800a529
 800a428:	0800a529 	.word	0x0800a529
 800a42c:	0800a529 	.word	0x0800a529
 800a430:	0800a529 	.word	0x0800a529
 800a434:	0800a529 	.word	0x0800a529
 800a438:	0800a529 	.word	0x0800a529
 800a43c:	0800a529 	.word	0x0800a529
 800a440:	0800a51b 	.word	0x0800a51b
 800a444:	0800a529 	.word	0x0800a529
 800a448:	0800a529 	.word	0x0800a529
 800a44c:	0800a529 	.word	0x0800a529
 800a450:	0800a529 	.word	0x0800a529
 800a454:	0800a529 	.word	0x0800a529
 800a458:	0800a529 	.word	0x0800a529
 800a45c:	0800a529 	.word	0x0800a529
 800a460:	0800a529 	.word	0x0800a529
 800a464:	0800a529 	.word	0x0800a529
 800a468:	0800a529 	.word	0x0800a529
 800a46c:	0800a529 	.word	0x0800a529
 800a470:	0800a529 	.word	0x0800a529
 800a474:	0800a529 	.word	0x0800a529
 800a478:	0800a529 	.word	0x0800a529
 800a47c:	0800a529 	.word	0x0800a529
 800a480:	0800a529 	.word	0x0800a529
 800a484:	0800a529 	.word	0x0800a529
 800a488:	0800a529 	.word	0x0800a529
 800a48c:	0800a529 	.word	0x0800a529
 800a490:	0800a529 	.word	0x0800a529
 800a494:	0800a529 	.word	0x0800a529
 800a498:	0800a529 	.word	0x0800a529
 800a49c:	0800a529 	.word	0x0800a529
 800a4a0:	0800a529 	.word	0x0800a529
 800a4a4:	0800a529 	.word	0x0800a529
 800a4a8:	0800a529 	.word	0x0800a529
 800a4ac:	0800a529 	.word	0x0800a529
 800a4b0:	0800a529 	.word	0x0800a529
 800a4b4:	0800a529 	.word	0x0800a529
 800a4b8:	0800a529 	.word	0x0800a529
 800a4bc:	0800a529 	.word	0x0800a529
 800a4c0:	0800a521 	.word	0x0800a521
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4c4:	f7fc fe6c 	bl	80071a0 <HAL_RCC_GetPCLK1Freq>
 800a4c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a4ca:	e033      	b.n	800a534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4cc:	f7fc fe7e 	bl	80071cc <HAL_RCC_GetPCLK2Freq>
 800a4d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a4d2:	e02f      	b.n	800a534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4d4:	f107 0314 	add.w	r3, r7, #20
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fe f809 	bl	80084f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4e2:	e027      	b.n	800a534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4e4:	f107 0308 	add.w	r3, r7, #8
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fe f94d 	bl	8008788 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a4f2:	e01f      	b.n	800a534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4f4:	4b2c      	ldr	r3, [pc, #176]	; (800a5a8 <UART_SetConfig+0xb50>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 0320 	and.w	r3, r3, #32
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d009      	beq.n	800a514 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a500:	4b29      	ldr	r3, [pc, #164]	; (800a5a8 <UART_SetConfig+0xb50>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	08db      	lsrs	r3, r3, #3
 800a506:	f003 0303 	and.w	r3, r3, #3
 800a50a:	4a28      	ldr	r2, [pc, #160]	; (800a5ac <UART_SetConfig+0xb54>)
 800a50c:	fa22 f303 	lsr.w	r3, r2, r3
 800a510:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a512:	e00f      	b.n	800a534 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a514:	4b25      	ldr	r3, [pc, #148]	; (800a5ac <UART_SetConfig+0xb54>)
 800a516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a518:	e00c      	b.n	800a534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a51a:	4b25      	ldr	r3, [pc, #148]	; (800a5b0 <UART_SetConfig+0xb58>)
 800a51c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a51e:	e009      	b.n	800a534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a526:	e005      	b.n	800a534 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a532:	bf00      	nop
    }

    if (pclk != 0U)
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	2b00      	cmp	r3, #0
 800a538:	d021      	beq.n	800a57e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	4a1d      	ldr	r2, [pc, #116]	; (800a5b4 <UART_SetConfig+0xb5c>)
 800a540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a544:	461a      	mov	r2, r3
 800a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a548:	fbb3 f2f2 	udiv	r2, r3, r2
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	085b      	lsrs	r3, r3, #1
 800a552:	441a      	add	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	2b0f      	cmp	r3, #15
 800a564:	d908      	bls.n	800a578 <UART_SetConfig+0xb20>
 800a566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a56c:	d204      	bcs.n	800a578 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a574:	60da      	str	r2, [r3, #12]
 800a576:	e002      	b.n	800a57e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a59a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3738      	adds	r7, #56	; 0x38
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a5a8:	58024400 	.word	0x58024400
 800a5ac:	03d09000 	.word	0x03d09000
 800a5b0:	003d0900 	.word	0x003d0900
 800a5b4:	0800bf58 	.word	0x0800bf58

0800a5b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c4:	f003 0301 	and.w	r3, r3, #1
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00a      	beq.n	800a5e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e6:	f003 0302 	and.w	r3, r3, #2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	f003 0304 	and.w	r3, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00a      	beq.n	800a626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	f003 0308 	and.w	r3, r3, #8
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	430a      	orrs	r2, r1
 800a646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64c:	f003 0310 	and.w	r3, r3, #16
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00a      	beq.n	800a66a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00a      	beq.n	800a68c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01a      	beq.n	800a6ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6b6:	d10a      	bne.n	800a6ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	605a      	str	r2, [r3, #4]
  }
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af02      	add	r7, sp, #8
 800a702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a70c:	f7f7 fa42 	bl	8001b94 <HAL_GetTick>
 800a710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0308 	and.w	r3, r3, #8
 800a71c:	2b08      	cmp	r3, #8
 800a71e:	d10e      	bne.n	800a73e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f82c 	bl	800a78c <UART_WaitOnFlagUntilTimeout>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a73a:	2303      	movs	r3, #3
 800a73c:	e022      	b.n	800a784 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	2b04      	cmp	r3, #4
 800a74a:	d10e      	bne.n	800a76a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a74c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f816 	bl	800a78c <UART_WaitOnFlagUntilTimeout>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e00c      	b.n	800a784 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2220      	movs	r2, #32
 800a76e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2220      	movs	r2, #32
 800a776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	4613      	mov	r3, r2
 800a79a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a79c:	e062      	b.n	800a864 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a4:	d05e      	beq.n	800a864 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7a6:	f7f7 f9f5 	bl	8001b94 <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	69ba      	ldr	r2, [r7, #24]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d302      	bcc.n	800a7bc <UART_WaitOnFlagUntilTimeout+0x30>
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d11d      	bne.n	800a7f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689a      	ldr	r2, [r3, #8]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f022 0201 	bic.w	r2, r2, #1
 800a7da:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e045      	b.n	800a884 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0304 	and.w	r3, r3, #4
 800a802:	2b00      	cmp	r3, #0
 800a804:	d02e      	beq.n	800a864 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	69db      	ldr	r3, [r3, #28]
 800a80c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a814:	d126      	bne.n	800a864 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a81e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a82e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689a      	ldr	r2, [r3, #8]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f022 0201 	bic.w	r2, r2, #1
 800a83e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2220      	movs	r2, #32
 800a844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2220      	movs	r2, #32
 800a84c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2220      	movs	r2, #32
 800a854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e00f      	b.n	800a884 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69da      	ldr	r2, [r3, #28]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4013      	ands	r3, r2
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	429a      	cmp	r2, r3
 800a872:	bf0c      	ite	eq
 800a874:	2301      	moveq	r3, #1
 800a876:	2300      	movne	r3, #0
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	79fb      	ldrb	r3, [r7, #7]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d08d      	beq.n	800a79e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d101      	bne.n	800a8a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a89e:	2302      	movs	r3, #2
 800a8a0:	e027      	b.n	800a8f2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2224      	movs	r2, #36	; 0x24
 800a8ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f022 0201 	bic.w	r2, r2, #1
 800a8c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b084      	sub	sp, #16
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d101      	bne.n	800a916 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a912:	2302      	movs	r3, #2
 800a914:	e02d      	b.n	800a972 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2224      	movs	r2, #36	; 0x24
 800a922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f022 0201 	bic.w	r2, r2, #1
 800a93c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f850 	bl	800a9f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2220      	movs	r2, #32
 800a964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d101      	bne.n	800a992 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a98e:	2302      	movs	r3, #2
 800a990:	e02d      	b.n	800a9ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2224      	movs	r2, #36	; 0x24
 800a99e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0201 	bic.w	r2, r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f812 	bl	800a9f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2220      	movs	r2, #32
 800a9e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b089      	sub	sp, #36	; 0x24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800aa00:	4a2f      	ldr	r2, [pc, #188]	; (800aac0 <UARTEx_SetNbDataToProcess+0xc8>)
 800aa02:	f107 0314 	add.w	r3, r7, #20
 800aa06:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa0a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800aa0e:	4a2d      	ldr	r2, [pc, #180]	; (800aac4 <UARTEx_SetNbDataToProcess+0xcc>)
 800aa10:	f107 030c 	add.w	r3, r7, #12
 800aa14:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa18:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d108      	bne.n	800aa36 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa34:	e03d      	b.n	800aab2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa36:	2310      	movs	r3, #16
 800aa38:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa3a:	2310      	movs	r3, #16
 800aa3c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	0e5b      	lsrs	r3, r3, #25
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	f003 0307 	and.w	r3, r3, #7
 800aa4c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	0f5b      	lsrs	r3, r3, #29
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	f003 0307 	and.w	r3, r3, #7
 800aa5c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aa5e:	7fbb      	ldrb	r3, [r7, #30]
 800aa60:	7f3a      	ldrb	r2, [r7, #28]
 800aa62:	f107 0120 	add.w	r1, r7, #32
 800aa66:	440a      	add	r2, r1
 800aa68:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aa6c:	fb02 f303 	mul.w	r3, r2, r3
 800aa70:	7f3a      	ldrb	r2, [r7, #28]
 800aa72:	f107 0120 	add.w	r1, r7, #32
 800aa76:	440a      	add	r2, r1
 800aa78:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aa7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aa88:	7ffb      	ldrb	r3, [r7, #31]
 800aa8a:	7f7a      	ldrb	r2, [r7, #29]
 800aa8c:	f107 0120 	add.w	r1, r7, #32
 800aa90:	440a      	add	r2, r1
 800aa92:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800aa96:	fb02 f303 	mul.w	r3, r2, r3
 800aa9a:	7f7a      	ldrb	r2, [r7, #29]
 800aa9c:	f107 0120 	add.w	r1, r7, #32
 800aaa0:	440a      	add	r2, r1
 800aaa2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800aaa6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aab2:	bf00      	nop
 800aab4:	3724      	adds	r7, #36	; 0x24
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	0800bf30 	.word	0x0800bf30
 800aac4:	0800bf38 	.word	0x0800bf38

0800aac8 <__errno>:
 800aac8:	4b01      	ldr	r3, [pc, #4]	; (800aad0 <__errno+0x8>)
 800aaca:	6818      	ldr	r0, [r3, #0]
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	20000014 	.word	0x20000014

0800aad4 <__libc_init_array>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	4e0d      	ldr	r6, [pc, #52]	; (800ab0c <__libc_init_array+0x38>)
 800aad8:	4c0d      	ldr	r4, [pc, #52]	; (800ab10 <__libc_init_array+0x3c>)
 800aada:	1ba4      	subs	r4, r4, r6
 800aadc:	10a4      	asrs	r4, r4, #2
 800aade:	2500      	movs	r5, #0
 800aae0:	42a5      	cmp	r5, r4
 800aae2:	d109      	bne.n	800aaf8 <__libc_init_array+0x24>
 800aae4:	4e0b      	ldr	r6, [pc, #44]	; (800ab14 <__libc_init_array+0x40>)
 800aae6:	4c0c      	ldr	r4, [pc, #48]	; (800ab18 <__libc_init_array+0x44>)
 800aae8:	f001 fa10 	bl	800bf0c <_init>
 800aaec:	1ba4      	subs	r4, r4, r6
 800aaee:	10a4      	asrs	r4, r4, #2
 800aaf0:	2500      	movs	r5, #0
 800aaf2:	42a5      	cmp	r5, r4
 800aaf4:	d105      	bne.n	800ab02 <__libc_init_array+0x2e>
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}
 800aaf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aafc:	4798      	blx	r3
 800aafe:	3501      	adds	r5, #1
 800ab00:	e7ee      	b.n	800aae0 <__libc_init_array+0xc>
 800ab02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab06:	4798      	blx	r3
 800ab08:	3501      	adds	r5, #1
 800ab0a:	e7f2      	b.n	800aaf2 <__libc_init_array+0x1e>
 800ab0c:	0800c188 	.word	0x0800c188
 800ab10:	0800c188 	.word	0x0800c188
 800ab14:	0800c188 	.word	0x0800c188
 800ab18:	0800c18c 	.word	0x0800c18c

0800ab1c <memset>:
 800ab1c:	4402      	add	r2, r0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d100      	bne.n	800ab26 <memset+0xa>
 800ab24:	4770      	bx	lr
 800ab26:	f803 1b01 	strb.w	r1, [r3], #1
 800ab2a:	e7f9      	b.n	800ab20 <memset+0x4>

0800ab2c <siprintf>:
 800ab2c:	b40e      	push	{r1, r2, r3}
 800ab2e:	b500      	push	{lr}
 800ab30:	b09c      	sub	sp, #112	; 0x70
 800ab32:	ab1d      	add	r3, sp, #116	; 0x74
 800ab34:	9002      	str	r0, [sp, #8]
 800ab36:	9006      	str	r0, [sp, #24]
 800ab38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab3c:	4809      	ldr	r0, [pc, #36]	; (800ab64 <siprintf+0x38>)
 800ab3e:	9107      	str	r1, [sp, #28]
 800ab40:	9104      	str	r1, [sp, #16]
 800ab42:	4909      	ldr	r1, [pc, #36]	; (800ab68 <siprintf+0x3c>)
 800ab44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab48:	9105      	str	r1, [sp, #20]
 800ab4a:	6800      	ldr	r0, [r0, #0]
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	a902      	add	r1, sp, #8
 800ab50:	f000 f866 	bl	800ac20 <_svfiprintf_r>
 800ab54:	9b02      	ldr	r3, [sp, #8]
 800ab56:	2200      	movs	r2, #0
 800ab58:	701a      	strb	r2, [r3, #0]
 800ab5a:	b01c      	add	sp, #112	; 0x70
 800ab5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab60:	b003      	add	sp, #12
 800ab62:	4770      	bx	lr
 800ab64:	20000014 	.word	0x20000014
 800ab68:	ffff0208 	.word	0xffff0208

0800ab6c <__ssputs_r>:
 800ab6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab70:	688e      	ldr	r6, [r1, #8]
 800ab72:	429e      	cmp	r6, r3
 800ab74:	4682      	mov	sl, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	4690      	mov	r8, r2
 800ab7a:	4699      	mov	r9, r3
 800ab7c:	d837      	bhi.n	800abee <__ssputs_r+0x82>
 800ab7e:	898a      	ldrh	r2, [r1, #12]
 800ab80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab84:	d031      	beq.n	800abea <__ssputs_r+0x7e>
 800ab86:	6825      	ldr	r5, [r4, #0]
 800ab88:	6909      	ldr	r1, [r1, #16]
 800ab8a:	1a6f      	subs	r7, r5, r1
 800ab8c:	6965      	ldr	r5, [r4, #20]
 800ab8e:	2302      	movs	r3, #2
 800ab90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab94:	fb95 f5f3 	sdiv	r5, r5, r3
 800ab98:	f109 0301 	add.w	r3, r9, #1
 800ab9c:	443b      	add	r3, r7
 800ab9e:	429d      	cmp	r5, r3
 800aba0:	bf38      	it	cc
 800aba2:	461d      	movcc	r5, r3
 800aba4:	0553      	lsls	r3, r2, #21
 800aba6:	d530      	bpl.n	800ac0a <__ssputs_r+0x9e>
 800aba8:	4629      	mov	r1, r5
 800abaa:	f000 fb2b 	bl	800b204 <_malloc_r>
 800abae:	4606      	mov	r6, r0
 800abb0:	b950      	cbnz	r0, 800abc8 <__ssputs_r+0x5c>
 800abb2:	230c      	movs	r3, #12
 800abb4:	f8ca 3000 	str.w	r3, [sl]
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abbe:	81a3      	strh	r3, [r4, #12]
 800abc0:	f04f 30ff 	mov.w	r0, #4294967295
 800abc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc8:	463a      	mov	r2, r7
 800abca:	6921      	ldr	r1, [r4, #16]
 800abcc:	f000 faa8 	bl	800b120 <memcpy>
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abda:	81a3      	strh	r3, [r4, #12]
 800abdc:	6126      	str	r6, [r4, #16]
 800abde:	6165      	str	r5, [r4, #20]
 800abe0:	443e      	add	r6, r7
 800abe2:	1bed      	subs	r5, r5, r7
 800abe4:	6026      	str	r6, [r4, #0]
 800abe6:	60a5      	str	r5, [r4, #8]
 800abe8:	464e      	mov	r6, r9
 800abea:	454e      	cmp	r6, r9
 800abec:	d900      	bls.n	800abf0 <__ssputs_r+0x84>
 800abee:	464e      	mov	r6, r9
 800abf0:	4632      	mov	r2, r6
 800abf2:	4641      	mov	r1, r8
 800abf4:	6820      	ldr	r0, [r4, #0]
 800abf6:	f000 fa9e 	bl	800b136 <memmove>
 800abfa:	68a3      	ldr	r3, [r4, #8]
 800abfc:	1b9b      	subs	r3, r3, r6
 800abfe:	60a3      	str	r3, [r4, #8]
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	441e      	add	r6, r3
 800ac04:	6026      	str	r6, [r4, #0]
 800ac06:	2000      	movs	r0, #0
 800ac08:	e7dc      	b.n	800abc4 <__ssputs_r+0x58>
 800ac0a:	462a      	mov	r2, r5
 800ac0c:	f000 fb54 	bl	800b2b8 <_realloc_r>
 800ac10:	4606      	mov	r6, r0
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d1e2      	bne.n	800abdc <__ssputs_r+0x70>
 800ac16:	6921      	ldr	r1, [r4, #16]
 800ac18:	4650      	mov	r0, sl
 800ac1a:	f000 faa5 	bl	800b168 <_free_r>
 800ac1e:	e7c8      	b.n	800abb2 <__ssputs_r+0x46>

0800ac20 <_svfiprintf_r>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	461d      	mov	r5, r3
 800ac26:	898b      	ldrh	r3, [r1, #12]
 800ac28:	061f      	lsls	r7, r3, #24
 800ac2a:	b09d      	sub	sp, #116	; 0x74
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	4616      	mov	r6, r2
 800ac32:	d50f      	bpl.n	800ac54 <_svfiprintf_r+0x34>
 800ac34:	690b      	ldr	r3, [r1, #16]
 800ac36:	b96b      	cbnz	r3, 800ac54 <_svfiprintf_r+0x34>
 800ac38:	2140      	movs	r1, #64	; 0x40
 800ac3a:	f000 fae3 	bl	800b204 <_malloc_r>
 800ac3e:	6020      	str	r0, [r4, #0]
 800ac40:	6120      	str	r0, [r4, #16]
 800ac42:	b928      	cbnz	r0, 800ac50 <_svfiprintf_r+0x30>
 800ac44:	230c      	movs	r3, #12
 800ac46:	f8c8 3000 	str.w	r3, [r8]
 800ac4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4e:	e0c8      	b.n	800ade2 <_svfiprintf_r+0x1c2>
 800ac50:	2340      	movs	r3, #64	; 0x40
 800ac52:	6163      	str	r3, [r4, #20]
 800ac54:	2300      	movs	r3, #0
 800ac56:	9309      	str	r3, [sp, #36]	; 0x24
 800ac58:	2320      	movs	r3, #32
 800ac5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac5e:	2330      	movs	r3, #48	; 0x30
 800ac60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac64:	9503      	str	r5, [sp, #12]
 800ac66:	f04f 0b01 	mov.w	fp, #1
 800ac6a:	4637      	mov	r7, r6
 800ac6c:	463d      	mov	r5, r7
 800ac6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac72:	b10b      	cbz	r3, 800ac78 <_svfiprintf_r+0x58>
 800ac74:	2b25      	cmp	r3, #37	; 0x25
 800ac76:	d13e      	bne.n	800acf6 <_svfiprintf_r+0xd6>
 800ac78:	ebb7 0a06 	subs.w	sl, r7, r6
 800ac7c:	d00b      	beq.n	800ac96 <_svfiprintf_r+0x76>
 800ac7e:	4653      	mov	r3, sl
 800ac80:	4632      	mov	r2, r6
 800ac82:	4621      	mov	r1, r4
 800ac84:	4640      	mov	r0, r8
 800ac86:	f7ff ff71 	bl	800ab6c <__ssputs_r>
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	f000 80a4 	beq.w	800add8 <_svfiprintf_r+0x1b8>
 800ac90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac92:	4453      	add	r3, sl
 800ac94:	9309      	str	r3, [sp, #36]	; 0x24
 800ac96:	783b      	ldrb	r3, [r7, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 809d 	beq.w	800add8 <_svfiprintf_r+0x1b8>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295
 800aca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aca8:	9304      	str	r3, [sp, #16]
 800acaa:	9307      	str	r3, [sp, #28]
 800acac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acb0:	931a      	str	r3, [sp, #104]	; 0x68
 800acb2:	462f      	mov	r7, r5
 800acb4:	2205      	movs	r2, #5
 800acb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800acba:	4850      	ldr	r0, [pc, #320]	; (800adfc <_svfiprintf_r+0x1dc>)
 800acbc:	f7f5 fb10 	bl	80002e0 <memchr>
 800acc0:	9b04      	ldr	r3, [sp, #16]
 800acc2:	b9d0      	cbnz	r0, 800acfa <_svfiprintf_r+0xda>
 800acc4:	06d9      	lsls	r1, r3, #27
 800acc6:	bf44      	itt	mi
 800acc8:	2220      	movmi	r2, #32
 800acca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800acce:	071a      	lsls	r2, r3, #28
 800acd0:	bf44      	itt	mi
 800acd2:	222b      	movmi	r2, #43	; 0x2b
 800acd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800acd8:	782a      	ldrb	r2, [r5, #0]
 800acda:	2a2a      	cmp	r2, #42	; 0x2a
 800acdc:	d015      	beq.n	800ad0a <_svfiprintf_r+0xea>
 800acde:	9a07      	ldr	r2, [sp, #28]
 800ace0:	462f      	mov	r7, r5
 800ace2:	2000      	movs	r0, #0
 800ace4:	250a      	movs	r5, #10
 800ace6:	4639      	mov	r1, r7
 800ace8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acec:	3b30      	subs	r3, #48	; 0x30
 800acee:	2b09      	cmp	r3, #9
 800acf0:	d94d      	bls.n	800ad8e <_svfiprintf_r+0x16e>
 800acf2:	b1b8      	cbz	r0, 800ad24 <_svfiprintf_r+0x104>
 800acf4:	e00f      	b.n	800ad16 <_svfiprintf_r+0xf6>
 800acf6:	462f      	mov	r7, r5
 800acf8:	e7b8      	b.n	800ac6c <_svfiprintf_r+0x4c>
 800acfa:	4a40      	ldr	r2, [pc, #256]	; (800adfc <_svfiprintf_r+0x1dc>)
 800acfc:	1a80      	subs	r0, r0, r2
 800acfe:	fa0b f000 	lsl.w	r0, fp, r0
 800ad02:	4318      	orrs	r0, r3
 800ad04:	9004      	str	r0, [sp, #16]
 800ad06:	463d      	mov	r5, r7
 800ad08:	e7d3      	b.n	800acb2 <_svfiprintf_r+0x92>
 800ad0a:	9a03      	ldr	r2, [sp, #12]
 800ad0c:	1d11      	adds	r1, r2, #4
 800ad0e:	6812      	ldr	r2, [r2, #0]
 800ad10:	9103      	str	r1, [sp, #12]
 800ad12:	2a00      	cmp	r2, #0
 800ad14:	db01      	blt.n	800ad1a <_svfiprintf_r+0xfa>
 800ad16:	9207      	str	r2, [sp, #28]
 800ad18:	e004      	b.n	800ad24 <_svfiprintf_r+0x104>
 800ad1a:	4252      	negs	r2, r2
 800ad1c:	f043 0302 	orr.w	r3, r3, #2
 800ad20:	9207      	str	r2, [sp, #28]
 800ad22:	9304      	str	r3, [sp, #16]
 800ad24:	783b      	ldrb	r3, [r7, #0]
 800ad26:	2b2e      	cmp	r3, #46	; 0x2e
 800ad28:	d10c      	bne.n	800ad44 <_svfiprintf_r+0x124>
 800ad2a:	787b      	ldrb	r3, [r7, #1]
 800ad2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad2e:	d133      	bne.n	800ad98 <_svfiprintf_r+0x178>
 800ad30:	9b03      	ldr	r3, [sp, #12]
 800ad32:	1d1a      	adds	r2, r3, #4
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	9203      	str	r2, [sp, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	bfb8      	it	lt
 800ad3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad40:	3702      	adds	r7, #2
 800ad42:	9305      	str	r3, [sp, #20]
 800ad44:	4d2e      	ldr	r5, [pc, #184]	; (800ae00 <_svfiprintf_r+0x1e0>)
 800ad46:	7839      	ldrb	r1, [r7, #0]
 800ad48:	2203      	movs	r2, #3
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	f7f5 fac8 	bl	80002e0 <memchr>
 800ad50:	b138      	cbz	r0, 800ad62 <_svfiprintf_r+0x142>
 800ad52:	2340      	movs	r3, #64	; 0x40
 800ad54:	1b40      	subs	r0, r0, r5
 800ad56:	fa03 f000 	lsl.w	r0, r3, r0
 800ad5a:	9b04      	ldr	r3, [sp, #16]
 800ad5c:	4303      	orrs	r3, r0
 800ad5e:	3701      	adds	r7, #1
 800ad60:	9304      	str	r3, [sp, #16]
 800ad62:	7839      	ldrb	r1, [r7, #0]
 800ad64:	4827      	ldr	r0, [pc, #156]	; (800ae04 <_svfiprintf_r+0x1e4>)
 800ad66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad6a:	2206      	movs	r2, #6
 800ad6c:	1c7e      	adds	r6, r7, #1
 800ad6e:	f7f5 fab7 	bl	80002e0 <memchr>
 800ad72:	2800      	cmp	r0, #0
 800ad74:	d038      	beq.n	800ade8 <_svfiprintf_r+0x1c8>
 800ad76:	4b24      	ldr	r3, [pc, #144]	; (800ae08 <_svfiprintf_r+0x1e8>)
 800ad78:	bb13      	cbnz	r3, 800adc0 <_svfiprintf_r+0x1a0>
 800ad7a:	9b03      	ldr	r3, [sp, #12]
 800ad7c:	3307      	adds	r3, #7
 800ad7e:	f023 0307 	bic.w	r3, r3, #7
 800ad82:	3308      	adds	r3, #8
 800ad84:	9303      	str	r3, [sp, #12]
 800ad86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad88:	444b      	add	r3, r9
 800ad8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad8c:	e76d      	b.n	800ac6a <_svfiprintf_r+0x4a>
 800ad8e:	fb05 3202 	mla	r2, r5, r2, r3
 800ad92:	2001      	movs	r0, #1
 800ad94:	460f      	mov	r7, r1
 800ad96:	e7a6      	b.n	800ace6 <_svfiprintf_r+0xc6>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	3701      	adds	r7, #1
 800ad9c:	9305      	str	r3, [sp, #20]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	250a      	movs	r5, #10
 800ada2:	4638      	mov	r0, r7
 800ada4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ada8:	3a30      	subs	r2, #48	; 0x30
 800adaa:	2a09      	cmp	r2, #9
 800adac:	d903      	bls.n	800adb6 <_svfiprintf_r+0x196>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0c8      	beq.n	800ad44 <_svfiprintf_r+0x124>
 800adb2:	9105      	str	r1, [sp, #20]
 800adb4:	e7c6      	b.n	800ad44 <_svfiprintf_r+0x124>
 800adb6:	fb05 2101 	mla	r1, r5, r1, r2
 800adba:	2301      	movs	r3, #1
 800adbc:	4607      	mov	r7, r0
 800adbe:	e7f0      	b.n	800ada2 <_svfiprintf_r+0x182>
 800adc0:	ab03      	add	r3, sp, #12
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	4622      	mov	r2, r4
 800adc6:	4b11      	ldr	r3, [pc, #68]	; (800ae0c <_svfiprintf_r+0x1ec>)
 800adc8:	a904      	add	r1, sp, #16
 800adca:	4640      	mov	r0, r8
 800adcc:	f3af 8000 	nop.w
 800add0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800add4:	4681      	mov	r9, r0
 800add6:	d1d6      	bne.n	800ad86 <_svfiprintf_r+0x166>
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	065b      	lsls	r3, r3, #25
 800addc:	f53f af35 	bmi.w	800ac4a <_svfiprintf_r+0x2a>
 800ade0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ade2:	b01d      	add	sp, #116	; 0x74
 800ade4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade8:	ab03      	add	r3, sp, #12
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	4622      	mov	r2, r4
 800adee:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <_svfiprintf_r+0x1ec>)
 800adf0:	a904      	add	r1, sp, #16
 800adf2:	4640      	mov	r0, r8
 800adf4:	f000 f882 	bl	800aefc <_printf_i>
 800adf8:	e7ea      	b.n	800add0 <_svfiprintf_r+0x1b0>
 800adfa:	bf00      	nop
 800adfc:	0800bf70 	.word	0x0800bf70
 800ae00:	0800bf76 	.word	0x0800bf76
 800ae04:	0800bf7a 	.word	0x0800bf7a
 800ae08:	00000000 	.word	0x00000000
 800ae0c:	0800ab6d 	.word	0x0800ab6d

0800ae10 <_printf_common>:
 800ae10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae14:	4691      	mov	r9, r2
 800ae16:	461f      	mov	r7, r3
 800ae18:	688a      	ldr	r2, [r1, #8]
 800ae1a:	690b      	ldr	r3, [r1, #16]
 800ae1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae20:	4293      	cmp	r3, r2
 800ae22:	bfb8      	it	lt
 800ae24:	4613      	movlt	r3, r2
 800ae26:	f8c9 3000 	str.w	r3, [r9]
 800ae2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae2e:	4606      	mov	r6, r0
 800ae30:	460c      	mov	r4, r1
 800ae32:	b112      	cbz	r2, 800ae3a <_printf_common+0x2a>
 800ae34:	3301      	adds	r3, #1
 800ae36:	f8c9 3000 	str.w	r3, [r9]
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	0699      	lsls	r1, r3, #26
 800ae3e:	bf42      	ittt	mi
 800ae40:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ae44:	3302      	addmi	r3, #2
 800ae46:	f8c9 3000 	strmi.w	r3, [r9]
 800ae4a:	6825      	ldr	r5, [r4, #0]
 800ae4c:	f015 0506 	ands.w	r5, r5, #6
 800ae50:	d107      	bne.n	800ae62 <_printf_common+0x52>
 800ae52:	f104 0a19 	add.w	sl, r4, #25
 800ae56:	68e3      	ldr	r3, [r4, #12]
 800ae58:	f8d9 2000 	ldr.w	r2, [r9]
 800ae5c:	1a9b      	subs	r3, r3, r2
 800ae5e:	42ab      	cmp	r3, r5
 800ae60:	dc28      	bgt.n	800aeb4 <_printf_common+0xa4>
 800ae62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	3300      	adds	r3, #0
 800ae6a:	bf18      	it	ne
 800ae6c:	2301      	movne	r3, #1
 800ae6e:	0692      	lsls	r2, r2, #26
 800ae70:	d42d      	bmi.n	800aece <_printf_common+0xbe>
 800ae72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae76:	4639      	mov	r1, r7
 800ae78:	4630      	mov	r0, r6
 800ae7a:	47c0      	blx	r8
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	d020      	beq.n	800aec2 <_printf_common+0xb2>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	68e5      	ldr	r5, [r4, #12]
 800ae84:	f8d9 2000 	ldr.w	r2, [r9]
 800ae88:	f003 0306 	and.w	r3, r3, #6
 800ae8c:	2b04      	cmp	r3, #4
 800ae8e:	bf08      	it	eq
 800ae90:	1aad      	subeq	r5, r5, r2
 800ae92:	68a3      	ldr	r3, [r4, #8]
 800ae94:	6922      	ldr	r2, [r4, #16]
 800ae96:	bf0c      	ite	eq
 800ae98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae9c:	2500      	movne	r5, #0
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	bfc4      	itt	gt
 800aea2:	1a9b      	subgt	r3, r3, r2
 800aea4:	18ed      	addgt	r5, r5, r3
 800aea6:	f04f 0900 	mov.w	r9, #0
 800aeaa:	341a      	adds	r4, #26
 800aeac:	454d      	cmp	r5, r9
 800aeae:	d11a      	bne.n	800aee6 <_printf_common+0xd6>
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	e008      	b.n	800aec6 <_printf_common+0xb6>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	4652      	mov	r2, sl
 800aeb8:	4639      	mov	r1, r7
 800aeba:	4630      	mov	r0, r6
 800aebc:	47c0      	blx	r8
 800aebe:	3001      	adds	r0, #1
 800aec0:	d103      	bne.n	800aeca <_printf_common+0xba>
 800aec2:	f04f 30ff 	mov.w	r0, #4294967295
 800aec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeca:	3501      	adds	r5, #1
 800aecc:	e7c3      	b.n	800ae56 <_printf_common+0x46>
 800aece:	18e1      	adds	r1, r4, r3
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	2030      	movs	r0, #48	; 0x30
 800aed4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aed8:	4422      	add	r2, r4
 800aeda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aede:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aee2:	3302      	adds	r3, #2
 800aee4:	e7c5      	b.n	800ae72 <_printf_common+0x62>
 800aee6:	2301      	movs	r3, #1
 800aee8:	4622      	mov	r2, r4
 800aeea:	4639      	mov	r1, r7
 800aeec:	4630      	mov	r0, r6
 800aeee:	47c0      	blx	r8
 800aef0:	3001      	adds	r0, #1
 800aef2:	d0e6      	beq.n	800aec2 <_printf_common+0xb2>
 800aef4:	f109 0901 	add.w	r9, r9, #1
 800aef8:	e7d8      	b.n	800aeac <_printf_common+0x9c>
	...

0800aefc <_printf_i>:
 800aefc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800af04:	460c      	mov	r4, r1
 800af06:	7e09      	ldrb	r1, [r1, #24]
 800af08:	b085      	sub	sp, #20
 800af0a:	296e      	cmp	r1, #110	; 0x6e
 800af0c:	4617      	mov	r7, r2
 800af0e:	4606      	mov	r6, r0
 800af10:	4698      	mov	r8, r3
 800af12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af14:	f000 80b3 	beq.w	800b07e <_printf_i+0x182>
 800af18:	d822      	bhi.n	800af60 <_printf_i+0x64>
 800af1a:	2963      	cmp	r1, #99	; 0x63
 800af1c:	d036      	beq.n	800af8c <_printf_i+0x90>
 800af1e:	d80a      	bhi.n	800af36 <_printf_i+0x3a>
 800af20:	2900      	cmp	r1, #0
 800af22:	f000 80b9 	beq.w	800b098 <_printf_i+0x19c>
 800af26:	2958      	cmp	r1, #88	; 0x58
 800af28:	f000 8083 	beq.w	800b032 <_printf_i+0x136>
 800af2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800af34:	e032      	b.n	800af9c <_printf_i+0xa0>
 800af36:	2964      	cmp	r1, #100	; 0x64
 800af38:	d001      	beq.n	800af3e <_printf_i+0x42>
 800af3a:	2969      	cmp	r1, #105	; 0x69
 800af3c:	d1f6      	bne.n	800af2c <_printf_i+0x30>
 800af3e:	6820      	ldr	r0, [r4, #0]
 800af40:	6813      	ldr	r3, [r2, #0]
 800af42:	0605      	lsls	r5, r0, #24
 800af44:	f103 0104 	add.w	r1, r3, #4
 800af48:	d52a      	bpl.n	800afa0 <_printf_i+0xa4>
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	6011      	str	r1, [r2, #0]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	da03      	bge.n	800af5a <_printf_i+0x5e>
 800af52:	222d      	movs	r2, #45	; 0x2d
 800af54:	425b      	negs	r3, r3
 800af56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800af5a:	486f      	ldr	r0, [pc, #444]	; (800b118 <_printf_i+0x21c>)
 800af5c:	220a      	movs	r2, #10
 800af5e:	e039      	b.n	800afd4 <_printf_i+0xd8>
 800af60:	2973      	cmp	r1, #115	; 0x73
 800af62:	f000 809d 	beq.w	800b0a0 <_printf_i+0x1a4>
 800af66:	d808      	bhi.n	800af7a <_printf_i+0x7e>
 800af68:	296f      	cmp	r1, #111	; 0x6f
 800af6a:	d020      	beq.n	800afae <_printf_i+0xb2>
 800af6c:	2970      	cmp	r1, #112	; 0x70
 800af6e:	d1dd      	bne.n	800af2c <_printf_i+0x30>
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	f043 0320 	orr.w	r3, r3, #32
 800af76:	6023      	str	r3, [r4, #0]
 800af78:	e003      	b.n	800af82 <_printf_i+0x86>
 800af7a:	2975      	cmp	r1, #117	; 0x75
 800af7c:	d017      	beq.n	800afae <_printf_i+0xb2>
 800af7e:	2978      	cmp	r1, #120	; 0x78
 800af80:	d1d4      	bne.n	800af2c <_printf_i+0x30>
 800af82:	2378      	movs	r3, #120	; 0x78
 800af84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800af88:	4864      	ldr	r0, [pc, #400]	; (800b11c <_printf_i+0x220>)
 800af8a:	e055      	b.n	800b038 <_printf_i+0x13c>
 800af8c:	6813      	ldr	r3, [r2, #0]
 800af8e:	1d19      	adds	r1, r3, #4
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	6011      	str	r1, [r2, #0]
 800af94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af9c:	2301      	movs	r3, #1
 800af9e:	e08c      	b.n	800b0ba <_printf_i+0x1be>
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6011      	str	r1, [r2, #0]
 800afa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afa8:	bf18      	it	ne
 800afaa:	b21b      	sxthne	r3, r3
 800afac:	e7cf      	b.n	800af4e <_printf_i+0x52>
 800afae:	6813      	ldr	r3, [r2, #0]
 800afb0:	6825      	ldr	r5, [r4, #0]
 800afb2:	1d18      	adds	r0, r3, #4
 800afb4:	6010      	str	r0, [r2, #0]
 800afb6:	0628      	lsls	r0, r5, #24
 800afb8:	d501      	bpl.n	800afbe <_printf_i+0xc2>
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	e002      	b.n	800afc4 <_printf_i+0xc8>
 800afbe:	0668      	lsls	r0, r5, #25
 800afc0:	d5fb      	bpl.n	800afba <_printf_i+0xbe>
 800afc2:	881b      	ldrh	r3, [r3, #0]
 800afc4:	4854      	ldr	r0, [pc, #336]	; (800b118 <_printf_i+0x21c>)
 800afc6:	296f      	cmp	r1, #111	; 0x6f
 800afc8:	bf14      	ite	ne
 800afca:	220a      	movne	r2, #10
 800afcc:	2208      	moveq	r2, #8
 800afce:	2100      	movs	r1, #0
 800afd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afd4:	6865      	ldr	r5, [r4, #4]
 800afd6:	60a5      	str	r5, [r4, #8]
 800afd8:	2d00      	cmp	r5, #0
 800afda:	f2c0 8095 	blt.w	800b108 <_printf_i+0x20c>
 800afde:	6821      	ldr	r1, [r4, #0]
 800afe0:	f021 0104 	bic.w	r1, r1, #4
 800afe4:	6021      	str	r1, [r4, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d13d      	bne.n	800b066 <_printf_i+0x16a>
 800afea:	2d00      	cmp	r5, #0
 800afec:	f040 808e 	bne.w	800b10c <_printf_i+0x210>
 800aff0:	4665      	mov	r5, ip
 800aff2:	2a08      	cmp	r2, #8
 800aff4:	d10b      	bne.n	800b00e <_printf_i+0x112>
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	07db      	lsls	r3, r3, #31
 800affa:	d508      	bpl.n	800b00e <_printf_i+0x112>
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	6862      	ldr	r2, [r4, #4]
 800b000:	429a      	cmp	r2, r3
 800b002:	bfde      	ittt	le
 800b004:	2330      	movle	r3, #48	; 0x30
 800b006:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b00a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b00e:	ebac 0305 	sub.w	r3, ip, r5
 800b012:	6123      	str	r3, [r4, #16]
 800b014:	f8cd 8000 	str.w	r8, [sp]
 800b018:	463b      	mov	r3, r7
 800b01a:	aa03      	add	r2, sp, #12
 800b01c:	4621      	mov	r1, r4
 800b01e:	4630      	mov	r0, r6
 800b020:	f7ff fef6 	bl	800ae10 <_printf_common>
 800b024:	3001      	adds	r0, #1
 800b026:	d14d      	bne.n	800b0c4 <_printf_i+0x1c8>
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	b005      	add	sp, #20
 800b02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b032:	4839      	ldr	r0, [pc, #228]	; (800b118 <_printf_i+0x21c>)
 800b034:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b038:	6813      	ldr	r3, [r2, #0]
 800b03a:	6821      	ldr	r1, [r4, #0]
 800b03c:	1d1d      	adds	r5, r3, #4
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6015      	str	r5, [r2, #0]
 800b042:	060a      	lsls	r2, r1, #24
 800b044:	d50b      	bpl.n	800b05e <_printf_i+0x162>
 800b046:	07ca      	lsls	r2, r1, #31
 800b048:	bf44      	itt	mi
 800b04a:	f041 0120 	orrmi.w	r1, r1, #32
 800b04e:	6021      	strmi	r1, [r4, #0]
 800b050:	b91b      	cbnz	r3, 800b05a <_printf_i+0x15e>
 800b052:	6822      	ldr	r2, [r4, #0]
 800b054:	f022 0220 	bic.w	r2, r2, #32
 800b058:	6022      	str	r2, [r4, #0]
 800b05a:	2210      	movs	r2, #16
 800b05c:	e7b7      	b.n	800afce <_printf_i+0xd2>
 800b05e:	064d      	lsls	r5, r1, #25
 800b060:	bf48      	it	mi
 800b062:	b29b      	uxthmi	r3, r3
 800b064:	e7ef      	b.n	800b046 <_printf_i+0x14a>
 800b066:	4665      	mov	r5, ip
 800b068:	fbb3 f1f2 	udiv	r1, r3, r2
 800b06c:	fb02 3311 	mls	r3, r2, r1, r3
 800b070:	5cc3      	ldrb	r3, [r0, r3]
 800b072:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b076:	460b      	mov	r3, r1
 800b078:	2900      	cmp	r1, #0
 800b07a:	d1f5      	bne.n	800b068 <_printf_i+0x16c>
 800b07c:	e7b9      	b.n	800aff2 <_printf_i+0xf6>
 800b07e:	6813      	ldr	r3, [r2, #0]
 800b080:	6825      	ldr	r5, [r4, #0]
 800b082:	6961      	ldr	r1, [r4, #20]
 800b084:	1d18      	adds	r0, r3, #4
 800b086:	6010      	str	r0, [r2, #0]
 800b088:	0628      	lsls	r0, r5, #24
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	d501      	bpl.n	800b092 <_printf_i+0x196>
 800b08e:	6019      	str	r1, [r3, #0]
 800b090:	e002      	b.n	800b098 <_printf_i+0x19c>
 800b092:	066a      	lsls	r2, r5, #25
 800b094:	d5fb      	bpl.n	800b08e <_printf_i+0x192>
 800b096:	8019      	strh	r1, [r3, #0]
 800b098:	2300      	movs	r3, #0
 800b09a:	6123      	str	r3, [r4, #16]
 800b09c:	4665      	mov	r5, ip
 800b09e:	e7b9      	b.n	800b014 <_printf_i+0x118>
 800b0a0:	6813      	ldr	r3, [r2, #0]
 800b0a2:	1d19      	adds	r1, r3, #4
 800b0a4:	6011      	str	r1, [r2, #0]
 800b0a6:	681d      	ldr	r5, [r3, #0]
 800b0a8:	6862      	ldr	r2, [r4, #4]
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f7f5 f917 	bl	80002e0 <memchr>
 800b0b2:	b108      	cbz	r0, 800b0b8 <_printf_i+0x1bc>
 800b0b4:	1b40      	subs	r0, r0, r5
 800b0b6:	6060      	str	r0, [r4, #4]
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	6123      	str	r3, [r4, #16]
 800b0bc:	2300      	movs	r3, #0
 800b0be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0c2:	e7a7      	b.n	800b014 <_printf_i+0x118>
 800b0c4:	6923      	ldr	r3, [r4, #16]
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	47c0      	blx	r8
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d0aa      	beq.n	800b028 <_printf_i+0x12c>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	079b      	lsls	r3, r3, #30
 800b0d6:	d413      	bmi.n	800b100 <_printf_i+0x204>
 800b0d8:	68e0      	ldr	r0, [r4, #12]
 800b0da:	9b03      	ldr	r3, [sp, #12]
 800b0dc:	4298      	cmp	r0, r3
 800b0de:	bfb8      	it	lt
 800b0e0:	4618      	movlt	r0, r3
 800b0e2:	e7a3      	b.n	800b02c <_printf_i+0x130>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	464a      	mov	r2, r9
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	47c0      	blx	r8
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d09a      	beq.n	800b028 <_printf_i+0x12c>
 800b0f2:	3501      	adds	r5, #1
 800b0f4:	68e3      	ldr	r3, [r4, #12]
 800b0f6:	9a03      	ldr	r2, [sp, #12]
 800b0f8:	1a9b      	subs	r3, r3, r2
 800b0fa:	42ab      	cmp	r3, r5
 800b0fc:	dcf2      	bgt.n	800b0e4 <_printf_i+0x1e8>
 800b0fe:	e7eb      	b.n	800b0d8 <_printf_i+0x1dc>
 800b100:	2500      	movs	r5, #0
 800b102:	f104 0919 	add.w	r9, r4, #25
 800b106:	e7f5      	b.n	800b0f4 <_printf_i+0x1f8>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1ac      	bne.n	800b066 <_printf_i+0x16a>
 800b10c:	7803      	ldrb	r3, [r0, #0]
 800b10e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b112:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b116:	e76c      	b.n	800aff2 <_printf_i+0xf6>
 800b118:	0800bf81 	.word	0x0800bf81
 800b11c:	0800bf92 	.word	0x0800bf92

0800b120 <memcpy>:
 800b120:	b510      	push	{r4, lr}
 800b122:	1e43      	subs	r3, r0, #1
 800b124:	440a      	add	r2, r1
 800b126:	4291      	cmp	r1, r2
 800b128:	d100      	bne.n	800b12c <memcpy+0xc>
 800b12a:	bd10      	pop	{r4, pc}
 800b12c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b130:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b134:	e7f7      	b.n	800b126 <memcpy+0x6>

0800b136 <memmove>:
 800b136:	4288      	cmp	r0, r1
 800b138:	b510      	push	{r4, lr}
 800b13a:	eb01 0302 	add.w	r3, r1, r2
 800b13e:	d807      	bhi.n	800b150 <memmove+0x1a>
 800b140:	1e42      	subs	r2, r0, #1
 800b142:	4299      	cmp	r1, r3
 800b144:	d00a      	beq.n	800b15c <memmove+0x26>
 800b146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b14a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b14e:	e7f8      	b.n	800b142 <memmove+0xc>
 800b150:	4283      	cmp	r3, r0
 800b152:	d9f5      	bls.n	800b140 <memmove+0xa>
 800b154:	1881      	adds	r1, r0, r2
 800b156:	1ad2      	subs	r2, r2, r3
 800b158:	42d3      	cmn	r3, r2
 800b15a:	d100      	bne.n	800b15e <memmove+0x28>
 800b15c:	bd10      	pop	{r4, pc}
 800b15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b162:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b166:	e7f7      	b.n	800b158 <memmove+0x22>

0800b168 <_free_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4605      	mov	r5, r0
 800b16c:	2900      	cmp	r1, #0
 800b16e:	d045      	beq.n	800b1fc <_free_r+0x94>
 800b170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b174:	1f0c      	subs	r4, r1, #4
 800b176:	2b00      	cmp	r3, #0
 800b178:	bfb8      	it	lt
 800b17a:	18e4      	addlt	r4, r4, r3
 800b17c:	f000 f8d2 	bl	800b324 <__malloc_lock>
 800b180:	4a1f      	ldr	r2, [pc, #124]	; (800b200 <_free_r+0x98>)
 800b182:	6813      	ldr	r3, [r2, #0]
 800b184:	4610      	mov	r0, r2
 800b186:	b933      	cbnz	r3, 800b196 <_free_r+0x2e>
 800b188:	6063      	str	r3, [r4, #4]
 800b18a:	6014      	str	r4, [r2, #0]
 800b18c:	4628      	mov	r0, r5
 800b18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b192:	f000 b8c8 	b.w	800b326 <__malloc_unlock>
 800b196:	42a3      	cmp	r3, r4
 800b198:	d90c      	bls.n	800b1b4 <_free_r+0x4c>
 800b19a:	6821      	ldr	r1, [r4, #0]
 800b19c:	1862      	adds	r2, r4, r1
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	bf04      	itt	eq
 800b1a2:	681a      	ldreq	r2, [r3, #0]
 800b1a4:	685b      	ldreq	r3, [r3, #4]
 800b1a6:	6063      	str	r3, [r4, #4]
 800b1a8:	bf04      	itt	eq
 800b1aa:	1852      	addeq	r2, r2, r1
 800b1ac:	6022      	streq	r2, [r4, #0]
 800b1ae:	6004      	str	r4, [r0, #0]
 800b1b0:	e7ec      	b.n	800b18c <_free_r+0x24>
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	b10a      	cbz	r2, 800b1bc <_free_r+0x54>
 800b1b8:	42a2      	cmp	r2, r4
 800b1ba:	d9fa      	bls.n	800b1b2 <_free_r+0x4a>
 800b1bc:	6819      	ldr	r1, [r3, #0]
 800b1be:	1858      	adds	r0, r3, r1
 800b1c0:	42a0      	cmp	r0, r4
 800b1c2:	d10b      	bne.n	800b1dc <_free_r+0x74>
 800b1c4:	6820      	ldr	r0, [r4, #0]
 800b1c6:	4401      	add	r1, r0
 800b1c8:	1858      	adds	r0, r3, r1
 800b1ca:	4282      	cmp	r2, r0
 800b1cc:	6019      	str	r1, [r3, #0]
 800b1ce:	d1dd      	bne.n	800b18c <_free_r+0x24>
 800b1d0:	6810      	ldr	r0, [r2, #0]
 800b1d2:	6852      	ldr	r2, [r2, #4]
 800b1d4:	605a      	str	r2, [r3, #4]
 800b1d6:	4401      	add	r1, r0
 800b1d8:	6019      	str	r1, [r3, #0]
 800b1da:	e7d7      	b.n	800b18c <_free_r+0x24>
 800b1dc:	d902      	bls.n	800b1e4 <_free_r+0x7c>
 800b1de:	230c      	movs	r3, #12
 800b1e0:	602b      	str	r3, [r5, #0]
 800b1e2:	e7d3      	b.n	800b18c <_free_r+0x24>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	1821      	adds	r1, r4, r0
 800b1e8:	428a      	cmp	r2, r1
 800b1ea:	bf04      	itt	eq
 800b1ec:	6811      	ldreq	r1, [r2, #0]
 800b1ee:	6852      	ldreq	r2, [r2, #4]
 800b1f0:	6062      	str	r2, [r4, #4]
 800b1f2:	bf04      	itt	eq
 800b1f4:	1809      	addeq	r1, r1, r0
 800b1f6:	6021      	streq	r1, [r4, #0]
 800b1f8:	605c      	str	r4, [r3, #4]
 800b1fa:	e7c7      	b.n	800b18c <_free_r+0x24>
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	200000a4 	.word	0x200000a4

0800b204 <_malloc_r>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	1ccd      	adds	r5, r1, #3
 800b208:	f025 0503 	bic.w	r5, r5, #3
 800b20c:	3508      	adds	r5, #8
 800b20e:	2d0c      	cmp	r5, #12
 800b210:	bf38      	it	cc
 800b212:	250c      	movcc	r5, #12
 800b214:	2d00      	cmp	r5, #0
 800b216:	4606      	mov	r6, r0
 800b218:	db01      	blt.n	800b21e <_malloc_r+0x1a>
 800b21a:	42a9      	cmp	r1, r5
 800b21c:	d903      	bls.n	800b226 <_malloc_r+0x22>
 800b21e:	230c      	movs	r3, #12
 800b220:	6033      	str	r3, [r6, #0]
 800b222:	2000      	movs	r0, #0
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	f000 f87d 	bl	800b324 <__malloc_lock>
 800b22a:	4a21      	ldr	r2, [pc, #132]	; (800b2b0 <_malloc_r+0xac>)
 800b22c:	6814      	ldr	r4, [r2, #0]
 800b22e:	4621      	mov	r1, r4
 800b230:	b991      	cbnz	r1, 800b258 <_malloc_r+0x54>
 800b232:	4c20      	ldr	r4, [pc, #128]	; (800b2b4 <_malloc_r+0xb0>)
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	b91b      	cbnz	r3, 800b240 <_malloc_r+0x3c>
 800b238:	4630      	mov	r0, r6
 800b23a:	f000 f863 	bl	800b304 <_sbrk_r>
 800b23e:	6020      	str	r0, [r4, #0]
 800b240:	4629      	mov	r1, r5
 800b242:	4630      	mov	r0, r6
 800b244:	f000 f85e 	bl	800b304 <_sbrk_r>
 800b248:	1c43      	adds	r3, r0, #1
 800b24a:	d124      	bne.n	800b296 <_malloc_r+0x92>
 800b24c:	230c      	movs	r3, #12
 800b24e:	6033      	str	r3, [r6, #0]
 800b250:	4630      	mov	r0, r6
 800b252:	f000 f868 	bl	800b326 <__malloc_unlock>
 800b256:	e7e4      	b.n	800b222 <_malloc_r+0x1e>
 800b258:	680b      	ldr	r3, [r1, #0]
 800b25a:	1b5b      	subs	r3, r3, r5
 800b25c:	d418      	bmi.n	800b290 <_malloc_r+0x8c>
 800b25e:	2b0b      	cmp	r3, #11
 800b260:	d90f      	bls.n	800b282 <_malloc_r+0x7e>
 800b262:	600b      	str	r3, [r1, #0]
 800b264:	50cd      	str	r5, [r1, r3]
 800b266:	18cc      	adds	r4, r1, r3
 800b268:	4630      	mov	r0, r6
 800b26a:	f000 f85c 	bl	800b326 <__malloc_unlock>
 800b26e:	f104 000b 	add.w	r0, r4, #11
 800b272:	1d23      	adds	r3, r4, #4
 800b274:	f020 0007 	bic.w	r0, r0, #7
 800b278:	1ac3      	subs	r3, r0, r3
 800b27a:	d0d3      	beq.n	800b224 <_malloc_r+0x20>
 800b27c:	425a      	negs	r2, r3
 800b27e:	50e2      	str	r2, [r4, r3]
 800b280:	e7d0      	b.n	800b224 <_malloc_r+0x20>
 800b282:	428c      	cmp	r4, r1
 800b284:	684b      	ldr	r3, [r1, #4]
 800b286:	bf16      	itet	ne
 800b288:	6063      	strne	r3, [r4, #4]
 800b28a:	6013      	streq	r3, [r2, #0]
 800b28c:	460c      	movne	r4, r1
 800b28e:	e7eb      	b.n	800b268 <_malloc_r+0x64>
 800b290:	460c      	mov	r4, r1
 800b292:	6849      	ldr	r1, [r1, #4]
 800b294:	e7cc      	b.n	800b230 <_malloc_r+0x2c>
 800b296:	1cc4      	adds	r4, r0, #3
 800b298:	f024 0403 	bic.w	r4, r4, #3
 800b29c:	42a0      	cmp	r0, r4
 800b29e:	d005      	beq.n	800b2ac <_malloc_r+0xa8>
 800b2a0:	1a21      	subs	r1, r4, r0
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f000 f82e 	bl	800b304 <_sbrk_r>
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d0cf      	beq.n	800b24c <_malloc_r+0x48>
 800b2ac:	6025      	str	r5, [r4, #0]
 800b2ae:	e7db      	b.n	800b268 <_malloc_r+0x64>
 800b2b0:	200000a4 	.word	0x200000a4
 800b2b4:	200000a8 	.word	0x200000a8

0800b2b8 <_realloc_r>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	4614      	mov	r4, r2
 800b2be:	460e      	mov	r6, r1
 800b2c0:	b921      	cbnz	r1, 800b2cc <_realloc_r+0x14>
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2c8:	f7ff bf9c 	b.w	800b204 <_malloc_r>
 800b2cc:	b922      	cbnz	r2, 800b2d8 <_realloc_r+0x20>
 800b2ce:	f7ff ff4b 	bl	800b168 <_free_r>
 800b2d2:	4625      	mov	r5, r4
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d8:	f000 f826 	bl	800b328 <_malloc_usable_size_r>
 800b2dc:	42a0      	cmp	r0, r4
 800b2de:	d20f      	bcs.n	800b300 <_realloc_r+0x48>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	f7ff ff8e 	bl	800b204 <_malloc_r>
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d0f2      	beq.n	800b2d4 <_realloc_r+0x1c>
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	f7ff ff15 	bl	800b120 <memcpy>
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	f7ff ff35 	bl	800b168 <_free_r>
 800b2fe:	e7e9      	b.n	800b2d4 <_realloc_r+0x1c>
 800b300:	4635      	mov	r5, r6
 800b302:	e7e7      	b.n	800b2d4 <_realloc_r+0x1c>

0800b304 <_sbrk_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4c06      	ldr	r4, [pc, #24]	; (800b320 <_sbrk_r+0x1c>)
 800b308:	2300      	movs	r3, #0
 800b30a:	4605      	mov	r5, r0
 800b30c:	4608      	mov	r0, r1
 800b30e:	6023      	str	r3, [r4, #0]
 800b310:	f7f6 fb5a 	bl	80019c8 <_sbrk>
 800b314:	1c43      	adds	r3, r0, #1
 800b316:	d102      	bne.n	800b31e <_sbrk_r+0x1a>
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	b103      	cbz	r3, 800b31e <_sbrk_r+0x1a>
 800b31c:	602b      	str	r3, [r5, #0]
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	20001458 	.word	0x20001458

0800b324 <__malloc_lock>:
 800b324:	4770      	bx	lr

0800b326 <__malloc_unlock>:
 800b326:	4770      	bx	lr

0800b328 <_malloc_usable_size_r>:
 800b328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32c:	1f18      	subs	r0, r3, #4
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bfbc      	itt	lt
 800b332:	580b      	ldrlt	r3, [r1, r0]
 800b334:	18c0      	addlt	r0, r0, r3
 800b336:	4770      	bx	lr

0800b338 <sin>:
 800b338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b33a:	eeb0 7b40 	vmov.f64	d7, d0
 800b33e:	ee17 3a90 	vmov	r3, s15
 800b342:	4a19      	ldr	r2, [pc, #100]	; (800b3a8 <sin+0x70>)
 800b344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b348:	4293      	cmp	r3, r2
 800b34a:	dc05      	bgt.n	800b358 <sin+0x20>
 800b34c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800b3a0 <sin+0x68>
 800b350:	2000      	movs	r0, #0
 800b352:	f000 fc71 	bl	800bc38 <__kernel_sin>
 800b356:	e004      	b.n	800b362 <sin+0x2a>
 800b358:	4a14      	ldr	r2, [pc, #80]	; (800b3ac <sin+0x74>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	dd04      	ble.n	800b368 <sin+0x30>
 800b35e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b362:	b005      	add	sp, #20
 800b364:	f85d fb04 	ldr.w	pc, [sp], #4
 800b368:	4668      	mov	r0, sp
 800b36a:	f000 f821 	bl	800b3b0 <__ieee754_rem_pio2>
 800b36e:	f000 0003 	and.w	r0, r0, #3
 800b372:	2801      	cmp	r0, #1
 800b374:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b378:	ed9d 0b00 	vldr	d0, [sp]
 800b37c:	d004      	beq.n	800b388 <sin+0x50>
 800b37e:	2802      	cmp	r0, #2
 800b380:	d005      	beq.n	800b38e <sin+0x56>
 800b382:	b950      	cbnz	r0, 800b39a <sin+0x62>
 800b384:	2001      	movs	r0, #1
 800b386:	e7e4      	b.n	800b352 <sin+0x1a>
 800b388:	f000 f94e 	bl	800b628 <__kernel_cos>
 800b38c:	e7e9      	b.n	800b362 <sin+0x2a>
 800b38e:	2001      	movs	r0, #1
 800b390:	f000 fc52 	bl	800bc38 <__kernel_sin>
 800b394:	eeb1 0b40 	vneg.f64	d0, d0
 800b398:	e7e3      	b.n	800b362 <sin+0x2a>
 800b39a:	f000 f945 	bl	800b628 <__kernel_cos>
 800b39e:	e7f9      	b.n	800b394 <sin+0x5c>
	...
 800b3a8:	3fe921fb 	.word	0x3fe921fb
 800b3ac:	7fefffff 	.word	0x7fefffff

0800b3b0 <__ieee754_rem_pio2>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	eeb0 7b40 	vmov.f64	d7, d0
 800b3b6:	ee17 5a90 	vmov	r5, s15
 800b3ba:	4b95      	ldr	r3, [pc, #596]	; (800b610 <__ieee754_rem_pio2+0x260>)
 800b3bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b3c0:	429e      	cmp	r6, r3
 800b3c2:	b088      	sub	sp, #32
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	dc07      	bgt.n	800b3d8 <__ieee754_rem_pio2+0x28>
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	ed84 0b00 	vstr	d0, [r4]
 800b3d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	e01b      	b.n	800b410 <__ieee754_rem_pio2+0x60>
 800b3d8:	4b8e      	ldr	r3, [pc, #568]	; (800b614 <__ieee754_rem_pio2+0x264>)
 800b3da:	429e      	cmp	r6, r3
 800b3dc:	dc3b      	bgt.n	800b456 <__ieee754_rem_pio2+0xa6>
 800b3de:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800b3e2:	2d00      	cmp	r5, #0
 800b3e4:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800b5d0 <__ieee754_rem_pio2+0x220>
 800b3e8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800b3ec:	dd19      	ble.n	800b422 <__ieee754_rem_pio2+0x72>
 800b3ee:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b3f2:	429e      	cmp	r6, r3
 800b3f4:	d00e      	beq.n	800b414 <__ieee754_rem_pio2+0x64>
 800b3f6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800b5d8 <__ieee754_rem_pio2+0x228>
 800b3fa:	ee37 5b46 	vsub.f64	d5, d7, d6
 800b3fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b402:	ed84 5b00 	vstr	d5, [r4]
 800b406:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b40a:	ed84 7b02 	vstr	d7, [r4, #8]
 800b40e:	2001      	movs	r0, #1
 800b410:	b008      	add	sp, #32
 800b412:	bd70      	pop	{r4, r5, r6, pc}
 800b414:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800b5e0 <__ieee754_rem_pio2+0x230>
 800b418:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b41c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800b5e8 <__ieee754_rem_pio2+0x238>
 800b420:	e7eb      	b.n	800b3fa <__ieee754_rem_pio2+0x4a>
 800b422:	429e      	cmp	r6, r3
 800b424:	ee30 7b06 	vadd.f64	d7, d0, d6
 800b428:	d00e      	beq.n	800b448 <__ieee754_rem_pio2+0x98>
 800b42a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800b5d8 <__ieee754_rem_pio2+0x228>
 800b42e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800b432:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b436:	ed84 5b00 	vstr	d5, [r4]
 800b43a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b43e:	f04f 30ff 	mov.w	r0, #4294967295
 800b442:	ed84 7b02 	vstr	d7, [r4, #8]
 800b446:	e7e3      	b.n	800b410 <__ieee754_rem_pio2+0x60>
 800b448:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800b5e0 <__ieee754_rem_pio2+0x230>
 800b44c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b450:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800b5e8 <__ieee754_rem_pio2+0x238>
 800b454:	e7eb      	b.n	800b42e <__ieee754_rem_pio2+0x7e>
 800b456:	4b70      	ldr	r3, [pc, #448]	; (800b618 <__ieee754_rem_pio2+0x268>)
 800b458:	429e      	cmp	r6, r3
 800b45a:	dc6c      	bgt.n	800b536 <__ieee754_rem_pio2+0x186>
 800b45c:	f000 fc44 	bl	800bce8 <fabs>
 800b460:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b464:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800b5f0 <__ieee754_rem_pio2+0x240>
 800b468:	eea0 7b06 	vfma.f64	d7, d0, d6
 800b46c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b470:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b474:	ee17 0a90 	vmov	r0, s15
 800b478:	eeb1 5b44 	vneg.f64	d5, d4
 800b47c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800b5d0 <__ieee754_rem_pio2+0x220>
 800b480:	eea5 0b07 	vfma.f64	d0, d5, d7
 800b484:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800b5d8 <__ieee754_rem_pio2+0x228>
 800b488:	281f      	cmp	r0, #31
 800b48a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b48e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b492:	dc08      	bgt.n	800b4a6 <__ieee754_rem_pio2+0xf6>
 800b494:	1e42      	subs	r2, r0, #1
 800b496:	4b61      	ldr	r3, [pc, #388]	; (800b61c <__ieee754_rem_pio2+0x26c>)
 800b498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49c:	42b3      	cmp	r3, r6
 800b49e:	d002      	beq.n	800b4a6 <__ieee754_rem_pio2+0xf6>
 800b4a0:	ed84 6b00 	vstr	d6, [r4]
 800b4a4:	e022      	b.n	800b4ec <__ieee754_rem_pio2+0x13c>
 800b4a6:	ee16 3a90 	vmov	r3, s13
 800b4aa:	1536      	asrs	r6, r6, #20
 800b4ac:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b4b0:	1af3      	subs	r3, r6, r3
 800b4b2:	2b10      	cmp	r3, #16
 800b4b4:	ddf4      	ble.n	800b4a0 <__ieee754_rem_pio2+0xf0>
 800b4b6:	eeb0 6b40 	vmov.f64	d6, d0
 800b4ba:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800b5e0 <__ieee754_rem_pio2+0x230>
 800b4be:	eea5 6b03 	vfma.f64	d6, d5, d3
 800b4c2:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b4c6:	eea5 7b03 	vfma.f64	d7, d5, d3
 800b4ca:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800b5e8 <__ieee754_rem_pio2+0x238>
 800b4ce:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800b4d2:	ee36 3b47 	vsub.f64	d3, d6, d7
 800b4d6:	ee13 3a90 	vmov	r3, s7
 800b4da:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b4de:	1af6      	subs	r6, r6, r3
 800b4e0:	2e31      	cmp	r6, #49	; 0x31
 800b4e2:	dc17      	bgt.n	800b514 <__ieee754_rem_pio2+0x164>
 800b4e4:	eeb0 0b46 	vmov.f64	d0, d6
 800b4e8:	ed84 3b00 	vstr	d3, [r4]
 800b4ec:	ed94 6b00 	vldr	d6, [r4]
 800b4f0:	2d00      	cmp	r5, #0
 800b4f2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b4f6:	ee30 7b47 	vsub.f64	d7, d0, d7
 800b4fa:	ed84 7b02 	vstr	d7, [r4, #8]
 800b4fe:	da87      	bge.n	800b410 <__ieee754_rem_pio2+0x60>
 800b500:	eeb1 6b46 	vneg.f64	d6, d6
 800b504:	ed84 6b00 	vstr	d6, [r4]
 800b508:	eeb1 7b47 	vneg.f64	d7, d7
 800b50c:	4240      	negs	r0, r0
 800b50e:	ed84 7b02 	vstr	d7, [r4, #8]
 800b512:	e77d      	b.n	800b410 <__ieee754_rem_pio2+0x60>
 800b514:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800b5f8 <__ieee754_rem_pio2+0x248>
 800b518:	eeb0 0b46 	vmov.f64	d0, d6
 800b51c:	eea5 0b03 	vfma.f64	d0, d5, d3
 800b520:	ee36 7b40 	vsub.f64	d7, d6, d0
 800b524:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800b600 <__ieee754_rem_pio2+0x250>
 800b528:	eea5 7b03 	vfma.f64	d7, d5, d3
 800b52c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800b530:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b534:	e7b4      	b.n	800b4a0 <__ieee754_rem_pio2+0xf0>
 800b536:	4b3a      	ldr	r3, [pc, #232]	; (800b620 <__ieee754_rem_pio2+0x270>)
 800b538:	429e      	cmp	r6, r3
 800b53a:	dd06      	ble.n	800b54a <__ieee754_rem_pio2+0x19a>
 800b53c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800b540:	ed80 7b02 	vstr	d7, [r0, #8]
 800b544:	ed80 7b00 	vstr	d7, [r0]
 800b548:	e744      	b.n	800b3d4 <__ieee754_rem_pio2+0x24>
 800b54a:	1532      	asrs	r2, r6, #20
 800b54c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800b550:	ee10 0a10 	vmov	r0, s0
 800b554:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800b558:	ec41 0b17 	vmov	d7, r0, r1
 800b55c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b560:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800b608 <__ieee754_rem_pio2+0x258>
 800b564:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b568:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b56c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b570:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b574:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b578:	a908      	add	r1, sp, #32
 800b57a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b57e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b582:	ed8d 6b04 	vstr	d6, [sp, #16]
 800b586:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b58a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b58e:	2303      	movs	r3, #3
 800b590:	ed31 7b02 	vldmdb	r1!, {d7}
 800b594:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	f103 30ff 	add.w	r0, r3, #4294967295
 800b5a0:	d013      	beq.n	800b5ca <__ieee754_rem_pio2+0x21a>
 800b5a2:	4920      	ldr	r1, [pc, #128]	; (800b624 <__ieee754_rem_pio2+0x274>)
 800b5a4:	9101      	str	r1, [sp, #4]
 800b5a6:	2102      	movs	r1, #2
 800b5a8:	9100      	str	r1, [sp, #0]
 800b5aa:	a802      	add	r0, sp, #8
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	f000 f8a7 	bl	800b700 <__kernel_rem_pio2>
 800b5b2:	2d00      	cmp	r5, #0
 800b5b4:	f6bf af2c 	bge.w	800b410 <__ieee754_rem_pio2+0x60>
 800b5b8:	ed94 7b00 	vldr	d7, [r4]
 800b5bc:	eeb1 7b47 	vneg.f64	d7, d7
 800b5c0:	ed84 7b00 	vstr	d7, [r4]
 800b5c4:	ed94 7b02 	vldr	d7, [r4, #8]
 800b5c8:	e79e      	b.n	800b508 <__ieee754_rem_pio2+0x158>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	e7e0      	b.n	800b590 <__ieee754_rem_pio2+0x1e0>
 800b5ce:	bf00      	nop
 800b5d0:	54400000 	.word	0x54400000
 800b5d4:	3ff921fb 	.word	0x3ff921fb
 800b5d8:	1a626331 	.word	0x1a626331
 800b5dc:	3dd0b461 	.word	0x3dd0b461
 800b5e0:	1a600000 	.word	0x1a600000
 800b5e4:	3dd0b461 	.word	0x3dd0b461
 800b5e8:	2e037073 	.word	0x2e037073
 800b5ec:	3ba3198a 	.word	0x3ba3198a
 800b5f0:	6dc9c883 	.word	0x6dc9c883
 800b5f4:	3fe45f30 	.word	0x3fe45f30
 800b5f8:	2e000000 	.word	0x2e000000
 800b5fc:	3ba3198a 	.word	0x3ba3198a
 800b600:	252049c1 	.word	0x252049c1
 800b604:	397b839a 	.word	0x397b839a
 800b608:	00000000 	.word	0x00000000
 800b60c:	41700000 	.word	0x41700000
 800b610:	3fe921fb 	.word	0x3fe921fb
 800b614:	4002d97b 	.word	0x4002d97b
 800b618:	413921fb 	.word	0x413921fb
 800b61c:	0800bfa4 	.word	0x0800bfa4
 800b620:	7fefffff 	.word	0x7fefffff
 800b624:	0800c024 	.word	0x0800c024

0800b628 <__kernel_cos>:
 800b628:	ee10 1a90 	vmov	r1, s1
 800b62c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b634:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800b638:	da05      	bge.n	800b646 <__kernel_cos+0x1e>
 800b63a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800b63e:	ee16 3a90 	vmov	r3, s13
 800b642:	2b00      	cmp	r3, #0
 800b644:	d03d      	beq.n	800b6c2 <__kernel_cos+0x9a>
 800b646:	ee20 4b00 	vmul.f64	d4, d0, d0
 800b64a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b64e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800b6c8 <__kernel_cos+0xa0>
 800b652:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800b656:	ee24 6b06 	vmul.f64	d6, d4, d6
 800b65a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800b6d0 <__kernel_cos+0xa8>
 800b65e:	eea4 5b03 	vfma.f64	d5, d4, d3
 800b662:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800b6d8 <__kernel_cos+0xb0>
 800b666:	eea5 3b04 	vfma.f64	d3, d5, d4
 800b66a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800b6e0 <__kernel_cos+0xb8>
 800b66e:	eea3 5b04 	vfma.f64	d5, d3, d4
 800b672:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800b6e8 <__kernel_cos+0xc0>
 800b676:	4b20      	ldr	r3, [pc, #128]	; (800b6f8 <__kernel_cos+0xd0>)
 800b678:	eea5 3b04 	vfma.f64	d3, d5, d4
 800b67c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800b6f0 <__kernel_cos+0xc8>
 800b680:	4299      	cmp	r1, r3
 800b682:	eea3 5b04 	vfma.f64	d5, d3, d4
 800b686:	ee25 5b04 	vmul.f64	d5, d5, d4
 800b68a:	eea4 1b05 	vfma.f64	d1, d4, d5
 800b68e:	dc04      	bgt.n	800b69a <__kernel_cos+0x72>
 800b690:	ee36 6b41 	vsub.f64	d6, d6, d1
 800b694:	ee37 0b46 	vsub.f64	d0, d7, d6
 800b698:	4770      	bx	lr
 800b69a:	4b18      	ldr	r3, [pc, #96]	; (800b6fc <__kernel_cos+0xd4>)
 800b69c:	4299      	cmp	r1, r3
 800b69e:	dc0d      	bgt.n	800b6bc <__kernel_cos+0x94>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800b6a6:	ec43 2b15 	vmov	d5, r2, r3
 800b6aa:	ee37 0b45 	vsub.f64	d0, d7, d5
 800b6ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b6b2:	ee36 6b41 	vsub.f64	d6, d6, d1
 800b6b6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b6ba:	4770      	bx	lr
 800b6bc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800b6c0:	e7f3      	b.n	800b6aa <__kernel_cos+0x82>
 800b6c2:	eeb0 0b47 	vmov.f64	d0, d7
 800b6c6:	4770      	bx	lr
 800b6c8:	be8838d4 	.word	0xbe8838d4
 800b6cc:	bda8fae9 	.word	0xbda8fae9
 800b6d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b6d4:	3e21ee9e 	.word	0x3e21ee9e
 800b6d8:	809c52ad 	.word	0x809c52ad
 800b6dc:	be927e4f 	.word	0xbe927e4f
 800b6e0:	19cb1590 	.word	0x19cb1590
 800b6e4:	3efa01a0 	.word	0x3efa01a0
 800b6e8:	16c15177 	.word	0x16c15177
 800b6ec:	bf56c16c 	.word	0xbf56c16c
 800b6f0:	5555554c 	.word	0x5555554c
 800b6f4:	3fa55555 	.word	0x3fa55555
 800b6f8:	3fd33332 	.word	0x3fd33332
 800b6fc:	3fe90000 	.word	0x3fe90000

0800b700 <__kernel_rem_pio2>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	ed2d 8b06 	vpush	{d8-d10}
 800b708:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800b70c:	469b      	mov	fp, r3
 800b70e:	460e      	mov	r6, r1
 800b710:	4bc7      	ldr	r3, [pc, #796]	; (800ba30 <__kernel_rem_pio2+0x330>)
 800b712:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b714:	9002      	str	r0, [sp, #8]
 800b716:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800b71a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800b71c:	1ed1      	subs	r1, r2, #3
 800b71e:	2318      	movs	r3, #24
 800b720:	f06f 0417 	mvn.w	r4, #23
 800b724:	fb91 f1f3 	sdiv	r1, r1, r3
 800b728:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800b72c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800b730:	fb01 4404 	mla	r4, r1, r4, r4
 800b734:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800ba18 <__kernel_rem_pio2+0x318>
 800b738:	4414      	add	r4, r2
 800b73a:	eba1 050a 	sub.w	r5, r1, sl
 800b73e:	aa1a      	add	r2, sp, #104	; 0x68
 800b740:	eb09 070a 	add.w	r7, r9, sl
 800b744:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800b748:	4696      	mov	lr, r2
 800b74a:	2300      	movs	r3, #0
 800b74c:	42bb      	cmp	r3, r7
 800b74e:	dd0f      	ble.n	800b770 <__kernel_rem_pio2+0x70>
 800b750:	af6a      	add	r7, sp, #424	; 0x1a8
 800b752:	2200      	movs	r2, #0
 800b754:	454a      	cmp	r2, r9
 800b756:	dc28      	bgt.n	800b7aa <__kernel_rem_pio2+0xaa>
 800b758:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b75c:	eb0b 0302 	add.w	r3, fp, r2
 800b760:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800b764:	9d02      	ldr	r5, [sp, #8]
 800b766:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800ba18 <__kernel_rem_pio2+0x318>
 800b76a:	f04f 0c00 	mov.w	ip, #0
 800b76e:	e016      	b.n	800b79e <__kernel_rem_pio2+0x9e>
 800b770:	42dd      	cmn	r5, r3
 800b772:	d409      	bmi.n	800b788 <__kernel_rem_pio2+0x88>
 800b774:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800b778:	ee07 2a90 	vmov	s15, r2
 800b77c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b780:	ecae 7b02 	vstmia	lr!, {d7}
 800b784:	3301      	adds	r3, #1
 800b786:	e7e1      	b.n	800b74c <__kernel_rem_pio2+0x4c>
 800b788:	eeb0 7b46 	vmov.f64	d7, d6
 800b78c:	e7f8      	b.n	800b780 <__kernel_rem_pio2+0x80>
 800b78e:	ecb5 5b02 	vldmia	r5!, {d5}
 800b792:	ed33 6b02 	vldmdb	r3!, {d6}
 800b796:	f10c 0c01 	add.w	ip, ip, #1
 800b79a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b79e:	45d4      	cmp	ip, sl
 800b7a0:	ddf5      	ble.n	800b78e <__kernel_rem_pio2+0x8e>
 800b7a2:	eca7 7b02 	vstmia	r7!, {d7}
 800b7a6:	3201      	adds	r2, #1
 800b7a8:	e7d4      	b.n	800b754 <__kernel_rem_pio2+0x54>
 800b7aa:	ab06      	add	r3, sp, #24
 800b7ac:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b7b0:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800ba20 <__kernel_rem_pio2+0x320>
 800b7b4:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800ba28 <__kernel_rem_pio2+0x328>
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b7be:	9303      	str	r3, [sp, #12]
 800b7c0:	464d      	mov	r5, r9
 800b7c2:	ab92      	add	r3, sp, #584	; 0x248
 800b7c4:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800b7c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b7cc:	3f01      	subs	r7, #1
 800b7ce:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800b7d2:	00ff      	lsls	r7, r7, #3
 800b7d4:	ab92      	add	r3, sp, #584	; 0x248
 800b7d6:	19da      	adds	r2, r3, r7
 800b7d8:	3a98      	subs	r2, #152	; 0x98
 800b7da:	2300      	movs	r3, #0
 800b7dc:	1ae9      	subs	r1, r5, r3
 800b7de:	2900      	cmp	r1, #0
 800b7e0:	dc4e      	bgt.n	800b880 <__kernel_rem_pio2+0x180>
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fb04 	bl	800bdf0 <scalbn>
 800b7e8:	eeb0 8b40 	vmov.f64	d8, d0
 800b7ec:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800b7f0:	ee28 0b00 	vmul.f64	d0, d8, d0
 800b7f4:	f000 fa84 	bl	800bd00 <floor>
 800b7f8:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800b7fc:	eea0 8b47 	vfms.f64	d8, d0, d7
 800b800:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800b804:	2c00      	cmp	r4, #0
 800b806:	edcd 7a01 	vstr	s15, [sp, #4]
 800b80a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b80e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b812:	dd4a      	ble.n	800b8aa <__kernel_rem_pio2+0x1aa>
 800b814:	1e69      	subs	r1, r5, #1
 800b816:	ab06      	add	r3, sp, #24
 800b818:	f1c4 0018 	rsb	r0, r4, #24
 800b81c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800b820:	9a01      	ldr	r2, [sp, #4]
 800b822:	fa4c f300 	asr.w	r3, ip, r0
 800b826:	441a      	add	r2, r3
 800b828:	4083      	lsls	r3, r0
 800b82a:	9201      	str	r2, [sp, #4]
 800b82c:	ebac 0203 	sub.w	r2, ip, r3
 800b830:	ab06      	add	r3, sp, #24
 800b832:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800b836:	f1c4 0317 	rsb	r3, r4, #23
 800b83a:	fa42 f803 	asr.w	r8, r2, r3
 800b83e:	f1b8 0f00 	cmp.w	r8, #0
 800b842:	dd43      	ble.n	800b8cc <__kernel_rem_pio2+0x1cc>
 800b844:	9b01      	ldr	r3, [sp, #4]
 800b846:	2000      	movs	r0, #0
 800b848:	3301      	adds	r3, #1
 800b84a:	9301      	str	r3, [sp, #4]
 800b84c:	4601      	mov	r1, r0
 800b84e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800b852:	4285      	cmp	r5, r0
 800b854:	dc6e      	bgt.n	800b934 <__kernel_rem_pio2+0x234>
 800b856:	2c00      	cmp	r4, #0
 800b858:	dd04      	ble.n	800b864 <__kernel_rem_pio2+0x164>
 800b85a:	2c01      	cmp	r4, #1
 800b85c:	d07f      	beq.n	800b95e <__kernel_rem_pio2+0x25e>
 800b85e:	2c02      	cmp	r4, #2
 800b860:	f000 8087 	beq.w	800b972 <__kernel_rem_pio2+0x272>
 800b864:	f1b8 0f02 	cmp.w	r8, #2
 800b868:	d130      	bne.n	800b8cc <__kernel_rem_pio2+0x1cc>
 800b86a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b86e:	ee30 8b48 	vsub.f64	d8, d0, d8
 800b872:	b359      	cbz	r1, 800b8cc <__kernel_rem_pio2+0x1cc>
 800b874:	4620      	mov	r0, r4
 800b876:	f000 fabb 	bl	800bdf0 <scalbn>
 800b87a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800b87e:	e025      	b.n	800b8cc <__kernel_rem_pio2+0x1cc>
 800b880:	ee20 7b09 	vmul.f64	d7, d0, d9
 800b884:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b888:	a806      	add	r0, sp, #24
 800b88a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800b88e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800b892:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b896:	ee10 1a10 	vmov	r1, s0
 800b89a:	ed32 0b02 	vldmdb	r2!, {d0}
 800b89e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800b8a2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	e798      	b.n	800b7dc <__kernel_rem_pio2+0xdc>
 800b8aa:	d106      	bne.n	800b8ba <__kernel_rem_pio2+0x1ba>
 800b8ac:	1e6b      	subs	r3, r5, #1
 800b8ae:	aa06      	add	r2, sp, #24
 800b8b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b8b4:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800b8b8:	e7c1      	b.n	800b83e <__kernel_rem_pio2+0x13e>
 800b8ba:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b8be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c6:	da32      	bge.n	800b92e <__kernel_rem_pio2+0x22e>
 800b8c8:	f04f 0800 	mov.w	r8, #0
 800b8cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d4:	f040 80b0 	bne.w	800ba38 <__kernel_rem_pio2+0x338>
 800b8d8:	1e6b      	subs	r3, r5, #1
 800b8da:	4618      	mov	r0, r3
 800b8dc:	2200      	movs	r2, #0
 800b8de:	4548      	cmp	r0, r9
 800b8e0:	da4e      	bge.n	800b980 <__kernel_rem_pio2+0x280>
 800b8e2:	2a00      	cmp	r2, #0
 800b8e4:	f000 8088 	beq.w	800b9f8 <__kernel_rem_pio2+0x2f8>
 800b8e8:	aa06      	add	r2, sp, #24
 800b8ea:	3c18      	subs	r4, #24
 800b8ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b8f0:	2900      	cmp	r1, #0
 800b8f2:	f000 808e 	beq.w	800ba12 <__kernel_rem_pio2+0x312>
 800b8f6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	9302      	str	r3, [sp, #8]
 800b8fe:	f000 fa77 	bl	800bdf0 <scalbn>
 800b902:	9b02      	ldr	r3, [sp, #8]
 800b904:	aa6a      	add	r2, sp, #424	; 0x1a8
 800b906:	00d9      	lsls	r1, r3, #3
 800b908:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800ba20 <__kernel_rem_pio2+0x320>
 800b90c:	1850      	adds	r0, r2, r1
 800b90e:	f100 0508 	add.w	r5, r0, #8
 800b912:	461c      	mov	r4, r3
 800b914:	2c00      	cmp	r4, #0
 800b916:	f280 80bd 	bge.w	800ba94 <__kernel_rem_pio2+0x394>
 800b91a:	2500      	movs	r5, #0
 800b91c:	1b5c      	subs	r4, r3, r5
 800b91e:	2c00      	cmp	r4, #0
 800b920:	f2c0 80dd 	blt.w	800bade <__kernel_rem_pio2+0x3de>
 800b924:	4f43      	ldr	r7, [pc, #268]	; (800ba34 <__kernel_rem_pio2+0x334>)
 800b926:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800ba18 <__kernel_rem_pio2+0x318>
 800b92a:	2400      	movs	r4, #0
 800b92c:	e0cb      	b.n	800bac6 <__kernel_rem_pio2+0x3c6>
 800b92e:	f04f 0802 	mov.w	r8, #2
 800b932:	e787      	b.n	800b844 <__kernel_rem_pio2+0x144>
 800b934:	ab06      	add	r3, sp, #24
 800b936:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b93a:	b949      	cbnz	r1, 800b950 <__kernel_rem_pio2+0x250>
 800b93c:	b12b      	cbz	r3, 800b94a <__kernel_rem_pio2+0x24a>
 800b93e:	aa06      	add	r2, sp, #24
 800b940:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b944:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b948:	2301      	movs	r3, #1
 800b94a:	3001      	adds	r0, #1
 800b94c:	4619      	mov	r1, r3
 800b94e:	e780      	b.n	800b852 <__kernel_rem_pio2+0x152>
 800b950:	aa06      	add	r2, sp, #24
 800b952:	ebac 0303 	sub.w	r3, ip, r3
 800b956:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b95a:	460b      	mov	r3, r1
 800b95c:	e7f5      	b.n	800b94a <__kernel_rem_pio2+0x24a>
 800b95e:	1e68      	subs	r0, r5, #1
 800b960:	ab06      	add	r3, sp, #24
 800b962:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b966:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b96a:	aa06      	add	r2, sp, #24
 800b96c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b970:	e778      	b.n	800b864 <__kernel_rem_pio2+0x164>
 800b972:	1e68      	subs	r0, r5, #1
 800b974:	ab06      	add	r3, sp, #24
 800b976:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b97a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b97e:	e7f4      	b.n	800b96a <__kernel_rem_pio2+0x26a>
 800b980:	a906      	add	r1, sp, #24
 800b982:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b986:	3801      	subs	r0, #1
 800b988:	430a      	orrs	r2, r1
 800b98a:	e7a8      	b.n	800b8de <__kernel_rem_pio2+0x1de>
 800b98c:	f10c 0c01 	add.w	ip, ip, #1
 800b990:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b994:	2a00      	cmp	r2, #0
 800b996:	d0f9      	beq.n	800b98c <__kernel_rem_pio2+0x28c>
 800b998:	eb0b 0305 	add.w	r3, fp, r5
 800b99c:	aa1a      	add	r2, sp, #104	; 0x68
 800b99e:	00db      	lsls	r3, r3, #3
 800b9a0:	1898      	adds	r0, r3, r2
 800b9a2:	3008      	adds	r0, #8
 800b9a4:	1c69      	adds	r1, r5, #1
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	4465      	add	r5, ip
 800b9ac:	9005      	str	r0, [sp, #20]
 800b9ae:	428d      	cmp	r5, r1
 800b9b0:	f6ff af07 	blt.w	800b7c2 <__kernel_rem_pio2+0xc2>
 800b9b4:	a81a      	add	r0, sp, #104	; 0x68
 800b9b6:	eb02 0c03 	add.w	ip, r2, r3
 800b9ba:	4484      	add	ip, r0
 800b9bc:	9803      	ldr	r0, [sp, #12]
 800b9be:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b9c2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b9c6:	9001      	str	r0, [sp, #4]
 800b9c8:	ee07 0a90 	vmov	s15, r0
 800b9cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b9d0:	9805      	ldr	r0, [sp, #20]
 800b9d2:	ed8c 7b00 	vstr	d7, [ip]
 800b9d6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ba18 <__kernel_rem_pio2+0x318>
 800b9da:	eb00 0802 	add.w	r8, r0, r2
 800b9de:	f04f 0c00 	mov.w	ip, #0
 800b9e2:	45d4      	cmp	ip, sl
 800b9e4:	dd0c      	ble.n	800ba00 <__kernel_rem_pio2+0x300>
 800b9e6:	eb02 0c07 	add.w	ip, r2, r7
 800b9ea:	a86a      	add	r0, sp, #424	; 0x1a8
 800b9ec:	4484      	add	ip, r0
 800b9ee:	ed8c 7b02 	vstr	d7, [ip, #8]
 800b9f2:	3101      	adds	r1, #1
 800b9f4:	3208      	adds	r2, #8
 800b9f6:	e7da      	b.n	800b9ae <__kernel_rem_pio2+0x2ae>
 800b9f8:	9b04      	ldr	r3, [sp, #16]
 800b9fa:	f04f 0c01 	mov.w	ip, #1
 800b9fe:	e7c7      	b.n	800b990 <__kernel_rem_pio2+0x290>
 800ba00:	ecbe 5b02 	vldmia	lr!, {d5}
 800ba04:	ed38 6b02 	vldmdb	r8!, {d6}
 800ba08:	f10c 0c01 	add.w	ip, ip, #1
 800ba0c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ba10:	e7e7      	b.n	800b9e2 <__kernel_rem_pio2+0x2e2>
 800ba12:	3b01      	subs	r3, #1
 800ba14:	e768      	b.n	800b8e8 <__kernel_rem_pio2+0x1e8>
 800ba16:	bf00      	nop
	...
 800ba24:	3e700000 	.word	0x3e700000
 800ba28:	00000000 	.word	0x00000000
 800ba2c:	41700000 	.word	0x41700000
 800ba30:	0800c170 	.word	0x0800c170
 800ba34:	0800c130 	.word	0x0800c130
 800ba38:	4260      	negs	r0, r4
 800ba3a:	eeb0 0b48 	vmov.f64	d0, d8
 800ba3e:	f000 f9d7 	bl	800bdf0 <scalbn>
 800ba42:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800bc20 <__kernel_rem_pio2+0x520>
 800ba46:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	db18      	blt.n	800ba82 <__kernel_rem_pio2+0x382>
 800ba50:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800bc28 <__kernel_rem_pio2+0x528>
 800ba54:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ba58:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ba5c:	aa06      	add	r2, sp, #24
 800ba5e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ba62:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ba66:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ba6a:	a906      	add	r1, sp, #24
 800ba6c:	ee10 3a10 	vmov	r3, s0
 800ba70:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ba74:	1c6b      	adds	r3, r5, #1
 800ba76:	ee17 2a10 	vmov	r2, s14
 800ba7a:	3418      	adds	r4, #24
 800ba7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ba80:	e739      	b.n	800b8f6 <__kernel_rem_pio2+0x1f6>
 800ba82:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ba86:	aa06      	add	r2, sp, #24
 800ba88:	ee10 3a10 	vmov	r3, s0
 800ba8c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ba90:	462b      	mov	r3, r5
 800ba92:	e730      	b.n	800b8f6 <__kernel_rem_pio2+0x1f6>
 800ba94:	aa06      	add	r2, sp, #24
 800ba96:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800ba9a:	9202      	str	r2, [sp, #8]
 800ba9c:	ee07 2a90 	vmov	s15, r2
 800baa0:	3c01      	subs	r4, #1
 800baa2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800baa6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800baaa:	ee20 0b06 	vmul.f64	d0, d0, d6
 800baae:	ed25 7b02 	vstmdb	r5!, {d7}
 800bab2:	e72f      	b.n	800b914 <__kernel_rem_pio2+0x214>
 800bab4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800bab8:	ecb7 5b02 	vldmia	r7!, {d5}
 800babc:	ed9c 6b00 	vldr	d6, [ip]
 800bac0:	3401      	adds	r4, #1
 800bac2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bac6:	454c      	cmp	r4, r9
 800bac8:	dc01      	bgt.n	800bace <__kernel_rem_pio2+0x3ce>
 800baca:	42a5      	cmp	r5, r4
 800bacc:	daf2      	bge.n	800bab4 <__kernel_rem_pio2+0x3b4>
 800bace:	aa42      	add	r2, sp, #264	; 0x108
 800bad0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800bad4:	ed84 7b00 	vstr	d7, [r4]
 800bad8:	3501      	adds	r5, #1
 800bada:	3808      	subs	r0, #8
 800badc:	e71e      	b.n	800b91c <__kernel_rem_pio2+0x21c>
 800bade:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800bae0:	2a03      	cmp	r2, #3
 800bae2:	d84e      	bhi.n	800bb82 <__kernel_rem_pio2+0x482>
 800bae4:	e8df f002 	tbb	[pc, r2]
 800bae8:	021f1f3e 	.word	0x021f1f3e
 800baec:	3108      	adds	r1, #8
 800baee:	aa42      	add	r2, sp, #264	; 0x108
 800baf0:	4411      	add	r1, r2
 800baf2:	4608      	mov	r0, r1
 800baf4:	461c      	mov	r4, r3
 800baf6:	2c00      	cmp	r4, #0
 800baf8:	dc61      	bgt.n	800bbbe <__kernel_rem_pio2+0x4be>
 800bafa:	4608      	mov	r0, r1
 800bafc:	461c      	mov	r4, r3
 800bafe:	2c01      	cmp	r4, #1
 800bb00:	dc6d      	bgt.n	800bbde <__kernel_rem_pio2+0x4de>
 800bb02:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bc30 <__kernel_rem_pio2+0x530>
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	dc79      	bgt.n	800bbfe <__kernel_rem_pio2+0x4fe>
 800bb0a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800bb0e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800bb12:	f1b8 0f00 	cmp.w	r8, #0
 800bb16:	d178      	bne.n	800bc0a <__kernel_rem_pio2+0x50a>
 800bb18:	ed86 5b00 	vstr	d5, [r6]
 800bb1c:	ed86 6b02 	vstr	d6, [r6, #8]
 800bb20:	ed86 7b04 	vstr	d7, [r6, #16]
 800bb24:	e02d      	b.n	800bb82 <__kernel_rem_pio2+0x482>
 800bb26:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800bc30 <__kernel_rem_pio2+0x530>
 800bb2a:	3108      	adds	r1, #8
 800bb2c:	aa42      	add	r2, sp, #264	; 0x108
 800bb2e:	4411      	add	r1, r2
 800bb30:	4618      	mov	r0, r3
 800bb32:	2800      	cmp	r0, #0
 800bb34:	da34      	bge.n	800bba0 <__kernel_rem_pio2+0x4a0>
 800bb36:	f1b8 0f00 	cmp.w	r8, #0
 800bb3a:	d037      	beq.n	800bbac <__kernel_rem_pio2+0x4ac>
 800bb3c:	eeb1 7b46 	vneg.f64	d7, d6
 800bb40:	ed86 7b00 	vstr	d7, [r6]
 800bb44:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800bb48:	a844      	add	r0, sp, #272	; 0x110
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb50:	428b      	cmp	r3, r1
 800bb52:	da2e      	bge.n	800bbb2 <__kernel_rem_pio2+0x4b2>
 800bb54:	f1b8 0f00 	cmp.w	r8, #0
 800bb58:	d001      	beq.n	800bb5e <__kernel_rem_pio2+0x45e>
 800bb5a:	eeb1 7b47 	vneg.f64	d7, d7
 800bb5e:	ed86 7b02 	vstr	d7, [r6, #8]
 800bb62:	e00e      	b.n	800bb82 <__kernel_rem_pio2+0x482>
 800bb64:	aa92      	add	r2, sp, #584	; 0x248
 800bb66:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800bc30 <__kernel_rem_pio2+0x530>
 800bb6a:	4411      	add	r1, r2
 800bb6c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	da0f      	bge.n	800bb94 <__kernel_rem_pio2+0x494>
 800bb74:	f1b8 0f00 	cmp.w	r8, #0
 800bb78:	d001      	beq.n	800bb7e <__kernel_rem_pio2+0x47e>
 800bb7a:	eeb1 7b47 	vneg.f64	d7, d7
 800bb7e:	ed86 7b00 	vstr	d7, [r6]
 800bb82:	9b01      	ldr	r3, [sp, #4]
 800bb84:	f003 0007 	and.w	r0, r3, #7
 800bb88:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800bb8c:	ecbd 8b06 	vpop	{d8-d10}
 800bb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb94:	ed31 6b02 	vldmdb	r1!, {d6}
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bb9e:	e7e7      	b.n	800bb70 <__kernel_rem_pio2+0x470>
 800bba0:	ed31 7b02 	vldmdb	r1!, {d7}
 800bba4:	3801      	subs	r0, #1
 800bba6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bbaa:	e7c2      	b.n	800bb32 <__kernel_rem_pio2+0x432>
 800bbac:	eeb0 7b46 	vmov.f64	d7, d6
 800bbb0:	e7c6      	b.n	800bb40 <__kernel_rem_pio2+0x440>
 800bbb2:	ecb0 6b02 	vldmia	r0!, {d6}
 800bbb6:	3101      	adds	r1, #1
 800bbb8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bbbc:	e7c8      	b.n	800bb50 <__kernel_rem_pio2+0x450>
 800bbbe:	ed10 7b04 	vldr	d7, [r0, #-16]
 800bbc2:	ed30 5b02 	vldmdb	r0!, {d5}
 800bbc6:	3c01      	subs	r4, #1
 800bbc8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800bbcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bbd0:	ed00 6b02 	vstr	d6, [r0, #-8]
 800bbd4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bbd8:	ed80 7b00 	vstr	d7, [r0]
 800bbdc:	e78b      	b.n	800baf6 <__kernel_rem_pio2+0x3f6>
 800bbde:	ed10 7b04 	vldr	d7, [r0, #-16]
 800bbe2:	ed30 5b02 	vldmdb	r0!, {d5}
 800bbe6:	3c01      	subs	r4, #1
 800bbe8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800bbec:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bbf0:	ed00 6b02 	vstr	d6, [r0, #-8]
 800bbf4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bbf8:	ed80 7b00 	vstr	d7, [r0]
 800bbfc:	e77f      	b.n	800bafe <__kernel_rem_pio2+0x3fe>
 800bbfe:	ed31 6b02 	vldmdb	r1!, {d6}
 800bc02:	3b01      	subs	r3, #1
 800bc04:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bc08:	e77d      	b.n	800bb06 <__kernel_rem_pio2+0x406>
 800bc0a:	eeb1 5b45 	vneg.f64	d5, d5
 800bc0e:	eeb1 6b46 	vneg.f64	d6, d6
 800bc12:	ed86 5b00 	vstr	d5, [r6]
 800bc16:	eeb1 7b47 	vneg.f64	d7, d7
 800bc1a:	ed86 6b02 	vstr	d6, [r6, #8]
 800bc1e:	e77f      	b.n	800bb20 <__kernel_rem_pio2+0x420>
 800bc20:	00000000 	.word	0x00000000
 800bc24:	41700000 	.word	0x41700000
 800bc28:	00000000 	.word	0x00000000
 800bc2c:	3e700000 	.word	0x3e700000
	...

0800bc38 <__kernel_sin>:
 800bc38:	ee10 3a90 	vmov	r3, s1
 800bc3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc40:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bc44:	da04      	bge.n	800bc50 <__kernel_sin+0x18>
 800bc46:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800bc4a:	ee17 3a90 	vmov	r3, s15
 800bc4e:	b35b      	cbz	r3, 800bca8 <__kernel_sin+0x70>
 800bc50:	ee20 6b00 	vmul.f64	d6, d0, d0
 800bc54:	ee20 5b06 	vmul.f64	d5, d0, d6
 800bc58:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800bcb0 <__kernel_sin+0x78>
 800bc5c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800bcb8 <__kernel_sin+0x80>
 800bc60:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bc64:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800bcc0 <__kernel_sin+0x88>
 800bc68:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bc6c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800bcc8 <__kernel_sin+0x90>
 800bc70:	eea7 4b06 	vfma.f64	d4, d7, d6
 800bc74:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800bcd0 <__kernel_sin+0x98>
 800bc78:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bc7c:	b930      	cbnz	r0, 800bc8c <__kernel_sin+0x54>
 800bc7e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800bcd8 <__kernel_sin+0xa0>
 800bc82:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bc86:	eea4 0b05 	vfma.f64	d0, d4, d5
 800bc8a:	4770      	bx	lr
 800bc8c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800bc90:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800bc94:	eea1 7b04 	vfma.f64	d7, d1, d4
 800bc98:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800bc9c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800bce0 <__kernel_sin+0xa8>
 800bca0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800bca4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	f3af 8000 	nop.w
 800bcb0:	5acfd57c 	.word	0x5acfd57c
 800bcb4:	3de5d93a 	.word	0x3de5d93a
 800bcb8:	8a2b9ceb 	.word	0x8a2b9ceb
 800bcbc:	be5ae5e6 	.word	0xbe5ae5e6
 800bcc0:	57b1fe7d 	.word	0x57b1fe7d
 800bcc4:	3ec71de3 	.word	0x3ec71de3
 800bcc8:	19c161d5 	.word	0x19c161d5
 800bccc:	bf2a01a0 	.word	0xbf2a01a0
 800bcd0:	1110f8a6 	.word	0x1110f8a6
 800bcd4:	3f811111 	.word	0x3f811111
 800bcd8:	55555549 	.word	0x55555549
 800bcdc:	bfc55555 	.word	0xbfc55555
 800bce0:	55555549 	.word	0x55555549
 800bce4:	3fc55555 	.word	0x3fc55555

0800bce8 <fabs>:
 800bce8:	ec51 0b10 	vmov	r0, r1, d0
 800bcec:	ee10 2a10 	vmov	r2, s0
 800bcf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcf4:	ec43 2b10 	vmov	d0, r2, r3
 800bcf8:	4770      	bx	lr
 800bcfa:	0000      	movs	r0, r0
 800bcfc:	0000      	movs	r0, r0
	...

0800bd00 <floor>:
 800bd00:	ee10 1a90 	vmov	r1, s1
 800bd04:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd08:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800bd0c:	2b13      	cmp	r3, #19
 800bd0e:	b530      	push	{r4, r5, lr}
 800bd10:	ee10 0a10 	vmov	r0, s0
 800bd14:	ee10 5a10 	vmov	r5, s0
 800bd18:	dc33      	bgt.n	800bd82 <floor+0x82>
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	da17      	bge.n	800bd4e <floor+0x4e>
 800bd1e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800bde0 <floor+0xe0>
 800bd22:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bd26:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd2e:	dd09      	ble.n	800bd44 <floor+0x44>
 800bd30:	2900      	cmp	r1, #0
 800bd32:	da50      	bge.n	800bdd6 <floor+0xd6>
 800bd34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bd38:	4a2b      	ldr	r2, [pc, #172]	; (800bde8 <floor+0xe8>)
 800bd3a:	4303      	orrs	r3, r0
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	4283      	cmp	r3, r0
 800bd40:	bf18      	it	ne
 800bd42:	4611      	movne	r1, r2
 800bd44:	460b      	mov	r3, r1
 800bd46:	4602      	mov	r2, r0
 800bd48:	ec43 2b10 	vmov	d0, r2, r3
 800bd4c:	e020      	b.n	800bd90 <floor+0x90>
 800bd4e:	4a27      	ldr	r2, [pc, #156]	; (800bdec <floor+0xec>)
 800bd50:	411a      	asrs	r2, r3
 800bd52:	ea01 0402 	and.w	r4, r1, r2
 800bd56:	4304      	orrs	r4, r0
 800bd58:	d01a      	beq.n	800bd90 <floor+0x90>
 800bd5a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800bde0 <floor+0xe0>
 800bd5e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bd62:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd6a:	ddeb      	ble.n	800bd44 <floor+0x44>
 800bd6c:	2900      	cmp	r1, #0
 800bd6e:	bfbe      	ittt	lt
 800bd70:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800bd74:	fa40 f303 	asrlt.w	r3, r0, r3
 800bd78:	18c9      	addlt	r1, r1, r3
 800bd7a:	ea21 0102 	bic.w	r1, r1, r2
 800bd7e:	2000      	movs	r0, #0
 800bd80:	e7e0      	b.n	800bd44 <floor+0x44>
 800bd82:	2b33      	cmp	r3, #51	; 0x33
 800bd84:	dd05      	ble.n	800bd92 <floor+0x92>
 800bd86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd8a:	d101      	bne.n	800bd90 <floor+0x90>
 800bd8c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800bd90:	bd30      	pop	{r4, r5, pc}
 800bd92:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800bd96:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9a:	40e2      	lsrs	r2, r4
 800bd9c:	4202      	tst	r2, r0
 800bd9e:	d0f7      	beq.n	800bd90 <floor+0x90>
 800bda0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800bde0 <floor+0xe0>
 800bda4:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bda8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bdac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb0:	ddc8      	ble.n	800bd44 <floor+0x44>
 800bdb2:	2900      	cmp	r1, #0
 800bdb4:	da02      	bge.n	800bdbc <floor+0xbc>
 800bdb6:	2b14      	cmp	r3, #20
 800bdb8:	d103      	bne.n	800bdc2 <floor+0xc2>
 800bdba:	3101      	adds	r1, #1
 800bdbc:	ea20 0002 	bic.w	r0, r0, r2
 800bdc0:	e7c0      	b.n	800bd44 <floor+0x44>
 800bdc2:	2401      	movs	r4, #1
 800bdc4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bdc8:	fa04 f303 	lsl.w	r3, r4, r3
 800bdcc:	4418      	add	r0, r3
 800bdce:	42a8      	cmp	r0, r5
 800bdd0:	bf38      	it	cc
 800bdd2:	1909      	addcc	r1, r1, r4
 800bdd4:	e7f2      	b.n	800bdbc <floor+0xbc>
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	4601      	mov	r1, r0
 800bdda:	e7b3      	b.n	800bd44 <floor+0x44>
 800bddc:	f3af 8000 	nop.w
 800bde0:	8800759c 	.word	0x8800759c
 800bde4:	7e37e43c 	.word	0x7e37e43c
 800bde8:	bff00000 	.word	0xbff00000
 800bdec:	000fffff 	.word	0x000fffff

0800bdf0 <scalbn>:
 800bdf0:	b500      	push	{lr}
 800bdf2:	ed2d 8b02 	vpush	{d8}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	ed8d 0b00 	vstr	d0, [sp]
 800bdfc:	9b01      	ldr	r3, [sp, #4]
 800bdfe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800be02:	b9a2      	cbnz	r2, 800be2e <scalbn+0x3e>
 800be04:	9a00      	ldr	r2, [sp, #0]
 800be06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be0a:	4313      	orrs	r3, r2
 800be0c:	d03a      	beq.n	800be84 <scalbn+0x94>
 800be0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bec8 <scalbn+0xd8>
 800be12:	4b35      	ldr	r3, [pc, #212]	; (800bee8 <scalbn+0xf8>)
 800be14:	ee20 7b07 	vmul.f64	d7, d0, d7
 800be18:	4298      	cmp	r0, r3
 800be1a:	ed8d 7b00 	vstr	d7, [sp]
 800be1e:	da11      	bge.n	800be44 <scalbn+0x54>
 800be20:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800bed0 <scalbn+0xe0>
 800be24:	ed9d 6b00 	vldr	d6, [sp]
 800be28:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be2c:	e007      	b.n	800be3e <scalbn+0x4e>
 800be2e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800be32:	428a      	cmp	r2, r1
 800be34:	d10a      	bne.n	800be4c <scalbn+0x5c>
 800be36:	ed9d 7b00 	vldr	d7, [sp]
 800be3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800be3e:	ed8d 7b00 	vstr	d7, [sp]
 800be42:	e01f      	b.n	800be84 <scalbn+0x94>
 800be44:	9b01      	ldr	r3, [sp, #4]
 800be46:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800be4a:	3a36      	subs	r2, #54	; 0x36
 800be4c:	4402      	add	r2, r0
 800be4e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800be52:	428a      	cmp	r2, r1
 800be54:	dd0a      	ble.n	800be6c <scalbn+0x7c>
 800be56:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800bed8 <scalbn+0xe8>
 800be5a:	eeb0 0b48 	vmov.f64	d0, d8
 800be5e:	ed9d 1b00 	vldr	d1, [sp]
 800be62:	f000 f843 	bl	800beec <copysign>
 800be66:	ee20 7b08 	vmul.f64	d7, d0, d8
 800be6a:	e7e8      	b.n	800be3e <scalbn+0x4e>
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	dd10      	ble.n	800be92 <scalbn+0xa2>
 800be70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be7c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800be80:	e9cd 0100 	strd	r0, r1, [sp]
 800be84:	ed9d 0b00 	vldr	d0, [sp]
 800be88:	b003      	add	sp, #12
 800be8a:	ecbd 8b02 	vpop	{d8}
 800be8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800be92:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800be96:	da06      	bge.n	800bea6 <scalbn+0xb6>
 800be98:	f24c 3350 	movw	r3, #50000	; 0xc350
 800be9c:	4298      	cmp	r0, r3
 800be9e:	dcda      	bgt.n	800be56 <scalbn+0x66>
 800bea0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800bed0 <scalbn+0xe0>
 800bea4:	e7d9      	b.n	800be5a <scalbn+0x6a>
 800bea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800beaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800beae:	3236      	adds	r2, #54	; 0x36
 800beb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800beb4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800beb8:	ec41 0b17 	vmov	d7, r0, r1
 800bebc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800bee0 <scalbn+0xf0>
 800bec0:	e7b2      	b.n	800be28 <scalbn+0x38>
 800bec2:	bf00      	nop
 800bec4:	f3af 8000 	nop.w
 800bec8:	00000000 	.word	0x00000000
 800becc:	43500000 	.word	0x43500000
 800bed0:	c2f8f359 	.word	0xc2f8f359
 800bed4:	01a56e1f 	.word	0x01a56e1f
 800bed8:	8800759c 	.word	0x8800759c
 800bedc:	7e37e43c 	.word	0x7e37e43c
 800bee0:	00000000 	.word	0x00000000
 800bee4:	3c900000 	.word	0x3c900000
 800bee8:	ffff3cb0 	.word	0xffff3cb0

0800beec <copysign>:
 800beec:	ec51 0b10 	vmov	r0, r1, d0
 800bef0:	ee11 0a90 	vmov	r0, s3
 800bef4:	ee10 2a10 	vmov	r2, s0
 800bef8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800befc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bf00:	ea41 0300 	orr.w	r3, r1, r0
 800bf04:	ec43 2b10 	vmov	d0, r2, r3
 800bf08:	4770      	bx	lr
	...

0800bf0c <_init>:
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	bf00      	nop
 800bf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf12:	bc08      	pop	{r3}
 800bf14:	469e      	mov	lr, r3
 800bf16:	4770      	bx	lr

0800bf18 <_fini>:
 800bf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1a:	bf00      	nop
 800bf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf1e:	bc08      	pop	{r3}
 800bf20:	469e      	mov	lr, r3
 800bf22:	4770      	bx	lr
