
testdac1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b69c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  0800b940  0800b940  0001b940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb98  0800bb98  0001bb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bba0  0800bba0  0001bba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bba4  0800bba4  0001bba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800bba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000408  20000074  0800bc1c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000047c  0800bc1c  0002047c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024e9d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000037f1  00000000  00000000  00044f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016d8  00000000  00000000  00048730  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001580  00000000  00000000  00049e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c358  00000000  00000000  0004b388  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00014ad2  00000000  00000000  000876e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00198062  00000000  00000000  0009c1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00234214  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006768  00000000  00000000  00234290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000074 	.word	0x20000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b924 	.word	0x0800b924

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000078 	.word	0x20000078
 80002dc:	0800b924 	.word	0x0800b924

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000
 80007b4:	00000000 	.word	0x00000000

080007b8 <get_sineval>:

#define PI 3.1415926
int i=0;

void get_sineval ()
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	for (i=0;i<100;i++)
 80007bc:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <get_sineval+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	e040      	b.n	8000846 <get_sineval+0x8e>
	{
		sin_val[i] = ((sin(i*2*PI/100) + 1)*((0xFFF+1)/2));
 80007c4:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <get_sineval+0xc0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	ee07 3a90 	vmov	s15, r3
 80007ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007d2:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000858 <get_sineval+0xa0>
 80007d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007da:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000860 <get_sineval+0xa8>
 80007de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80007e2:	eeb0 0b45 	vmov.f64	d0, d5
 80007e6:	f00a fab3 	bl	800ad50 <sin>
 80007ea:	eeb0 6b40 	vmov.f64	d6, d0
 80007ee:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80007f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007f6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000868 <get_sineval+0xb0>
 80007fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <get_sineval+0xc0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000806:	ee17 1a90 	vmov	r1, s15
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <get_sineval+0xc4>)
 800080c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sin_val[i]=sin_val[i]*0.1; //fattore di scala
 8000810:	4b19      	ldr	r3, [pc, #100]	; (8000878 <get_sineval+0xc0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a19      	ldr	r2, [pc, #100]	; (800087c <get_sineval+0xc4>)
 8000816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081a:	ee07 3a90 	vmov	s15, r3
 800081e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000822:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000870 <get_sineval+0xb8>
 8000826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <get_sineval+0xc0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000832:	ee17 1a90 	vmov	r1, s15
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <get_sineval+0xc4>)
 8000838:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<100;i++)
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <get_sineval+0xc0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3301      	adds	r3, #1
 8000842:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <get_sineval+0xc0>)
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <get_sineval+0xc0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b63      	cmp	r3, #99	; 0x63
 800084c:	ddba      	ble.n	80007c4 <get_sineval+0xc>
		//sin_val[i] = ((sin(i*2*PI/100) + 1)*(100)); //il secondo elemento è l'ampiezza *** attenzione, essendo valori interi, se <0 la sin appare tosata
	}
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	4d12d84a 	.word	0x4d12d84a
 800085c:	400921fb 	.word	0x400921fb
 8000860:	00000000 	.word	0x00000000
 8000864:	40590000 	.word	0x40590000
 8000868:	00000000 	.word	0x00000000
 800086c:	40a00000 	.word	0x40a00000
 8000870:	9999999a 	.word	0x9999999a
 8000874:	3fb99999 	.word	0x3fb99999
 8000878:	20000090 	.word	0x20000090
 800087c:	20000294 	.word	0x20000294

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0a2      	sub	sp, #136	; 0x88
 8000884:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	unsigned int uiAnalogData=0;
 8000886:	2300      	movs	r3, #0
 8000888:	677b      	str	r3, [r7, #116]	; 0x74
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800088a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800088e:	67fb      	str	r3, [r7, #124]	; 0x7c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000890:	bf00      	nop
 8000892:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <main+0x158>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800089a:	2b00      	cmp	r3, #0
 800089c:	d004      	beq.n	80008a8 <main+0x28>
 800089e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dcf4      	bgt.n	8000892 <main+0x12>
  if ( timeout < 0 )
 80008a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da01      	bge.n	80008b2 <main+0x32>
  {
  Error_Handler();
 80008ae:	f000 fbc5 	bl	800103c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b2:	f000 fdf5 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b6:	f000 f89f 	bl	80009f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008ba:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <main+0x158>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	4a45      	ldr	r2, [pc, #276]	; (80009d8 <main+0x158>)
 80008c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ca:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <main+0x158>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008d4:	667b      	str	r3, [r7, #100]	; 0x64
 80008d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008d8:	2000      	movs	r0, #0
 80008da:	f005 f97d 	bl	8005bd8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f005 f993 	bl	8005c0c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ea:	67fb      	str	r3, [r7, #124]	; 0x7c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008ec:	bf00      	nop
 80008ee:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <main+0x158>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d104      	bne.n	8000904 <main+0x84>
 80008fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008fc:	1e5a      	subs	r2, r3, #1
 80008fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000900:	2b00      	cmp	r3, #0
 8000902:	dcf4      	bgt.n	80008ee <main+0x6e>
if ( timeout < 0 )
 8000904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000906:	2b00      	cmp	r3, #0
 8000908:	da01      	bge.n	800090e <main+0x8e>
{
Error_Handler();
 800090a:	f000 fb97 	bl	800103c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800090e:	f000 fabf 	bl	8000e90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000912:	f000 fa95 	bl	8000e40 <MX_DMA_Init>
  MX_DAC1_Init();
 8000916:	f000 f9c7 	bl	8000ca8 <MX_DAC1_Init>
  MX_TIM2_Init();
 800091a:	f000 f9f7 	bl	8000d0c <MX_TIM2_Init>
  MX_ADC1_Init();
 800091e:	f000 f94b 	bl	8000bb8 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000922:	f000 fa41 	bl	8000da8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


 HAL_TIM_Base_Start(&htim2);
 8000926:	482d      	ldr	r0, [pc, #180]	; (80009dc <main+0x15c>)
 8000928:	f008 f88e 	bl	8008a48 <HAL_TIM_Base_Start>

 get_sineval();
 800092c:	f7ff ff44 	bl	80007b8 <get_sineval>

 HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 8000930:	2300      	movs	r3, #0
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <main+0x160>)
 8000938:	2100      	movs	r1, #0
 800093a:	482a      	ldr	r0, [pc, #168]	; (80009e4 <main+0x164>)
 800093c:	f002 fc08 	bl	8003150 <HAL_DAC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  uint8_t buffertx[100]="";
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2260      	movs	r2, #96	; 0x60
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f009 fdf2 	bl	800a534 <memset>
int cont=0;
 8000950:	2300      	movs	r3, #0
 8000952:	67bb      	str	r3, [r7, #120]	; 0x78
int j=0;
 8000954:	2300      	movs	r3, #0
 8000956:	673b      	str	r3, [r7, #112]	; 0x70
int k=0;
 8000958:	2300      	movs	r3, #0
 800095a:	66fb      	str	r3, [r7, #108]	; 0x6c
int cont2=0;
 800095c:	2300      	movs	r3, #0
 800095e:	66bb      	str	r3, [r7, #104]	; 0x68

        //DAC

		for (i=0;i<100;i++)
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <main+0x168>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	e014      	b.n	8000992 <main+0x112>
           VEF+ is the input voltage reference (refer to the device datasheet)
         e.g. To set DAC_OUT1 to 0.7V, use
           Assuming that VREF+ = 3.3V, DAC_OUT1 = (3.3 * 868) / 4095 = 0.7V

		   */
      		 HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sin_val[i]);
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <main+0x168>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <main+0x160>)
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	481b      	ldr	r0, [pc, #108]	; (80009e4 <main+0x164>)
 8000978:	f002 fca8 	bl	80032cc <HAL_DAC_SetValue>
     		//for (j=0;j<200;j++)  //ritardo sintetico ottimale a 20
     		{
     			cont++;
 800097c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800097e:	3301      	adds	r3, #1
 8000980:	67bb      	str	r3, [r7, #120]	; 0x78
     		}
      		HAL_Delay(10); //min 0.5
 8000982:	200a      	movs	r0, #10
 8000984:	f000 fe1e 	bl	80015c4 <HAL_Delay>
		for (i=0;i<100;i++)
 8000988:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <main+0x168>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3301      	adds	r3, #1
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <main+0x168>)
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <main+0x168>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b63      	cmp	r3, #99	; 0x63
 8000998:	dde6      	ble.n	8000968 <main+0xe8>
		  // HAL_ADC_Start(&hadc1);
		  //HAL_ADC_PollForConversion(&hadc1, 1000);
		  //uiAnalogData=HAL_ADC_GetValue(&hadc1);
		  //HAL_ADC_Stop(&hadc1);

		  HAL_ADC_Start(&hadc1);
 800099a:	4814      	ldr	r0, [pc, #80]	; (80009ec <main+0x16c>)
 800099c:	f001 fa12 	bl	8001dc4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 80009a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009a4:	4811      	ldr	r0, [pc, #68]	; (80009ec <main+0x16c>)
 80009a6:	f001 fb0b 	bl	8001fc0 <HAL_ADC_PollForConversion>
		  uiAnalogData=HAL_ADC_GetValue(&hadc1);
 80009aa:	4810      	ldr	r0, [pc, #64]	; (80009ec <main+0x16c>)
 80009ac:	f001 fbf4 	bl	8002198 <HAL_ADC_GetValue>
 80009b0:	6778      	str	r0, [r7, #116]	; 0x74
		  HAL_ADC_Stop(&hadc1);
 80009b2:	480e      	ldr	r0, [pc, #56]	; (80009ec <main+0x16c>)
 80009b4:	f001 fad0 	bl	8001f58 <HAL_ADC_Stop>

		  //USUART
		  sprintf(buffertx, "%u\n\r", uiAnalogData);
 80009b8:	463b      	mov	r3, r7
 80009ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <main+0x170>)
 80009be:	4618      	mov	r0, r3
 80009c0:	f009 fdc0 	bl	800a544 <siprintf>
		  HAL_UART_Transmit(&huart3, buffertx, 100, 1);
 80009c4:	4639      	mov	r1, r7
 80009c6:	2301      	movs	r3, #1
 80009c8:	2264      	movs	r2, #100	; 0x64
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <main+0x174>)
 80009cc:	f008 fcba 	bl	8009344 <HAL_UART_Transmit>
		  //for (k=0;k<2000;k++)  //ritardo sintetico ottimale a 20
		       		{
		       			cont2++;
 80009d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d2:	3301      	adds	r3, #1
 80009d4:	66bb      	str	r3, [r7, #104]	; 0x68
  {
 80009d6:	e7b3      	b.n	8000940 <main+0xc0>
 80009d8:	58024400 	.word	0x58024400
 80009dc:	20000428 	.word	0x20000428
 80009e0:	20000294 	.word	0x20000294
 80009e4:	200000a0 	.word	0x200000a0
 80009e8:	20000090 	.word	0x20000090
 80009ec:	200001b8 	.word	0x200001b8
 80009f0:	0800b940 	.word	0x0800b940
 80009f4:	200000b4 	.word	0x200000b4

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0cc      	sub	sp, #304	; 0x130
 80009fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a02:	224c      	movs	r2, #76	; 0x4c
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f009 fd94 	bl	800a534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a10:	2220      	movs	r2, #32
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f009 fd8d 	bl	800a534 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4618      	mov	r0, r3
 8000a20:	23bc      	movs	r3, #188	; 0xbc
 8000a22:	461a      	mov	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f009 fd85 	bl	800a534 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f005 f902 	bl	8005c34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	4b5c      	ldr	r3, [pc, #368]	; (8000ba8 <SystemClock_Config+0x1b0>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a5b      	ldr	r2, [pc, #364]	; (8000ba8 <SystemClock_Config+0x1b0>)
 8000a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b59      	ldr	r3, [pc, #356]	; (8000ba8 <SystemClock_Config+0x1b0>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	4b57      	ldr	r3, [pc, #348]	; (8000bac <SystemClock_Config+0x1b4>)
 8000a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a52:	4a56      	ldr	r2, [pc, #344]	; (8000bac <SystemClock_Config+0x1b4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a5a:	4b54      	ldr	r3, [pc, #336]	; (8000bac <SystemClock_Config+0x1b4>)
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	f003 0201 	and.w	r2, r3, #1
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a6a:	bf00      	nop
 8000a6c:	4b4e      	ldr	r3, [pc, #312]	; (8000ba8 <SystemClock_Config+0x1b0>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a78:	d1f8      	bne.n	8000a6c <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a7a:	4b4d      	ldr	r3, [pc, #308]	; (8000bb0 <SystemClock_Config+0x1b8>)
 8000a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7e:	f023 0303 	bic.w	r3, r3, #3
 8000a82:	4a4b      	ldr	r2, [pc, #300]	; (8000bb0 <SystemClock_Config+0x1b8>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000aaa:	2378      	movs	r3, #120	; 0x78
 8000aac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f005 f905 	bl	8005ce8 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000ae4:	f000 faaa 	bl	800103c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	233f      	movs	r3, #63	; 0x3f
 8000aea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2303      	movs	r3, #3
 8000af0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000afa:	2308      	movs	r3, #8
 8000afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b00:	2340      	movs	r3, #64	; 0x40
 8000b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b14:	2340      	movs	r3, #64	; 0x40
 8000b16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b1e:	2104      	movs	r1, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 fcf1 	bl	8006508 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000b2c:	f000 fa86 	bl	800103c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <SystemClock_Config+0x1bc>)
 8000b36:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2213      	movs	r2, #19
 8000b46:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2202      	movs	r2, #2
 8000b56:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	22c0      	movs	r2, #192	; 0xc0
 8000b66:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b78:	f107 0308 	add.w	r3, r7, #8
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	2200      	movs	r2, #0
 8000b86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f006 f83e 	bl	8006c10 <HAL_RCCEx_PeriphCLKConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x1a6>
  {
    Error_Handler();
 8000b9a:	f000 fa4f 	bl	800103c <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	58024800 	.word	0x58024800
 8000bac:	58000400 	.word	0x58000400
 8000bb0:	58024400 	.word	0x58024400
 8000bb4:	00080002 	.word	0x00080002

08000bb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]
 8000bda:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000bde:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <MX_ADC1_Init+0xe8>)
 8000be0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c12:	4b22      	ldr	r3, [pc, #136]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c18:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c38:	4818      	ldr	r0, [pc, #96]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c3a:	f000 ff23 	bl	8001a84 <HAL_ADC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c44:	f000 f9fa 	bl	800103c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4812      	ldr	r0, [pc, #72]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c54:	f002 f870 	bl	8002d38 <HAL_ADCEx_MultiModeConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c5e:	f000 f9ed 	bl	800103c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_ADC1_Init+0xec>)
 8000c64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c66:	2306      	movs	r3, #6
 8000c68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c6e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c72:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c74:	2304      	movs	r3, #4
 8000c76:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_ADC1_Init+0xe4>)
 8000c86:	f001 fa95 	bl	80021b4 <HAL_ADC_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000c90:	f000 f9d4 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200001b8 	.word	0x200001b8
 8000ca0:	40022000 	.word	0x40022000
 8000ca4:	08600004 	.word	0x08600004

08000ca8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2224      	movs	r2, #36	; 0x24
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f009 fc3d 	bl	800a534 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_DAC1_Init+0x5c>)
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <MX_DAC1_Init+0x60>)
 8000cbe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cc0:	4810      	ldr	r0, [pc, #64]	; (8000d04 <MX_DAC1_Init+0x5c>)
 8000cc2:	f002 fa22 	bl	800310a <HAL_DAC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ccc:	f000 f9b6 	bl	800103c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <MX_DAC1_Init+0x5c>)
 8000cec:	f002 fb32 	bl	8003354 <HAL_DAC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000cf6:	f000 f9a1 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	; 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200000a0 	.word	0x200000a0
 8000d08:	40007400 	.word	0x40007400

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d34:	2259      	movs	r2, #89	; 0x59
 8000d36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d40:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000d44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d54:	f007 fe20 	bl	8008998 <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d5e:	f000 f96d 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d70:	f007 ffb8 	bl	8008ce4 <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d7a:	f000 f95f 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <MX_TIM2_Init+0x98>)
 8000d8c:	f008 f9e4 	bl	8009158 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d96:	f000 f951 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000428 	.word	0x20000428

08000da8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <MX_USART3_UART_Init+0x94>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000df0:	4811      	ldr	r0, [pc, #68]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000df2:	f008 fa57 	bl	80092a4 <HAL_UART_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dfc:	f000 f91e 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e00:	2100      	movs	r1, #0
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000e04:	f009 fa87 	bl	800a316 <HAL_UARTEx_SetTxFifoThreshold>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0e:	f000 f915 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000e16:	f009 fabc 	bl	800a392 <HAL_UARTEx_SetRxFifoThreshold>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e20:	f000 f90c 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_USART3_UART_Init+0x90>)
 8000e26:	f009 fa3d 	bl	800a2a4 <HAL_UARTEx_DisableFifoMode>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e30:	f000 f904 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200000b4 	.word	0x200000b4
 8000e3c:	40004800 	.word	0x40004800

08000e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_DMA_Init+0x4c>)
 8000e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <MX_DMA_Init+0x4c>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_DMA_Init+0x4c>)
 8000e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	200b      	movs	r0, #11
 8000e6a:	f002 f91a 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e6e:	200b      	movs	r0, #11
 8000e70:	f002 f931 	bl	80030d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2010      	movs	r0, #16
 8000e7a:	f002 f912 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e7e:	2010      	movs	r0, #16
 8000e80:	f002 f929 	bl	80030d6 <HAL_NVIC_EnableIRQ>

}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	58024400 	.word	0x58024400

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b60      	ldr	r3, [pc, #384]	; (8001028 <MX_GPIO_Init+0x198>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	4a5e      	ldr	r2, [pc, #376]	; (8001028 <MX_GPIO_Init+0x198>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb6:	4b5c      	ldr	r3, [pc, #368]	; (8001028 <MX_GPIO_Init+0x198>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec4:	4b58      	ldr	r3, [pc, #352]	; (8001028 <MX_GPIO_Init+0x198>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	4a57      	ldr	r2, [pc, #348]	; (8001028 <MX_GPIO_Init+0x198>)
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed4:	4b54      	ldr	r3, [pc, #336]	; (8001028 <MX_GPIO_Init+0x198>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b51      	ldr	r3, [pc, #324]	; (8001028 <MX_GPIO_Init+0x198>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	4a4f      	ldr	r2, [pc, #316]	; (8001028 <MX_GPIO_Init+0x198>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef2:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <MX_GPIO_Init+0x198>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f00:	4b49      	ldr	r3, [pc, #292]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	4a48      	ldr	r2, [pc, #288]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f10:	4b45      	ldr	r3, [pc, #276]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b42      	ldr	r3, [pc, #264]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	4a40      	ldr	r2, [pc, #256]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2e:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	4a39      	ldr	r2, [pc, #228]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4c:	4b36      	ldr	r3, [pc, #216]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5a:	4b33      	ldr	r3, [pc, #204]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f60:	4a31      	ldr	r2, [pc, #196]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <MX_GPIO_Init+0x198>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f78:	2332      	movs	r3, #50	; 0x32
 8000f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f88:	230b      	movs	r3, #11
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4826      	ldr	r0, [pc, #152]	; (800102c <MX_GPIO_Init+0x19c>)
 8000f94:	f004 fc70 	bl	8005878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f98:	2386      	movs	r3, #134	; 0x86
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa8:	230b      	movs	r3, #11
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481f      	ldr	r0, [pc, #124]	; (8001030 <MX_GPIO_Init+0x1a0>)
 8000fb4:	f004 fc60 	bl	8005878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fca:	230b      	movs	r3, #11
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4817      	ldr	r0, [pc, #92]	; (8001034 <MX_GPIO_Init+0x1a4>)
 8000fd6:	f004 fc4f 	bl	8005878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fda:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fec:	230a      	movs	r3, #10
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_GPIO_Init+0x1a0>)
 8000ff8:	f004 fc3e 	bl	8005878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ffc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800100e:	230b      	movs	r3, #11
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4807      	ldr	r0, [pc, #28]	; (8001038 <MX_GPIO_Init+0x1a8>)
 800101a:	f004 fc2d 	bl	8005878 <HAL_GPIO_Init>

}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	; 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	58024400 	.word	0x58024400
 800102c:	58020800 	.word	0x58020800
 8001030:	58020000 	.word	0x58020000
 8001034:	58020400 	.word	0x58020400
 8001038:	58021800 	.word	0x58021800

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_MspInit+0x30>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001058:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_MspInit+0x30>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_MspInit+0x30>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	58024400 	.word	0x58024400

08001080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a30      	ldr	r2, [pc, #192]	; (8001160 <HAL_ADC_MspInit+0xe0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d15a      	bne.n	8001158 <HAL_ADC_MspInit+0xd8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_ADC_MspInit+0xe4>)
 80010a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a8:	4a2e      	ldr	r2, [pc, #184]	; (8001164 <HAL_ADC_MspInit+0xe4>)
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_ADC_MspInit+0xe4>)
 80010b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_ADC_MspInit+0xe4>)
 80010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_ADC_MspInit+0xe4>)
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_ADC_MspInit+0xe4>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	481d      	ldr	r0, [pc, #116]	; (8001168 <HAL_ADC_MspInit+0xe8>)
 80010f4:	f004 fbc0 	bl	8005878 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_ADC_MspInit+0xec>)
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_ADC_MspInit+0xf0>)
 80010fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_ADC_MspInit+0xec>)
 8001100:	2209      	movs	r2, #9
 8001102:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_ADC_MspInit+0xec>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_ADC_MspInit+0xec>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_ADC_MspInit+0xec>)
 8001112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001116:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_ADC_MspInit+0xec>)
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800111e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_ADC_MspInit+0xec>)
 8001122:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001126:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_ADC_MspInit+0xec>)
 800112a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_ADC_MspInit+0xec>)
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_ADC_MspInit+0xec>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <HAL_ADC_MspInit+0xec>)
 800113e:	f002 fac3 	bl	80036c8 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8001148:	f7ff ff78 	bl	800103c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_ADC_MspInit+0xec>)
 8001150:	64da      	str	r2, [r3, #76]	; 0x4c
 8001152:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_ADC_MspInit+0xec>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40022000 	.word	0x40022000
 8001164:	58024400 	.word	0x58024400
 8001168:	58021400 	.word	0x58021400
 800116c:	2000021c 	.word	0x2000021c
 8001170:	40020010 	.word	0x40020010

08001174 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a30      	ldr	r2, [pc, #192]	; (8001254 <HAL_DAC_MspInit+0xe0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d159      	bne.n	800124a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_DAC_MspInit+0xe4>)
 8001198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800119c:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <HAL_DAC_MspInit+0xe4>)
 800119e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <HAL_DAC_MspInit+0xe4>)
 80011a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <HAL_DAC_MspInit+0xe4>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a27      	ldr	r2, [pc, #156]	; (8001258 <HAL_DAC_MspInit+0xe4>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_DAC_MspInit+0xe4>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011d2:	2310      	movs	r3, #16
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	481d      	ldr	r0, [pc, #116]	; (800125c <HAL_DAC_MspInit+0xe8>)
 80011e6:	f004 fb47 	bl	8005878 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_DAC_MspInit+0xec>)
 80011ec:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_DAC_MspInit+0xf0>)
 80011ee:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_DAC_MspInit+0xec>)
 80011f2:	2243      	movs	r2, #67	; 0x43
 80011f4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_DAC_MspInit+0xec>)
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_DAC_MspInit+0xec>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_DAC_MspInit+0xec>)
 8001204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001208:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_DAC_MspInit+0xec>)
 800120c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001210:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_DAC_MspInit+0xec>)
 8001214:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001218:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_DAC_MspInit+0xec>)
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_DAC_MspInit+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_DAC_MspInit+0xec>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <HAL_DAC_MspInit+0xec>)
 8001230:	f002 fa4a 	bl	80036c8 <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800123a:	f7ff feff 	bl	800103c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_DAC_MspInit+0xec>)
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	4a06      	ldr	r2, [pc, #24]	; (8001260 <HAL_DAC_MspInit+0xec>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40007400 	.word	0x40007400
 8001258:	58024400 	.word	0x58024400
 800125c:	58020000 	.word	0x58020000
 8001260:	20000140 	.word	0x20000140
 8001264:	40020088 	.word	0x40020088

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d116      	bne.n	80012a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 800127c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001280:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_TIM_Base_MspInit+0x48>)
 800128c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	201c      	movs	r0, #28
 800129e:	f001 ff00 	bl	80030a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012a2:	201c      	movs	r0, #28
 80012a4:	f001 ff17 	bl	80030d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	58024400 	.word	0x58024400

080012b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1a      	ldr	r2, [pc, #104]	; (800133c <HAL_UART_MspInit+0x88>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12e      	bne.n	8001334 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_UART_MspInit+0x8c>)
 80012d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <HAL_UART_MspInit+0x8c>)
 80012de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_UART_MspInit+0x8c>)
 80012e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_UART_MspInit+0x8c>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_UART_MspInit+0x8c>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_UART_MspInit+0x8c>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001312:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001324:	2307      	movs	r3, #7
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_UART_MspInit+0x90>)
 8001330:	f004 faa2 	bl	8005878 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40004800 	.word	0x40004800
 8001340:	58024400 	.word	0x58024400
 8001344:	58020c00 	.word	0x58020c00

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139c:	f000 f8f2 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <DMA1_Stream0_IRQHandler+0x10>)
 80013aa:	f002 ff53 	bl	8004254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000021c 	.word	0x2000021c

080013b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <DMA1_Stream5_IRQHandler+0x10>)
 80013be:	f002 ff49 	bl	8004254 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000140 	.word	0x20000140

080013cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <TIM2_IRQHandler+0x10>)
 80013d2:	f007 fb67 	bl	8008aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000428 	.word	0x20000428

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4a14      	ldr	r2, [pc, #80]	; (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f009 f866 	bl	800a4e0 <__errno>
 8001414:	4602      	mov	r2, r0
 8001416:	230c      	movs	r3, #12
 8001418:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <_sbrk+0x64>)
 8001430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20020000 	.word	0x20020000
 8001440:	00000400 	.word	0x00000400
 8001444:	20000094 	.word	0x20000094
 8001448:	20000480 	.word	0x20000480

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001484 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001450:	f7ff f916 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001456:	e003      	b.n	8001460 <LoopCopyDataInit>

08001458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800145a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800145c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800145e:	3104      	adds	r1, #4

08001460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001460:	480a      	ldr	r0, [pc, #40]	; (800148c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001468:	d3f6      	bcc.n	8001458 <CopyDataInit>
  ldr  r2, =_sbss
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800146c:	e002      	b.n	8001474 <LoopFillZerobss>

0800146e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800146e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001470:	f842 3b04 	str.w	r3, [r2], #4

08001474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001478:	d3f9      	bcc.n	800146e <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800147a:	f009 f837 	bl	800a4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff f9ff 	bl	8000880 <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001488:	0800bba8 	.word	0x0800bba8
  ldr  r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001490:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001494:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001498:	2000047c 	.word	0x2000047c

0800149c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC3_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a6:	2003      	movs	r0, #3
 80014a8:	f001 fdf0 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014ac:	f005 f9e2 	bl	8006874 <HAL_RCC_GetSysClockFreq>
 80014b0:	4601      	mov	r1, r0
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	4a13      	ldr	r2, [pc, #76]	; (800150c <HAL_Init+0x6c>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	fa21 f303 	lsr.w	r3, r1, r3
 80014c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_Init+0x68>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_Init+0x6c>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <HAL_Init+0x70>)
 80014e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014e4:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_Init+0x74>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f814 	bl	8001518 <HAL_InitTick>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e002      	b.n	8001500 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014fa:	f7ff fda7 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	58024400 	.word	0x58024400
 800150c:	0800b958 	.word	0x0800b958
 8001510:	20000004 	.word	0x20000004
 8001514:	20000000 	.word	0x20000000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_InitTick+0x60>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e021      	b.n	8001570 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_InitTick+0x64>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_InitTick+0x60>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f001 fdd5 	bl	80030f2 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f001 fd9f 	bl	80030a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x68>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000000c 	.word	0x2000000c
 800157c:	20000000 	.word	0x20000000
 8001580:	20000008 	.word	0x20000008

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	20000474 	.word	0x20000474

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000474 	.word	0x20000474

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_Delay+0x40>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffde 	bl	80015ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000000c 	.word	0x2000000c

08001608 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetREVID+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0c1b      	lsrs	r3, r3, #16
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	5c001000 	.word	0x5c001000

08001620 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	609a      	str	r2, [r3, #8]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	3360      	adds	r3, #96	; 0x60
 800169a:	461a      	mov	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	431a      	orrs	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	431a      	orrs	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	611a      	str	r2, [r3, #16]
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b087      	sub	sp, #28
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3360      	adds	r3, #96	; 0x60
 800170a:	461a      	mov	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	431a      	orrs	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	601a      	str	r2, [r3, #0]
  }
}
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001756:	b480      	push	{r7}
 8001758:	b087      	sub	sp, #28
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3330      	adds	r3, #48	; 0x30
 8001766:	461a      	mov	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	4413      	add	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	211f      	movs	r1, #31
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	401a      	ands	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	0e9b      	lsrs	r3, r3, #26
 800178e:	f003 011f 	and.w	r1, r3, #31
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f003 031f 	and.w	r3, r3, #31
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	431a      	orrs	r2, r3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b087      	sub	sp, #28
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3314      	adds	r3, #20
 80017be:	461a      	mov	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	0e5b      	lsrs	r3, r3, #25
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	4413      	add	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	0d1b      	lsrs	r3, r3, #20
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	2107      	movs	r1, #7
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	0d1b      	lsrs	r3, r3, #20
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	431a      	orrs	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017f8:	bf00      	nop
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800181c:	43db      	mvns	r3, r3
 800181e:	401a      	ands	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0318 	and.w	r3, r3, #24
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001828:	40d9      	lsrs	r1, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	400b      	ands	r3, r1
 800182e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001832:	431a      	orrs	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	000fffff 	.word	0x000fffff

0800184c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 031f 	and.w	r3, r3, #31
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001878:	4618      	mov	r0, r3
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001892:	4013      	ands	r3, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6093      	str	r3, [r2, #8]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	5fffffc0 	.word	0x5fffffc0

080018a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018bc:	d101      	bne.n	80018c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80018de:	4013      	ands	r3, r2
 80018e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	6fffffc0 	.word	0x6fffffc0

080018f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800190c:	d101      	bne.n	8001912 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <LL_ADC_Enable+0x24>)
 800192e:	4013      	ands	r3, r2
 8001930:	f043 0201 	orr.w	r2, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	7fffffc0 	.word	0x7fffffc0

08001948 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <LL_ADC_Disable+0x24>)
 8001956:	4013      	ands	r3, r2
 8001958:	f043 0202 	orr.w	r2, r3, #2
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	7fffffc0 	.word	0x7fffffc0

08001970 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <LL_ADC_IsEnabled+0x18>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <LL_ADC_IsEnabled+0x1a>
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d101      	bne.n	80019ae <LL_ADC_IsDisableOngoing+0x18>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <LL_ADC_IsDisableOngoing+0x1a>
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <LL_ADC_REG_StartConversion+0x24>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	f043 0204 	orr.w	r2, r3, #4
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	7fffffc0 	.word	0x7fffffc0

080019e4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <LL_ADC_REG_StopConversion+0x24>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	f043 0210 	orr.w	r2, r3, #16
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	7fffffc0 	.word	0x7fffffc0

08001a0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d101      	bne.n	8001a24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <LL_ADC_INJ_StopConversion+0x24>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	f043 0220 	orr.w	r2, r3, #32
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	7fffffc0 	.word	0x7fffffc0

08001a5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d101      	bne.n	8001a74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e18e      	b.n	8001dbc <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff fae7 	bl	8001080 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff feef 	bl	80018a8 <LL_ADC_IsDeepPowerDownEnabled>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fed5 	bl	8001884 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff0a 	bl	80018f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d113      	bne.n	8001b12 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff feee 	bl	80018d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001af4:	4b9a      	ldr	r3, [pc, #616]	; (8001d60 <HAL_ADC_Init+0x2dc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	099b      	lsrs	r3, r3, #6
 8001afa:	4a9a      	ldr	r2, [pc, #616]	; (8001d64 <HAL_ADC_Init+0x2e0>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b04:	e002      	b.n	8001b0c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f9      	bne.n	8001b06 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff feee 	bl	80018f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10d      	bne.n	8001b3e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b26:	f043 0210 	orr.w	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff62 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 8001b48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 8129 	bne.w	8001daa <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 8125 	bne.w	8001daa <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b68:	f043 0202 	orr.w	r2, r3, #2
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fefb 	bl	8001970 <LL_ADC_IsEnabled>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d136      	bne.n	8001bee <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a78      	ldr	r2, [pc, #480]	; (8001d68 <HAL_ADC_Init+0x2e4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d004      	beq.n	8001b94 <HAL_ADC_Init+0x110>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <HAL_ADC_Init+0x2e8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d10e      	bne.n	8001bb2 <HAL_ADC_Init+0x12e>
 8001b94:	4874      	ldr	r0, [pc, #464]	; (8001d68 <HAL_ADC_Init+0x2e4>)
 8001b96:	f7ff feeb 	bl	8001970 <LL_ADC_IsEnabled>
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	4873      	ldr	r0, [pc, #460]	; (8001d6c <HAL_ADC_Init+0x2e8>)
 8001b9e:	f7ff fee7 	bl	8001970 <LL_ADC_IsEnabled>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4323      	orrs	r3, r4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf0c      	ite	eq
 8001baa:	2301      	moveq	r3, #1
 8001bac:	2300      	movne	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	e008      	b.n	8001bc4 <HAL_ADC_Init+0x140>
 8001bb2:	486f      	ldr	r0, [pc, #444]	; (8001d70 <HAL_ADC_Init+0x2ec>)
 8001bb4:	f7ff fedc 	bl	8001970 <LL_ADC_IsEnabled>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	2300      	movne	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d012      	beq.n	8001bee <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a66      	ldr	r2, [pc, #408]	; (8001d68 <HAL_ADC_Init+0x2e4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d004      	beq.n	8001bdc <HAL_ADC_Init+0x158>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a65      	ldr	r2, [pc, #404]	; (8001d6c <HAL_ADC_Init+0x2e8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_ADC_Init+0x15c>
 8001bdc:	4a65      	ldr	r2, [pc, #404]	; (8001d74 <HAL_ADC_Init+0x2f0>)
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_Init+0x15e>
 8001be0:	4a65      	ldr	r2, [pc, #404]	; (8001d78 <HAL_ADC_Init+0x2f4>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4619      	mov	r1, r3
 8001be8:	4610      	mov	r0, r2
 8001bea:	f7ff fd19 	bl	8001620 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001bee:	f7ff fd0b 	bl	8001608 <HAL_GetREVID>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f241 0303 	movw	r3, #4099	; 0x1003
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d914      	bls.n	8001c26 <HAL_ADC_Init+0x1a2>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b10      	cmp	r3, #16
 8001c02:	d110      	bne.n	8001c26 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7d5b      	ldrb	r3, [r3, #21]
 8001c08:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c0e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c14:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7f1b      	ldrb	r3, [r3, #28]
 8001c1a:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c1c:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c1e:	f043 030c 	orr.w	r3, r3, #12
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	e00d      	b.n	8001c42 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7d5b      	ldrb	r3, [r3, #21]
 8001c2a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c30:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c36:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7f1b      	ldrb	r3, [r3, #28]
 8001c3c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7f1b      	ldrb	r3, [r3, #28]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d106      	bne.n	8001c58 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	045b      	lsls	r3, r3, #17
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_ADC_Init+0x2f8>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff febd 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 8001c92:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fedf 	bl	8001a5c <LL_ADC_INJ_IsConversionOngoing>
 8001c9e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d14a      	bne.n	8001d3c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d147      	bne.n	8001d3c <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7d1b      	ldrb	r3, [r3, #20]
 8001cb0:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	; (8001d80 <HAL_ADC_Init+0x2fc>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	69b9      	ldr	r1, [r7, #24]
 8001cca:	430b      	orrs	r3, r1
 8001ccc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d11b      	bne.n	8001d10 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_ADC_Init+0x300>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cec:	3a01      	subs	r2, #1
 8001cee:	0411      	lsls	r1, r2, #16
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cf4:	4311      	orrs	r1, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d00:	430a      	orrs	r2, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	611a      	str	r2, [r3, #16]
 8001d0e:	e007      	b.n	8001d20 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fee0 	bl	8002afc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d121      	bne.n	8001d88 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f023 010f 	bic.w	r1, r3, #15
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	1e5a      	subs	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d5c:	e01c      	b.n	8001d98 <HAL_ADC_Init+0x314>
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000
 8001d64:	053e2d63 	.word	0x053e2d63
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40022100 	.word	0x40022100
 8001d70:	58026000 	.word	0x58026000
 8001d74:	40022300 	.word	0x40022300
 8001d78:	58026300 	.word	0x58026300
 8001d7c:	fff0c003 	.word	0xfff0c003
 8001d80:	ffffbffc 	.word	0xffffbffc
 8001d84:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 020f 	bic.w	r2, r2, #15
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	f023 0303 	bic.w	r3, r3, #3
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
 8001da8:	e007      	b.n	8001dba <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3724      	adds	r7, #36	; 0x24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}

08001dc4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a5c      	ldr	r2, [pc, #368]	; (8001f44 <HAL_ADC_Start+0x180>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_ADC_Start+0x1c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a5b      	ldr	r2, [pc, #364]	; (8001f48 <HAL_ADC_Start+0x184>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d101      	bne.n	8001de4 <HAL_ADC_Start+0x20>
 8001de0:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <HAL_ADC_Start+0x188>)
 8001de2:	e000      	b.n	8001de6 <HAL_ADC_Start+0x22>
 8001de4:	4b5a      	ldr	r3, [pc, #360]	; (8001f50 <HAL_ADC_Start+0x18c>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fd30 	bl	800184c <LL_ADC_GetMultimode>
 8001dec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fe0a 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 809a 	bne.w	8001f34 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_Start+0x4a>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e095      	b.n	8001f3a <HAL_ADC_Start+0x176>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fd94 	bl	8002944 <ADC_Enable>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8081 	bne.w	8001f2a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e2c:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <HAL_ADC_Start+0x190>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a42      	ldr	r2, [pc, #264]	; (8001f48 <HAL_ADC_Start+0x184>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d002      	beq.n	8001e48 <HAL_ADC_Start+0x84>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	e000      	b.n	8001e4a <HAL_ADC_Start+0x86>
 8001e48:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <HAL_ADC_Start+0x180>)
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d002      	beq.n	8001e58 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e70:	d106      	bne.n	8001e80 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	f023 0206 	bic.w	r2, r3, #6
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	659a      	str	r2, [r3, #88]	; 0x58
 8001e7e:	e002      	b.n	8001e86 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	221c      	movs	r2, #28
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <HAL_ADC_Start+0x184>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d002      	beq.n	8001ea6 <HAL_ADC_Start+0xe2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	e000      	b.n	8001ea8 <HAL_ADC_Start+0xe4>
 8001ea6:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_ADC_Start+0x180>)
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d008      	beq.n	8001ec2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b05      	cmp	r3, #5
 8001eba:	d002      	beq.n	8001ec2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	2b09      	cmp	r3, #9
 8001ec0:	d114      	bne.n	8001eec <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fd69 	bl	80019bc <LL_ADC_REG_StartConversion>
 8001eea:	e025      	b.n	8001f38 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <HAL_ADC_Start+0x184>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d002      	beq.n	8001f08 <HAL_ADC_Start+0x144>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	e000      	b.n	8001f0a <HAL_ADC_Start+0x146>
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_ADC_Start+0x180>)
 8001f0a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00f      	beq.n	8001f38 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
 8001f28:	e006      	b.n	8001f38 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f32:	e001      	b.n	8001f38 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
 8001f36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40022000 	.word	0x40022000
 8001f48:	40022100 	.word	0x40022100
 8001f4c:	40022300 	.word	0x40022300
 8001f50:	58026300 	.word	0x58026300
 8001f54:	fffff0fe 	.word	0xfffff0fe

08001f58 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Stop+0x16>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e021      	b.n	8001fb2 <HAL_ADC_Stop+0x5a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f76:	2103      	movs	r1, #3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fc2f 	bl	80027dc <ADC_ConversionStop>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10f      	bne.n	8001fa8 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fd5f 	bl	8002a4c <ADC_Disable>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <HAL_ADC_Stop+0x64>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	ffffeefe 	.word	0xffffeefe

08001fc0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a6e      	ldr	r2, [pc, #440]	; (8002188 <HAL_ADC_PollForConversion+0x1c8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d004      	beq.n	8001fde <HAL_ADC_PollForConversion+0x1e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6c      	ldr	r2, [pc, #432]	; (800218c <HAL_ADC_PollForConversion+0x1cc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_PollForConversion+0x22>
 8001fde:	4b6c      	ldr	r3, [pc, #432]	; (8002190 <HAL_ADC_PollForConversion+0x1d0>)
 8001fe0:	e000      	b.n	8001fe4 <HAL_ADC_PollForConversion+0x24>
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	; (8002194 <HAL_ADC_PollForConversion+0x1d4>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fc31 	bl	800184c <LL_ADC_GetMultimode>
 8001fea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	2b08      	cmp	r3, #8
 8001ff2:	d102      	bne.n	8001ffa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	e037      	b.n	800206a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d002      	beq.n	800200c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b09      	cmp	r3, #9
 800200a:	d111      	bne.n	8002030 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	f043 0220 	orr.w	r2, r3, #32
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0aa      	b.n	8002180 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800202a:	2304      	movs	r3, #4
 800202c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800202e:	e01c      	b.n	800206a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a54      	ldr	r2, [pc, #336]	; (8002188 <HAL_ADC_PollForConversion+0x1c8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_ADC_PollForConversion+0x84>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a53      	ldr	r2, [pc, #332]	; (800218c <HAL_ADC_PollForConversion+0x1cc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_ADC_PollForConversion+0x88>
 8002044:	4b52      	ldr	r3, [pc, #328]	; (8002190 <HAL_ADC_PollForConversion+0x1d0>)
 8002046:	e000      	b.n	800204a <HAL_ADC_PollForConversion+0x8a>
 8002048:	4b52      	ldr	r3, [pc, #328]	; (8002194 <HAL_ADC_PollForConversion+0x1d4>)
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fc0c 	bl	8001868 <LL_ADC_GetMultiDMATransfer>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205a:	f043 0220 	orr.w	r2, r3, #32
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e08c      	b.n	8002180 <HAL_ADC_PollForConversion+0x1c0>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002066:	2304      	movs	r3, #4
 8002068:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800206a:	f7ff fa9f 	bl	80015ac <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002070:	e01a      	b.n	80020a8 <HAL_ADC_PollForConversion+0xe8>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d016      	beq.n	80020a8 <HAL_ADC_PollForConversion+0xe8>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800207a:	f7ff fa97 	bl	80015ac <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d302      	bcc.n	8002090 <HAL_ADC_PollForConversion+0xd0>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10b      	bne.n	80020a8 <HAL_ADC_PollForConversion+0xe8>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f043 0204 	orr.w	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e06b      	b.n	8002180 <HAL_ADC_PollForConversion+0x1c0>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0dd      	beq.n	8002072 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fb32 	bl	8001730 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d01c      	beq.n	800210c <HAL_ADC_PollForConversion+0x14c>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7d5b      	ldrb	r3, [r3, #21]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d118      	bne.n	800210c <HAL_ADC_PollForConversion+0x14c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d111      	bne.n	800210c <HAL_ADC_PollForConversion+0x14c>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_PollForConversion+0x14c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a1e      	ldr	r2, [pc, #120]	; (800218c <HAL_ADC_PollForConversion+0x1cc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d002      	beq.n	800211c <HAL_ADC_PollForConversion+0x15c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	e000      	b.n	800211e <HAL_ADC_PollForConversion+0x15e>
 800211c:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_ADC_PollForConversion+0x1c8>)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	4293      	cmp	r3, r2
 8002124:	d008      	beq.n	8002138 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b05      	cmp	r3, #5
 8002130:	d002      	beq.n	8002138 <HAL_ADC_PollForConversion+0x178>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b09      	cmp	r3, #9
 8002136:	d104      	bne.n	8002142 <HAL_ADC_PollForConversion+0x182>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	e00c      	b.n	800215c <HAL_ADC_PollForConversion+0x19c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_ADC_PollForConversion+0x1cc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d002      	beq.n	8002152 <HAL_ADC_PollForConversion+0x192>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	e000      	b.n	8002154 <HAL_ADC_PollForConversion+0x194>
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_ADC_PollForConversion+0x1c8>)
 8002154:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b08      	cmp	r3, #8
 8002160:	d104      	bne.n	800216c <HAL_ADC_PollForConversion+0x1ac>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2208      	movs	r2, #8
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e008      	b.n	800217e <HAL_ADC_PollForConversion+0x1be>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_ADC_PollForConversion+0x1be>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	220c      	movs	r2, #12
 800217c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3720      	adds	r7, #32
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40022000 	.word	0x40022000
 800218c:	40022100 	.word	0x40022100
 8002190:	40022300 	.word	0x40022300
 8002194:	58026300 	.word	0x58026300

08002198 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b099      	sub	sp, #100	; 0x64
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a99      	ldr	r2, [pc, #612]	; (8002434 <HAL_ADC_ConfigChannel+0x280>)
 80021ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x2a>
 80021da:	2302      	movs	r3, #2
 80021dc:	e2e6      	b.n	80027ac <HAL_ADC_ConfigChannel+0x5f8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fc0e 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 82cb 	bne.w	800278e <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002200:	2b00      	cmp	r3, #0
 8002202:	d108      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x62>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2201      	movs	r2, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	e00f      	b.n	8002236 <HAL_ADC_ConfigChannel+0x82>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	2201      	movs	r2, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	69d1      	ldr	r1, [r2, #28]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	430b      	orrs	r3, r1
 8002242:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	f7ff fa80 	bl	8001756 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fbd6 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 8002260:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fbf8 	bl	8001a5c <LL_ADC_INJ_IsConversionOngoing>
 800226c:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800226e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002270:	2b00      	cmp	r3, #0
 8002272:	f040 80b3 	bne.w	80023dc <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 80af 	bne.w	80023dc <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	461a      	mov	r2, r3
 800228c:	f7ff fa8f 	bl	80017ae <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002290:	4b69      	ldr	r3, [pc, #420]	; (8002438 <HAL_ADC_ConfigChannel+0x284>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800229c:	d10b      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x102>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	e01d      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x13e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x128>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	e00a      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x13e>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d027      	beq.n	800234c <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6919      	ldr	r1, [r3, #16]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800230a:	f7ff f9bd 	bl	8001688 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	7e5b      	ldrb	r3, [r3, #25]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x170>
 800231e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002322:	e000      	b.n	8002326 <HAL_ADC_ConfigChannel+0x172>
 8002324:	2300      	movs	r3, #0
 8002326:	461a      	mov	r2, r3
 8002328:	f7ff f9e7 	bl	80016fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6919      	ldr	r1, [r3, #16]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	7e1b      	ldrb	r3, [r3, #24]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x18e>
 800233c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002340:	e000      	b.n	8002344 <HAL_ADC_ConfigChannel+0x190>
 8002342:	2300      	movs	r3, #0
 8002344:	461a      	mov	r2, r3
 8002346:	f7ff f9bf 	bl	80016c8 <LL_ADC_SetDataRightShift>
 800234a:	e047      	b.n	80023dc <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	069b      	lsls	r3, r3, #26
 800235c:	429a      	cmp	r2, r3
 800235e:	d107      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800236e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002376:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	069b      	lsls	r3, r3, #26
 8002380:	429a      	cmp	r2, r3
 8002382:	d107      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002392:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	069b      	lsls	r3, r3, #26
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d107      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023b6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d107      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023da:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fac5 	bl	8001970 <LL_ADC_IsEnabled>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 81d9 	bne.w	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6819      	ldr	r1, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f7ff fa02 	bl	8001804 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <HAL_ADC_ConfigChannel+0x280>)
 8002406:	4293      	cmp	r3, r2
 8002408:	f040 8101 	bne.w	800260e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10f      	bne.n	800243c <HAL_ADC_ConfigChannel+0x288>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0e9b      	lsrs	r3, r3, #26
 8002422:	3301      	adds	r3, #1
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b09      	cmp	r3, #9
 800242a:	bf94      	ite	ls
 800242c:	2301      	movls	r3, #1
 800242e:	2300      	movhi	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e016      	b.n	8002462 <HAL_ADC_ConfigChannel+0x2ae>
 8002434:	47ff0000 	.word	0x47ff0000
 8002438:	5c001000 	.word	0x5c001000
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800244a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	3301      	adds	r3, #1
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2b09      	cmp	r3, #9
 800245a:	bf94      	ite	ls
 800245c:	2301      	movls	r3, #1
 800245e:	2300      	movhi	r3, #0
 8002460:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002462:	2b00      	cmp	r3, #0
 8002464:	d064      	beq.n	8002530 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x2ce>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0e9b      	lsrs	r3, r3, #26
 8002478:	3301      	adds	r3, #1
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002480:	e00e      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x2ec>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	069b      	lsls	r3, r3, #26
 800249c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x30c>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	3301      	adds	r3, #1
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	2101      	movs	r1, #1
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	e010      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x32e>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3301      	adds	r3, #1
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	ea42 0103 	orr.w	r1, r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x354>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	3301      	adds	r3, #1
 80024fa:	f003 021f 	and.w	r2, r3, #31
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	051b      	lsls	r3, r3, #20
 8002506:	e011      	b.n	800252c <HAL_ADC_ConfigChannel+0x378>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252c:	430b      	orrs	r3, r1
 800252e:	e069      	b.n	8002604 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_ADC_ConfigChannel+0x398>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	069b      	lsls	r3, r3, #26
 8002546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800254a:	e00e      	b.n	800256a <HAL_ADC_ConfigChannel+0x3b6>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	61fb      	str	r3, [r7, #28]
  return result;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3301      	adds	r3, #1
 8002564:	069b      	lsls	r3, r3, #26
 8002566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_ADC_ConfigChannel+0x3d6>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	0e9b      	lsrs	r3, r3, #26
 800257c:	3301      	adds	r3, #1
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	e010      	b.n	80025ac <HAL_ADC_ConfigChannel+0x3f8>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	617b      	str	r3, [r7, #20]
  return result;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	3301      	adds	r3, #1
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2101      	movs	r1, #1
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	ea42 0103 	orr.w	r1, r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10d      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x424>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	3b1e      	subs	r3, #30
 80025d0:	051b      	lsls	r3, r3, #20
 80025d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d6:	e014      	b.n	8002602 <HAL_ADC_ConfigChannel+0x44e>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	60fb      	str	r3, [r7, #12]
  return result;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 021f 	and.w	r2, r3, #31
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	3b1e      	subs	r3, #30
 80025fc:	051b      	lsls	r3, r3, #20
 80025fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002602:	430b      	orrs	r3, r1
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	6892      	ldr	r2, [r2, #8]
 8002608:	4619      	mov	r1, r3
 800260a:	f7ff f8d0 	bl	80017ae <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f280 80c4 	bge.w	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a65      	ldr	r2, [pc, #404]	; (80027b4 <HAL_ADC_ConfigChannel+0x600>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_ADC_ConfigChannel+0x478>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a64      	ldr	r2, [pc, #400]	; (80027b8 <HAL_ADC_ConfigChannel+0x604>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x47c>
 800262c:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_ADC_ConfigChannel+0x608>)
 800262e:	e000      	b.n	8002632 <HAL_ADC_ConfigChannel+0x47e>
 8002630:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_ADC_ConfigChannel+0x60c>)
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f81a 	bl	800166c <LL_ADC_GetCommonPathInternalCh>
 8002638:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5d      	ldr	r2, [pc, #372]	; (80027b4 <HAL_ADC_ConfigChannel+0x600>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d004      	beq.n	800264e <HAL_ADC_ConfigChannel+0x49a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5b      	ldr	r2, [pc, #364]	; (80027b8 <HAL_ADC_ConfigChannel+0x604>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10e      	bne.n	800266c <HAL_ADC_ConfigChannel+0x4b8>
 800264e:	4859      	ldr	r0, [pc, #356]	; (80027b4 <HAL_ADC_ConfigChannel+0x600>)
 8002650:	f7ff f98e 	bl	8001970 <LL_ADC_IsEnabled>
 8002654:	4604      	mov	r4, r0
 8002656:	4858      	ldr	r0, [pc, #352]	; (80027b8 <HAL_ADC_ConfigChannel+0x604>)
 8002658:	f7ff f98a 	bl	8001970 <LL_ADC_IsEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	4323      	orrs	r3, r4
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e008      	b.n	800267e <HAL_ADC_ConfigChannel+0x4ca>
 800266c:	4855      	ldr	r0, [pc, #340]	; (80027c4 <HAL_ADC_ConfigChannel+0x610>)
 800266e:	f7ff f97f 	bl	8001970 <LL_ADC_IsEnabled>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d07b      	beq.n	800277a <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a50      	ldr	r2, [pc, #320]	; (80027c8 <HAL_ADC_ConfigChannel+0x614>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d12e      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x536>
 800268c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800268e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d129      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a4a      	ldr	r2, [pc, #296]	; (80027c4 <HAL_ADC_ConfigChannel+0x610>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d17f      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a43      	ldr	r2, [pc, #268]	; (80027b4 <HAL_ADC_ConfigChannel+0x600>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_ADC_ConfigChannel+0x500>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a42      	ldr	r2, [pc, #264]	; (80027b8 <HAL_ADC_ConfigChannel+0x604>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x504>
 80026b4:	4a41      	ldr	r2, [pc, #260]	; (80027bc <HAL_ADC_ConfigChannel+0x608>)
 80026b6:	e000      	b.n	80026ba <HAL_ADC_ConfigChannel+0x506>
 80026b8:	4a41      	ldr	r2, [pc, #260]	; (80027c0 <HAL_ADC_ConfigChannel+0x60c>)
 80026ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7fe ffbf 	bl	8001646 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026c8:	4b40      	ldr	r3, [pc, #256]	; (80027cc <HAL_ADC_ConfigChannel+0x618>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	4a40      	ldr	r2, [pc, #256]	; (80027d0 <HAL_ADC_ConfigChannel+0x61c>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026da:	e002      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3b01      	subs	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f9      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026e8:	e05a      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a39      	ldr	r2, [pc, #228]	; (80027d4 <HAL_ADC_ConfigChannel+0x620>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d11e      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x57e>
 80026f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d119      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a30      	ldr	r2, [pc, #192]	; (80027c4 <HAL_ADC_ConfigChannel+0x610>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d14b      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a29      	ldr	r2, [pc, #164]	; (80027b4 <HAL_ADC_ConfigChannel+0x600>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_ADC_ConfigChannel+0x568>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <HAL_ADC_ConfigChannel+0x604>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x56c>
 800271c:	4a27      	ldr	r2, [pc, #156]	; (80027bc <HAL_ADC_ConfigChannel+0x608>)
 800271e:	e000      	b.n	8002722 <HAL_ADC_ConfigChannel+0x56e>
 8002720:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <HAL_ADC_ConfigChannel+0x60c>)
 8002722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002724:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002728:	4619      	mov	r1, r3
 800272a:	4610      	mov	r0, r2
 800272c:	f7fe ff8b 	bl	8001646 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002730:	e036      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a28      	ldr	r2, [pc, #160]	; (80027d8 <HAL_ADC_ConfigChannel+0x624>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d131      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
 800273c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d12c      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <HAL_ADC_ConfigChannel+0x610>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d127      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_ADC_ConfigChannel+0x600>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d004      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x5b0>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_ADC_ConfigChannel+0x604>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x5b4>
 8002764:	4a15      	ldr	r2, [pc, #84]	; (80027bc <HAL_ADC_ConfigChannel+0x608>)
 8002766:	e000      	b.n	800276a <HAL_ADC_ConfigChannel+0x5b6>
 8002768:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <HAL_ADC_ConfigChannel+0x60c>)
 800276a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f7fe ff67 	bl	8001646 <LL_ADC_SetCommonPathInternalCh>
 8002778:	e012      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800278c:	e008      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3764      	adds	r7, #100	; 0x64
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}
 80027b4:	40022000 	.word	0x40022000
 80027b8:	40022100 	.word	0x40022100
 80027bc:	40022300 	.word	0x40022300
 80027c0:	58026300 	.word	0x58026300
 80027c4:	58026000 	.word	0x58026000
 80027c8:	cb840000 	.word	0xcb840000
 80027cc:	20000000 	.word	0x20000000
 80027d0:	053e2d63 	.word	0x053e2d63
 80027d4:	c7520000 	.word	0xc7520000
 80027d8:	cfb80000 	.word	0xcfb80000

080027dc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f90a 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 80027f8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f92c 	bl	8001a5c <LL_ADC_INJ_IsConversionOngoing>
 8002804:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8090 	beq.w	8002934 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02a      	beq.n	8002878 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7d5b      	ldrb	r3, [r3, #21]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d126      	bne.n	8002878 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7d1b      	ldrb	r3, [r3, #20]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d122      	bne.n	8002878 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002836:	e014      	b.n	8002862 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4a41      	ldr	r2, [pc, #260]	; (8002940 <ADC_ConversionStop+0x164>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d90d      	bls.n	800285c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f043 0210 	orr.w	r2, r3, #16
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e06c      	b.n	8002936 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d1e3      	bne.n	8002838 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d014      	beq.n	80028a8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f8c2 	bl	8001a0c <LL_ADC_REG_IsConversionOngoing>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f87f 	bl	8001996 <LL_ADC_IsDisableOngoing>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff f89e 	bl	80019e4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d014      	beq.n	80028d8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f8d2 	bl	8001a5c <LL_ADC_INJ_IsConversionOngoing>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f867 	bl	8001996 <LL_ADC_IsDisableOngoing>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d104      	bne.n	80028d8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f8ae 	bl	8001a34 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d004      	beq.n	80028e8 <ADC_ConversionStop+0x10c>
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d105      	bne.n	80028ee <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80028e2:	230c      	movs	r3, #12
 80028e4:	617b      	str	r3, [r7, #20]
        break;
 80028e6:	e005      	b.n	80028f4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028e8:	2308      	movs	r3, #8
 80028ea:	617b      	str	r3, [r7, #20]
        break;
 80028ec:	e002      	b.n	80028f4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80028ee:	2304      	movs	r3, #4
 80028f0:	617b      	str	r3, [r7, #20]
        break;
 80028f2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028f4:	f7fe fe5a 	bl	80015ac <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028fa:	e014      	b.n	8002926 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028fc:	f7fe fe56 	bl	80015ac <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b05      	cmp	r3, #5
 8002908:	d90d      	bls.n	8002926 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	f043 0210 	orr.w	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e007      	b.n	8002936 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e3      	bne.n	80028fc <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	000cdbff 	.word	0x000cdbff

08002944 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f80d 	bl	8001970 <LL_ADC_IsEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d167      	bne.n	8002a2c <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <ADC_Enable+0xf4>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f043 0210 	orr.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e053      	b.n	8002a2e <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe ffc8 	bl	8001920 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002990:	f7fe fe0c 	bl	80015ac <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a28      	ldr	r2, [pc, #160]	; (8002a3c <ADC_Enable+0xf8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <ADC_Enable+0x66>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <ADC_Enable+0xfc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <ADC_Enable+0x6a>
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <ADC_Enable+0x100>)
 80029ac:	e000      	b.n	80029b0 <ADC_Enable+0x6c>
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <ADC_Enable+0x104>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe ff4b 	bl	800184c <LL_ADC_GetMultimode>
 80029b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <ADC_Enable+0xfc>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d002      	beq.n	80029c8 <ADC_Enable+0x84>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	e000      	b.n	80029ca <ADC_Enable+0x86>
 80029c8:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <ADC_Enable+0xf8>)
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d025      	beq.n	8002a1e <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d129      	bne.n	8002a2c <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029d8:	e021      	b.n	8002a1e <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe ffc6 	bl	8001970 <LL_ADC_IsEnabled>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d104      	bne.n	80029f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe ff96 	bl	8001920 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029f4:	f7fe fdda 	bl	80015ac <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d90d      	bls.n	8002a1e <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e007      	b.n	8002a2e <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d1d6      	bne.n	80029da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	8000003f 	.word	0x8000003f
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	40022100 	.word	0x40022100
 8002a44:	40022300 	.word	0x40022300
 8002a48:	58026300 	.word	0x58026300

08002a4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe ff9c 	bl	8001996 <LL_ADC_IsDisableOngoing>
 8002a5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe ff83 	bl	8001970 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d040      	beq.n	8002af2 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d13d      	bne.n	8002af2 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030d 	and.w	r3, r3, #13
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10c      	bne.n	8002a9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe ff5d 	bl	8001948 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2203      	movs	r2, #3
 8002a94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a96:	f7fe fd89 	bl	80015ac <HAL_GetTick>
 8002a9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a9c:	e022      	b.n	8002ae4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e01c      	b.n	8002af4 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aba:	f7fe fd77 	bl	80015ac <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d90d      	bls.n	8002ae4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	f043 0210 	orr.w	r2, r3, #16
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e007      	b.n	8002af4 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e3      	bne.n	8002aba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a70      	ldr	r2, [pc, #448]	; (8002ccc <ADC_ConfigureBoostMode+0x1d0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <ADC_ConfigureBoostMode+0x1c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a6f      	ldr	r2, [pc, #444]	; (8002cd0 <ADC_ConfigureBoostMode+0x1d4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d109      	bne.n	8002b2c <ADC_ConfigureBoostMode+0x30>
 8002b18:	4b6e      	ldr	r3, [pc, #440]	; (8002cd4 <ADC_ConfigureBoostMode+0x1d8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e008      	b.n	8002b3e <ADC_ConfigureBoostMode+0x42>
 8002b2c:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <ADC_ConfigureBoostMode+0x1dc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01a      	beq.n	8002b78 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b42:	f004 f809 	bl	8006b58 <HAL_RCC_GetHCLKFreq>
 8002b46:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b50:	d006      	beq.n	8002b60 <ADC_ConfigureBoostMode+0x64>
 8002b52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b56:	d00b      	beq.n	8002b70 <ADC_ConfigureBoostMode+0x74>
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d000      	beq.n	8002b60 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002b5e:	e05d      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6c:	60fb      	str	r3, [r7, #12]
        break;
 8002b6e:	e055      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	60fb      	str	r3, [r7, #12]
        break;
 8002b76:	e051      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b78:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b7c:	f004 ff36 	bl	80079ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002b80:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b8a:	d02a      	beq.n	8002be2 <ADC_ConfigureBoostMode+0xe6>
 8002b8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b90:	d813      	bhi.n	8002bba <ADC_ConfigureBoostMode+0xbe>
 8002b92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b96:	d024      	beq.n	8002be2 <ADC_ConfigureBoostMode+0xe6>
 8002b98:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b9c:	d806      	bhi.n	8002bac <ADC_ConfigureBoostMode+0xb0>
 8002b9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba2:	d01e      	beq.n	8002be2 <ADC_ConfigureBoostMode+0xe6>
 8002ba4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ba8:	d01b      	beq.n	8002be2 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002baa:	e037      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb0:	d017      	beq.n	8002be2 <ADC_ConfigureBoostMode+0xe6>
 8002bb2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002bb6:	d014      	beq.n	8002be2 <ADC_ConfigureBoostMode+0xe6>
        break;
 8002bb8:	e030      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002bba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002bbe:	d021      	beq.n	8002c04 <ADC_ConfigureBoostMode+0x108>
 8002bc0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002bc4:	d806      	bhi.n	8002bd4 <ADC_ConfigureBoostMode+0xd8>
 8002bc6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002bca:	d013      	beq.n	8002bf4 <ADC_ConfigureBoostMode+0xf8>
 8002bcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bd0:	d014      	beq.n	8002bfc <ADC_ConfigureBoostMode+0x100>
        break;
 8002bd2:	e023      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002bd4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002bd8:	d018      	beq.n	8002c0c <ADC_ConfigureBoostMode+0x110>
 8002bda:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002bde:	d019      	beq.n	8002c14 <ADC_ConfigureBoostMode+0x118>
        break;
 8002be0:	e01c      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	0c9b      	lsrs	r3, r3, #18
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	60fb      	str	r3, [r7, #12]
        break;
 8002bf2:	e013      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	60fb      	str	r3, [r7, #12]
        break;
 8002bfa:	e00f      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	60fb      	str	r3, [r7, #12]
        break;
 8002c02:	e00b      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	60fb      	str	r3, [r7, #12]
        break;
 8002c0a:	e007      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	09db      	lsrs	r3, r3, #7
 8002c10:	60fb      	str	r3, [r7, #12]
        break;
 8002c12:	e003      	b.n	8002c1c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	60fb      	str	r3, [r7, #12]
        break;
 8002c1a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002c1c:	f7fe fcf4 	bl	8001608 <HAL_GetREVID>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d815      	bhi.n	8002c56 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4a2b      	ldr	r2, [pc, #172]	; (8002cdc <ADC_ConfigureBoostMode+0x1e0>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d908      	bls.n	8002c44 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c40:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c42:	e03e      	b.n	8002cc2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c52:	609a      	str	r2, [r3, #8]
}
 8002c54:	e035      	b.n	8002cc2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <ADC_ConfigureBoostMode+0x1e4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d808      	bhi.n	8002c76 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c72:	609a      	str	r2, [r3, #8]
}
 8002c74:	e025      	b.n	8002cc2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a1a      	ldr	r2, [pc, #104]	; (8002ce4 <ADC_ConfigureBoostMode+0x1e8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d80a      	bhi.n	8002c94 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c90:	609a      	str	r2, [r3, #8]
}
 8002c92:	e016      	b.n	8002cc2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a14      	ldr	r2, [pc, #80]	; (8002ce8 <ADC_ConfigureBoostMode+0x1ec>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d80a      	bhi.n	8002cb2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	e007      	b.n	8002cc2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002cc0:	609a      	str	r2, [r3, #8]
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40022000 	.word	0x40022000
 8002cd0:	40022100 	.word	0x40022100
 8002cd4:	40022300 	.word	0x40022300
 8002cd8:	58026300 	.word	0x58026300
 8002cdc:	01312d00 	.word	0x01312d00
 8002ce0:	005f5e10 	.word	0x005f5e10
 8002ce4:	00bebc20 	.word	0x00bebc20
 8002ce8:	017d7840 	.word	0x017d7840

08002cec <LL_ADC_IsEnabled>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <LL_ADC_IsEnabled+0x18>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <LL_ADC_IsEnabled+0x1a>
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b09f      	sub	sp, #124	; 0x7c
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e0ba      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a5c      	ldr	r2, [pc, #368]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d102      	bne.n	8002d6e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002d68:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	e001      	b.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10b      	bne.n	8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7c:	f043 0220 	orr.w	r2, r3, #32
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e09d      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ffbd 	bl	8002d12 <LL_ADC_REG_IsConversionOngoing>
 8002d98:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ffb7 	bl	8002d12 <LL_ADC_REG_IsConversionOngoing>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d17f      	bne.n	8002eaa <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002daa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d17c      	bne.n	8002eaa <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a47      	ldr	r2, [pc, #284]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d004      	beq.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a46      	ldr	r2, [pc, #280]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002dc4:	4b45      	ldr	r3, [pc, #276]	; (8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dc6:	e000      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002dc8:	4b45      	ldr	r3, [pc, #276]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d039      	beq.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3a      	ldr	r2, [pc, #232]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a38      	ldr	r2, [pc, #224]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10e      	bne.n	8002e18 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002dfa:	4836      	ldr	r0, [pc, #216]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002dfc:	f7ff ff76 	bl	8002cec <LL_ADC_IsEnabled>
 8002e00:	4604      	mov	r4, r0
 8002e02:	4835      	ldr	r0, [pc, #212]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e04:	f7ff ff72 	bl	8002cec <LL_ADC_IsEnabled>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4323      	orrs	r3, r4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e008      	b.n	8002e2a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002e18:	4832      	ldr	r0, [pc, #200]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e1a:	f7ff ff67 	bl	8002cec <LL_ADC_IsEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d047      	beq.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	6811      	ldr	r1, [r2, #0]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	6892      	ldr	r2, [r2, #8]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	431a      	orrs	r2, r3
 8002e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e44:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e46:	e03a      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d10e      	bne.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002e68:	481a      	ldr	r0, [pc, #104]	; (8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002e6a:	f7ff ff3f 	bl	8002cec <LL_ADC_IsEnabled>
 8002e6e:	4604      	mov	r4, r0
 8002e70:	4819      	ldr	r0, [pc, #100]	; (8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002e72:	f7ff ff3b 	bl	8002cec <LL_ADC_IsEnabled>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4323      	orrs	r3, r4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	e008      	b.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002e86:	4817      	ldr	r0, [pc, #92]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e88:	f7ff ff30 	bl	8002cec <LL_ADC_IsEnabled>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ea6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ea8:	e009      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ebc:	e000      	b.n	8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ebe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ec8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	377c      	adds	r7, #124	; 0x7c
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd90      	pop	{r4, r7, pc}
 8002ed4:	40022000 	.word	0x40022000
 8002ed8:	40022100 	.word	0x40022100
 8002edc:	40022300 	.word	0x40022300
 8002ee0:	58026300 	.word	0x58026300
 8002ee4:	58026000 	.word	0x58026000
 8002ee8:	fffff0e0 	.word	0xfffff0e0

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <__NVIC_SetPriorityGrouping+0x40>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <__NVIC_SetPriorityGrouping+0x40>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000ed00 	.word	0xe000ed00
 8002f30:	05fa0000 	.word	0x05fa0000

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff29 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030b0:	f7ff ff40 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 80030b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff90 	bl	8002fe0 <NVIC_EncodePriority>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff5f 	bl	8002f8c <__NVIC_SetPriority>
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff33 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff ffa4 	bl	8003048 <SysTick_Config>
 8003100:	4603      	mov	r3, r0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e014      	b.n	8003146 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	791b      	ldrb	r3, [r3, #4]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7fe f821 	bl	8001174 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	795b      	ldrb	r3, [r3, #5]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_DAC_Start_DMA+0x1e>
 800316a:	2302      	movs	r3, #2
 800316c:	e09e      	b.n	80032ac <HAL_DAC_Start_DMA+0x15c>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2202      	movs	r2, #2
 8003178:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d12a      	bne.n	80031d6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a4b      	ldr	r2, [pc, #300]	; (80032b4 <HAL_DAC_Start_DMA+0x164>)
 8003186:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a4a      	ldr	r2, [pc, #296]	; (80032b8 <HAL_DAC_Start_DMA+0x168>)
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4a49      	ldr	r2, [pc, #292]	; (80032bc <HAL_DAC_Start_DMA+0x16c>)
 8003196:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d009      	beq.n	80031c2 <HAL_DAC_Start_DMA+0x72>
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d00c      	beq.n	80031cc <HAL_DAC_Start_DMA+0x7c>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d000      	beq.n	80031b8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80031b6:	e039      	b.n	800322c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3308      	adds	r3, #8
 80031be:	613b      	str	r3, [r7, #16]
        break;
 80031c0:	e034      	b.n	800322c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	330c      	adds	r3, #12
 80031c8:	613b      	str	r3, [r7, #16]
        break;
 80031ca:	e02f      	b.n	800322c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3310      	adds	r3, #16
 80031d2:	613b      	str	r3, [r7, #16]
        break;
 80031d4:	e02a      	b.n	800322c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4a39      	ldr	r2, [pc, #228]	; (80032c0 <HAL_DAC_Start_DMA+0x170>)
 80031dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <HAL_DAC_Start_DMA+0x174>)
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4a37      	ldr	r2, [pc, #220]	; (80032c8 <HAL_DAC_Start_DMA+0x178>)
 80031ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031fc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d009      	beq.n	8003218 <HAL_DAC_Start_DMA+0xc8>
 8003204:	2b08      	cmp	r3, #8
 8003206:	d00c      	beq.n	8003222 <HAL_DAC_Start_DMA+0xd2>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d000      	beq.n	800320e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800320c:	e00e      	b.n	800322c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3314      	adds	r3, #20
 8003214:	613b      	str	r3, [r7, #16]
        break;
 8003216:	e009      	b.n	800322c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3318      	adds	r3, #24
 800321e:	613b      	str	r3, [r7, #16]
        break;
 8003220:	e004      	b.n	800322c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	331c      	adds	r3, #28
 8003228:	613b      	str	r3, [r7, #16]
        break;
 800322a:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d111      	bne.n	8003256 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003240:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6898      	ldr	r0, [r3, #8]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	f000 fd98 	bl	8003d80 <HAL_DMA_Start_IT>
 8003250:	4603      	mov	r3, r0
 8003252:	75fb      	strb	r3, [r7, #23]
 8003254:	e010      	b.n	8003278 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003264:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68d8      	ldr	r0, [r3, #12]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	f000 fd86 	bl	8003d80 <HAL_DMA_Start_IT>
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10c      	bne.n	800329e <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6819      	ldr	r1, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2201      	movs	r2, #1
 8003292:	409a      	lsls	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e005      	b.n	80032aa <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	080035b5 	.word	0x080035b5
 80032b8:	080035d7 	.word	0x080035d7
 80032bc:	080035f3 	.word	0x080035f3
 80032c0:	0800365d 	.word	0x0800365d
 80032c4:	0800367f 	.word	0x0800367f
 80032c8:	0800369b 	.word	0x0800369b

080032cc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3308      	adds	r3, #8
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e004      	b.n	8003300 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	3314      	adds	r3, #20
 80032fe:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	461a      	mov	r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
	...

08003354 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	795b      	ldrb	r3, [r3, #5]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_DAC_ConfigChannel+0x18>
 8003368:	2302      	movs	r3, #2
 800336a:	e11d      	b.n	80035a8 <HAL_DAC_ConfigChannel+0x254>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2202      	movs	r2, #2
 8003376:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b04      	cmp	r3, #4
 800337e:	d174      	bne.n	800346a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003380:	f7fe f914 	bl	80015ac <HAL_GetTick>
 8003384:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d134      	bne.n	80033f6 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800338c:	e011      	b.n	80033b2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800338e:	f7fe f90d 	bl	80015ac <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d90a      	bls.n	80033b2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f043 0208 	orr.w	r2, r3, #8
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2203      	movs	r2, #3
 80033ac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0fa      	b.n	80035a8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b8:	4b7d      	ldr	r3, [pc, #500]	; (80035b0 <HAL_DAC_ConfigChannel+0x25c>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e6      	bne.n	800338e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80033c0:	2001      	movs	r0, #1
 80033c2:	f7fe f8ff 	bl	80015c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	6992      	ldr	r2, [r2, #24]
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
 80033d0:	e01e      	b.n	8003410 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80033d2:	f7fe f8eb 	bl	80015ac <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d90a      	bls.n	80033f6 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f043 0208 	orr.w	r2, r3, #8
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2203      	movs	r2, #3
 80033f0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0d8      	b.n	80035a8 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	dbe8      	blt.n	80033d2 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003400:	2001      	movs	r0, #1
 8003402:	f7fe f8df 	bl	80015c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	6992      	ldr	r2, [r2, #24]
 800340e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	ea02 0103 	and.w	r1, r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	21ff      	movs	r1, #255	; 0xff
 800344c:	fa01 f303 	lsl.w	r3, r1, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	ea02 0103 	and.w	r1, r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	6a1a      	ldr	r2, [r3, #32]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	409a      	lsls	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d11d      	bne.n	80034ae <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	221f      	movs	r2, #31
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4013      	ands	r3, r2
 800348c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2207      	movs	r2, #7
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4013      	ands	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d102      	bne.n	80034d8 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	e00f      	b.n	80034f8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d102      	bne.n	80034e6 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80034e0:	2301      	movs	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	e008      	b.n	80034f8 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80034ee:	2301      	movs	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	e001      	b.n	80034f8 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4313      	orrs	r3, r2
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	400a      	ands	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4013      	ands	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	22c0      	movs	r2, #192	; 0xc0
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43da      	mvns	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	400a      	ands	r2, r1
 8003598:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20008000 	.word	0x20008000

080035b4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f7ff fea7 	bl	8003316 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	711a      	strb	r2, [r3, #4]
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fea0 	bl	800332a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f043 0204 	orr.w	r2, r3, #4
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7ff fe96 	bl	800333e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	711a      	strb	r2, [r3, #4]
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff ffd8 	bl	8003620 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	711a      	strb	r2, [r3, #4]
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ffd1 	bl	8003634 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b084      	sub	sp, #16
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	f043 0204 	orr.w	r2, r3, #4
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7ff ffc7 	bl	8003648 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	711a      	strb	r2, [r3, #4]
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7fd ff6c 	bl	80015ac <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e316      	b.n	8003d0e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a66      	ldr	r2, [pc, #408]	; (8003880 <HAL_DMA_Init+0x1b8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d04a      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a65      	ldr	r2, [pc, #404]	; (8003884 <HAL_DMA_Init+0x1bc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d045      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a63      	ldr	r2, [pc, #396]	; (8003888 <HAL_DMA_Init+0x1c0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d040      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a62      	ldr	r2, [pc, #392]	; (800388c <HAL_DMA_Init+0x1c4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d03b      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a60      	ldr	r2, [pc, #384]	; (8003890 <HAL_DMA_Init+0x1c8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d036      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a5f      	ldr	r2, [pc, #380]	; (8003894 <HAL_DMA_Init+0x1cc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d031      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a5d      	ldr	r2, [pc, #372]	; (8003898 <HAL_DMA_Init+0x1d0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d02c      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a5c      	ldr	r2, [pc, #368]	; (800389c <HAL_DMA_Init+0x1d4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d027      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a5a      	ldr	r2, [pc, #360]	; (80038a0 <HAL_DMA_Init+0x1d8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d022      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a59      	ldr	r2, [pc, #356]	; (80038a4 <HAL_DMA_Init+0x1dc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d01d      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a57      	ldr	r2, [pc, #348]	; (80038a8 <HAL_DMA_Init+0x1e0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d018      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a56      	ldr	r2, [pc, #344]	; (80038ac <HAL_DMA_Init+0x1e4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d013      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a54      	ldr	r2, [pc, #336]	; (80038b0 <HAL_DMA_Init+0x1e8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00e      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a53      	ldr	r2, [pc, #332]	; (80038b4 <HAL_DMA_Init+0x1ec>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a51      	ldr	r2, [pc, #324]	; (80038b8 <HAL_DMA_Init+0x1f0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <HAL_DMA_Init+0xb8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a50      	ldr	r2, [pc, #320]	; (80038bc <HAL_DMA_Init+0x1f4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_DMA_Init+0xbc>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <HAL_DMA_Init+0xbe>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 813b 	beq.w	8003a02 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a37      	ldr	r2, [pc, #220]	; (8003880 <HAL_DMA_Init+0x1b8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04a      	beq.n	800383c <HAL_DMA_Init+0x174>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a36      	ldr	r2, [pc, #216]	; (8003884 <HAL_DMA_Init+0x1bc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d045      	beq.n	800383c <HAL_DMA_Init+0x174>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a34      	ldr	r2, [pc, #208]	; (8003888 <HAL_DMA_Init+0x1c0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d040      	beq.n	800383c <HAL_DMA_Init+0x174>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a33      	ldr	r2, [pc, #204]	; (800388c <HAL_DMA_Init+0x1c4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d03b      	beq.n	800383c <HAL_DMA_Init+0x174>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a31      	ldr	r2, [pc, #196]	; (8003890 <HAL_DMA_Init+0x1c8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d036      	beq.n	800383c <HAL_DMA_Init+0x174>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a30      	ldr	r2, [pc, #192]	; (8003894 <HAL_DMA_Init+0x1cc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d031      	beq.n	800383c <HAL_DMA_Init+0x174>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a2e      	ldr	r2, [pc, #184]	; (8003898 <HAL_DMA_Init+0x1d0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d02c      	beq.n	800383c <HAL_DMA_Init+0x174>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a2d      	ldr	r2, [pc, #180]	; (800389c <HAL_DMA_Init+0x1d4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d027      	beq.n	800383c <HAL_DMA_Init+0x174>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <HAL_DMA_Init+0x1d8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d022      	beq.n	800383c <HAL_DMA_Init+0x174>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <HAL_DMA_Init+0x1dc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01d      	beq.n	800383c <HAL_DMA_Init+0x174>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a28      	ldr	r2, [pc, #160]	; (80038a8 <HAL_DMA_Init+0x1e0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d018      	beq.n	800383c <HAL_DMA_Init+0x174>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a27      	ldr	r2, [pc, #156]	; (80038ac <HAL_DMA_Init+0x1e4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_DMA_Init+0x174>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <HAL_DMA_Init+0x1e8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_DMA_Init+0x174>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <HAL_DMA_Init+0x1ec>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_DMA_Init+0x174>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <HAL_DMA_Init+0x1f0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_DMA_Init+0x174>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a21      	ldr	r2, [pc, #132]	; (80038bc <HAL_DMA_Init+0x1f4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <HAL_DMA_Init+0x186>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e007      	b.n	800385e <HAL_DMA_Init+0x196>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800385e:	e02f      	b.n	80038c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003860:	f7fd fea4 	bl	80015ac <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b05      	cmp	r3, #5
 800386c:	d928      	bls.n	80038c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2203      	movs	r2, #3
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e246      	b.n	8003d0e <HAL_DMA_Init+0x646>
 8003880:	40020010 	.word	0x40020010
 8003884:	40020028 	.word	0x40020028
 8003888:	40020040 	.word	0x40020040
 800388c:	40020058 	.word	0x40020058
 8003890:	40020070 	.word	0x40020070
 8003894:	40020088 	.word	0x40020088
 8003898:	400200a0 	.word	0x400200a0
 800389c:	400200b8 	.word	0x400200b8
 80038a0:	40020410 	.word	0x40020410
 80038a4:	40020428 	.word	0x40020428
 80038a8:	40020440 	.word	0x40020440
 80038ac:	40020458 	.word	0x40020458
 80038b0:	40020470 	.word	0x40020470
 80038b4:	40020488 	.word	0x40020488
 80038b8:	400204a0 	.word	0x400204a0
 80038bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1c8      	bne.n	8003860 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4b83      	ldr	r3, [pc, #524]	; (8003ae8 <HAL_DMA_Init+0x420>)
 80038da:	4013      	ands	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80038e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b04      	cmp	r3, #4
 8003912:	d107      	bne.n	8003924 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	4313      	orrs	r3, r2
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003924:	4b71      	ldr	r3, [pc, #452]	; (8003aec <HAL_DMA_Init+0x424>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b71      	ldr	r3, [pc, #452]	; (8003af0 <HAL_DMA_Init+0x428>)
 800392a:	4013      	ands	r3, r2
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003930:	d328      	bcc.n	8003984 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b28      	cmp	r3, #40	; 0x28
 8003938:	d903      	bls.n	8003942 <HAL_DMA_Init+0x27a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b2e      	cmp	r3, #46	; 0x2e
 8003940:	d917      	bls.n	8003972 <HAL_DMA_Init+0x2aa>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b3e      	cmp	r3, #62	; 0x3e
 8003948:	d903      	bls.n	8003952 <HAL_DMA_Init+0x28a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b42      	cmp	r3, #66	; 0x42
 8003950:	d90f      	bls.n	8003972 <HAL_DMA_Init+0x2aa>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b46      	cmp	r3, #70	; 0x46
 8003958:	d903      	bls.n	8003962 <HAL_DMA_Init+0x29a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b48      	cmp	r3, #72	; 0x48
 8003960:	d907      	bls.n	8003972 <HAL_DMA_Init+0x2aa>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b4e      	cmp	r3, #78	; 0x4e
 8003968:	d905      	bls.n	8003976 <HAL_DMA_Init+0x2ae>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b52      	cmp	r3, #82	; 0x52
 8003970:	d801      	bhi.n	8003976 <HAL_DMA_Init+0x2ae>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_DMA_Init+0x2b0>
 8003976:	2300      	movs	r3, #0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003982:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0307 	bic.w	r3, r3, #7
 800399a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d117      	bne.n	80039de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f001 fdcf 	bl	8005564 <DMA_CheckFifoParam>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2240      	movs	r2, #64	; 0x40
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e197      	b.n	8003d0e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f001 fd0a 	bl	8005400 <DMA_CalcBaseAndBitshift>
 80039ec:	4603      	mov	r3, r0
 80039ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	223f      	movs	r2, #63	; 0x3f
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	e0cd      	b.n	8003b9e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a3b      	ldr	r2, [pc, #236]	; (8003af4 <HAL_DMA_Init+0x42c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d022      	beq.n	8003a52 <HAL_DMA_Init+0x38a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a39      	ldr	r2, [pc, #228]	; (8003af8 <HAL_DMA_Init+0x430>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <HAL_DMA_Init+0x38a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a38      	ldr	r2, [pc, #224]	; (8003afc <HAL_DMA_Init+0x434>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_DMA_Init+0x38a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a36      	ldr	r2, [pc, #216]	; (8003b00 <HAL_DMA_Init+0x438>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_DMA_Init+0x38a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a35      	ldr	r2, [pc, #212]	; (8003b04 <HAL_DMA_Init+0x43c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_DMA_Init+0x38a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a33      	ldr	r2, [pc, #204]	; (8003b08 <HAL_DMA_Init+0x440>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_DMA_Init+0x38a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a32      	ldr	r2, [pc, #200]	; (8003b0c <HAL_DMA_Init+0x444>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_Init+0x38a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a30      	ldr	r2, [pc, #192]	; (8003b10 <HAL_DMA_Init+0x448>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d101      	bne.n	8003a56 <HAL_DMA_Init+0x38e>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_DMA_Init+0x390>
 8003a56:	2300      	movs	r3, #0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8097 	beq.w	8003b8c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a24      	ldr	r2, [pc, #144]	; (8003af4 <HAL_DMA_Init+0x42c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d021      	beq.n	8003aac <HAL_DMA_Init+0x3e4>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a22      	ldr	r2, [pc, #136]	; (8003af8 <HAL_DMA_Init+0x430>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01c      	beq.n	8003aac <HAL_DMA_Init+0x3e4>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a21      	ldr	r2, [pc, #132]	; (8003afc <HAL_DMA_Init+0x434>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d017      	beq.n	8003aac <HAL_DMA_Init+0x3e4>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <HAL_DMA_Init+0x438>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d012      	beq.n	8003aac <HAL_DMA_Init+0x3e4>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1e      	ldr	r2, [pc, #120]	; (8003b04 <HAL_DMA_Init+0x43c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00d      	beq.n	8003aac <HAL_DMA_Init+0x3e4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <HAL_DMA_Init+0x440>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d008      	beq.n	8003aac <HAL_DMA_Init+0x3e4>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <HAL_DMA_Init+0x444>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d003      	beq.n	8003aac <HAL_DMA_Init+0x3e4>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_DMA_Init+0x448>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_DMA_Init+0x44c>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	d020      	beq.n	8003b18 <HAL_DMA_Init+0x450>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b80      	cmp	r3, #128	; 0x80
 8003adc:	d102      	bne.n	8003ae4 <HAL_DMA_Init+0x41c>
 8003ade:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ae2:	e01a      	b.n	8003b1a <HAL_DMA_Init+0x452>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e018      	b.n	8003b1a <HAL_DMA_Init+0x452>
 8003ae8:	fe10803f 	.word	0xfe10803f
 8003aec:	5c001000 	.word	0x5c001000
 8003af0:	ffff0000 	.word	0xffff0000
 8003af4:	58025408 	.word	0x58025408
 8003af8:	5802541c 	.word	0x5802541c
 8003afc:	58025430 	.word	0x58025430
 8003b00:	58025444 	.word	0x58025444
 8003b04:	58025458 	.word	0x58025458
 8003b08:	5802546c 	.word	0x5802546c
 8003b0c:	58025480 	.word	0x58025480
 8003b10:	58025494 	.word	0x58025494
 8003b14:	fffe000f 	.word	0xfffe000f
 8003b18:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68d2      	ldr	r2, [r2, #12]
 8003b1e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b48:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b6e      	ldr	r3, [pc, #440]	; (8003d18 <HAL_DMA_Init+0x650>)
 8003b60:	4413      	add	r3, r2
 8003b62:	4a6e      	ldr	r2, [pc, #440]	; (8003d1c <HAL_DMA_Init+0x654>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f001 fc45 	bl	8005400 <DMA_CalcBaseAndBitshift>
 8003b76:	4603      	mov	r3, r0
 8003b78:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2201      	movs	r2, #1
 8003b84:	409a      	lsls	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	e008      	b.n	8003b9e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2240      	movs	r2, #64	; 0x40
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2203      	movs	r2, #3
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e0b7      	b.n	8003d0e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a5f      	ldr	r2, [pc, #380]	; (8003d20 <HAL_DMA_Init+0x658>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d072      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a5d      	ldr	r2, [pc, #372]	; (8003d24 <HAL_DMA_Init+0x65c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d06d      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a5c      	ldr	r2, [pc, #368]	; (8003d28 <HAL_DMA_Init+0x660>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d068      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a5a      	ldr	r2, [pc, #360]	; (8003d2c <HAL_DMA_Init+0x664>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d063      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a59      	ldr	r2, [pc, #356]	; (8003d30 <HAL_DMA_Init+0x668>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d05e      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a57      	ldr	r2, [pc, #348]	; (8003d34 <HAL_DMA_Init+0x66c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d059      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a56      	ldr	r2, [pc, #344]	; (8003d38 <HAL_DMA_Init+0x670>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d054      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a54      	ldr	r2, [pc, #336]	; (8003d3c <HAL_DMA_Init+0x674>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d04f      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a53      	ldr	r2, [pc, #332]	; (8003d40 <HAL_DMA_Init+0x678>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d04a      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a51      	ldr	r2, [pc, #324]	; (8003d44 <HAL_DMA_Init+0x67c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d045      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a50      	ldr	r2, [pc, #320]	; (8003d48 <HAL_DMA_Init+0x680>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d040      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a4e      	ldr	r2, [pc, #312]	; (8003d4c <HAL_DMA_Init+0x684>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d03b      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <HAL_DMA_Init+0x688>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d036      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a4b      	ldr	r2, [pc, #300]	; (8003d54 <HAL_DMA_Init+0x68c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d031      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a4a      	ldr	r2, [pc, #296]	; (8003d58 <HAL_DMA_Init+0x690>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d02c      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a48      	ldr	r2, [pc, #288]	; (8003d5c <HAL_DMA_Init+0x694>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d027      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a47      	ldr	r2, [pc, #284]	; (8003d60 <HAL_DMA_Init+0x698>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d022      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a45      	ldr	r2, [pc, #276]	; (8003d64 <HAL_DMA_Init+0x69c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a44      	ldr	r2, [pc, #272]	; (8003d68 <HAL_DMA_Init+0x6a0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d018      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a42      	ldr	r2, [pc, #264]	; (8003d6c <HAL_DMA_Init+0x6a4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a41      	ldr	r2, [pc, #260]	; (8003d70 <HAL_DMA_Init+0x6a8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3f      	ldr	r2, [pc, #252]	; (8003d74 <HAL_DMA_Init+0x6ac>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3e      	ldr	r2, [pc, #248]	; (8003d78 <HAL_DMA_Init+0x6b0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_DMA_Init+0x5c6>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a3c      	ldr	r2, [pc, #240]	; (8003d7c <HAL_DMA_Init+0x6b4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_DMA_Init+0x5ca>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_DMA_Init+0x5cc>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d032      	beq.n	8003cfe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f001 fcdf 	bl	800565c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b80      	cmp	r3, #128	; 0x80
 8003ca4:	d102      	bne.n	8003cac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003cc0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d010      	beq.n	8003cec <HAL_DMA_Init+0x624>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d80c      	bhi.n	8003cec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f001 fd5c 	bl	8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e008      	b.n	8003cfe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	a7fdabf8 	.word	0xa7fdabf8
 8003d1c:	cccccccd 	.word	0xcccccccd
 8003d20:	40020010 	.word	0x40020010
 8003d24:	40020028 	.word	0x40020028
 8003d28:	40020040 	.word	0x40020040
 8003d2c:	40020058 	.word	0x40020058
 8003d30:	40020070 	.word	0x40020070
 8003d34:	40020088 	.word	0x40020088
 8003d38:	400200a0 	.word	0x400200a0
 8003d3c:	400200b8 	.word	0x400200b8
 8003d40:	40020410 	.word	0x40020410
 8003d44:	40020428 	.word	0x40020428
 8003d48:	40020440 	.word	0x40020440
 8003d4c:	40020458 	.word	0x40020458
 8003d50:	40020470 	.word	0x40020470
 8003d54:	40020488 	.word	0x40020488
 8003d58:	400204a0 	.word	0x400204a0
 8003d5c:	400204b8 	.word	0x400204b8
 8003d60:	58025408 	.word	0x58025408
 8003d64:	5802541c 	.word	0x5802541c
 8003d68:	58025430 	.word	0x58025430
 8003d6c:	58025444 	.word	0x58025444
 8003d70:	58025458 	.word	0x58025458
 8003d74:	5802546c 	.word	0x5802546c
 8003d78:	58025480 	.word	0x58025480
 8003d7c:	58025494 	.word	0x58025494

08003d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e226      	b.n	80041ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_DMA_Start_IT+0x2a>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e21f      	b.n	80041ea <HAL_DMA_Start_IT+0x46a>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	f040 820a 	bne.w	80041d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a68      	ldr	r2, [pc, #416]	; (8003f74 <HAL_DMA_Start_IT+0x1f4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d04a      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a66      	ldr	r2, [pc, #408]	; (8003f78 <HAL_DMA_Start_IT+0x1f8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d045      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a65      	ldr	r2, [pc, #404]	; (8003f7c <HAL_DMA_Start_IT+0x1fc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d040      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a63      	ldr	r2, [pc, #396]	; (8003f80 <HAL_DMA_Start_IT+0x200>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d03b      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a62      	ldr	r2, [pc, #392]	; (8003f84 <HAL_DMA_Start_IT+0x204>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d036      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a60      	ldr	r2, [pc, #384]	; (8003f88 <HAL_DMA_Start_IT+0x208>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d031      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a5f      	ldr	r2, [pc, #380]	; (8003f8c <HAL_DMA_Start_IT+0x20c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d02c      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a5d      	ldr	r2, [pc, #372]	; (8003f90 <HAL_DMA_Start_IT+0x210>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d027      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a5c      	ldr	r2, [pc, #368]	; (8003f94 <HAL_DMA_Start_IT+0x214>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5a      	ldr	r2, [pc, #360]	; (8003f98 <HAL_DMA_Start_IT+0x218>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a59      	ldr	r2, [pc, #356]	; (8003f9c <HAL_DMA_Start_IT+0x21c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d018      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a57      	ldr	r2, [pc, #348]	; (8003fa0 <HAL_DMA_Start_IT+0x220>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a56      	ldr	r2, [pc, #344]	; (8003fa4 <HAL_DMA_Start_IT+0x224>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a54      	ldr	r2, [pc, #336]	; (8003fa8 <HAL_DMA_Start_IT+0x228>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a53      	ldr	r2, [pc, #332]	; (8003fac <HAL_DMA_Start_IT+0x22c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_Start_IT+0xee>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a51      	ldr	r2, [pc, #324]	; (8003fb0 <HAL_DMA_Start_IT+0x230>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <HAL_DMA_Start_IT+0x100>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e007      	b.n	8003e90 <HAL_DMA_Start_IT+0x110>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f001 f906 	bl	80050a8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a34      	ldr	r2, [pc, #208]	; (8003f74 <HAL_DMA_Start_IT+0x1f4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a33      	ldr	r2, [pc, #204]	; (8003f78 <HAL_DMA_Start_IT+0x1f8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a31      	ldr	r2, [pc, #196]	; (8003f7c <HAL_DMA_Start_IT+0x1fc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <HAL_DMA_Start_IT+0x200>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2e      	ldr	r2, [pc, #184]	; (8003f84 <HAL_DMA_Start_IT+0x204>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2d      	ldr	r2, [pc, #180]	; (8003f88 <HAL_DMA_Start_IT+0x208>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <HAL_DMA_Start_IT+0x20c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <HAL_DMA_Start_IT+0x210>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <HAL_DMA_Start_IT+0x214>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <HAL_DMA_Start_IT+0x218>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <HAL_DMA_Start_IT+0x21c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <HAL_DMA_Start_IT+0x220>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <HAL_DMA_Start_IT+0x224>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <HAL_DMA_Start_IT+0x228>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1f      	ldr	r2, [pc, #124]	; (8003fac <HAL_DMA_Start_IT+0x22c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_DMA_Start_IT+0x1bc>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <HAL_DMA_Start_IT+0x230>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <HAL_DMA_Start_IT+0x1c0>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <HAL_DMA_Start_IT+0x1c2>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d036      	beq.n	8003fb4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 021e 	bic.w	r2, r3, #30
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0216 	orr.w	r2, r2, #22
 8003f58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d03e      	beq.n	8003fe0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0208 	orr.w	r2, r2, #8
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e035      	b.n	8003fe0 <HAL_DMA_Start_IT+0x260>
 8003f74:	40020010 	.word	0x40020010
 8003f78:	40020028 	.word	0x40020028
 8003f7c:	40020040 	.word	0x40020040
 8003f80:	40020058 	.word	0x40020058
 8003f84:	40020070 	.word	0x40020070
 8003f88:	40020088 	.word	0x40020088
 8003f8c:	400200a0 	.word	0x400200a0
 8003f90:	400200b8 	.word	0x400200b8
 8003f94:	40020410 	.word	0x40020410
 8003f98:	40020428 	.word	0x40020428
 8003f9c:	40020440 	.word	0x40020440
 8003fa0:	40020458 	.word	0x40020458
 8003fa4:	40020470 	.word	0x40020470
 8003fa8:	40020488 	.word	0x40020488
 8003fac:	400204a0 	.word	0x400204a0
 8003fb0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 020e 	bic.w	r2, r3, #14
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 020a 	orr.w	r2, r2, #10
 8003fc6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0204 	orr.w	r2, r2, #4
 8003fde:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a83      	ldr	r2, [pc, #524]	; (80041f4 <HAL_DMA_Start_IT+0x474>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d072      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a82      	ldr	r2, [pc, #520]	; (80041f8 <HAL_DMA_Start_IT+0x478>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d06d      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a80      	ldr	r2, [pc, #512]	; (80041fc <HAL_DMA_Start_IT+0x47c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d068      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7f      	ldr	r2, [pc, #508]	; (8004200 <HAL_DMA_Start_IT+0x480>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d063      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7d      	ldr	r2, [pc, #500]	; (8004204 <HAL_DMA_Start_IT+0x484>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d05e      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a7c      	ldr	r2, [pc, #496]	; (8004208 <HAL_DMA_Start_IT+0x488>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d059      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a7a      	ldr	r2, [pc, #488]	; (800420c <HAL_DMA_Start_IT+0x48c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d054      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a79      	ldr	r2, [pc, #484]	; (8004210 <HAL_DMA_Start_IT+0x490>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d04f      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a77      	ldr	r2, [pc, #476]	; (8004214 <HAL_DMA_Start_IT+0x494>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d04a      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a76      	ldr	r2, [pc, #472]	; (8004218 <HAL_DMA_Start_IT+0x498>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d045      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a74      	ldr	r2, [pc, #464]	; (800421c <HAL_DMA_Start_IT+0x49c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d040      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a73      	ldr	r2, [pc, #460]	; (8004220 <HAL_DMA_Start_IT+0x4a0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d03b      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a71      	ldr	r2, [pc, #452]	; (8004224 <HAL_DMA_Start_IT+0x4a4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d036      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a70      	ldr	r2, [pc, #448]	; (8004228 <HAL_DMA_Start_IT+0x4a8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d031      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6e      	ldr	r2, [pc, #440]	; (800422c <HAL_DMA_Start_IT+0x4ac>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d02c      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6d      	ldr	r2, [pc, #436]	; (8004230 <HAL_DMA_Start_IT+0x4b0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d027      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6b      	ldr	r2, [pc, #428]	; (8004234 <HAL_DMA_Start_IT+0x4b4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d022      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a6a      	ldr	r2, [pc, #424]	; (8004238 <HAL_DMA_Start_IT+0x4b8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d01d      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a68      	ldr	r2, [pc, #416]	; (800423c <HAL_DMA_Start_IT+0x4bc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d018      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a67      	ldr	r2, [pc, #412]	; (8004240 <HAL_DMA_Start_IT+0x4c0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d013      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a65      	ldr	r2, [pc, #404]	; (8004244 <HAL_DMA_Start_IT+0x4c4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00e      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a64      	ldr	r2, [pc, #400]	; (8004248 <HAL_DMA_Start_IT+0x4c8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d009      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a62      	ldr	r2, [pc, #392]	; (800424c <HAL_DMA_Start_IT+0x4cc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_DMA_Start_IT+0x350>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a61      	ldr	r2, [pc, #388]	; (8004250 <HAL_DMA_Start_IT+0x4d0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d101      	bne.n	80040d4 <HAL_DMA_Start_IT+0x354>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_DMA_Start_IT+0x356>
 80040d4:	2300      	movs	r3, #0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01a      	beq.n	8004110 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800410e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a37      	ldr	r2, [pc, #220]	; (80041f4 <HAL_DMA_Start_IT+0x474>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d04a      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a36      	ldr	r2, [pc, #216]	; (80041f8 <HAL_DMA_Start_IT+0x478>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d045      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a34      	ldr	r2, [pc, #208]	; (80041fc <HAL_DMA_Start_IT+0x47c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d040      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a33      	ldr	r2, [pc, #204]	; (8004200 <HAL_DMA_Start_IT+0x480>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d03b      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a31      	ldr	r2, [pc, #196]	; (8004204 <HAL_DMA_Start_IT+0x484>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d036      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a30      	ldr	r2, [pc, #192]	; (8004208 <HAL_DMA_Start_IT+0x488>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d031      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2e      	ldr	r2, [pc, #184]	; (800420c <HAL_DMA_Start_IT+0x48c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d02c      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2d      	ldr	r2, [pc, #180]	; (8004210 <HAL_DMA_Start_IT+0x490>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d027      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2b      	ldr	r2, [pc, #172]	; (8004214 <HAL_DMA_Start_IT+0x494>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d022      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2a      	ldr	r2, [pc, #168]	; (8004218 <HAL_DMA_Start_IT+0x498>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d01d      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a28      	ldr	r2, [pc, #160]	; (800421c <HAL_DMA_Start_IT+0x49c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d018      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a27      	ldr	r2, [pc, #156]	; (8004220 <HAL_DMA_Start_IT+0x4a0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a25      	ldr	r2, [pc, #148]	; (8004224 <HAL_DMA_Start_IT+0x4a4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00e      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a24      	ldr	r2, [pc, #144]	; (8004228 <HAL_DMA_Start_IT+0x4a8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a22      	ldr	r2, [pc, #136]	; (800422c <HAL_DMA_Start_IT+0x4ac>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_DMA_Start_IT+0x430>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a21      	ldr	r2, [pc, #132]	; (8004230 <HAL_DMA_Start_IT+0x4b0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <HAL_DMA_Start_IT+0x442>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0201 	orr.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e012      	b.n	80041e8 <HAL_DMA_Start_IT+0x468>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e009      	b.n	80041e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40020010 	.word	0x40020010
 80041f8:	40020028 	.word	0x40020028
 80041fc:	40020040 	.word	0x40020040
 8004200:	40020058 	.word	0x40020058
 8004204:	40020070 	.word	0x40020070
 8004208:	40020088 	.word	0x40020088
 800420c:	400200a0 	.word	0x400200a0
 8004210:	400200b8 	.word	0x400200b8
 8004214:	40020410 	.word	0x40020410
 8004218:	40020428 	.word	0x40020428
 800421c:	40020440 	.word	0x40020440
 8004220:	40020458 	.word	0x40020458
 8004224:	40020470 	.word	0x40020470
 8004228:	40020488 	.word	0x40020488
 800422c:	400204a0 	.word	0x400204a0
 8004230:	400204b8 	.word	0x400204b8
 8004234:	58025408 	.word	0x58025408
 8004238:	5802541c 	.word	0x5802541c
 800423c:	58025430 	.word	0x58025430
 8004240:	58025444 	.word	0x58025444
 8004244:	58025458 	.word	0x58025458
 8004248:	5802546c 	.word	0x5802546c
 800424c:	58025480 	.word	0x58025480
 8004250:	58025494 	.word	0x58025494

08004254 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08a      	sub	sp, #40	; 0x28
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004260:	4b67      	ldr	r3, [pc, #412]	; (8004400 <HAL_DMA_IRQHandler+0x1ac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a67      	ldr	r2, [pc, #412]	; (8004404 <HAL_DMA_IRQHandler+0x1b0>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	0a9b      	lsrs	r3, r3, #10
 800426c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a5f      	ldr	r2, [pc, #380]	; (8004408 <HAL_DMA_IRQHandler+0x1b4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d04a      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a5d      	ldr	r2, [pc, #372]	; (800440c <HAL_DMA_IRQHandler+0x1b8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d045      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a5c      	ldr	r2, [pc, #368]	; (8004410 <HAL_DMA_IRQHandler+0x1bc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d040      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a5a      	ldr	r2, [pc, #360]	; (8004414 <HAL_DMA_IRQHandler+0x1c0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d03b      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a59      	ldr	r2, [pc, #356]	; (8004418 <HAL_DMA_IRQHandler+0x1c4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d036      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a57      	ldr	r2, [pc, #348]	; (800441c <HAL_DMA_IRQHandler+0x1c8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d031      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a56      	ldr	r2, [pc, #344]	; (8004420 <HAL_DMA_IRQHandler+0x1cc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d02c      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a54      	ldr	r2, [pc, #336]	; (8004424 <HAL_DMA_IRQHandler+0x1d0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d027      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a53      	ldr	r2, [pc, #332]	; (8004428 <HAL_DMA_IRQHandler+0x1d4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a51      	ldr	r2, [pc, #324]	; (800442c <HAL_DMA_IRQHandler+0x1d8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01d      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a50      	ldr	r2, [pc, #320]	; (8004430 <HAL_DMA_IRQHandler+0x1dc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a4e      	ldr	r2, [pc, #312]	; (8004434 <HAL_DMA_IRQHandler+0x1e0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a4d      	ldr	r2, [pc, #308]	; (8004438 <HAL_DMA_IRQHandler+0x1e4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a4b      	ldr	r2, [pc, #300]	; (800443c <HAL_DMA_IRQHandler+0x1e8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a4a      	ldr	r2, [pc, #296]	; (8004440 <HAL_DMA_IRQHandler+0x1ec>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_DMA_IRQHandler+0xd2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a48      	ldr	r2, [pc, #288]	; (8004444 <HAL_DMA_IRQHandler+0x1f0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_DMA_IRQHandler+0xd6>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <HAL_DMA_IRQHandler+0xd8>
 800432a:	2300      	movs	r3, #0
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 842b 	beq.w	8004b88 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2208      	movs	r2, #8
 800433c:	409a      	lsls	r2, r3
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80a2 	beq.w	800448c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a2e      	ldr	r2, [pc, #184]	; (8004408 <HAL_DMA_IRQHandler+0x1b4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d04a      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2d      	ldr	r2, [pc, #180]	; (800440c <HAL_DMA_IRQHandler+0x1b8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d045      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2b      	ldr	r2, [pc, #172]	; (8004410 <HAL_DMA_IRQHandler+0x1bc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d040      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <HAL_DMA_IRQHandler+0x1c0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d03b      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a28      	ldr	r2, [pc, #160]	; (8004418 <HAL_DMA_IRQHandler+0x1c4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d036      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a27      	ldr	r2, [pc, #156]	; (800441c <HAL_DMA_IRQHandler+0x1c8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d031      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a25      	ldr	r2, [pc, #148]	; (8004420 <HAL_DMA_IRQHandler+0x1cc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d02c      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a24      	ldr	r2, [pc, #144]	; (8004424 <HAL_DMA_IRQHandler+0x1d0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d027      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <HAL_DMA_IRQHandler+0x1d4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d022      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a21      	ldr	r2, [pc, #132]	; (800442c <HAL_DMA_IRQHandler+0x1d8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d01d      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <HAL_DMA_IRQHandler+0x1dc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <HAL_DMA_IRQHandler+0x1e0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <HAL_DMA_IRQHandler+0x1e4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	; (800443c <HAL_DMA_IRQHandler+0x1e8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_DMA_IRQHandler+0x1ec>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x194>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a18      	ldr	r2, [pc, #96]	; (8004444 <HAL_DMA_IRQHandler+0x1f0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d12f      	bne.n	8004448 <HAL_DMA_IRQHandler+0x1f4>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	e02e      	b.n	800445c <HAL_DMA_IRQHandler+0x208>
 80043fe:	bf00      	nop
 8004400:	20000000 	.word	0x20000000
 8004404:	1b4e81b5 	.word	0x1b4e81b5
 8004408:	40020010 	.word	0x40020010
 800440c:	40020028 	.word	0x40020028
 8004410:	40020040 	.word	0x40020040
 8004414:	40020058 	.word	0x40020058
 8004418:	40020070 	.word	0x40020070
 800441c:	40020088 	.word	0x40020088
 8004420:	400200a0 	.word	0x400200a0
 8004424:	400200b8 	.word	0x400200b8
 8004428:	40020410 	.word	0x40020410
 800442c:	40020428 	.word	0x40020428
 8004430:	40020440 	.word	0x40020440
 8004434:	40020458 	.word	0x40020458
 8004438:	40020470 	.word	0x40020470
 800443c:	40020488 	.word	0x40020488
 8004440:	400204a0 	.word	0x400204a0
 8004444:	400204b8 	.word	0x400204b8
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b00      	cmp	r3, #0
 8004454:	bf14      	ite	ne
 8004456:	2301      	movne	r3, #1
 8004458:	2300      	moveq	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0204 	bic.w	r2, r2, #4
 800446e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	2208      	movs	r2, #8
 800447a:	409a      	lsls	r2, r3
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	f043 0201 	orr.w	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f003 031f 	and.w	r3, r3, #31
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d06e      	beq.n	8004580 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a69      	ldr	r2, [pc, #420]	; (800464c <HAL_DMA_IRQHandler+0x3f8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d04a      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a67      	ldr	r2, [pc, #412]	; (8004650 <HAL_DMA_IRQHandler+0x3fc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d045      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a66      	ldr	r2, [pc, #408]	; (8004654 <HAL_DMA_IRQHandler+0x400>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d040      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a64      	ldr	r2, [pc, #400]	; (8004658 <HAL_DMA_IRQHandler+0x404>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d03b      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a63      	ldr	r2, [pc, #396]	; (800465c <HAL_DMA_IRQHandler+0x408>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d036      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a61      	ldr	r2, [pc, #388]	; (8004660 <HAL_DMA_IRQHandler+0x40c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d031      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a60      	ldr	r2, [pc, #384]	; (8004664 <HAL_DMA_IRQHandler+0x410>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d02c      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a5e      	ldr	r2, [pc, #376]	; (8004668 <HAL_DMA_IRQHandler+0x414>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d027      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a5d      	ldr	r2, [pc, #372]	; (800466c <HAL_DMA_IRQHandler+0x418>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a5b      	ldr	r2, [pc, #364]	; (8004670 <HAL_DMA_IRQHandler+0x41c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d01d      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a5a      	ldr	r2, [pc, #360]	; (8004674 <HAL_DMA_IRQHandler+0x420>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d018      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_DMA_IRQHandler+0x424>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a57      	ldr	r2, [pc, #348]	; (800467c <HAL_DMA_IRQHandler+0x428>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00e      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a55      	ldr	r2, [pc, #340]	; (8004680 <HAL_DMA_IRQHandler+0x42c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d009      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a54      	ldr	r2, [pc, #336]	; (8004684 <HAL_DMA_IRQHandler+0x430>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d004      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2ee>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a52      	ldr	r2, [pc, #328]	; (8004688 <HAL_DMA_IRQHandler+0x434>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d10a      	bne.n	8004558 <HAL_DMA_IRQHandler+0x304>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e003      	b.n	8004560 <HAL_DMA_IRQHandler+0x30c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00d      	beq.n	8004580 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2201      	movs	r2, #1
 800456e:	409a      	lsls	r2, r3
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f043 0202 	orr.w	r2, r3, #2
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2204      	movs	r2, #4
 800458a:	409a      	lsls	r2, r3
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 808f 	beq.w	80046b4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2c      	ldr	r2, [pc, #176]	; (800464c <HAL_DMA_IRQHandler+0x3f8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d04a      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <HAL_DMA_IRQHandler+0x3fc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d045      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a29      	ldr	r2, [pc, #164]	; (8004654 <HAL_DMA_IRQHandler+0x400>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d040      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a27      	ldr	r2, [pc, #156]	; (8004658 <HAL_DMA_IRQHandler+0x404>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d03b      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a26      	ldr	r2, [pc, #152]	; (800465c <HAL_DMA_IRQHandler+0x408>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d036      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a24      	ldr	r2, [pc, #144]	; (8004660 <HAL_DMA_IRQHandler+0x40c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d031      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a23      	ldr	r2, [pc, #140]	; (8004664 <HAL_DMA_IRQHandler+0x410>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d02c      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a21      	ldr	r2, [pc, #132]	; (8004668 <HAL_DMA_IRQHandler+0x414>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d027      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a20      	ldr	r2, [pc, #128]	; (800466c <HAL_DMA_IRQHandler+0x418>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <HAL_DMA_IRQHandler+0x41c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01d      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <HAL_DMA_IRQHandler+0x420>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <HAL_DMA_IRQHandler+0x424>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1a      	ldr	r2, [pc, #104]	; (800467c <HAL_DMA_IRQHandler+0x428>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_DMA_IRQHandler+0x42c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a17      	ldr	r2, [pc, #92]	; (8004684 <HAL_DMA_IRQHandler+0x430>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_DMA_IRQHandler+0x3e2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a15      	ldr	r2, [pc, #84]	; (8004688 <HAL_DMA_IRQHandler+0x434>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d12a      	bne.n	800468c <HAL_DMA_IRQHandler+0x438>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e023      	b.n	8004694 <HAL_DMA_IRQHandler+0x440>
 800464c:	40020010 	.word	0x40020010
 8004650:	40020028 	.word	0x40020028
 8004654:	40020040 	.word	0x40020040
 8004658:	40020058 	.word	0x40020058
 800465c:	40020070 	.word	0x40020070
 8004660:	40020088 	.word	0x40020088
 8004664:	400200a0 	.word	0x400200a0
 8004668:	400200b8 	.word	0x400200b8
 800466c:	40020410 	.word	0x40020410
 8004670:	40020428 	.word	0x40020428
 8004674:	40020440 	.word	0x40020440
 8004678:	40020458 	.word	0x40020458
 800467c:	40020470 	.word	0x40020470
 8004680:	40020488 	.word	0x40020488
 8004684:	400204a0 	.word	0x400204a0
 8004688:	400204b8 	.word	0x400204b8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00d      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2204      	movs	r2, #4
 80046a2:	409a      	lsls	r2, r3
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	f043 0204 	orr.w	r2, r3, #4
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	2210      	movs	r2, #16
 80046be:	409a      	lsls	r2, r3
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80a6 	beq.w	8004816 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a85      	ldr	r2, [pc, #532]	; (80048e4 <HAL_DMA_IRQHandler+0x690>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d04a      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a83      	ldr	r2, [pc, #524]	; (80048e8 <HAL_DMA_IRQHandler+0x694>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d045      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a82      	ldr	r2, [pc, #520]	; (80048ec <HAL_DMA_IRQHandler+0x698>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d040      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a80      	ldr	r2, [pc, #512]	; (80048f0 <HAL_DMA_IRQHandler+0x69c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d03b      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a7f      	ldr	r2, [pc, #508]	; (80048f4 <HAL_DMA_IRQHandler+0x6a0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d036      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a7d      	ldr	r2, [pc, #500]	; (80048f8 <HAL_DMA_IRQHandler+0x6a4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d031      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7c      	ldr	r2, [pc, #496]	; (80048fc <HAL_DMA_IRQHandler+0x6a8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d02c      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a7a      	ldr	r2, [pc, #488]	; (8004900 <HAL_DMA_IRQHandler+0x6ac>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d027      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a79      	ldr	r2, [pc, #484]	; (8004904 <HAL_DMA_IRQHandler+0x6b0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d022      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a77      	ldr	r2, [pc, #476]	; (8004908 <HAL_DMA_IRQHandler+0x6b4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01d      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a76      	ldr	r2, [pc, #472]	; (800490c <HAL_DMA_IRQHandler+0x6b8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d018      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a74      	ldr	r2, [pc, #464]	; (8004910 <HAL_DMA_IRQHandler+0x6bc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a73      	ldr	r2, [pc, #460]	; (8004914 <HAL_DMA_IRQHandler+0x6c0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a71      	ldr	r2, [pc, #452]	; (8004918 <HAL_DMA_IRQHandler+0x6c4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a70      	ldr	r2, [pc, #448]	; (800491c <HAL_DMA_IRQHandler+0x6c8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_DMA_IRQHandler+0x516>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a6e      	ldr	r2, [pc, #440]	; (8004920 <HAL_DMA_IRQHandler+0x6cc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d10a      	bne.n	8004780 <HAL_DMA_IRQHandler+0x52c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e009      	b.n	8004794 <HAL_DMA_IRQHandler+0x540>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d03e      	beq.n	8004816 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	2210      	movs	r2, #16
 80047a2:	409a      	lsls	r2, r3
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d108      	bne.n	80047d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d024      	beq.n	8004816 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
 80047d4:	e01f      	b.n	8004816 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01b      	beq.n	8004816 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
 80047e6:	e016      	b.n	8004816 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d107      	bne.n	8004806 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0208 	bic.w	r2, r2, #8
 8004804:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	2220      	movs	r2, #32
 8004820:	409a      	lsls	r2, r3
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8110 	beq.w	8004a4c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2c      	ldr	r2, [pc, #176]	; (80048e4 <HAL_DMA_IRQHandler+0x690>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d04a      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2b      	ldr	r2, [pc, #172]	; (80048e8 <HAL_DMA_IRQHandler+0x694>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d045      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a29      	ldr	r2, [pc, #164]	; (80048ec <HAL_DMA_IRQHandler+0x698>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d040      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <HAL_DMA_IRQHandler+0x69c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d03b      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <HAL_DMA_IRQHandler+0x6a0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d036      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <HAL_DMA_IRQHandler+0x6a4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d031      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a23      	ldr	r2, [pc, #140]	; (80048fc <HAL_DMA_IRQHandler+0x6a8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d02c      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a22      	ldr	r2, [pc, #136]	; (8004900 <HAL_DMA_IRQHandler+0x6ac>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d027      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a20      	ldr	r2, [pc, #128]	; (8004904 <HAL_DMA_IRQHandler+0x6b0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d022      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1f      	ldr	r2, [pc, #124]	; (8004908 <HAL_DMA_IRQHandler+0x6b4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d01d      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1d      	ldr	r2, [pc, #116]	; (800490c <HAL_DMA_IRQHandler+0x6b8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d018      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1c      	ldr	r2, [pc, #112]	; (8004910 <HAL_DMA_IRQHandler+0x6bc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <HAL_DMA_IRQHandler+0x6c0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00e      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a19      	ldr	r2, [pc, #100]	; (8004918 <HAL_DMA_IRQHandler+0x6c4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d009      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a17      	ldr	r2, [pc, #92]	; (800491c <HAL_DMA_IRQHandler+0x6c8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_DMA_IRQHandler+0x678>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a16      	ldr	r2, [pc, #88]	; (8004920 <HAL_DMA_IRQHandler+0x6cc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d12b      	bne.n	8004924 <HAL_DMA_IRQHandler+0x6d0>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bf14      	ite	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	2300      	moveq	r3, #0
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	e02a      	b.n	8004938 <HAL_DMA_IRQHandler+0x6e4>
 80048e2:	bf00      	nop
 80048e4:	40020010 	.word	0x40020010
 80048e8:	40020028 	.word	0x40020028
 80048ec:	40020040 	.word	0x40020040
 80048f0:	40020058 	.word	0x40020058
 80048f4:	40020070 	.word	0x40020070
 80048f8:	40020088 	.word	0x40020088
 80048fc:	400200a0 	.word	0x400200a0
 8004900:	400200b8 	.word	0x400200b8
 8004904:	40020410 	.word	0x40020410
 8004908:	40020428 	.word	0x40020428
 800490c:	40020440 	.word	0x40020440
 8004910:	40020458 	.word	0x40020458
 8004914:	40020470 	.word	0x40020470
 8004918:	40020488 	.word	0x40020488
 800491c:	400204a0 	.word	0x400204a0
 8004920:	400204b8 	.word	0x400204b8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	bf14      	ite	ne
 8004932:	2301      	movne	r3, #1
 8004934:	2300      	moveq	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8087 	beq.w	8004a4c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	2220      	movs	r2, #32
 8004948:	409a      	lsls	r2, r3
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b04      	cmp	r3, #4
 8004958:	d139      	bne.n	80049ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0216 	bic.w	r2, r2, #22
 8004968:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004978:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d103      	bne.n	800498a <HAL_DMA_IRQHandler+0x736>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0208 	bic.w	r2, r2, #8
 8004998:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	223f      	movs	r2, #63	; 0x3f
 80049a4:	409a      	lsls	r2, r3
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 834a 	beq.w	8005058 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
          }
          return;
 80049cc:	e344      	b.n	8005058 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d018      	beq.n	8004a0e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d108      	bne.n	80049fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d02c      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
 80049fa:	e027      	b.n	8004a4c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d023      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
 8004a0c:	e01e      	b.n	8004a4c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10f      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0210 	bic.w	r2, r2, #16
 8004a2a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8306 	beq.w	8005062 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8088 	beq.w	8004b74 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2204      	movs	r2, #4
 8004a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a7a      	ldr	r2, [pc, #488]	; (8004c5c <HAL_DMA_IRQHandler+0xa08>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d04a      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a79      	ldr	r2, [pc, #484]	; (8004c60 <HAL_DMA_IRQHandler+0xa0c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d045      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a77      	ldr	r2, [pc, #476]	; (8004c64 <HAL_DMA_IRQHandler+0xa10>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d040      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a76      	ldr	r2, [pc, #472]	; (8004c68 <HAL_DMA_IRQHandler+0xa14>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d03b      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a74      	ldr	r2, [pc, #464]	; (8004c6c <HAL_DMA_IRQHandler+0xa18>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d036      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a73      	ldr	r2, [pc, #460]	; (8004c70 <HAL_DMA_IRQHandler+0xa1c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d031      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a71      	ldr	r2, [pc, #452]	; (8004c74 <HAL_DMA_IRQHandler+0xa20>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d02c      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a70      	ldr	r2, [pc, #448]	; (8004c78 <HAL_DMA_IRQHandler+0xa24>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d027      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a6e      	ldr	r2, [pc, #440]	; (8004c7c <HAL_DMA_IRQHandler+0xa28>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d022      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a6d      	ldr	r2, [pc, #436]	; (8004c80 <HAL_DMA_IRQHandler+0xa2c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d01d      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a6b      	ldr	r2, [pc, #428]	; (8004c84 <HAL_DMA_IRQHandler+0xa30>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a6a      	ldr	r2, [pc, #424]	; (8004c88 <HAL_DMA_IRQHandler+0xa34>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a68      	ldr	r2, [pc, #416]	; (8004c8c <HAL_DMA_IRQHandler+0xa38>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a67      	ldr	r2, [pc, #412]	; (8004c90 <HAL_DMA_IRQHandler+0xa3c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a65      	ldr	r2, [pc, #404]	; (8004c94 <HAL_DMA_IRQHandler+0xa40>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x8b8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a64      	ldr	r2, [pc, #400]	; (8004c98 <HAL_DMA_IRQHandler+0xa44>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d108      	bne.n	8004b1e <HAL_DMA_IRQHandler+0x8ca>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0201 	bic.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e007      	b.n	8004b2e <HAL_DMA_IRQHandler+0x8da>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0201 	bic.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3301      	adds	r3, #1
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d307      	bcc.n	8004b4a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f2      	bne.n	8004b2e <HAL_DMA_IRQHandler+0x8da>
 8004b48:	e000      	b.n	8004b4c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004b4a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2203      	movs	r2, #3
 8004b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004b6a:	e003      	b.n	8004b74 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8272 	beq.w	8005062 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
 8004b86:	e26c      	b.n	8005062 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a43      	ldr	r2, [pc, #268]	; (8004c9c <HAL_DMA_IRQHandler+0xa48>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x984>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a42      	ldr	r2, [pc, #264]	; (8004ca0 <HAL_DMA_IRQHandler+0xa4c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x984>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a40      	ldr	r2, [pc, #256]	; (8004ca4 <HAL_DMA_IRQHandler+0xa50>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x984>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3f      	ldr	r2, [pc, #252]	; (8004ca8 <HAL_DMA_IRQHandler+0xa54>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x984>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3d      	ldr	r2, [pc, #244]	; (8004cac <HAL_DMA_IRQHandler+0xa58>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x984>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3c      	ldr	r2, [pc, #240]	; (8004cb0 <HAL_DMA_IRQHandler+0xa5c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x984>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a3a      	ldr	r2, [pc, #232]	; (8004cb4 <HAL_DMA_IRQHandler+0xa60>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x984>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a39      	ldr	r2, [pc, #228]	; (8004cb8 <HAL_DMA_IRQHandler+0xa64>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_DMA_IRQHandler+0x988>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <HAL_DMA_IRQHandler+0x98a>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 823f 	beq.w	8005062 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80cd 	beq.w	8004d9c <HAL_DMA_IRQHandler+0xb48>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80c7 	beq.w	8004d9c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2204      	movs	r2, #4
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d049      	beq.n	8004cbc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8210 	beq.w	800505c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c44:	e20a      	b.n	800505c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8206 	beq.w	800505c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c58:	e200      	b.n	800505c <HAL_DMA_IRQHandler+0xe08>
 8004c5a:	bf00      	nop
 8004c5c:	40020010 	.word	0x40020010
 8004c60:	40020028 	.word	0x40020028
 8004c64:	40020040 	.word	0x40020040
 8004c68:	40020058 	.word	0x40020058
 8004c6c:	40020070 	.word	0x40020070
 8004c70:	40020088 	.word	0x40020088
 8004c74:	400200a0 	.word	0x400200a0
 8004c78:	400200b8 	.word	0x400200b8
 8004c7c:	40020410 	.word	0x40020410
 8004c80:	40020428 	.word	0x40020428
 8004c84:	40020440 	.word	0x40020440
 8004c88:	40020458 	.word	0x40020458
 8004c8c:	40020470 	.word	0x40020470
 8004c90:	40020488 	.word	0x40020488
 8004c94:	400204a0 	.word	0x400204a0
 8004c98:	400204b8 	.word	0x400204b8
 8004c9c:	58025408 	.word	0x58025408
 8004ca0:	5802541c 	.word	0x5802541c
 8004ca4:	58025430 	.word	0x58025430
 8004ca8:	58025444 	.word	0x58025444
 8004cac:	58025458 	.word	0x58025458
 8004cb0:	5802546c 	.word	0x5802546c
 8004cb4:	58025480 	.word	0x58025480
 8004cb8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d160      	bne.n	8004d88 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a8c      	ldr	r2, [pc, #560]	; (8004efc <HAL_DMA_IRQHandler+0xca8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d04a      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a8a      	ldr	r2, [pc, #552]	; (8004f00 <HAL_DMA_IRQHandler+0xcac>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d045      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a89      	ldr	r2, [pc, #548]	; (8004f04 <HAL_DMA_IRQHandler+0xcb0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d040      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a87      	ldr	r2, [pc, #540]	; (8004f08 <HAL_DMA_IRQHandler+0xcb4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d03b      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a86      	ldr	r2, [pc, #536]	; (8004f0c <HAL_DMA_IRQHandler+0xcb8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d036      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a84      	ldr	r2, [pc, #528]	; (8004f10 <HAL_DMA_IRQHandler+0xcbc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d031      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a83      	ldr	r2, [pc, #524]	; (8004f14 <HAL_DMA_IRQHandler+0xcc0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d02c      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a81      	ldr	r2, [pc, #516]	; (8004f18 <HAL_DMA_IRQHandler+0xcc4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d027      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a80      	ldr	r2, [pc, #512]	; (8004f1c <HAL_DMA_IRQHandler+0xcc8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d022      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7e      	ldr	r2, [pc, #504]	; (8004f20 <HAL_DMA_IRQHandler+0xccc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01d      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a7d      	ldr	r2, [pc, #500]	; (8004f24 <HAL_DMA_IRQHandler+0xcd0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d018      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a7b      	ldr	r2, [pc, #492]	; (8004f28 <HAL_DMA_IRQHandler+0xcd4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a7a      	ldr	r2, [pc, #488]	; (8004f2c <HAL_DMA_IRQHandler+0xcd8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00e      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a78      	ldr	r2, [pc, #480]	; (8004f30 <HAL_DMA_IRQHandler+0xcdc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a77      	ldr	r2, [pc, #476]	; (8004f34 <HAL_DMA_IRQHandler+0xce0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_DMA_IRQHandler+0xb12>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a75      	ldr	r2, [pc, #468]	; (8004f38 <HAL_DMA_IRQHandler+0xce4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d108      	bne.n	8004d78 <HAL_DMA_IRQHandler+0xb24>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0208 	bic.w	r2, r2, #8
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e007      	b.n	8004d88 <HAL_DMA_IRQHandler+0xb34>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0204 	bic.w	r2, r2, #4
 8004d86:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8165 	beq.w	800505c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d9a:	e15f      	b.n	800505c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2202      	movs	r2, #2
 8004da6:	409a      	lsls	r2, r3
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80c5 	beq.w	8004f3c <HAL_DMA_IRQHandler+0xce8>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80bf 	beq.w	8004f3c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d018      	beq.n	8004e0a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 813a 	beq.w	8005060 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004df4:	e134      	b.n	8005060 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8130 	beq.w	8005060 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e08:	e12a      	b.n	8005060 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d168      	bne.n	8004ee6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a38      	ldr	r2, [pc, #224]	; (8004efc <HAL_DMA_IRQHandler+0xca8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d04a      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a37      	ldr	r2, [pc, #220]	; (8004f00 <HAL_DMA_IRQHandler+0xcac>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d045      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a35      	ldr	r2, [pc, #212]	; (8004f04 <HAL_DMA_IRQHandler+0xcb0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d040      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a34      	ldr	r2, [pc, #208]	; (8004f08 <HAL_DMA_IRQHandler+0xcb4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d03b      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a32      	ldr	r2, [pc, #200]	; (8004f0c <HAL_DMA_IRQHandler+0xcb8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d036      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a31      	ldr	r2, [pc, #196]	; (8004f10 <HAL_DMA_IRQHandler+0xcbc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d031      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2f      	ldr	r2, [pc, #188]	; (8004f14 <HAL_DMA_IRQHandler+0xcc0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02c      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2e      	ldr	r2, [pc, #184]	; (8004f18 <HAL_DMA_IRQHandler+0xcc4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d027      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2c      	ldr	r2, [pc, #176]	; (8004f1c <HAL_DMA_IRQHandler+0xcc8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2b      	ldr	r2, [pc, #172]	; (8004f20 <HAL_DMA_IRQHandler+0xccc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01d      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <HAL_DMA_IRQHandler+0xcd0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a28      	ldr	r2, [pc, #160]	; (8004f28 <HAL_DMA_IRQHandler+0xcd4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <HAL_DMA_IRQHandler+0xcd8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <HAL_DMA_IRQHandler+0xcdc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <HAL_DMA_IRQHandler+0xce0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0xc60>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a22      	ldr	r2, [pc, #136]	; (8004f38 <HAL_DMA_IRQHandler+0xce4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d108      	bne.n	8004ec6 <HAL_DMA_IRQHandler+0xc72>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0214 	bic.w	r2, r2, #20
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	e007      	b.n	8004ed6 <HAL_DMA_IRQHandler+0xc82>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 020a 	bic.w	r2, r2, #10
 8004ed4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80b8 	beq.w	8005060 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef8:	e0b2      	b.n	8005060 <HAL_DMA_IRQHandler+0xe0c>
 8004efa:	bf00      	nop
 8004efc:	40020010 	.word	0x40020010
 8004f00:	40020028 	.word	0x40020028
 8004f04:	40020040 	.word	0x40020040
 8004f08:	40020058 	.word	0x40020058
 8004f0c:	40020070 	.word	0x40020070
 8004f10:	40020088 	.word	0x40020088
 8004f14:	400200a0 	.word	0x400200a0
 8004f18:	400200b8 	.word	0x400200b8
 8004f1c:	40020410 	.word	0x40020410
 8004f20:	40020428 	.word	0x40020428
 8004f24:	40020440 	.word	0x40020440
 8004f28:	40020458 	.word	0x40020458
 8004f2c:	40020470 	.word	0x40020470
 8004f30:	40020488 	.word	0x40020488
 8004f34:	400204a0 	.word	0x400204a0
 8004f38:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	2208      	movs	r2, #8
 8004f46:	409a      	lsls	r2, r3
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8088 	beq.w	8005062 <HAL_DMA_IRQHandler+0xe0e>
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f003 0308 	and.w	r3, r3, #8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8082 	beq.w	8005062 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a41      	ldr	r2, [pc, #260]	; (8005068 <HAL_DMA_IRQHandler+0xe14>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d04a      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a3f      	ldr	r2, [pc, #252]	; (800506c <HAL_DMA_IRQHandler+0xe18>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d045      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a3e      	ldr	r2, [pc, #248]	; (8005070 <HAL_DMA_IRQHandler+0xe1c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d040      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a3c      	ldr	r2, [pc, #240]	; (8005074 <HAL_DMA_IRQHandler+0xe20>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d03b      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a3b      	ldr	r2, [pc, #236]	; (8005078 <HAL_DMA_IRQHandler+0xe24>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d036      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a39      	ldr	r2, [pc, #228]	; (800507c <HAL_DMA_IRQHandler+0xe28>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d031      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a38      	ldr	r2, [pc, #224]	; (8005080 <HAL_DMA_IRQHandler+0xe2c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d02c      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a36      	ldr	r2, [pc, #216]	; (8005084 <HAL_DMA_IRQHandler+0xe30>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d027      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a35      	ldr	r2, [pc, #212]	; (8005088 <HAL_DMA_IRQHandler+0xe34>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d022      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a33      	ldr	r2, [pc, #204]	; (800508c <HAL_DMA_IRQHandler+0xe38>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a32      	ldr	r2, [pc, #200]	; (8005090 <HAL_DMA_IRQHandler+0xe3c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a30      	ldr	r2, [pc, #192]	; (8005094 <HAL_DMA_IRQHandler+0xe40>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a2f      	ldr	r2, [pc, #188]	; (8005098 <HAL_DMA_IRQHandler+0xe44>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a2d      	ldr	r2, [pc, #180]	; (800509c <HAL_DMA_IRQHandler+0xe48>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2c      	ldr	r2, [pc, #176]	; (80050a0 <HAL_DMA_IRQHandler+0xe4c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_DMA_IRQHandler+0xdaa>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a2a      	ldr	r2, [pc, #168]	; (80050a4 <HAL_DMA_IRQHandler+0xe50>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d108      	bne.n	8005010 <HAL_DMA_IRQHandler+0xdbc>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 021c 	bic.w	r2, r2, #28
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e007      	b.n	8005020 <HAL_DMA_IRQHandler+0xdcc>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 020e 	bic.w	r2, r2, #14
 800501e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	2201      	movs	r2, #1
 800502a:	409a      	lsls	r2, r3
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d009      	beq.n	8005062 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	4798      	blx	r3
 8005056:	e004      	b.n	8005062 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005058:	bf00      	nop
 800505a:	e002      	b.n	8005062 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800505c:	bf00      	nop
 800505e:	e000      	b.n	8005062 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005060:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005062:	3728      	adds	r7, #40	; 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40020010 	.word	0x40020010
 800506c:	40020028 	.word	0x40020028
 8005070:	40020040 	.word	0x40020040
 8005074:	40020058 	.word	0x40020058
 8005078:	40020070 	.word	0x40020070
 800507c:	40020088 	.word	0x40020088
 8005080:	400200a0 	.word	0x400200a0
 8005084:	400200b8 	.word	0x400200b8
 8005088:	40020410 	.word	0x40020410
 800508c:	40020428 	.word	0x40020428
 8005090:	40020440 	.word	0x40020440
 8005094:	40020458 	.word	0x40020458
 8005098:	40020470 	.word	0x40020470
 800509c:	40020488 	.word	0x40020488
 80050a0:	400204a0 	.word	0x400204a0
 80050a4:	400204b8 	.word	0x400204b8

080050a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a84      	ldr	r2, [pc, #528]	; (80052d8 <DMA_SetConfig+0x230>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d072      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a82      	ldr	r2, [pc, #520]	; (80052dc <DMA_SetConfig+0x234>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d06d      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a81      	ldr	r2, [pc, #516]	; (80052e0 <DMA_SetConfig+0x238>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d068      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a7f      	ldr	r2, [pc, #508]	; (80052e4 <DMA_SetConfig+0x23c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d063      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a7e      	ldr	r2, [pc, #504]	; (80052e8 <DMA_SetConfig+0x240>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d05e      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a7c      	ldr	r2, [pc, #496]	; (80052ec <DMA_SetConfig+0x244>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d059      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a7b      	ldr	r2, [pc, #492]	; (80052f0 <DMA_SetConfig+0x248>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d054      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a79      	ldr	r2, [pc, #484]	; (80052f4 <DMA_SetConfig+0x24c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d04f      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a78      	ldr	r2, [pc, #480]	; (80052f8 <DMA_SetConfig+0x250>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d04a      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a76      	ldr	r2, [pc, #472]	; (80052fc <DMA_SetConfig+0x254>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d045      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a75      	ldr	r2, [pc, #468]	; (8005300 <DMA_SetConfig+0x258>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d040      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a73      	ldr	r2, [pc, #460]	; (8005304 <DMA_SetConfig+0x25c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d03b      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a72      	ldr	r2, [pc, #456]	; (8005308 <DMA_SetConfig+0x260>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d036      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a70      	ldr	r2, [pc, #448]	; (800530c <DMA_SetConfig+0x264>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d031      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a6f      	ldr	r2, [pc, #444]	; (8005310 <DMA_SetConfig+0x268>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d02c      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a6d      	ldr	r2, [pc, #436]	; (8005314 <DMA_SetConfig+0x26c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d027      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a6c      	ldr	r2, [pc, #432]	; (8005318 <DMA_SetConfig+0x270>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d022      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a6a      	ldr	r2, [pc, #424]	; (800531c <DMA_SetConfig+0x274>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01d      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a69      	ldr	r2, [pc, #420]	; (8005320 <DMA_SetConfig+0x278>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d018      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a67      	ldr	r2, [pc, #412]	; (8005324 <DMA_SetConfig+0x27c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a66      	ldr	r2, [pc, #408]	; (8005328 <DMA_SetConfig+0x280>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a64      	ldr	r2, [pc, #400]	; (800532c <DMA_SetConfig+0x284>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d009      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a63      	ldr	r2, [pc, #396]	; (8005330 <DMA_SetConfig+0x288>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <DMA_SetConfig+0x10a>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a61      	ldr	r2, [pc, #388]	; (8005334 <DMA_SetConfig+0x28c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <DMA_SetConfig+0x10e>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <DMA_SetConfig+0x110>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00d      	beq.n	80051d8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051c4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d004      	beq.n	80051d8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051d6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a3e      	ldr	r2, [pc, #248]	; (80052d8 <DMA_SetConfig+0x230>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d04a      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a3d      	ldr	r2, [pc, #244]	; (80052dc <DMA_SetConfig+0x234>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d045      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a3b      	ldr	r2, [pc, #236]	; (80052e0 <DMA_SetConfig+0x238>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d040      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a3a      	ldr	r2, [pc, #232]	; (80052e4 <DMA_SetConfig+0x23c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d03b      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a38      	ldr	r2, [pc, #224]	; (80052e8 <DMA_SetConfig+0x240>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d036      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a37      	ldr	r2, [pc, #220]	; (80052ec <DMA_SetConfig+0x244>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d031      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a35      	ldr	r2, [pc, #212]	; (80052f0 <DMA_SetConfig+0x248>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d02c      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a34      	ldr	r2, [pc, #208]	; (80052f4 <DMA_SetConfig+0x24c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d027      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a32      	ldr	r2, [pc, #200]	; (80052f8 <DMA_SetConfig+0x250>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d022      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a31      	ldr	r2, [pc, #196]	; (80052fc <DMA_SetConfig+0x254>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d01d      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2f      	ldr	r2, [pc, #188]	; (8005300 <DMA_SetConfig+0x258>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2e      	ldr	r2, [pc, #184]	; (8005304 <DMA_SetConfig+0x25c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2c      	ldr	r2, [pc, #176]	; (8005308 <DMA_SetConfig+0x260>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2b      	ldr	r2, [pc, #172]	; (800530c <DMA_SetConfig+0x264>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d009      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a29      	ldr	r2, [pc, #164]	; (8005310 <DMA_SetConfig+0x268>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <DMA_SetConfig+0x1d0>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a28      	ldr	r2, [pc, #160]	; (8005314 <DMA_SetConfig+0x26c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <DMA_SetConfig+0x1d4>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <DMA_SetConfig+0x1d6>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d05a      	beq.n	8005338 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	223f      	movs	r2, #63	; 0x3f
 800528c:	409a      	lsls	r2, r3
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b40      	cmp	r3, #64	; 0x40
 80052b0:	d108      	bne.n	80052c4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80052c2:	e087      	b.n	80053d4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]
}
 80052d4:	e07e      	b.n	80053d4 <DMA_SetConfig+0x32c>
 80052d6:	bf00      	nop
 80052d8:	40020010 	.word	0x40020010
 80052dc:	40020028 	.word	0x40020028
 80052e0:	40020040 	.word	0x40020040
 80052e4:	40020058 	.word	0x40020058
 80052e8:	40020070 	.word	0x40020070
 80052ec:	40020088 	.word	0x40020088
 80052f0:	400200a0 	.word	0x400200a0
 80052f4:	400200b8 	.word	0x400200b8
 80052f8:	40020410 	.word	0x40020410
 80052fc:	40020428 	.word	0x40020428
 8005300:	40020440 	.word	0x40020440
 8005304:	40020458 	.word	0x40020458
 8005308:	40020470 	.word	0x40020470
 800530c:	40020488 	.word	0x40020488
 8005310:	400204a0 	.word	0x400204a0
 8005314:	400204b8 	.word	0x400204b8
 8005318:	58025408 	.word	0x58025408
 800531c:	5802541c 	.word	0x5802541c
 8005320:	58025430 	.word	0x58025430
 8005324:	58025444 	.word	0x58025444
 8005328:	58025458 	.word	0x58025458
 800532c:	5802546c 	.word	0x5802546c
 8005330:	58025480 	.word	0x58025480
 8005334:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a28      	ldr	r2, [pc, #160]	; (80053e0 <DMA_SetConfig+0x338>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d022      	beq.n	8005388 <DMA_SetConfig+0x2e0>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <DMA_SetConfig+0x33c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d01d      	beq.n	8005388 <DMA_SetConfig+0x2e0>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <DMA_SetConfig+0x340>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d018      	beq.n	8005388 <DMA_SetConfig+0x2e0>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a24      	ldr	r2, [pc, #144]	; (80053ec <DMA_SetConfig+0x344>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <DMA_SetConfig+0x2e0>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a22      	ldr	r2, [pc, #136]	; (80053f0 <DMA_SetConfig+0x348>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00e      	beq.n	8005388 <DMA_SetConfig+0x2e0>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a21      	ldr	r2, [pc, #132]	; (80053f4 <DMA_SetConfig+0x34c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d009      	beq.n	8005388 <DMA_SetConfig+0x2e0>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a1f      	ldr	r2, [pc, #124]	; (80053f8 <DMA_SetConfig+0x350>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <DMA_SetConfig+0x2e0>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1e      	ldr	r2, [pc, #120]	; (80053fc <DMA_SetConfig+0x354>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d101      	bne.n	800538c <DMA_SetConfig+0x2e4>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <DMA_SetConfig+0x2e6>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d020      	beq.n	80053d4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	2201      	movs	r2, #1
 800539c:	409a      	lsls	r2, r3
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d108      	bne.n	80053c4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	60da      	str	r2, [r3, #12]
}
 80053c2:	e007      	b.n	80053d4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	60da      	str	r2, [r3, #12]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	58025408 	.word	0x58025408
 80053e4:	5802541c 	.word	0x5802541c
 80053e8:	58025430 	.word	0x58025430
 80053ec:	58025444 	.word	0x58025444
 80053f0:	58025458 	.word	0x58025458
 80053f4:	5802546c 	.word	0x5802546c
 80053f8:	58025480 	.word	0x58025480
 80053fc:	58025494 	.word	0x58025494

08005400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a42      	ldr	r2, [pc, #264]	; (8005518 <DMA_CalcBaseAndBitshift+0x118>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d04a      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a41      	ldr	r2, [pc, #260]	; (800551c <DMA_CalcBaseAndBitshift+0x11c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d045      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a3f      	ldr	r2, [pc, #252]	; (8005520 <DMA_CalcBaseAndBitshift+0x120>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d040      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a3e      	ldr	r2, [pc, #248]	; (8005524 <DMA_CalcBaseAndBitshift+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d03b      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a3c      	ldr	r2, [pc, #240]	; (8005528 <DMA_CalcBaseAndBitshift+0x128>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d036      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a3b      	ldr	r2, [pc, #236]	; (800552c <DMA_CalcBaseAndBitshift+0x12c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d031      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a39      	ldr	r2, [pc, #228]	; (8005530 <DMA_CalcBaseAndBitshift+0x130>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d02c      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a38      	ldr	r2, [pc, #224]	; (8005534 <DMA_CalcBaseAndBitshift+0x134>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d027      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a36      	ldr	r2, [pc, #216]	; (8005538 <DMA_CalcBaseAndBitshift+0x138>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d022      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a35      	ldr	r2, [pc, #212]	; (800553c <DMA_CalcBaseAndBitshift+0x13c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d01d      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a33      	ldr	r2, [pc, #204]	; (8005540 <DMA_CalcBaseAndBitshift+0x140>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d018      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a32      	ldr	r2, [pc, #200]	; (8005544 <DMA_CalcBaseAndBitshift+0x144>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a30      	ldr	r2, [pc, #192]	; (8005548 <DMA_CalcBaseAndBitshift+0x148>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00e      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2f      	ldr	r2, [pc, #188]	; (800554c <DMA_CalcBaseAndBitshift+0x14c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d009      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2d      	ldr	r2, [pc, #180]	; (8005550 <DMA_CalcBaseAndBitshift+0x150>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <DMA_CalcBaseAndBitshift+0xa8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <DMA_CalcBaseAndBitshift+0x154>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d101      	bne.n	80054ac <DMA_CalcBaseAndBitshift+0xac>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <DMA_CalcBaseAndBitshift+0xae>
 80054ac:	2300      	movs	r3, #0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d024      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	3b10      	subs	r3, #16
 80054ba:	4a27      	ldr	r2, [pc, #156]	; (8005558 <DMA_CalcBaseAndBitshift+0x158>)
 80054bc:	fba2 2303 	umull	r2, r3, r2, r3
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	4a24      	ldr	r2, [pc, #144]	; (800555c <DMA_CalcBaseAndBitshift+0x15c>)
 80054cc:	5cd3      	ldrb	r3, [r2, r3]
 80054ce:	461a      	mov	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d908      	bls.n	80054ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	4b1f      	ldr	r3, [pc, #124]	; (8005560 <DMA_CalcBaseAndBitshift+0x160>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	1d1a      	adds	r2, r3, #4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	659a      	str	r2, [r3, #88]	; 0x58
 80054ea:	e00d      	b.n	8005508 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <DMA_CalcBaseAndBitshift+0x160>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6593      	str	r3, [r2, #88]	; 0x58
 80054fa:	e005      	b.n	8005508 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40020010 	.word	0x40020010
 800551c:	40020028 	.word	0x40020028
 8005520:	40020040 	.word	0x40020040
 8005524:	40020058 	.word	0x40020058
 8005528:	40020070 	.word	0x40020070
 800552c:	40020088 	.word	0x40020088
 8005530:	400200a0 	.word	0x400200a0
 8005534:	400200b8 	.word	0x400200b8
 8005538:	40020410 	.word	0x40020410
 800553c:	40020428 	.word	0x40020428
 8005540:	40020440 	.word	0x40020440
 8005544:	40020458 	.word	0x40020458
 8005548:	40020470 	.word	0x40020470
 800554c:	40020488 	.word	0x40020488
 8005550:	400204a0 	.word	0x400204a0
 8005554:	400204b8 	.word	0x400204b8
 8005558:	aaaaaaab 	.word	0xaaaaaaab
 800555c:	0800b968 	.word	0x0800b968
 8005560:	fffffc00 	.word	0xfffffc00

08005564 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d120      	bne.n	80055ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	2b03      	cmp	r3, #3
 800557e:	d858      	bhi.n	8005632 <DMA_CheckFifoParam+0xce>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <DMA_CheckFifoParam+0x24>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	08005599 	.word	0x08005599
 800558c:	080055ab 	.word	0x080055ab
 8005590:	08005599 	.word	0x08005599
 8005594:	08005633 	.word	0x08005633
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d048      	beq.n	8005636 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055a8:	e045      	b.n	8005636 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055b2:	d142      	bne.n	800563a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055b8:	e03f      	b.n	800563a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c2:	d123      	bne.n	800560c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d838      	bhi.n	800563e <DMA_CheckFifoParam+0xda>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <DMA_CheckFifoParam+0x70>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	080055eb 	.word	0x080055eb
 80055dc:	080055e5 	.word	0x080055e5
 80055e0:	080055fd 	.word	0x080055fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
        break;
 80055e8:	e030      	b.n	800564c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d025      	beq.n	8005642 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055fa:	e022      	b.n	8005642 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005604:	d11f      	bne.n	8005646 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800560a:	e01c      	b.n	8005646 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	2b02      	cmp	r3, #2
 8005612:	d902      	bls.n	800561a <DMA_CheckFifoParam+0xb6>
 8005614:	2b03      	cmp	r3, #3
 8005616:	d003      	beq.n	8005620 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005618:	e018      	b.n	800564c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
        break;
 800561e:	e015      	b.n	800564c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00e      	beq.n	800564a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
    break;
 8005630:	e00b      	b.n	800564a <DMA_CheckFifoParam+0xe6>
        break;
 8005632:	bf00      	nop
 8005634:	e00a      	b.n	800564c <DMA_CheckFifoParam+0xe8>
        break;
 8005636:	bf00      	nop
 8005638:	e008      	b.n	800564c <DMA_CheckFifoParam+0xe8>
        break;
 800563a:	bf00      	nop
 800563c:	e006      	b.n	800564c <DMA_CheckFifoParam+0xe8>
        break;
 800563e:	bf00      	nop
 8005640:	e004      	b.n	800564c <DMA_CheckFifoParam+0xe8>
        break;
 8005642:	bf00      	nop
 8005644:	e002      	b.n	800564c <DMA_CheckFifoParam+0xe8>
        break;
 8005646:	bf00      	nop
 8005648:	e000      	b.n	800564c <DMA_CheckFifoParam+0xe8>
    break;
 800564a:	bf00      	nop
    }
  }

  return status;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop

0800565c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a38      	ldr	r2, [pc, #224]	; (8005750 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a36      	ldr	r2, [pc, #216]	; (8005754 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01d      	beq.n	80056ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a35      	ldr	r2, [pc, #212]	; (8005758 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a33      	ldr	r2, [pc, #204]	; (800575c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a32      	ldr	r2, [pc, #200]	; (8005760 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a30      	ldr	r2, [pc, #192]	; (8005764 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2f      	ldr	r2, [pc, #188]	; (8005768 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a2d      	ldr	r2, [pc, #180]	; (800576c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d101      	bne.n	80056be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01a      	beq.n	80056fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	3b08      	subs	r3, #8
 80056cc:	4a28      	ldr	r2, [pc, #160]	; (8005770 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4b26      	ldr	r3, [pc, #152]	; (8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a24      	ldr	r2, [pc, #144]	; (8005778 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80056e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	2201      	movs	r2, #1
 80056f2:	409a      	lsls	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80056f8:	e024      	b.n	8005744 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	3b10      	subs	r3, #16
 8005702:	4a1e      	ldr	r2, [pc, #120]	; (800577c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d806      	bhi.n	8005722 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4a1b      	ldr	r2, [pc, #108]	; (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d902      	bls.n	8005722 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3308      	adds	r3, #8
 8005720:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	4b18      	ldr	r3, [pc, #96]	; (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	461a      	mov	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a16      	ldr	r2, [pc, #88]	; (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005734:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2201      	movs	r2, #1
 800573e:	409a      	lsls	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005744:	bf00      	nop
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	58025408 	.word	0x58025408
 8005754:	5802541c 	.word	0x5802541c
 8005758:	58025430 	.word	0x58025430
 800575c:	58025444 	.word	0x58025444
 8005760:	58025458 	.word	0x58025458
 8005764:	5802546c 	.word	0x5802546c
 8005768:	58025480 	.word	0x58025480
 800576c:	58025494 	.word	0x58025494
 8005770:	cccccccd 	.word	0xcccccccd
 8005774:	16009600 	.word	0x16009600
 8005778:	58025880 	.word	0x58025880
 800577c:	aaaaaaab 	.word	0xaaaaaaab
 8005780:	400204b8 	.word	0x400204b8
 8005784:	4002040f 	.word	0x4002040f
 8005788:	10008200 	.word	0x10008200
 800578c:	40020880 	.word	0x40020880

08005790 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d04a      	beq.n	800583c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d847      	bhi.n	800583c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a25      	ldr	r2, [pc, #148]	; (8005848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d022      	beq.n	80057fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a24      	ldr	r2, [pc, #144]	; (800584c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d01d      	beq.n	80057fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a22      	ldr	r2, [pc, #136]	; (8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d018      	beq.n	80057fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a21      	ldr	r2, [pc, #132]	; (8005854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1f      	ldr	r2, [pc, #124]	; (8005858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00e      	beq.n	80057fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1e      	ldr	r2, [pc, #120]	; (800585c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d009      	beq.n	80057fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a1b      	ldr	r2, [pc, #108]	; (8005864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d101      	bne.n	8005800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4b17      	ldr	r3, [pc, #92]	; (8005868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	461a      	mov	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a15      	ldr	r2, [pc, #84]	; (800586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005818:	671a      	str	r2, [r3, #112]	; 0x70
 800581a:	e009      	b.n	8005830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4b14      	ldr	r3, [pc, #80]	; (8005870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	461a      	mov	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a11      	ldr	r2, [pc, #68]	; (8005874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800582e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3b01      	subs	r3, #1
 8005834:	2201      	movs	r2, #1
 8005836:	409a      	lsls	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800583c:	bf00      	nop
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	58025408 	.word	0x58025408
 800584c:	5802541c 	.word	0x5802541c
 8005850:	58025430 	.word	0x58025430
 8005854:	58025444 	.word	0x58025444
 8005858:	58025458 	.word	0x58025458
 800585c:	5802546c 	.word	0x5802546c
 8005860:	58025480 	.word	0x58025480
 8005864:	58025494 	.word	0x58025494
 8005868:	1600963f 	.word	0x1600963f
 800586c:	58025940 	.word	0x58025940
 8005870:	1000823f 	.word	0x1000823f
 8005874:	40020940 	.word	0x40020940

08005878 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005878:	b480      	push	{r7}
 800587a:	b089      	sub	sp, #36	; 0x24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005886:	4b89      	ldr	r3, [pc, #548]	; (8005aac <HAL_GPIO_Init+0x234>)
 8005888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800588a:	e194      	b.n	8005bb6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	2101      	movs	r1, #1
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	fa01 f303 	lsl.w	r3, r1, r3
 8005898:	4013      	ands	r3, r2
 800589a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8186 	beq.w	8005bb0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d00b      	beq.n	80058c4 <HAL_GPIO_Init+0x4c>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d007      	beq.n	80058c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80058b8:	2b11      	cmp	r3, #17
 80058ba:	d003      	beq.n	80058c4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b12      	cmp	r3, #18
 80058c2:	d130      	bne.n	8005926 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	2203      	movs	r2, #3
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4013      	ands	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058fa:	2201      	movs	r2, #1
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4013      	ands	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 0201 	and.w	r2, r3, #1
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	2203      	movs	r2, #3
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4313      	orrs	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d003      	beq.n	8005966 <HAL_GPIO_Init+0xee>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b12      	cmp	r3, #18
 8005964:	d123      	bne.n	80059ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	08da      	lsrs	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3208      	adds	r2, #8
 800596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	220f      	movs	r2, #15
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	43db      	mvns	r3, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4013      	ands	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	691a      	ldr	r2, [r3, #16]
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f003 0307 	and.w	r3, r3, #7
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	fa02 f303 	lsl.w	r3, r2, r3
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	4313      	orrs	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	08da      	lsrs	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3208      	adds	r2, #8
 80059a8:	69b9      	ldr	r1, [r7, #24]
 80059aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	2203      	movs	r2, #3
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	43db      	mvns	r3, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4013      	ands	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f003 0203 	and.w	r2, r3, #3
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4313      	orrs	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80e0 	beq.w	8005bb0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f0:	4b2f      	ldr	r3, [pc, #188]	; (8005ab0 <HAL_GPIO_Init+0x238>)
 80059f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80059f6:	4a2e      	ldr	r2, [pc, #184]	; (8005ab0 <HAL_GPIO_Init+0x238>)
 80059f8:	f043 0302 	orr.w	r3, r3, #2
 80059fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a00:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_GPIO_Init+0x238>)
 8005a02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a0e:	4a29      	ldr	r2, [pc, #164]	; (8005ab4 <HAL_GPIO_Init+0x23c>)
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	089b      	lsrs	r3, r3, #2
 8005a14:	3302      	adds	r3, #2
 8005a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	220f      	movs	r2, #15
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a20      	ldr	r2, [pc, #128]	; (8005ab8 <HAL_GPIO_Init+0x240>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d052      	beq.n	8005ae0 <HAL_GPIO_Init+0x268>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <HAL_GPIO_Init+0x244>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d031      	beq.n	8005aa6 <HAL_GPIO_Init+0x22e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a1e      	ldr	r2, [pc, #120]	; (8005ac0 <HAL_GPIO_Init+0x248>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02b      	beq.n	8005aa2 <HAL_GPIO_Init+0x22a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_GPIO_Init+0x24c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d025      	beq.n	8005a9e <HAL_GPIO_Init+0x226>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <HAL_GPIO_Init+0x250>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d01f      	beq.n	8005a9a <HAL_GPIO_Init+0x222>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a1b      	ldr	r2, [pc, #108]	; (8005acc <HAL_GPIO_Init+0x254>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d019      	beq.n	8005a96 <HAL_GPIO_Init+0x21e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <HAL_GPIO_Init+0x258>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <HAL_GPIO_Init+0x21a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a19      	ldr	r2, [pc, #100]	; (8005ad4 <HAL_GPIO_Init+0x25c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00d      	beq.n	8005a8e <HAL_GPIO_Init+0x216>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <HAL_GPIO_Init+0x260>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d007      	beq.n	8005a8a <HAL_GPIO_Init+0x212>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a17      	ldr	r2, [pc, #92]	; (8005adc <HAL_GPIO_Init+0x264>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d101      	bne.n	8005a86 <HAL_GPIO_Init+0x20e>
 8005a82:	2309      	movs	r3, #9
 8005a84:	e02d      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005a86:	230a      	movs	r3, #10
 8005a88:	e02b      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	e029      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005a8e:	2307      	movs	r3, #7
 8005a90:	e027      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005a92:	2306      	movs	r3, #6
 8005a94:	e025      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005a96:	2305      	movs	r3, #5
 8005a98:	e023      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005a9a:	2304      	movs	r3, #4
 8005a9c:	e021      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e01f      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e01d      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e01b      	b.n	8005ae2 <HAL_GPIO_Init+0x26a>
 8005aaa:	bf00      	nop
 8005aac:	58000080 	.word	0x58000080
 8005ab0:	58024400 	.word	0x58024400
 8005ab4:	58000400 	.word	0x58000400
 8005ab8:	58020000 	.word	0x58020000
 8005abc:	58020400 	.word	0x58020400
 8005ac0:	58020800 	.word	0x58020800
 8005ac4:	58020c00 	.word	0x58020c00
 8005ac8:	58021000 	.word	0x58021000
 8005acc:	58021400 	.word	0x58021400
 8005ad0:	58021800 	.word	0x58021800
 8005ad4:	58021c00 	.word	0x58021c00
 8005ad8:	58022000 	.word	0x58022000
 8005adc:	58022400 	.word	0x58022400
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	f002 0203 	and.w	r2, r2, #3
 8005ae8:	0092      	lsls	r2, r2, #2
 8005aea:	4093      	lsls	r3, r2
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005af2:	4938      	ldr	r1, [pc, #224]	; (8005bd4 <HAL_GPIO_Init+0x35c>)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	3302      	adds	r3, #2
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	43db      	mvns	r3, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4013      	ands	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4013      	ands	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4013      	ands	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f47f ae63 	bne.w	800588c <HAL_GPIO_Init+0x14>
  }
}
 8005bc6:	bf00      	nop
 8005bc8:	3724      	adds	r7, #36	; 0x24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	58000400 	.word	0x58000400

08005bd8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005be0:	4a08      	ldr	r2, [pc, #32]	; (8005c04 <HAL_HSEM_FastTake+0x2c>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3320      	adds	r3, #32
 8005be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bea:	4a07      	ldr	r2, [pc, #28]	; (8005c08 <HAL_HSEM_FastTake+0x30>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d101      	bne.n	8005bf4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e000      	b.n	8005bf6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	58026400 	.word	0x58026400
 8005c08:	80000300 	.word	0x80000300

08005c0c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005c16:	4906      	ldr	r1, [pc, #24]	; (8005c30 <HAL_HSEM_Release+0x24>)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	58026400 	.word	0x58026400

08005c34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005c3c:	4b29      	ldr	r3, [pc, #164]	; (8005ce4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	2b06      	cmp	r3, #6
 8005c46:	d00a      	beq.n	8005c5e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c48:	4b26      	ldr	r3, [pc, #152]	; (8005ce4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d001      	beq.n	8005c5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e040      	b.n	8005cdc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e03e      	b.n	8005cdc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c5e:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005c66:	491f      	ldr	r1, [pc, #124]	; (8005ce4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c6e:	f7fb fc9d 	bl	80015ac <HAL_GetTick>
 8005c72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c74:	e009      	b.n	8005c8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c76:	f7fb fc99 	bl	80015ac <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c84:	d901      	bls.n	8005c8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e028      	b.n	8005cdc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c8a:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c96:	d1ee      	bne.n	8005c76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b1e      	cmp	r3, #30
 8005c9c:	d008      	beq.n	8005cb0 <HAL_PWREx_ConfigSupply+0x7c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ca2:	d005      	beq.n	8005cb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b1d      	cmp	r3, #29
 8005ca8:	d002      	beq.n	8005cb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b2d      	cmp	r3, #45	; 0x2d
 8005cae:	d114      	bne.n	8005cda <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005cb0:	f7fb fc7c 	bl	80015ac <HAL_GetTick>
 8005cb4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005cb6:	e009      	b.n	8005ccc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cb8:	f7fb fc78 	bl	80015ac <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cc6:	d901      	bls.n	8005ccc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e007      	b.n	8005cdc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd8:	d1ee      	bne.n	8005cb8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	58024800 	.word	0x58024800

08005ce8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e3ff      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8087 	beq.w	8005e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d08:	4b99      	ldr	r3, [pc, #612]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d12:	4b97      	ldr	r3, [pc, #604]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d007      	beq.n	8005d2e <HAL_RCC_OscConfig+0x46>
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	2b18      	cmp	r3, #24
 8005d22:	d110      	bne.n	8005d46 <HAL_RCC_OscConfig+0x5e>
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d10b      	bne.n	8005d46 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2e:	4b90      	ldr	r3, [pc, #576]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d06c      	beq.n	8005e14 <HAL_RCC_OscConfig+0x12c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d168      	bne.n	8005e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e3d9      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4e:	d106      	bne.n	8005d5e <HAL_RCC_OscConfig+0x76>
 8005d50:	4b87      	ldr	r3, [pc, #540]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a86      	ldr	r2, [pc, #536]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	e02e      	b.n	8005dbc <HAL_RCC_OscConfig+0xd4>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_RCC_OscConfig+0x98>
 8005d66:	4b82      	ldr	r3, [pc, #520]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a81      	ldr	r2, [pc, #516]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	4b7f      	ldr	r3, [pc, #508]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a7e      	ldr	r2, [pc, #504]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e01d      	b.n	8005dbc <HAL_RCC_OscConfig+0xd4>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0xbc>
 8005d8a:	4b79      	ldr	r3, [pc, #484]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a78      	ldr	r2, [pc, #480]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4b76      	ldr	r3, [pc, #472]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a75      	ldr	r2, [pc, #468]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e00b      	b.n	8005dbc <HAL_RCC_OscConfig+0xd4>
 8005da4:	4b72      	ldr	r3, [pc, #456]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a71      	ldr	r2, [pc, #452]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	4b6f      	ldr	r3, [pc, #444]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a6e      	ldr	r2, [pc, #440]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d013      	beq.n	8005dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fb fbf2 	bl	80015ac <HAL_GetTick>
 8005dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dcc:	f7fb fbee 	bl	80015ac <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b64      	cmp	r3, #100	; 0x64
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e38d      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dde:	4b64      	ldr	r3, [pc, #400]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0f0      	beq.n	8005dcc <HAL_RCC_OscConfig+0xe4>
 8005dea:	e014      	b.n	8005e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dec:	f7fb fbde 	bl	80015ac <HAL_GetTick>
 8005df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005df2:	e008      	b.n	8005e06 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df4:	f7fb fbda 	bl	80015ac <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b64      	cmp	r3, #100	; 0x64
 8005e00:	d901      	bls.n	8005e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e379      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e06:	4b5a      	ldr	r3, [pc, #360]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1f0      	bne.n	8005df4 <HAL_RCC_OscConfig+0x10c>
 8005e12:	e000      	b.n	8005e16 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 80ae 	beq.w	8005f80 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e24:	4b52      	ldr	r3, [pc, #328]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e2e:	4b50      	ldr	r3, [pc, #320]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_RCC_OscConfig+0x162>
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	2b18      	cmp	r3, #24
 8005e3e:	d13a      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x1ce>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d135      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e4a:	4b49      	ldr	r3, [pc, #292]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d005      	beq.n	8005e62 <HAL_RCC_OscConfig+0x17a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e34b      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e62:	f7fb fbd1 	bl	8001608 <HAL_GetREVID>
 8005e66:	4602      	mov	r2, r0
 8005e68:	f241 0303 	movw	r3, #4099	; 0x1003
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d817      	bhi.n	8005ea0 <HAL_RCC_OscConfig+0x1b8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d108      	bne.n	8005e8a <HAL_RCC_OscConfig+0x1a2>
 8005e78:	4b3d      	ldr	r3, [pc, #244]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e80:	4a3b      	ldr	r2, [pc, #236]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e86:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e88:	e07a      	b.n	8005f80 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8a:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	031b      	lsls	r3, r3, #12
 8005e98:	4935      	ldr	r1, [pc, #212]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e9e:	e06f      	b.n	8005f80 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea0:	4b33      	ldr	r3, [pc, #204]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	061b      	lsls	r3, r3, #24
 8005eae:	4930      	ldr	r1, [pc, #192]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eb4:	e064      	b.n	8005f80 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d045      	beq.n	8005f4a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ebe:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 0219 	bic.w	r2, r3, #25
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	4929      	ldr	r1, [pc, #164]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fb fb6c 	bl	80015ac <HAL_GetTick>
 8005ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed8:	f7fb fb68 	bl	80015ac <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e307      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eea:	4b21      	ldr	r3, [pc, #132]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef6:	f7fb fb87 	bl	8001608 <HAL_GetREVID>
 8005efa:	4602      	mov	r2, r0
 8005efc:	f241 0303 	movw	r3, #4099	; 0x1003
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d817      	bhi.n	8005f34 <HAL_RCC_OscConfig+0x24c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d108      	bne.n	8005f1e <HAL_RCC_OscConfig+0x236>
 8005f0c:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f14:	4a16      	ldr	r2, [pc, #88]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f1a:	6053      	str	r3, [r2, #4]
 8005f1c:	e030      	b.n	8005f80 <HAL_RCC_OscConfig+0x298>
 8005f1e:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	031b      	lsls	r3, r3, #12
 8005f2c:	4910      	ldr	r1, [pc, #64]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	604b      	str	r3, [r1, #4]
 8005f32:	e025      	b.n	8005f80 <HAL_RCC_OscConfig+0x298>
 8005f34:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	061b      	lsls	r3, r3, #24
 8005f42:	490b      	ldr	r1, [pc, #44]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	604b      	str	r3, [r1, #4]
 8005f48:	e01a      	b.n	8005f80 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <HAL_RCC_OscConfig+0x288>)
 8005f50:	f023 0301 	bic.w	r3, r3, #1
 8005f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fb fb29 	bl	80015ac <HAL_GetTick>
 8005f5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f5c:	e00a      	b.n	8005f74 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f5e:	f7fb fb25 	bl	80015ac <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d903      	bls.n	8005f74 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e2c4      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
 8005f70:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f74:	4ba4      	ldr	r3, [pc, #656]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1ee      	bne.n	8005f5e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80a9 	beq.w	80060e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f8e:	4b9e      	ldr	r3, [pc, #632]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f98:	4b9b      	ldr	r3, [pc, #620]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d007      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x2cc>
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b18      	cmp	r3, #24
 8005fa8:	d13a      	bne.n	8006020 <HAL_RCC_OscConfig+0x338>
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d135      	bne.n	8006020 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fb4:	4b94      	ldr	r3, [pc, #592]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_RCC_OscConfig+0x2e4>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	2b80      	cmp	r3, #128	; 0x80
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e296      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fcc:	f7fb fb1c 	bl	8001608 <HAL_GetREVID>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d817      	bhi.n	800600a <HAL_RCC_OscConfig+0x322>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d108      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x30c>
 8005fe2:	4b89      	ldr	r3, [pc, #548]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005fea:	4a87      	ldr	r2, [pc, #540]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8005fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ff0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ff2:	e075      	b.n	80060e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ff4:	4b84      	ldr	r3, [pc, #528]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	069b      	lsls	r3, r3, #26
 8006002:	4981      	ldr	r1, [pc, #516]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8006004:	4313      	orrs	r3, r2
 8006006:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006008:	e06a      	b.n	80060e0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800600a:	4b7f      	ldr	r3, [pc, #508]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	061b      	lsls	r3, r3, #24
 8006018:	497b      	ldr	r1, [pc, #492]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 800601a:	4313      	orrs	r3, r2
 800601c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800601e:	e05f      	b.n	80060e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d042      	beq.n	80060ae <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006028:	4b77      	ldr	r3, [pc, #476]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a76      	ldr	r2, [pc, #472]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 800602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006034:	f7fb faba 	bl	80015ac <HAL_GetTick>
 8006038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800603c:	f7fb fab6 	bl	80015ac <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e255      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800604e:	4b6e      	ldr	r3, [pc, #440]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800605a:	f7fb fad5 	bl	8001608 <HAL_GetREVID>
 800605e:	4602      	mov	r2, r0
 8006060:	f241 0303 	movw	r3, #4099	; 0x1003
 8006064:	429a      	cmp	r2, r3
 8006066:	d817      	bhi.n	8006098 <HAL_RCC_OscConfig+0x3b0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	2b20      	cmp	r3, #32
 800606e:	d108      	bne.n	8006082 <HAL_RCC_OscConfig+0x39a>
 8006070:	4b65      	ldr	r3, [pc, #404]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006078:	4a63      	ldr	r2, [pc, #396]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 800607a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800607e:	6053      	str	r3, [r2, #4]
 8006080:	e02e      	b.n	80060e0 <HAL_RCC_OscConfig+0x3f8>
 8006082:	4b61      	ldr	r3, [pc, #388]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	069b      	lsls	r3, r3, #26
 8006090:	495d      	ldr	r1, [pc, #372]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8006092:	4313      	orrs	r3, r2
 8006094:	604b      	str	r3, [r1, #4]
 8006096:	e023      	b.n	80060e0 <HAL_RCC_OscConfig+0x3f8>
 8006098:	4b5b      	ldr	r3, [pc, #364]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	4958      	ldr	r1, [pc, #352]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60cb      	str	r3, [r1, #12]
 80060ac:	e018      	b.n	80060e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060ae:	4b56      	ldr	r3, [pc, #344]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a55      	ldr	r2, [pc, #340]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 80060b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ba:	f7fb fa77 	bl	80015ac <HAL_GetTick>
 80060be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060c2:	f7fb fa73 	bl	80015ac <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e212      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060d4:	4b4c      	ldr	r3, [pc, #304]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1f0      	bne.n	80060c2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d036      	beq.n	800615a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d019      	beq.n	8006128 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f4:	4b44      	ldr	r3, [pc, #272]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 80060f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f8:	4a43      	ldr	r2, [pc, #268]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006100:	f7fb fa54 	bl	80015ac <HAL_GetTick>
 8006104:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006108:	f7fb fa50 	bl	80015ac <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e1ef      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800611a:	4b3b      	ldr	r3, [pc, #236]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 800611c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0f0      	beq.n	8006108 <HAL_RCC_OscConfig+0x420>
 8006126:	e018      	b.n	800615a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006128:	4b37      	ldr	r3, [pc, #220]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 800612a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612c:	4a36      	ldr	r2, [pc, #216]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006134:	f7fb fa3a 	bl	80015ac <HAL_GetTick>
 8006138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800613c:	f7fb fa36 	bl	80015ac <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e1d5      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800614e:	4b2e      	ldr	r3, [pc, #184]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8006150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0320 	and.w	r3, r3, #32
 8006162:	2b00      	cmp	r3, #0
 8006164:	d036      	beq.n	80061d4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d019      	beq.n	80061a2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800616e:	4b26      	ldr	r3, [pc, #152]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a25      	ldr	r2, [pc, #148]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8006174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006178:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800617a:	f7fb fa17 	bl	80015ac <HAL_GetTick>
 800617e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006182:	f7fb fa13 	bl	80015ac <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e1b2      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006194:	4b1c      	ldr	r3, [pc, #112]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0f0      	beq.n	8006182 <HAL_RCC_OscConfig+0x49a>
 80061a0:	e018      	b.n	80061d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061a2:	4b19      	ldr	r3, [pc, #100]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 80061a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061ae:	f7fb f9fd 	bl	80015ac <HAL_GetTick>
 80061b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061b6:	f7fb f9f9 	bl	80015ac <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e198      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061c8:	4b0f      	ldr	r3, [pc, #60]	; (8006208 <HAL_RCC_OscConfig+0x520>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f0      	bne.n	80061b6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8085 	beq.w	80062ec <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061e2:	4b0a      	ldr	r3, [pc, #40]	; (800620c <HAL_RCC_OscConfig+0x524>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <HAL_RCC_OscConfig+0x524>)
 80061e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ee:	f7fb f9dd 	bl	80015ac <HAL_GetTick>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f4:	e00c      	b.n	8006210 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061f6:	f7fb f9d9 	bl	80015ac <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b64      	cmp	r3, #100	; 0x64
 8006202:	d905      	bls.n	8006210 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e178      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
 8006208:	58024400 	.word	0x58024400
 800620c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006210:	4b96      	ldr	r3, [pc, #600]	; (800646c <HAL_RCC_OscConfig+0x784>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0ec      	beq.n	80061f6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d106      	bne.n	8006232 <HAL_RCC_OscConfig+0x54a>
 8006224:	4b92      	ldr	r3, [pc, #584]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006228:	4a91      	ldr	r2, [pc, #580]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	6713      	str	r3, [r2, #112]	; 0x70
 8006230:	e02d      	b.n	800628e <HAL_RCC_OscConfig+0x5a6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10c      	bne.n	8006254 <HAL_RCC_OscConfig+0x56c>
 800623a:	4b8d      	ldr	r3, [pc, #564]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	4a8c      	ldr	r2, [pc, #560]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	6713      	str	r3, [r2, #112]	; 0x70
 8006246:	4b8a      	ldr	r3, [pc, #552]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624a:	4a89      	ldr	r2, [pc, #548]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800624c:	f023 0304 	bic.w	r3, r3, #4
 8006250:	6713      	str	r3, [r2, #112]	; 0x70
 8006252:	e01c      	b.n	800628e <HAL_RCC_OscConfig+0x5a6>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b05      	cmp	r3, #5
 800625a:	d10c      	bne.n	8006276 <HAL_RCC_OscConfig+0x58e>
 800625c:	4b84      	ldr	r3, [pc, #528]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	4a83      	ldr	r2, [pc, #524]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006262:	f043 0304 	orr.w	r3, r3, #4
 8006266:	6713      	str	r3, [r2, #112]	; 0x70
 8006268:	4b81      	ldr	r3, [pc, #516]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800626a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626c:	4a80      	ldr	r2, [pc, #512]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	6713      	str	r3, [r2, #112]	; 0x70
 8006274:	e00b      	b.n	800628e <HAL_RCC_OscConfig+0x5a6>
 8006276:	4b7e      	ldr	r3, [pc, #504]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627a:	4a7d      	ldr	r2, [pc, #500]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	6713      	str	r3, [r2, #112]	; 0x70
 8006282:	4b7b      	ldr	r3, [pc, #492]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	4a7a      	ldr	r2, [pc, #488]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006288:	f023 0304 	bic.w	r3, r3, #4
 800628c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d015      	beq.n	80062c2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006296:	f7fb f989 	bl	80015ac <HAL_GetTick>
 800629a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800629c:	e00a      	b.n	80062b4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800629e:	f7fb f985 	bl	80015ac <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e122      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062b4:	4b6e      	ldr	r3, [pc, #440]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0ee      	beq.n	800629e <HAL_RCC_OscConfig+0x5b6>
 80062c0:	e014      	b.n	80062ec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c2:	f7fb f973 	bl	80015ac <HAL_GetTick>
 80062c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062c8:	e00a      	b.n	80062e0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062ca:	f7fb f96f 	bl	80015ac <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d8:	4293      	cmp	r3, r2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e10c      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062e0:	4b63      	ldr	r3, [pc, #396]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80062e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1ee      	bne.n	80062ca <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8101 	beq.w	80064f8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062f6:	4b5e      	ldr	r3, [pc, #376]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062fe:	2b18      	cmp	r3, #24
 8006300:	f000 80bc 	beq.w	800647c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b02      	cmp	r3, #2
 800630a:	f040 8095 	bne.w	8006438 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630e:	4b58      	ldr	r3, [pc, #352]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a57      	ldr	r2, [pc, #348]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631a:	f7fb f947 	bl	80015ac <HAL_GetTick>
 800631e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006322:	f7fb f943 	bl	80015ac <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e0e2      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006334:	4b4e      	ldr	r3, [pc, #312]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f0      	bne.n	8006322 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006340:	4b4b      	ldr	r3, [pc, #300]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006344:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <HAL_RCC_OscConfig+0x78c>)
 8006346:	4013      	ands	r3, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006350:	0112      	lsls	r2, r2, #4
 8006352:	430a      	orrs	r2, r1
 8006354:	4946      	ldr	r1, [pc, #280]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006356:	4313      	orrs	r3, r2
 8006358:	628b      	str	r3, [r1, #40]	; 0x28
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	3b01      	subs	r3, #1
 8006360:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	3b01      	subs	r3, #1
 800636a:	025b      	lsls	r3, r3, #9
 800636c:	b29b      	uxth	r3, r3
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	3b01      	subs	r3, #1
 8006376:	041b      	lsls	r3, r3, #16
 8006378:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	3b01      	subs	r3, #1
 8006384:	061b      	lsls	r3, r3, #24
 8006386:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800638a:	4939      	ldr	r1, [pc, #228]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800638c:	4313      	orrs	r3, r2
 800638e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006390:	4b37      	ldr	r3, [pc, #220]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	4a36      	ldr	r2, [pc, #216]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800639c:	4b34      	ldr	r3, [pc, #208]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800639e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a0:	4b35      	ldr	r3, [pc, #212]	; (8006478 <HAL_RCC_OscConfig+0x790>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063a8:	00d2      	lsls	r2, r2, #3
 80063aa:	4931      	ldr	r1, [pc, #196]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063b0:	4b2f      	ldr	r3, [pc, #188]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	f023 020c 	bic.w	r2, r3, #12
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	492c      	ldr	r1, [pc, #176]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063c2:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c6:	f023 0202 	bic.w	r2, r3, #2
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ce:	4928      	ldr	r1, [pc, #160]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063d4:	4b26      	ldr	r3, [pc, #152]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	4a25      	ldr	r2, [pc, #148]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e0:	4b23      	ldr	r3, [pc, #140]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a22      	ldr	r2, [pc, #136]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063ec:	4b20      	ldr	r3, [pc, #128]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	4a1f      	ldr	r2, [pc, #124]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80063f8:	4b1d      	ldr	r3, [pc, #116]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a1c      	ldr	r2, [pc, #112]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006404:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a19      	ldr	r2, [pc, #100]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800640a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800640e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006410:	f7fb f8cc 	bl	80015ac <HAL_GetTick>
 8006414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006418:	f7fb f8c8 	bl	80015ac <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e067      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0x730>
 8006436:	e05f      	b.n	80064f8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006438:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a0c      	ldr	r2, [pc, #48]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 800643e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fb f8b2 	bl	80015ac <HAL_GetTick>
 8006448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800644c:	f7fb f8ae 	bl	80015ac <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e04d      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800645e:	4b04      	ldr	r3, [pc, #16]	; (8006470 <HAL_RCC_OscConfig+0x788>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1f0      	bne.n	800644c <HAL_RCC_OscConfig+0x764>
 800646a:	e045      	b.n	80064f8 <HAL_RCC_OscConfig+0x810>
 800646c:	58024800 	.word	0x58024800
 8006470:	58024400 	.word	0x58024400
 8006474:	fffffc0c 	.word	0xfffffc0c
 8006478:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800647c:	4b21      	ldr	r3, [pc, #132]	; (8006504 <HAL_RCC_OscConfig+0x81c>)
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006482:	4b20      	ldr	r3, [pc, #128]	; (8006504 <HAL_RCC_OscConfig+0x81c>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	2b01      	cmp	r3, #1
 800648e:	d031      	beq.n	80064f4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f003 0203 	and.w	r2, r3, #3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800649a:	429a      	cmp	r2, r3
 800649c:	d12a      	bne.n	80064f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	091b      	lsrs	r3, r3, #4
 80064a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d122      	bne.n	80064f4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d11a      	bne.n	80064f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	0a5b      	lsrs	r3, r3, #9
 80064c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d111      	bne.n	80064f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	0c1b      	lsrs	r3, r3, #16
 80064d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064de:	429a      	cmp	r2, r3
 80064e0:	d108      	bne.n	80064f4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	0e1b      	lsrs	r3, r3, #24
 80064e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d001      	beq.n	80064f8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3730      	adds	r7, #48	; 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	58024400 	.word	0x58024400

08006508 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e19c      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800651c:	4b8a      	ldr	r3, [pc, #552]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d910      	bls.n	800654c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652a:	4b87      	ldr	r3, [pc, #540]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 020f 	bic.w	r2, r3, #15
 8006532:	4985      	ldr	r1, [pc, #532]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b83      	ldr	r3, [pc, #524]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e184      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d010      	beq.n	800657a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	4b7b      	ldr	r3, [pc, #492]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006564:	429a      	cmp	r2, r3
 8006566:	d908      	bls.n	800657a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006568:	4b78      	ldr	r3, [pc, #480]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	4975      	ldr	r1, [pc, #468]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006576:	4313      	orrs	r3, r2
 8006578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d010      	beq.n	80065a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695a      	ldr	r2, [r3, #20]
 800658a:	4b70      	ldr	r3, [pc, #448]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006592:	429a      	cmp	r2, r3
 8006594:	d908      	bls.n	80065a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006596:	4b6d      	ldr	r3, [pc, #436]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	496a      	ldr	r1, [pc, #424]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d010      	beq.n	80065d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699a      	ldr	r2, [r3, #24]
 80065b8:	4b64      	ldr	r3, [pc, #400]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d908      	bls.n	80065d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065c4:	4b61      	ldr	r3, [pc, #388]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	495e      	ldr	r1, [pc, #376]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d010      	beq.n	8006604 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	4b59      	ldr	r3, [pc, #356]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d908      	bls.n	8006604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065f2:	4b56      	ldr	r3, [pc, #344]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	4953      	ldr	r1, [pc, #332]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006600:	4313      	orrs	r3, r2
 8006602:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d010      	beq.n	8006632 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	4b4d      	ldr	r3, [pc, #308]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	429a      	cmp	r2, r3
 800661e:	d908      	bls.n	8006632 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006620:	4b4a      	ldr	r3, [pc, #296]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f023 020f 	bic.w	r2, r3, #15
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4947      	ldr	r1, [pc, #284]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800662e:	4313      	orrs	r3, r2
 8006630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d055      	beq.n	80066ea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800663e:	4b43      	ldr	r3, [pc, #268]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	4940      	ldr	r1, [pc, #256]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800664c:	4313      	orrs	r3, r2
 800664e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d107      	bne.n	8006668 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006658:	4b3c      	ldr	r3, [pc, #240]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d121      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0f6      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d107      	bne.n	8006680 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006670:	4b36      	ldr	r3, [pc, #216]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d115      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0ea      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d107      	bne.n	8006698 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006688:	4b30      	ldr	r3, [pc, #192]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006690:	2b00      	cmp	r3, #0
 8006692:	d109      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e0de      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006698:	4b2c      	ldr	r3, [pc, #176]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0d6      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066a8:	4b28      	ldr	r3, [pc, #160]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f023 0207 	bic.w	r2, r3, #7
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4925      	ldr	r1, [pc, #148]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ba:	f7fa ff77 	bl	80015ac <HAL_GetTick>
 80066be:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c0:	e00a      	b.n	80066d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c2:	f7fa ff73 	bl	80015ac <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e0be      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066d8:	4b1c      	ldr	r3, [pc, #112]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d1eb      	bne.n	80066c2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d010      	beq.n	8006718 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	4b14      	ldr	r3, [pc, #80]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	429a      	cmp	r2, r3
 8006704:	d208      	bcs.n	8006718 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006706:	4b11      	ldr	r3, [pc, #68]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f023 020f 	bic.w	r2, r3, #15
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	490e      	ldr	r1, [pc, #56]	; (800674c <HAL_RCC_ClockConfig+0x244>)
 8006714:	4313      	orrs	r3, r2
 8006716:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d214      	bcs.n	8006750 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006726:	4b08      	ldr	r3, [pc, #32]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f023 020f 	bic.w	r2, r3, #15
 800672e:	4906      	ldr	r1, [pc, #24]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	4313      	orrs	r3, r2
 8006734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006736:	4b04      	ldr	r3, [pc, #16]	; (8006748 <HAL_RCC_ClockConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e086      	b.n	8006856 <HAL_RCC_ClockConfig+0x34e>
 8006748:	52002000 	.word	0x52002000
 800674c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d010      	beq.n	800677e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006768:	429a      	cmp	r2, r3
 800676a:	d208      	bcs.n	800677e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800676c:	4b3c      	ldr	r3, [pc, #240]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	4939      	ldr	r1, [pc, #228]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 800677a:	4313      	orrs	r3, r2
 800677c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d010      	beq.n	80067ac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	4b34      	ldr	r3, [pc, #208]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006796:	429a      	cmp	r2, r3
 8006798:	d208      	bcs.n	80067ac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800679a:	4b31      	ldr	r3, [pc, #196]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	492e      	ldr	r1, [pc, #184]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d010      	beq.n	80067da <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699a      	ldr	r2, [r3, #24]
 80067bc:	4b28      	ldr	r3, [pc, #160]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d208      	bcs.n	80067da <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067c8:	4b25      	ldr	r3, [pc, #148]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	4922      	ldr	r1, [pc, #136]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d010      	beq.n	8006808 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69da      	ldr	r2, [r3, #28]
 80067ea:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d208      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067f6:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	69db      	ldr	r3, [r3, #28]
 8006802:	4917      	ldr	r1, [pc, #92]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006804:	4313      	orrs	r3, r2
 8006806:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006808:	f000 f834 	bl	8006874 <HAL_RCC_GetSysClockFreq>
 800680c:	4601      	mov	r1, r0
 800680e:	4b14      	ldr	r3, [pc, #80]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	0a1b      	lsrs	r3, r3, #8
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	4a12      	ldr	r2, [pc, #72]	; (8006864 <HAL_RCC_ClockConfig+0x35c>)
 800681a:	5cd3      	ldrb	r3, [r2, r3]
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	fa21 f303 	lsr.w	r3, r1, r3
 8006824:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006826:	4b0e      	ldr	r3, [pc, #56]	; (8006860 <HAL_RCC_ClockConfig+0x358>)
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	4a0d      	ldr	r2, [pc, #52]	; (8006864 <HAL_RCC_ClockConfig+0x35c>)
 8006830:	5cd3      	ldrb	r3, [r2, r3]
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	fa22 f303 	lsr.w	r3, r2, r3
 800683c:	4a0a      	ldr	r2, [pc, #40]	; (8006868 <HAL_RCC_ClockConfig+0x360>)
 800683e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <HAL_RCC_ClockConfig+0x364>)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <HAL_RCC_ClockConfig+0x368>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f7fa fe64 	bl	8001518 <HAL_InitTick>
 8006850:	4603      	mov	r3, r0
 8006852:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	58024400 	.word	0x58024400
 8006864:	0800b958 	.word	0x0800b958
 8006868:	20000004 	.word	0x20000004
 800686c:	20000000 	.word	0x20000000
 8006870:	20000008 	.word	0x20000008

08006874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006874:	b480      	push	{r7}
 8006876:	b089      	sub	sp, #36	; 0x24
 8006878:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800687a:	4baf      	ldr	r3, [pc, #700]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006882:	2b18      	cmp	r3, #24
 8006884:	f200 814e 	bhi.w	8006b24 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006888:	a201      	add	r2, pc, #4	; (adr r2, 8006890 <HAL_RCC_GetSysClockFreq+0x1c>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068f5 	.word	0x080068f5
 8006894:	08006b25 	.word	0x08006b25
 8006898:	08006b25 	.word	0x08006b25
 800689c:	08006b25 	.word	0x08006b25
 80068a0:	08006b25 	.word	0x08006b25
 80068a4:	08006b25 	.word	0x08006b25
 80068a8:	08006b25 	.word	0x08006b25
 80068ac:	08006b25 	.word	0x08006b25
 80068b0:	0800691b 	.word	0x0800691b
 80068b4:	08006b25 	.word	0x08006b25
 80068b8:	08006b25 	.word	0x08006b25
 80068bc:	08006b25 	.word	0x08006b25
 80068c0:	08006b25 	.word	0x08006b25
 80068c4:	08006b25 	.word	0x08006b25
 80068c8:	08006b25 	.word	0x08006b25
 80068cc:	08006b25 	.word	0x08006b25
 80068d0:	08006921 	.word	0x08006921
 80068d4:	08006b25 	.word	0x08006b25
 80068d8:	08006b25 	.word	0x08006b25
 80068dc:	08006b25 	.word	0x08006b25
 80068e0:	08006b25 	.word	0x08006b25
 80068e4:	08006b25 	.word	0x08006b25
 80068e8:	08006b25 	.word	0x08006b25
 80068ec:	08006b25 	.word	0x08006b25
 80068f0:	08006927 	.word	0x08006927
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068f4:	4b90      	ldr	r3, [pc, #576]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006900:	4b8d      	ldr	r3, [pc, #564]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	08db      	lsrs	r3, r3, #3
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	4a8c      	ldr	r2, [pc, #560]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800690c:	fa22 f303 	lsr.w	r3, r2, r3
 8006910:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006912:	e10a      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006914:	4b89      	ldr	r3, [pc, #548]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006916:	61bb      	str	r3, [r7, #24]
    break;
 8006918:	e107      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800691a:	4b89      	ldr	r3, [pc, #548]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800691c:	61bb      	str	r3, [r7, #24]
    break;
 800691e:	e104      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006920:	4b88      	ldr	r3, [pc, #544]	; (8006b44 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006922:	61bb      	str	r3, [r7, #24]
    break;
 8006924:	e101      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006926:	4b84      	ldr	r3, [pc, #528]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006930:	4b81      	ldr	r3, [pc, #516]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	091b      	lsrs	r3, r3, #4
 8006936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800693a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800693c:	4b7e      	ldr	r3, [pc, #504]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006946:	4b7c      	ldr	r3, [pc, #496]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694a:	08db      	lsrs	r3, r3, #3
 800694c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	fb02 f303 	mul.w	r3, r2, r3
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80da 	beq.w	8006b1e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d05a      	beq.n	8006a26 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006970:	2b01      	cmp	r3, #1
 8006972:	d302      	bcc.n	800697a <HAL_RCC_GetSysClockFreq+0x106>
 8006974:	2b02      	cmp	r3, #2
 8006976:	d078      	beq.n	8006a6a <HAL_RCC_GetSysClockFreq+0x1f6>
 8006978:	e099      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800697a:	4b6f      	ldr	r3, [pc, #444]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d02d      	beq.n	80069e2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006986:	4b6c      	ldr	r3, [pc, #432]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	08db      	lsrs	r3, r3, #3
 800698c:	f003 0303 	and.w	r3, r3, #3
 8006990:	4a6a      	ldr	r2, [pc, #424]	; (8006b3c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006992:	fa22 f303 	lsr.w	r3, r2, r3
 8006996:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	ee07 3a90 	vmov	s15, r3
 80069a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b0:	4b61      	ldr	r3, [pc, #388]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80069c4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 80069c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80069e0:	e087      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	ee07 3a90 	vmov	s15, r3
 80069e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ec:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006b4c <HAL_RCC_GetSysClockFreq+0x2d8>
 80069f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f4:	4b50      	ldr	r3, [pc, #320]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fc:	ee07 3a90 	vmov	s15, r3
 8006a00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a04:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a08:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a24:	e065      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a30:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006b50 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006a34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a38:	4b3f      	ldr	r3, [pc, #252]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a48:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a4c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a68:	e043      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	ee07 3a90 	vmov	s15, r3
 8006a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a74:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006b54 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7c:	4b2e      	ldr	r3, [pc, #184]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a84:	ee07 3a90 	vmov	s15, r3
 8006a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a90:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aac:	e021      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006b50 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac8:	ee07 3a90 	vmov	s15, r3
 8006acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad0:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006b48 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006af2:	4b11      	ldr	r3, [pc, #68]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	0a5b      	lsrs	r3, r3, #9
 8006af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006afc:	3301      	adds	r3, #1
 8006afe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b16:	ee17 3a90 	vmov	r3, s15
 8006b1a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b1c:	e005      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61bb      	str	r3, [r7, #24]
    break;
 8006b22:	e002      	b.n	8006b2a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006b26:	61bb      	str	r3, [r7, #24]
    break;
 8006b28:	bf00      	nop
  }

  return sysclockfreq;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3724      	adds	r7, #36	; 0x24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	03d09000 	.word	0x03d09000
 8006b40:	003d0900 	.word	0x003d0900
 8006b44:	007a1200 	.word	0x007a1200
 8006b48:	46000000 	.word	0x46000000
 8006b4c:	4c742400 	.word	0x4c742400
 8006b50:	4a742400 	.word	0x4a742400
 8006b54:	4af42400 	.word	0x4af42400

08006b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b5e:	f7ff fe89 	bl	8006874 <HAL_RCC_GetSysClockFreq>
 8006b62:	4601      	mov	r1, r0
 8006b64:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	0a1b      	lsrs	r3, r3, #8
 8006b6a:	f003 030f 	and.w	r3, r3, #15
 8006b6e:	4a0f      	ldr	r2, [pc, #60]	; (8006bac <HAL_RCC_GetHCLKFreq+0x54>)
 8006b70:	5cd3      	ldrb	r3, [r2, r3]
 8006b72:	f003 031f 	and.w	r3, r3, #31
 8006b76:	fa21 f303 	lsr.w	r3, r1, r3
 8006b7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	4a09      	ldr	r2, [pc, #36]	; (8006bac <HAL_RCC_GetHCLKFreq+0x54>)
 8006b86:	5cd3      	ldrb	r3, [r2, r3]
 8006b88:	f003 031f 	and.w	r3, r3, #31
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b92:	4a07      	ldr	r2, [pc, #28]	; (8006bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b96:	4a07      	ldr	r2, [pc, #28]	; (8006bb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b9c:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	58024400 	.word	0x58024400
 8006bac:	0800b958 	.word	0x0800b958
 8006bb0:	20000004 	.word	0x20000004
 8006bb4:	20000000 	.word	0x20000000

08006bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bbc:	f7ff ffcc 	bl	8006b58 <HAL_RCC_GetHCLKFreq>
 8006bc0:	4601      	mov	r1, r0
 8006bc2:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	091b      	lsrs	r3, r3, #4
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	4a04      	ldr	r2, [pc, #16]	; (8006be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bce:	5cd3      	ldrb	r3, [r2, r3]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	58024400 	.word	0x58024400
 8006be0:	0800b958 	.word	0x0800b958

08006be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006be8:	f7ff ffb6 	bl	8006b58 <HAL_RCC_GetHCLKFreq>
 8006bec:	4601      	mov	r1, r0
 8006bee:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	0a1b      	lsrs	r3, r3, #8
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bfa:	5cd3      	ldrb	r3, [r2, r3]
 8006bfc:	f003 031f 	and.w	r3, r3, #31
 8006c00:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	58024400 	.word	0x58024400
 8006c0c:	0800b958 	.word	0x0800b958

08006c10 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c18:	2300      	movs	r3, #0
 8006c1a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d03d      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c34:	d013      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c3a:	d802      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006c40:	e01f      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006c42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c46:	d013      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006c48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c4c:	d01c      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006c4e:	e018      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c50:	4baf      	ldr	r3, [pc, #700]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	4aae      	ldr	r2, [pc, #696]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c5c:	e015      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3304      	adds	r3, #4
 8006c62:	2102      	movs	r1, #2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 fd33 	bl	80086d0 <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c6e:	e00c      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3324      	adds	r3, #36	; 0x24
 8006c74:	2102      	movs	r1, #2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f001 fddc 	bl	8008834 <RCCEx_PLL3_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	75fb      	strb	r3, [r7, #23]
      break;
 8006c86:	e000      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c90:	4b9f      	ldr	r3, [pc, #636]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c9c:	499c      	ldr	r1, [pc, #624]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	650b      	str	r3, [r1, #80]	; 0x50
 8006ca2:	e001      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d03d      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d826      	bhi.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006cbc:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006cd9 	.word	0x08006cd9
 8006cc8:	08006ce7 	.word	0x08006ce7
 8006ccc:	08006cf9 	.word	0x08006cf9
 8006cd0:	08006d11 	.word	0x08006d11
 8006cd4:	08006d11 	.word	0x08006d11
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cd8:	4b8d      	ldr	r3, [pc, #564]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	4a8c      	ldr	r2, [pc, #560]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ce4:	e015      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	2100      	movs	r1, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 fcef 	bl	80086d0 <RCCEx_PLL2_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cf6:	e00c      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3324      	adds	r3, #36	; 0x24
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f001 fd98 	bl	8008834 <RCCEx_PLL3_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d08:	e003      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d0e:	e000      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006d10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d109      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d18:	4b7d      	ldr	r3, [pc, #500]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	f023 0207 	bic.w	r2, r3, #7
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d24:	497a      	ldr	r1, [pc, #488]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	650b      	str	r3, [r1, #80]	; 0x50
 8006d2a:	e001      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d03e      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d40:	2b80      	cmp	r3, #128	; 0x80
 8006d42:	d01c      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006d44:	2b80      	cmp	r3, #128	; 0x80
 8006d46:	d804      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006d4c:	2b40      	cmp	r3, #64	; 0x40
 8006d4e:	d00d      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006d50:	e01e      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006d52:	2bc0      	cmp	r3, #192	; 0xc0
 8006d54:	d01f      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5a:	d01e      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d5c:	e018      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d5e:	4b6c      	ldr	r3, [pc, #432]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	4a6b      	ldr	r2, [pc, #428]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d6a:	e017      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2100      	movs	r1, #0
 8006d72:	4618      	mov	r0, r3
 8006d74:	f001 fcac 	bl	80086d0 <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d7c:	e00e      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3324      	adds	r3, #36	; 0x24
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 fd55 	bl	8008834 <RCCEx_PLL3_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006d8e:	e005      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
      break;
 8006d94:	e002      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006d96:	bf00      	nop
 8006d98:	e000      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006da2:	4b5b      	ldr	r3, [pc, #364]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	4958      	ldr	r1, [pc, #352]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	650b      	str	r3, [r1, #80]	; 0x50
 8006db4:	e001      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d044      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd0:	d01f      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd6:	d805      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006de0:	d00e      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006de2:	e01f      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006de4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006de8:	d01f      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8006dea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dee:	d01e      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006df0:	e018      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df2:	4b47      	ldr	r3, [pc, #284]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	4a46      	ldr	r2, [pc, #280]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006dfe:	e017      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f001 fc62 	bl	80086d0 <RCCEx_PLL2_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e10:	e00e      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3324      	adds	r3, #36	; 0x24
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 fd0b 	bl	8008834 <RCCEx_PLL3_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e22:	e005      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
      break;
 8006e28:	e002      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006e2a:	bf00      	nop
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e36:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e44:	4932      	ldr	r1, [pc, #200]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	658b      	str	r3, [r1, #88]	; 0x58
 8006e4a:	e001      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4c:	7dfb      	ldrb	r3, [r7, #23]
 8006e4e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d044      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e66:	d01f      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e6c:	d805      	bhi.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006e72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e76:	d00e      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006e78:	e01f      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006e7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e7e:	d01f      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e84:	d01e      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006e86:	e018      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e88:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e94:	e017      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 fc17 	bl	80086d0 <RCCEx_PLL2_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ea6:	e00e      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	2100      	movs	r1, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f001 fcc0 	bl	8008834 <RCCEx_PLL3_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eb8:	e005      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebe:	e002      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006ec0:	bf00      	nop
 8006ec2:	e000      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ecc:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eda:	490d      	ldr	r1, [pc, #52]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	658b      	str	r3, [r1, #88]	; 0x58
 8006ee0:	e001      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee2:	7dfb      	ldrb	r3, [r7, #23]
 8006ee4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d035      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef6:	2b10      	cmp	r3, #16
 8006ef8:	d00c      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8006efa:	2b10      	cmp	r3, #16
 8006efc:	d802      	bhi.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01b      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006f02:	e017      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d00c      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006f08:	2b30      	cmp	r3, #48	; 0x30
 8006f0a:	d018      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006f0c:	e012      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006f0e:	bf00      	nop
 8006f10:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f14:	4baf      	ldr	r3, [pc, #700]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	4aae      	ldr	r2, [pc, #696]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f20:	e00e      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3304      	adds	r3, #4
 8006f26:	2102      	movs	r1, #2
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f001 fbd1 	bl	80086d0 <RCCEx_PLL2_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f32:	e005      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	75fb      	strb	r3, [r7, #23]
      break;
 8006f38:	e002      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006f3a:	bf00      	nop
 8006f3c:	e000      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d109      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f46:	4ba3      	ldr	r3, [pc, #652]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f52:	49a0      	ldr	r1, [pc, #640]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f58:	e001      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d042      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f72:	d01f      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f78:	d805      	bhi.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f82:	d00e      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006f84:	e01f      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006f86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f8a:	d01f      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f90:	d01e      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006f92:	e018      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f94:	4b8f      	ldr	r3, [pc, #572]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	4a8e      	ldr	r2, [pc, #568]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fa0:	e017      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f001 fb91 	bl	80086d0 <RCCEx_PLL2_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fb2:	e00e      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fc3a 	bl	8008834 <RCCEx_PLL3_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fc4:	e005      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fca:	e002      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006fcc:	bf00      	nop
 8006fce:	e000      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006fd8:	4b7e      	ldr	r3, [pc, #504]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe4:	497b      	ldr	r1, [pc, #492]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8006fea:	e001      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d042      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007004:	d01b      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800700a:	d805      	bhi.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800700c:	2b00      	cmp	r3, #0
 800700e:	d022      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007014:	d00a      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007016:	e01b      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007018:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800701c:	d01d      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800701e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007022:	d01c      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007024:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007028:	d01b      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800702a:	e011      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	3304      	adds	r3, #4
 8007030:	2101      	movs	r1, #1
 8007032:	4618      	mov	r0, r3
 8007034:	f001 fb4c 	bl	80086d0 <RCCEx_PLL2_Config>
 8007038:	4603      	mov	r3, r0
 800703a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800703c:	e012      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3324      	adds	r3, #36	; 0x24
 8007042:	2101      	movs	r1, #1
 8007044:	4618      	mov	r0, r3
 8007046:	f001 fbf5 	bl	8008834 <RCCEx_PLL3_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800704e:	e009      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
      break;
 8007054:	e006      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007056:	bf00      	nop
 8007058:	e004      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800705a:	bf00      	nop
 800705c:	e002      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800705e:	bf00      	nop
 8007060:	e000      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d109      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800706a:	4b5a      	ldr	r3, [pc, #360]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800706c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007076:	4957      	ldr	r1, [pc, #348]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007078:	4313      	orrs	r3, r2
 800707a:	650b      	str	r3, [r1, #80]	; 0x50
 800707c:	e001      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d044      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007098:	d01b      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800709a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800709e:	d805      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d022      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80070a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070a8:	d00a      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80070aa:	e01b      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80070ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b0:	d01d      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80070b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070b6:	d01c      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80070b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070bc:	d01b      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80070be:	e011      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3304      	adds	r3, #4
 80070c4:	2101      	movs	r1, #1
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 fb02 	bl	80086d0 <RCCEx_PLL2_Config>
 80070cc:	4603      	mov	r3, r0
 80070ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070d0:	e012      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3324      	adds	r3, #36	; 0x24
 80070d6:	2101      	movs	r1, #1
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fbab 	bl	8008834 <RCCEx_PLL3_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070e2:	e009      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
      break;
 80070e8:	e006      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80070ea:	bf00      	nop
 80070ec:	e004      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80070ee:	bf00      	nop
 80070f0:	e002      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80070f2:	bf00      	nop
 80070f4:	e000      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80070f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070fe:	4b35      	ldr	r3, [pc, #212]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007102:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800710c:	4931      	ldr	r1, [pc, #196]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800710e:	4313      	orrs	r3, r2
 8007110:	658b      	str	r3, [r1, #88]	; 0x58
 8007112:	e001      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d02d      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800712c:	d005      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800712e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007132:	d009      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d013      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007138:	e00f      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713a:	4b26      	ldr	r3, [pc, #152]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	4a25      	ldr	r2, [pc, #148]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007146:	e00c      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3304      	adds	r3, #4
 800714c:	2101      	movs	r1, #1
 800714e:	4618      	mov	r0, r3
 8007150:	f001 fabe 	bl	80086d0 <RCCEx_PLL2_Config>
 8007154:	4603      	mov	r3, r0
 8007156:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007158:	e003      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	75fb      	strb	r3, [r7, #23]
      break;
 800715e:	e000      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d109      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007168:	4b1a      	ldr	r3, [pc, #104]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800716a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007174:	4917      	ldr	r1, [pc, #92]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007176:	4313      	orrs	r3, r2
 8007178:	650b      	str	r3, [r1, #80]	; 0x50
 800717a:	e001      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d035      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	2b03      	cmp	r3, #3
 8007192:	d81b      	bhi.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071d9 	.word	0x080071d9
 80071a0:	080071ad 	.word	0x080071ad
 80071a4:	080071bb 	.word	0x080071bb
 80071a8:	080071d9 	.word	0x080071d9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ac:	4b09      	ldr	r3, [pc, #36]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071b8:	e00f      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	2102      	movs	r1, #2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 fa85 	bl	80086d0 <RCCEx_PLL2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071ca:	e006      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
      break;
 80071d0:	e003      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80071d2:	bf00      	nop
 80071d4:	58024400 	.word	0x58024400
      break;
 80071d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d109      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071e0:	4bba      	ldr	r3, [pc, #744]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80071e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e4:	f023 0203 	bic.w	r2, r3, #3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ec:	49b7      	ldr	r1, [pc, #732]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071f2:	e001      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8086 	beq.w	8007312 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007206:	4bb2      	ldr	r3, [pc, #712]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4ab1      	ldr	r2, [pc, #708]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800720c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007212:	f7fa f9cb 	bl	80015ac <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007218:	e009      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800721a:	f7fa f9c7 	bl	80015ac <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b64      	cmp	r3, #100	; 0x64
 8007226:	d902      	bls.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	75fb      	strb	r3, [r7, #23]
        break;
 800722c:	e005      	b.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800722e:	4ba8      	ldr	r3, [pc, #672]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0ef      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d166      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007240:	4ba2      	ldr	r3, [pc, #648]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800724a:	4053      	eors	r3, r2
 800724c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007250:	2b00      	cmp	r3, #0
 8007252:	d013      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007254:	4b9d      	ldr	r3, [pc, #628]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800725e:	4b9b      	ldr	r3, [pc, #620]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	4a9a      	ldr	r2, [pc, #616]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007268:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800726a:	4b98      	ldr	r3, [pc, #608]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800726c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726e:	4a97      	ldr	r2, [pc, #604]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007274:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007276:	4a95      	ldr	r2, [pc, #596]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007286:	d115      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007288:	f7fa f990 	bl	80015ac <HAL_GetTick>
 800728c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800728e:	e00b      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007290:	f7fa f98c 	bl	80015ac <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	f241 3288 	movw	r2, #5000	; 0x1388
 800729e:	4293      	cmp	r3, r2
 80072a0:	d902      	bls.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	75fb      	strb	r3, [r7, #23]
            break;
 80072a6:	e005      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072a8:	4b88      	ldr	r3, [pc, #544]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d0ed      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d126      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072c8:	d10d      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80072ca:	4b80      	ldr	r3, [pc, #512]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072d8:	0919      	lsrs	r1, r3, #4
 80072da:	4b7e      	ldr	r3, [pc, #504]	; (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80072dc:	400b      	ands	r3, r1
 80072de:	497b      	ldr	r1, [pc, #492]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	610b      	str	r3, [r1, #16]
 80072e4:	e005      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80072e6:	4b79      	ldr	r3, [pc, #484]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	4a78      	ldr	r2, [pc, #480]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80072f0:	6113      	str	r3, [r2, #16]
 80072f2:	4b76      	ldr	r3, [pc, #472]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80072f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007300:	4972      	ldr	r1, [pc, #456]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007302:	4313      	orrs	r3, r2
 8007304:	670b      	str	r3, [r1, #112]	; 0x70
 8007306:	e004      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	75bb      	strb	r3, [r7, #22]
 800730c:	e001      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d07d      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007322:	2b28      	cmp	r3, #40	; 0x28
 8007324:	d866      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007326:	a201      	add	r2, pc, #4	; (adr r2, 800732c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	080073fb 	.word	0x080073fb
 8007330:	080073f5 	.word	0x080073f5
 8007334:	080073f5 	.word	0x080073f5
 8007338:	080073f5 	.word	0x080073f5
 800733c:	080073f5 	.word	0x080073f5
 8007340:	080073f5 	.word	0x080073f5
 8007344:	080073f5 	.word	0x080073f5
 8007348:	080073f5 	.word	0x080073f5
 800734c:	080073d1 	.word	0x080073d1
 8007350:	080073f5 	.word	0x080073f5
 8007354:	080073f5 	.word	0x080073f5
 8007358:	080073f5 	.word	0x080073f5
 800735c:	080073f5 	.word	0x080073f5
 8007360:	080073f5 	.word	0x080073f5
 8007364:	080073f5 	.word	0x080073f5
 8007368:	080073f5 	.word	0x080073f5
 800736c:	080073e3 	.word	0x080073e3
 8007370:	080073f5 	.word	0x080073f5
 8007374:	080073f5 	.word	0x080073f5
 8007378:	080073f5 	.word	0x080073f5
 800737c:	080073f5 	.word	0x080073f5
 8007380:	080073f5 	.word	0x080073f5
 8007384:	080073f5 	.word	0x080073f5
 8007388:	080073f5 	.word	0x080073f5
 800738c:	080073fb 	.word	0x080073fb
 8007390:	080073f5 	.word	0x080073f5
 8007394:	080073f5 	.word	0x080073f5
 8007398:	080073f5 	.word	0x080073f5
 800739c:	080073f5 	.word	0x080073f5
 80073a0:	080073f5 	.word	0x080073f5
 80073a4:	080073f5 	.word	0x080073f5
 80073a8:	080073f5 	.word	0x080073f5
 80073ac:	080073fb 	.word	0x080073fb
 80073b0:	080073f5 	.word	0x080073f5
 80073b4:	080073f5 	.word	0x080073f5
 80073b8:	080073f5 	.word	0x080073f5
 80073bc:	080073f5 	.word	0x080073f5
 80073c0:	080073f5 	.word	0x080073f5
 80073c4:	080073f5 	.word	0x080073f5
 80073c8:	080073f5 	.word	0x080073f5
 80073cc:	080073fb 	.word	0x080073fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	2101      	movs	r1, #1
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 f97a 	bl	80086d0 <RCCEx_PLL2_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073e0:	e00c      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3324      	adds	r3, #36	; 0x24
 80073e6:	2101      	movs	r1, #1
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fa23 	bl	8008834 <RCCEx_PLL3_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	75fb      	strb	r3, [r7, #23]
      break;
 80073f8:	e000      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80073fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007402:	4b32      	ldr	r3, [pc, #200]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800740e:	492f      	ldr	r1, [pc, #188]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007410:	4313      	orrs	r3, r2
 8007412:	654b      	str	r3, [r1, #84]	; 0x54
 8007414:	e001      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d037      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800742a:	2b05      	cmp	r3, #5
 800742c:	d820      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	08007477 	.word	0x08007477
 8007438:	0800744d 	.word	0x0800744d
 800743c:	0800745f 	.word	0x0800745f
 8007440:	08007477 	.word	0x08007477
 8007444:	08007477 	.word	0x08007477
 8007448:	08007477 	.word	0x08007477
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	2101      	movs	r1, #1
 8007452:	4618      	mov	r0, r3
 8007454:	f001 f93c 	bl	80086d0 <RCCEx_PLL2_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800745c:	e00c      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3324      	adds	r3, #36	; 0x24
 8007462:	2101      	movs	r1, #1
 8007464:	4618      	mov	r0, r3
 8007466:	f001 f9e5 	bl	8008834 <RCCEx_PLL3_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800746e:	e003      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
      break;
 8007474:	e000      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8007476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007478:	7dfb      	ldrb	r3, [r7, #23]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800747e:	4b13      	ldr	r3, [pc, #76]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007482:	f023 0207 	bic.w	r2, r3, #7
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800748a:	4910      	ldr	r1, [pc, #64]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800748c:	4313      	orrs	r3, r2
 800748e:	654b      	str	r3, [r1, #84]	; 0x54
 8007490:	e001      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d040      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	d827      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80074ac:	a201      	add	r2, pc, #4	; (adr r2, 80074b4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80074ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b2:	bf00      	nop
 80074b4:	08007503 	.word	0x08007503
 80074b8:	080074d9 	.word	0x080074d9
 80074bc:	080074eb 	.word	0x080074eb
 80074c0:	08007503 	.word	0x08007503
 80074c4:	08007503 	.word	0x08007503
 80074c8:	08007503 	.word	0x08007503
 80074cc:	58024400 	.word	0x58024400
 80074d0:	58024800 	.word	0x58024800
 80074d4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	2101      	movs	r1, #1
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 f8f6 	bl	80086d0 <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074e8:	e00c      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3324      	adds	r3, #36	; 0x24
 80074ee:	2101      	movs	r1, #1
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 f99f 	bl	8008834 <RCCEx_PLL3_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074fa:	e003      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007500:	e000      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800750a:	4bb2      	ldr	r3, [pc, #712]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800750c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750e:	f023 0207 	bic.w	r2, r3, #7
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007518:	49ae      	ldr	r1, [pc, #696]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800751a:	4313      	orrs	r3, r2
 800751c:	658b      	str	r3, [r1, #88]	; 0x58
 800751e:	e001      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d044      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800753a:	d01b      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800753c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007540:	d805      	bhi.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8007542:	2b00      	cmp	r3, #0
 8007544:	d022      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800754a:	d00a      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800754c:	e01b      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007552:	d01d      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007558:	d01c      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800755a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800755e:	d01b      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007560:	e011      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3304      	adds	r3, #4
 8007566:	2100      	movs	r1, #0
 8007568:	4618      	mov	r0, r3
 800756a:	f001 f8b1 	bl	80086d0 <RCCEx_PLL2_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007572:	e012      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3324      	adds	r3, #36	; 0x24
 8007578:	2102      	movs	r1, #2
 800757a:	4618      	mov	r0, r3
 800757c:	f001 f95a 	bl	8008834 <RCCEx_PLL3_Config>
 8007580:	4603      	mov	r3, r0
 8007582:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007584:	e009      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	75fb      	strb	r3, [r7, #23]
      break;
 800758a:	e006      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800758c:	bf00      	nop
 800758e:	e004      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007590:	bf00      	nop
 8007592:	e002      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007594:	bf00      	nop
 8007596:	e000      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10a      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075a0:	4b8c      	ldr	r3, [pc, #560]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ae:	4989      	ldr	r1, [pc, #548]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	654b      	str	r3, [r1, #84]	; 0x54
 80075b4:	e001      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d044      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d0:	d01b      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80075d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d6:	d805      	bhi.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d022      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80075dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e0:	d00a      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80075e2:	e01b      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80075e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e8:	d01d      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80075ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075ee:	d01c      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80075f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f4:	d01b      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80075f6:	e011      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3304      	adds	r3, #4
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 f866 	bl	80086d0 <RCCEx_PLL2_Config>
 8007604:	4603      	mov	r3, r0
 8007606:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007608:	e012      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3324      	adds	r3, #36	; 0x24
 800760e:	2102      	movs	r1, #2
 8007610:	4618      	mov	r0, r3
 8007612:	f001 f90f 	bl	8008834 <RCCEx_PLL3_Config>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800761a:	e009      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	75fb      	strb	r3, [r7, #23]
      break;
 8007620:	e006      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007622:	bf00      	nop
 8007624:	e004      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007626:	bf00      	nop
 8007628:	e002      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800762e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007630:	7dfb      	ldrb	r3, [r7, #23]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007636:	4b67      	ldr	r3, [pc, #412]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007644:	4963      	ldr	r1, [pc, #396]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007646:	4313      	orrs	r3, r2
 8007648:	658b      	str	r3, [r1, #88]	; 0x58
 800764a:	e001      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007658:	2b00      	cmp	r3, #0
 800765a:	d044      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007666:	d01b      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800766c:	d805      	bhi.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d022      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007676:	d00a      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007678:	e01b      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800767a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800767e:	d01d      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007680:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007684:	d01c      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007686:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800768a:	d01b      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800768c:	e011      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3304      	adds	r3, #4
 8007692:	2100      	movs	r1, #0
 8007694:	4618      	mov	r0, r3
 8007696:	f001 f81b 	bl	80086d0 <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800769e:	e012      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3324      	adds	r3, #36	; 0x24
 80076a4:	2102      	movs	r1, #2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 f8c4 	bl	8008834 <RCCEx_PLL3_Config>
 80076ac:	4603      	mov	r3, r0
 80076ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076b0:	e009      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	75fb      	strb	r3, [r7, #23]
      break;
 80076b6:	e006      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80076b8:	bf00      	nop
 80076ba:	e004      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80076bc:	bf00      	nop
 80076be:	e002      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80076c0:	bf00      	nop
 80076c2:	e000      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80076c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10a      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076cc:	4b41      	ldr	r3, [pc, #260]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076da:	493e      	ldr	r1, [pc, #248]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	658b      	str	r3, [r1, #88]	; 0x58
 80076e0:	e001      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0308 	and.w	r3, r3, #8
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01a      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fc:	d10a      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3324      	adds	r3, #36	; 0x24
 8007702:	2102      	movs	r1, #2
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f895 	bl	8008834 <RCCEx_PLL3_Config>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007714:	4b2f      	ldr	r3, [pc, #188]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007722:	492c      	ldr	r1, [pc, #176]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007724:	4313      	orrs	r3, r2
 8007726:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0310 	and.w	r3, r3, #16
 8007730:	2b00      	cmp	r3, #0
 8007732:	d01a      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800773a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773e:	d10a      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3324      	adds	r3, #36	; 0x24
 8007744:	2102      	movs	r1, #2
 8007746:	4618      	mov	r0, r3
 8007748:	f001 f874 	bl	8008834 <RCCEx_PLL3_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007756:	4b1f      	ldr	r3, [pc, #124]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007764:	491b      	ldr	r1, [pc, #108]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007766:	4313      	orrs	r3, r2
 8007768:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d032      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800777c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007780:	d00d      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007786:	d016      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d111      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3304      	adds	r3, #4
 8007790:	2100      	movs	r1, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f000 ff9c 	bl	80086d0 <RCCEx_PLL2_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800779c:	e00c      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3324      	adds	r3, #36	; 0x24
 80077a2:	2102      	movs	r1, #2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 f845 	bl	8008834 <RCCEx_PLL3_Config>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077ae:	e003      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	75fb      	strb	r3, [r7, #23]
      break;
 80077b4:	e000      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80077b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10c      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80077cc:	4901      	ldr	r1, [pc, #4]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	658b      	str	r3, [r1, #88]	; 0x58
 80077d2:	e003      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80077d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d02f      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077f2:	d00c      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80077f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077f8:	d015      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80077fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077fe:	d10f      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007800:	4b79      	ldr	r3, [pc, #484]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007804:	4a78      	ldr	r2, [pc, #480]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800780a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800780c:	e00c      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3324      	adds	r3, #36	; 0x24
 8007812:	2101      	movs	r1, #1
 8007814:	4618      	mov	r0, r3
 8007816:	f001 f80d 	bl	8008834 <RCCEx_PLL3_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800781e:	e003      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	75fb      	strb	r3, [r7, #23]
      break;
 8007824:	e000      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007826:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007828:	7dfb      	ldrb	r3, [r7, #23]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10a      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800782e:	4b6e      	ldr	r3, [pc, #440]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783c:	496a      	ldr	r1, [pc, #424]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800783e:	4313      	orrs	r3, r2
 8007840:	654b      	str	r3, [r1, #84]	; 0x54
 8007842:	e001      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d029      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800785c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007860:	d007      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007862:	e00f      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007864:	4b60      	ldr	r3, [pc, #384]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	4a5f      	ldr	r2, [pc, #380]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800786a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800786e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007870:	e00b      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3304      	adds	r3, #4
 8007876:	2102      	movs	r1, #2
 8007878:	4618      	mov	r0, r3
 800787a:	f000 ff29 	bl	80086d0 <RCCEx_PLL2_Config>
 800787e:	4603      	mov	r3, r0
 8007880:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007882:	e002      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	75fb      	strb	r3, [r7, #23]
      break;
 8007888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007890:	4b55      	ldr	r3, [pc, #340]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007894:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789c:	4952      	ldr	r1, [pc, #328]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078a2:	e001      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00a      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3324      	adds	r3, #36	; 0x24
 80078b8:	2102      	movs	r1, #2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 ffba 	bl	8008834 <RCCEx_PLL3_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d02f      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078de:	d00c      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80078e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e4:	d802      	bhi.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d011      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80078ea:	e00d      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f0:	d00f      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80078f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f6:	d00e      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80078f8:	e006      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078fa:	4b3b      	ldr	r3, [pc, #236]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fe:	4a3a      	ldr	r2, [pc, #232]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007904:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007906:	e007      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	75fb      	strb	r3, [r7, #23]
      break;
 800790c:	e004      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800790e:	bf00      	nop
 8007910:	e002      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007912:	bf00      	nop
 8007914:	e000      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d109      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800791e:	4b32      	ldr	r3, [pc, #200]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800792a:	492f      	ldr	r1, [pc, #188]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800792c:	4313      	orrs	r3, r2
 800792e:	654b      	str	r3, [r1, #84]	; 0x54
 8007930:	e001      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d008      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007942:	4b29      	ldr	r3, [pc, #164]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007946:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	4926      	ldr	r1, [pc, #152]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007950:	4313      	orrs	r3, r2
 8007952:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007960:	4b21      	ldr	r3, [pc, #132]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800796e:	491e      	ldr	r1, [pc, #120]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007970:	4313      	orrs	r3, r2
 8007972:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007980:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007984:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800798c:	4916      	ldr	r1, [pc, #88]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800798e:	4313      	orrs	r3, r2
 8007990:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00d      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800799e:	4b12      	ldr	r3, [pc, #72]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	4a11      	ldr	r2, [pc, #68]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079a8:	6113      	str	r3, [r2, #16]
 80079aa:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079ac:	691a      	ldr	r2, [r3, #16]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80079b4:	490c      	ldr	r1, [pc, #48]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da08      	bge.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ce:	4906      	ldr	r1, [pc, #24]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80079d4:	7dbb      	ldrb	r3, [r7, #22]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	e000      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	58024400 	.word	0x58024400

080079ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b090      	sub	sp, #64	; 0x40
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fa:	d150      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80079fc:	4ba1      	ldr	r3, [pc, #644]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80079fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d844      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007a0c:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a29 	.word	0x08007a29
 8007a18:	08007a39 	.word	0x08007a39
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	08007a91 	.word	0x08007a91
 8007a24:	08007a59 	.word	0x08007a59
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fd03 	bl	8008438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a36:	e241      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a38:	f107 0318 	add.w	r3, r7, #24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fa63 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a46:	e239      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a48:	f107 030c 	add.w	r3, r7, #12
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fba7 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a56:	e231      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007a58:	4b8a      	ldr	r3, [pc, #552]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007a68:	4b87      	ldr	r3, [pc, #540]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007a6c:	e226      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a74:	d102      	bne.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007a76:	4b85      	ldr	r3, [pc, #532]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a7a:	e21f      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a82:	d102      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007a84:	4b82      	ldr	r3, [pc, #520]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a88:	e218      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a8e:	e215      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a90:	4b80      	ldr	r3, [pc, #512]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a94:	e212      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a9a:	bf00      	nop
 8007a9c:	e20e      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa4:	d14f      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007aa6:	4b77      	ldr	r3, [pc, #476]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aaa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007aae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	2b80      	cmp	r3, #128	; 0x80
 8007ab4:	d01c      	beq.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007ab6:	2b80      	cmp	r3, #128	; 0x80
 8007ab8:	d804      	bhi.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d008      	beq.n	8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007abe:	2b40      	cmp	r3, #64	; 0x40
 8007ac0:	d00e      	beq.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007ac2:	e03c      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007ac4:	2bc0      	cmp	r3, #192	; 0xc0
 8007ac6:	d037      	beq.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007acc:	d018      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007ace:	e036      	b.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fcaf 	bl	8008438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ade:	e1ed      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae0:	f107 0318 	add.w	r3, r7, #24
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 fa0f 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007aee:	e1e5      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af0:	f107 030c 	add.w	r3, r7, #12
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fb53 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007afe:	e1dd      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007b00:	4b60      	ldr	r3, [pc, #384]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007b10:	4b5d      	ldr	r3, [pc, #372]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007b14:	e1d2      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b1c:	d102      	bne.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007b1e:	4b5b      	ldr	r3, [pc, #364]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b22:	e1cb      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b2a:	d102      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007b2c:	4b58      	ldr	r3, [pc, #352]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b30:	e1c4      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b36:	e1c1      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b38:	4b56      	ldr	r3, [pc, #344]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b3c:	e1be      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b42:	bf00      	nop
 8007b44:	e1ba      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b4c:	d153      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007b4e:	4b4d      	ldr	r3, [pc, #308]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b52:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007b56:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b5e:	d01f      	beq.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b64:	d805      	bhi.n	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b6e:	d00f      	beq.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007b70:	e03d      	b.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007b72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b76:	d037      	beq.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b7c:	d018      	beq.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007b7e:	e036      	b.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 fc57 	bl	8008438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b8e:	e195      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b90:	f107 0318 	add.w	r3, r7, #24
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f9b7 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b9e:	e18d      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ba0:	f107 030c 	add.w	r3, r7, #12
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f000 fafb 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bae:	e185      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007bb0:	4b34      	ldr	r3, [pc, #208]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bb8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007bc0:	4b31      	ldr	r3, [pc, #196]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007bc4:	e17a      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bcc:	d102      	bne.n	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007bce:	4b2f      	ldr	r3, [pc, #188]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bd2:	e173      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bda:	d102      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007bdc:	4b2c      	ldr	r3, [pc, #176]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be0:	e16c      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be6:	e169      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007be8:	4b2a      	ldr	r3, [pc, #168]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bec:	e166      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bf2:	bf00      	nop
 8007bf4:	e162      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bfc:	d15d      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007bfe:	4b21      	ldr	r3, [pc, #132]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c02:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007c06:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c0e:	d01f      	beq.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007c10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c14:	d805      	bhi.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007c1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c1e:	d00f      	beq.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007c20:	e047      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007c22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c26:	d041      	beq.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c2c:	d018      	beq.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007c2e:	e040      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fbff 	bl	8008438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c3e:	e13d      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c40:	f107 0318 	add.w	r3, r7, #24
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 f95f 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c4e:	e135      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c50:	f107 030c 	add.w	r3, r7, #12
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 faa3 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c5e:	e12d      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c60:	4b08      	ldr	r3, [pc, #32]	; (8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d102      	bne.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007c74:	e122      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c7c:	d10c      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007c7e:	4b03      	ldr	r3, [pc, #12]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c82:	e11b      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007c84:	58024400 	.word	0x58024400
 8007c88:	03d09000 	.word	0x03d09000
 8007c8c:	003d0900 	.word	0x003d0900
 8007c90:	007a1200 	.word	0x007a1200
 8007c94:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9e:	d102      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007ca0:	4b89      	ldr	r3, [pc, #548]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ca4:	e10a      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007caa:	e107      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cac:	4b87      	ldr	r3, [pc, #540]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb0:	e104      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cb6:	bf00      	nop
 8007cb8:	e100      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc0:	d153      	bne.n	8007d6a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007cc2:	4b83      	ldr	r3, [pc, #524]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007cca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd2:	d01f      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd8:	d805      	bhi.n	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00a      	beq.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce2:	d00f      	beq.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007ce4:	e03d      	b.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007ce6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cea:	d037      	beq.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8007cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf0:	d018      	beq.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007cf2:	e036      	b.n	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fb9d 	bl	8008438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d02:	e0db      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d04:	f107 0318 	add.w	r3, r7, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 f8fd 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d12:	e0d3      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d14:	f107 030c 	add.w	r3, r7, #12
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fa41 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d22:	e0cb      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d24:	4b6a      	ldr	r3, [pc, #424]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d102      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007d34:	4b67      	ldr	r3, [pc, #412]	; (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007d38:	e0c0      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d40:	d102      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007d42:	4b65      	ldr	r3, [pc, #404]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d46:	e0b9      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d4e:	d102      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007d50:	4b5d      	ldr	r3, [pc, #372]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d54:	e0b2      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d5a:	e0af      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d5c:	4b5b      	ldr	r3, [pc, #364]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d60:	e0ac      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d66:	bf00      	nop
 8007d68:	e0a8      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d70:	d13d      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007d72:	4b57      	ldr	r3, [pc, #348]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d7a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d82:	d00c      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d88:	d011      	beq.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d12b      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d8e:	f107 0318 	add.w	r3, r7, #24
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 f8b8 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d9c:	e08e      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d9e:	f107 030c 	add.w	r3, r7, #12
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 f9fc 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dac:	e086      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dae:	4b48      	ldr	r3, [pc, #288]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007db6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007dbe:	4b45      	ldr	r3, [pc, #276]	; (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007dc2:	e07b      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dca:	d102      	bne.n	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007dcc:	4b42      	ldr	r3, [pc, #264]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dd0:	e074      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dd8:	d102      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007dda:	4b3b      	ldr	r3, [pc, #236]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dde:	e06d      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007de4:	e06a      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dea:	bf00      	nop
 8007dec:	e066      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df4:	d11f      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007df6:	4b36      	ldr	r3, [pc, #216]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dfe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0a:	d008      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8007e0c:	e00f      	b.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fb10 	bl	8008438 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e1c:	e04e      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e1e:	f107 0318 	add.w	r3, r7, #24
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f870 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2c:	e046      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e32:	bf00      	nop
 8007e34:	e042      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e3c:	d13c      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007e3e:	4b24      	ldr	r3, [pc, #144]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e42:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007e46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e4e:	d01e      	beq.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e54:	d805      	bhi.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00d      	beq.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e5e:	d00e      	beq.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007e60:	e026      	b.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e66:	d01d      	beq.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e6c:	d01d      	beq.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007e6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e72:	d014      	beq.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007e74:	e01c      	b.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007e76:	f000 f831 	bl	8007edc <HAL_RCCEx_GetD3PCLK1Freq>
 8007e7a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007e7c:	e01e      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e7e:	f107 0318 	add.w	r3, r7, #24
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 f840 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e8c:	e016      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e8e:	f107 030c 	add.w	r3, r7, #12
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f984 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e9c:	e00e      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea2:	e00b      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007ea4:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea8:	e008      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007eaa:	4b07      	ldr	r3, [pc, #28]	; (8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eae:	e005      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb4:	bf00      	nop
 8007eb6:	e001      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3740      	adds	r7, #64	; 0x40
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	007a1200 	.word	0x007a1200
 8007ecc:	00bb8000 	.word	0x00bb8000
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	03d09000 	.word	0x03d09000
 8007ed8:	003d0900 	.word	0x003d0900

08007edc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ee0:	f7fe fe3a 	bl	8006b58 <HAL_RCC_GetHCLKFreq>
 8007ee4:	4601      	mov	r1, r0
 8007ee6:	4b06      	ldr	r3, [pc, #24]	; (8007f00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	091b      	lsrs	r3, r3, #4
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	4a04      	ldr	r2, [pc, #16]	; (8007f04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007ef2:	5cd3      	ldrb	r3, [r2, r3]
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	58024400 	.word	0x58024400
 8007f04:	0800b958 	.word	0x0800b958

08007f08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b089      	sub	sp, #36	; 0x24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f10:	4b9d      	ldr	r3, [pc, #628]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	f003 0303 	and.w	r3, r3, #3
 8007f18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007f1a:	4b9b      	ldr	r3, [pc, #620]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1e:	0b1b      	lsrs	r3, r3, #12
 8007f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f26:	4b98      	ldr	r3, [pc, #608]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	091b      	lsrs	r3, r3, #4
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007f32:	4b95      	ldr	r3, [pc, #596]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f36:	08db      	lsrs	r3, r3, #3
 8007f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	fb02 f303 	mul.w	r3, r2, r3
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 810a 	beq.w	800816a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d05a      	beq.n	8008012 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d302      	bcc.n	8007f66 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d078      	beq.n	8008056 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007f64:	e099      	b.n	800809a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f66:	4b88      	ldr	r3, [pc, #544]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0320 	and.w	r3, r3, #32
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d02d      	beq.n	8007fce <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f72:	4b85      	ldr	r3, [pc, #532]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	08db      	lsrs	r3, r3, #3
 8007f78:	f003 0303 	and.w	r3, r3, #3
 8007f7c:	4a83      	ldr	r2, [pc, #524]	; (800818c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f82:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	ee07 3a90 	vmov	s15, r3
 8007f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9c:	4b7a      	ldr	r3, [pc, #488]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa4:	ee07 3a90 	vmov	s15, r3
 8007fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fb0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007fb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fcc:	e087      	b.n	80080de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	ee07 3a90 	vmov	s15, r3
 8007fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008194 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007fdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fe0:	4b69      	ldr	r3, [pc, #420]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe8:	ee07 3a90 	vmov	s15, r3
 8007fec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ff0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008000:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008010:	e065      	b.n	80080de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	ee07 3a90 	vmov	s15, r3
 8008018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008024:	4b58      	ldr	r3, [pc, #352]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802c:	ee07 3a90 	vmov	s15, r3
 8008030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008034:	ed97 6a03 	vldr	s12, [r7, #12]
 8008038:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800803c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008050:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008054:	e043      	b.n	80080de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	ee07 3a90 	vmov	s15, r3
 800805c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008060:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800819c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008068:	4b47      	ldr	r3, [pc, #284]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008070:	ee07 3a90 	vmov	s15, r3
 8008074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008078:	ed97 6a03 	vldr	s12, [r7, #12]
 800807c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008094:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008098:	e021      	b.n	80080de <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	ee07 3a90 	vmov	s15, r3
 80080a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80080a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ac:	4b36      	ldr	r3, [pc, #216]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b4:	ee07 3a90 	vmov	s15, r3
 80080b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80080c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008190 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80080c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080dc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80080de:	4b2a      	ldr	r3, [pc, #168]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	0a5b      	lsrs	r3, r3, #9
 80080e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e8:	ee07 3a90 	vmov	s15, r3
 80080ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80080fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008104:	ee17 2a90 	vmov	r2, s15
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800810c:	4b1e      	ldr	r3, [pc, #120]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800810e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008110:	0c1b      	lsrs	r3, r3, #16
 8008112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008122:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008126:	edd7 6a07 	vldr	s13, [r7, #28]
 800812a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008132:	ee17 2a90 	vmov	r2, s15
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800813a:	4b13      	ldr	r3, [pc, #76]	; (8008188 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	0e1b      	lsrs	r3, r3, #24
 8008140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008144:	ee07 3a90 	vmov	s15, r3
 8008148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008150:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008154:	edd7 6a07 	vldr	s13, [r7, #28]
 8008158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008160:	ee17 2a90 	vmov	r2, s15
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008168:	e008      	b.n	800817c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	609a      	str	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	3724      	adds	r7, #36	; 0x24
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	58024400 	.word	0x58024400
 800818c:	03d09000 	.word	0x03d09000
 8008190:	46000000 	.word	0x46000000
 8008194:	4c742400 	.word	0x4c742400
 8008198:	4a742400 	.word	0x4a742400
 800819c:	4af42400 	.word	0x4af42400

080081a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b089      	sub	sp, #36	; 0x24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081a8:	4b9d      	ldr	r3, [pc, #628]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	f003 0303 	and.w	r3, r3, #3
 80081b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80081b2:	4b9b      	ldr	r3, [pc, #620]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b6:	0d1b      	lsrs	r3, r3, #20
 80081b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081be:	4b98      	ldr	r3, [pc, #608]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	0a1b      	lsrs	r3, r3, #8
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80081ca:	4b95      	ldr	r3, [pc, #596]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80081cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ce:	08db      	lsrs	r3, r3, #3
 80081d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	fb02 f303 	mul.w	r3, r2, r3
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 810a 	beq.w	8008402 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d05a      	beq.n	80082aa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d302      	bcc.n	80081fe <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d078      	beq.n	80082ee <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80081fc:	e099      	b.n	8008332 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081fe:	4b88      	ldr	r3, [pc, #544]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	2b00      	cmp	r3, #0
 8008208:	d02d      	beq.n	8008266 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800820a:	4b85      	ldr	r3, [pc, #532]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	08db      	lsrs	r3, r3, #3
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	4a83      	ldr	r2, [pc, #524]	; (8008424 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008216:	fa22 f303 	lsr.w	r3, r2, r3
 800821a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	ee07 3a90 	vmov	s15, r3
 800822c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008234:	4b7a      	ldr	r3, [pc, #488]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823c:	ee07 3a90 	vmov	s15, r3
 8008240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008244:	ed97 6a03 	vldr	s12, [r7, #12]
 8008248:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800824c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008254:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008258:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800825c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008260:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008264:	e087      	b.n	8008376 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	ee07 3a90 	vmov	s15, r3
 800826c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008270:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800842c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008278:	4b69      	ldr	r3, [pc, #420]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008280:	ee07 3a90 	vmov	s15, r3
 8008284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008288:	ed97 6a03 	vldr	s12, [r7, #12]
 800828c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800829c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082a8:	e065      	b.n	8008376 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	ee07 3a90 	vmov	s15, r3
 80082b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008430 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80082b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082bc:	4b58      	ldr	r3, [pc, #352]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80082be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c4:	ee07 3a90 	vmov	s15, r3
 80082c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80082d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80082d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ec:	e043      	b.n	8008376 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	ee07 3a90 	vmov	s15, r3
 80082f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008434 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80082fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008300:	4b47      	ldr	r3, [pc, #284]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008308:	ee07 3a90 	vmov	s15, r3
 800830c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008310:	ed97 6a03 	vldr	s12, [r7, #12]
 8008314:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008330:	e021      	b.n	8008376 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008430 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008344:	4b36      	ldr	r3, [pc, #216]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834c:	ee07 3a90 	vmov	s15, r3
 8008350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008354:	ed97 6a03 	vldr	s12, [r7, #12]
 8008358:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008428 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800835c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008370:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008374:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008376:	4b2a      	ldr	r3, [pc, #168]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	0a5b      	lsrs	r3, r3, #9
 800837c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008380:	ee07 3a90 	vmov	s15, r3
 8008384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800838c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008390:	edd7 6a07 	vldr	s13, [r7, #28]
 8008394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800839c:	ee17 2a90 	vmov	r2, s15
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80083a4:	4b1e      	ldr	r3, [pc, #120]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a8:	0c1b      	lsrs	r3, r3, #16
 80083aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083be:	edd7 6a07 	vldr	s13, [r7, #28]
 80083c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ca:	ee17 2a90 	vmov	r2, s15
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80083d2:	4b13      	ldr	r3, [pc, #76]	; (8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80083d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d6:	0e1b      	lsrs	r3, r3, #24
 80083d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083f8:	ee17 2a90 	vmov	r2, s15
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008400:	e008      	b.n	8008414 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	609a      	str	r2, [r3, #8]
}
 8008414:	bf00      	nop
 8008416:	3724      	adds	r7, #36	; 0x24
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	58024400 	.word	0x58024400
 8008424:	03d09000 	.word	0x03d09000
 8008428:	46000000 	.word	0x46000000
 800842c:	4c742400 	.word	0x4c742400
 8008430:	4a742400 	.word	0x4a742400
 8008434:	4af42400 	.word	0x4af42400

08008438 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008438:	b480      	push	{r7}
 800843a:	b089      	sub	sp, #36	; 0x24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008440:	4b9d      	ldr	r3, [pc, #628]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800844a:	4b9b      	ldr	r3, [pc, #620]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844e:	091b      	lsrs	r3, r3, #4
 8008450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008454:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008456:	4b98      	ldr	r3, [pc, #608]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008460:	4b95      	ldr	r3, [pc, #596]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008464:	08db      	lsrs	r3, r3, #3
 8008466:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	fb02 f303 	mul.w	r3, r2, r3
 8008470:	ee07 3a90 	vmov	s15, r3
 8008474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008478:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 810a 	beq.w	8008698 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d05a      	beq.n	8008540 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800848a:	2b01      	cmp	r3, #1
 800848c:	d302      	bcc.n	8008494 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800848e:	2b02      	cmp	r3, #2
 8008490:	d078      	beq.n	8008584 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008492:	e099      	b.n	80085c8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008494:	4b88      	ldr	r3, [pc, #544]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	d02d      	beq.n	80084fc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084a0:	4b85      	ldr	r3, [pc, #532]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	08db      	lsrs	r3, r3, #3
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	4a84      	ldr	r2, [pc, #528]	; (80086bc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80084ac:	fa22 f303 	lsr.w	r3, r2, r3
 80084b0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ca:	4b7b      	ldr	r3, [pc, #492]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d2:	ee07 3a90 	vmov	s15, r3
 80084d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084da:	ed97 6a03 	vldr	s12, [r7, #12]
 80084de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80086c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80084e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80084fa:	e087      	b.n	800860c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008506:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80086c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800850a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850e:	4b6a      	ldr	r3, [pc, #424]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008522:	eddf 5a67 	vldr	s11, [pc, #412]	; 80086c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800853e:	e065      	b.n	800860c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800854e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008552:	4b59      	ldr	r3, [pc, #356]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008562:	ed97 6a03 	vldr	s12, [r7, #12]
 8008566:	eddf 5a56 	vldr	s11, [pc, #344]	; 80086c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800856a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008582:	e043      	b.n	800860c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008596:	4b48      	ldr	r3, [pc, #288]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085c6:	e021      	b.n	800860c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80086c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085da:	4b37      	ldr	r3, [pc, #220]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80086c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800860a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800860c:	4b2a      	ldr	r3, [pc, #168]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008610:	0a5b      	lsrs	r3, r3, #9
 8008612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008616:	ee07 3a90 	vmov	s15, r3
 800861a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008622:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008626:	edd7 6a07 	vldr	s13, [r7, #28]
 800862a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800862e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008632:	ee17 2a90 	vmov	r2, s15
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800863a:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	0c1b      	lsrs	r3, r3, #16
 8008640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008644:	ee07 3a90 	vmov	s15, r3
 8008648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008650:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008654:	edd7 6a07 	vldr	s13, [r7, #28]
 8008658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008660:	ee17 2a90 	vmov	r2, s15
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008668:	4b13      	ldr	r3, [pc, #76]	; (80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800866a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866c:	0e1b      	lsrs	r3, r3, #24
 800866e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800867e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008682:	edd7 6a07 	vldr	s13, [r7, #28]
 8008686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800868a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800868e:	ee17 2a90 	vmov	r2, s15
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008696:	e008      	b.n	80086aa <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	609a      	str	r2, [r3, #8]
}
 80086aa:	bf00      	nop
 80086ac:	3724      	adds	r7, #36	; 0x24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	58024400 	.word	0x58024400
 80086bc:	03d09000 	.word	0x03d09000
 80086c0:	46000000 	.word	0x46000000
 80086c4:	4c742400 	.word	0x4c742400
 80086c8:	4a742400 	.word	0x4a742400
 80086cc:	4af42400 	.word	0x4af42400

080086d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086de:	4b53      	ldr	r3, [pc, #332]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d101      	bne.n	80086ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e099      	b.n	8008822 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80086ee:	4b4f      	ldr	r3, [pc, #316]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a4e      	ldr	r2, [pc, #312]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80086f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086fa:	f7f8 ff57 	bl	80015ac <HAL_GetTick>
 80086fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008700:	e008      	b.n	8008714 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008702:	f7f8 ff53 	bl	80015ac <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e086      	b.n	8008822 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008714:	4b45      	ldr	r3, [pc, #276]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1f0      	bne.n	8008702 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008720:	4b42      	ldr	r3, [pc, #264]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 8008722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008724:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	031b      	lsls	r3, r3, #12
 800872e:	493f      	ldr	r1, [pc, #252]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 8008730:	4313      	orrs	r3, r2
 8008732:	628b      	str	r3, [r1, #40]	; 0x28
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	3b01      	subs	r3, #1
 800873a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	3b01      	subs	r3, #1
 8008744:	025b      	lsls	r3, r3, #9
 8008746:	b29b      	uxth	r3, r3
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	3b01      	subs	r3, #1
 8008750:	041b      	lsls	r3, r3, #16
 8008752:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008756:	431a      	orrs	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	3b01      	subs	r3, #1
 800875e:	061b      	lsls	r3, r3, #24
 8008760:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008764:	4931      	ldr	r1, [pc, #196]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 8008766:	4313      	orrs	r3, r2
 8008768:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800876a:	4b30      	ldr	r3, [pc, #192]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	492d      	ldr	r1, [pc, #180]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 8008778:	4313      	orrs	r3, r2
 800877a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800877c:	4b2b      	ldr	r3, [pc, #172]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 800877e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008780:	f023 0220 	bic.w	r2, r3, #32
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	4928      	ldr	r1, [pc, #160]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 800878a:	4313      	orrs	r3, r2
 800878c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800878e:	4b27      	ldr	r3, [pc, #156]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	4a26      	ldr	r2, [pc, #152]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 8008794:	f023 0310 	bic.w	r3, r3, #16
 8008798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800879a:	4b24      	ldr	r3, [pc, #144]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 800879c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800879e:	4b24      	ldr	r3, [pc, #144]	; (8008830 <RCCEx_PLL2_Config+0x160>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	69d2      	ldr	r2, [r2, #28]
 80087a6:	00d2      	lsls	r2, r2, #3
 80087a8:	4920      	ldr	r1, [pc, #128]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087ae:	4b1f      	ldr	r3, [pc, #124]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	4a1e      	ldr	r2, [pc, #120]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087b4:	f043 0310 	orr.w	r3, r3, #16
 80087b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d106      	bne.n	80087ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087c0:	4b1a      	ldr	r3, [pc, #104]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	4a19      	ldr	r2, [pc, #100]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087cc:	e00f      	b.n	80087ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d106      	bne.n	80087e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087d4:	4b15      	ldr	r3, [pc, #84]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d8:	4a14      	ldr	r2, [pc, #80]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087e0:	e005      	b.n	80087ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087e2:	4b12      	ldr	r3, [pc, #72]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	4a11      	ldr	r2, [pc, #68]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80087ee:	4b0f      	ldr	r3, [pc, #60]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a0e      	ldr	r2, [pc, #56]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 80087f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80087f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087fa:	f7f8 fed7 	bl	80015ac <HAL_GetTick>
 80087fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008800:	e008      	b.n	8008814 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008802:	f7f8 fed3 	bl	80015ac <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d901      	bls.n	8008814 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e006      	b.n	8008822 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008814:	4b05      	ldr	r3, [pc, #20]	; (800882c <RCCEx_PLL2_Config+0x15c>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d0f0      	beq.n	8008802 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	58024400 	.word	0x58024400
 8008830:	ffff0007 	.word	0xffff0007

08008834 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008842:	4b53      	ldr	r3, [pc, #332]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008846:	f003 0303 	and.w	r3, r3, #3
 800884a:	2b03      	cmp	r3, #3
 800884c:	d101      	bne.n	8008852 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e099      	b.n	8008986 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008852:	4b4f      	ldr	r3, [pc, #316]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a4e      	ldr	r2, [pc, #312]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800885c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800885e:	f7f8 fea5 	bl	80015ac <HAL_GetTick>
 8008862:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008864:	e008      	b.n	8008878 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008866:	f7f8 fea1 	bl	80015ac <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	2b02      	cmp	r3, #2
 8008872:	d901      	bls.n	8008878 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e086      	b.n	8008986 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008878:	4b45      	ldr	r3, [pc, #276]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1f0      	bne.n	8008866 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008884:	4b42      	ldr	r3, [pc, #264]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008888:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	051b      	lsls	r3, r3, #20
 8008892:	493f      	ldr	r1, [pc, #252]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008894:	4313      	orrs	r3, r2
 8008896:	628b      	str	r3, [r1, #40]	; 0x28
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	3b01      	subs	r3, #1
 800889e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	025b      	lsls	r3, r3, #9
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	431a      	orrs	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	041b      	lsls	r3, r3, #16
 80088b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088ba:	431a      	orrs	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	061b      	lsls	r3, r3, #24
 80088c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088c8:	4931      	ldr	r1, [pc, #196]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088ce:	4b30      	ldr	r3, [pc, #192]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 80088d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	492d      	ldr	r1, [pc, #180]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088e0:	4b2b      	ldr	r3, [pc, #172]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 80088e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	4928      	ldr	r1, [pc, #160]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80088f2:	4b27      	ldr	r3, [pc, #156]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f6:	4a26      	ldr	r2, [pc, #152]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 80088f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80088fe:	4b24      	ldr	r3, [pc, #144]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008902:	4b24      	ldr	r3, [pc, #144]	; (8008994 <RCCEx_PLL3_Config+0x160>)
 8008904:	4013      	ands	r3, r2
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	69d2      	ldr	r2, [r2, #28]
 800890a:	00d2      	lsls	r2, r2, #3
 800890c:	4920      	ldr	r1, [pc, #128]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 800890e:	4313      	orrs	r3, r2
 8008910:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008912:	4b1f      	ldr	r3, [pc, #124]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008916:	4a1e      	ldr	r2, [pc, #120]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800891c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008924:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	4a19      	ldr	r2, [pc, #100]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 800892a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800892e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008930:	e00f      	b.n	8008952 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d106      	bne.n	8008946 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008938:	4b15      	ldr	r3, [pc, #84]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	4a14      	ldr	r2, [pc, #80]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 800893e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008944:	e005      	b.n	8008952 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008946:	4b12      	ldr	r3, [pc, #72]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	4a11      	ldr	r2, [pc, #68]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 800894c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008950:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008952:	4b0f      	ldr	r3, [pc, #60]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a0e      	ldr	r2, [pc, #56]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 8008958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800895c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800895e:	f7f8 fe25 	bl	80015ac <HAL_GetTick>
 8008962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008964:	e008      	b.n	8008978 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008966:	f7f8 fe21 	bl	80015ac <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d901      	bls.n	8008978 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e006      	b.n	8008986 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008978:	4b05      	ldr	r3, [pc, #20]	; (8008990 <RCCEx_PLL3_Config+0x15c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d0f0      	beq.n	8008966 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	58024400 	.word	0x58024400
 8008994:	ffff0007 	.word	0xffff0007

08008998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e049      	b.n	8008a3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d106      	bne.n	80089c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7f8 fc52 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3304      	adds	r3, #4
 80089d4:	4619      	mov	r1, r3
 80089d6:	4610      	mov	r0, r2
 80089d8:	f000 fa86 	bl	8008ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d001      	beq.n	8008a60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e019      	b.n	8008a94 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <HAL_TIM_Base_Start+0x58>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b06      	cmp	r3, #6
 8008a78:	d00b      	beq.n	8008a92 <HAL_TIM_Base_Start+0x4a>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a80:	d007      	beq.n	8008a92 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f042 0201 	orr.w	r2, r2, #1
 8008a90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	00010007 	.word	0x00010007

08008aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d122      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d11b      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f06f 0202 	mvn.w	r2, #2
 8008ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f9e0 	bl	8008eac <HAL_TIM_IC_CaptureCallback>
 8008aec:	e005      	b.n	8008afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f9d2 	bl	8008e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f9e3 	bl	8008ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 0304 	and.w	r3, r3, #4
 8008b0a:	2b04      	cmp	r3, #4
 8008b0c:	d122      	bne.n	8008b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f003 0304 	and.w	r3, r3, #4
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d11b      	bne.n	8008b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f06f 0204 	mvn.w	r2, #4
 8008b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f9b6 	bl	8008eac <HAL_TIM_IC_CaptureCallback>
 8008b40:	e005      	b.n	8008b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f9a8 	bl	8008e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f9b9 	bl	8008ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	f003 0308 	and.w	r3, r3, #8
 8008b5e:	2b08      	cmp	r3, #8
 8008b60:	d122      	bne.n	8008ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d11b      	bne.n	8008ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f06f 0208 	mvn.w	r2, #8
 8008b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	f003 0303 	and.w	r3, r3, #3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f98c 	bl	8008eac <HAL_TIM_IC_CaptureCallback>
 8008b94:	e005      	b.n	8008ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f97e 	bl	8008e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f98f 	bl	8008ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f003 0310 	and.w	r3, r3, #16
 8008bb2:	2b10      	cmp	r3, #16
 8008bb4:	d122      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f003 0310 	and.w	r3, r3, #16
 8008bc0:	2b10      	cmp	r3, #16
 8008bc2:	d11b      	bne.n	8008bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f06f 0210 	mvn.w	r2, #16
 8008bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2208      	movs	r2, #8
 8008bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f962 	bl	8008eac <HAL_TIM_IC_CaptureCallback>
 8008be8:	e005      	b.n	8008bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f954 	bl	8008e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f965 	bl	8008ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d10e      	bne.n	8008c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d107      	bne.n	8008c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f06f 0201 	mvn.w	r2, #1
 8008c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f92e 	bl	8008e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c32:	2b80      	cmp	r3, #128	; 0x80
 8008c34:	d10e      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c40:	2b80      	cmp	r3, #128	; 0x80
 8008c42:	d107      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fb14 	bl	800927c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c62:	d10e      	bne.n	8008c82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6e:	2b80      	cmp	r3, #128	; 0x80
 8008c70:	d107      	bne.n	8008c82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fb07 	bl	8009290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8c:	2b40      	cmp	r3, #64	; 0x40
 8008c8e:	d10e      	bne.n	8008cae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9a:	2b40      	cmp	r3, #64	; 0x40
 8008c9c:	d107      	bne.n	8008cae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f913 	bl	8008ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	f003 0320 	and.w	r3, r3, #32
 8008cb8:	2b20      	cmp	r3, #32
 8008cba:	d10e      	bne.n	8008cda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b20      	cmp	r3, #32
 8008cc8:	d107      	bne.n	8008cda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f06f 0220 	mvn.w	r2, #32
 8008cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fac7 	bl	8009268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cda:	bf00      	nop
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d101      	bne.n	8008cfc <HAL_TIM_ConfigClockSource+0x18>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	e0b7      	b.n	8008e6c <HAL_TIM_ConfigClockSource+0x188>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	4b57      	ldr	r3, [pc, #348]	; (8008e74 <HAL_TIM_ConfigClockSource+0x190>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68fa      	ldr	r2, [r7, #12]
 8008d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b70      	cmp	r3, #112	; 0x70
 8008d32:	d02e      	beq.n	8008d92 <HAL_TIM_ConfigClockSource+0xae>
 8008d34:	2b70      	cmp	r3, #112	; 0x70
 8008d36:	d812      	bhi.n	8008d5e <HAL_TIM_ConfigClockSource+0x7a>
 8008d38:	2b30      	cmp	r3, #48	; 0x30
 8008d3a:	f000 8084 	beq.w	8008e46 <HAL_TIM_ConfigClockSource+0x162>
 8008d3e:	2b30      	cmp	r3, #48	; 0x30
 8008d40:	d806      	bhi.n	8008d50 <HAL_TIM_ConfigClockSource+0x6c>
 8008d42:	2b10      	cmp	r3, #16
 8008d44:	d07f      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x162>
 8008d46:	2b20      	cmp	r3, #32
 8008d48:	d07d      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x162>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d07b      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008d4e:	e084      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008d50:	2b50      	cmp	r3, #80	; 0x50
 8008d52:	d048      	beq.n	8008de6 <HAL_TIM_ConfigClockSource+0x102>
 8008d54:	2b60      	cmp	r3, #96	; 0x60
 8008d56:	d056      	beq.n	8008e06 <HAL_TIM_ConfigClockSource+0x122>
 8008d58:	2b40      	cmp	r3, #64	; 0x40
 8008d5a:	d064      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008d5c:	e07d      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008d5e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008d62:	d070      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x162>
 8008d64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008d68:	d809      	bhi.n	8008d7e <HAL_TIM_ConfigClockSource+0x9a>
 8008d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d6e:	d027      	beq.n	8008dc0 <HAL_TIM_ConfigClockSource+0xdc>
 8008d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d74:	d067      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x162>
 8008d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7a:	d06d      	beq.n	8008e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d7c:	e06d      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008d7e:	4a3e      	ldr	r2, [pc, #248]	; (8008e78 <HAL_TIM_ConfigClockSource+0x194>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d060      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x162>
 8008d84:	4a3d      	ldr	r2, [pc, #244]	; (8008e7c <HAL_TIM_ConfigClockSource+0x198>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d05d      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x162>
 8008d8a:	4a3d      	ldr	r2, [pc, #244]	; (8008e80 <HAL_TIM_ConfigClockSource+0x19c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d05a      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008d90:	e063      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	6899      	ldr	r1, [r3, #8]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f000 f9b9 	bl	8009118 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008db4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	609a      	str	r2, [r3, #8]
      break;
 8008dbe:	e04c      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6818      	ldr	r0, [r3, #0]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	6899      	ldr	r1, [r3, #8]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f000 f9a2 	bl	8009118 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008de2:	609a      	str	r2, [r3, #8]
      break;
 8008de4:	e039      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	6859      	ldr	r1, [r3, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f000 f912 	bl	800901c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2150      	movs	r1, #80	; 0x50
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f000 f96c 	bl	80090dc <TIM_ITRx_SetConfig>
      break;
 8008e04:	e029      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	6859      	ldr	r1, [r3, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	461a      	mov	r2, r3
 8008e14:	f000 f931 	bl	800907a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2160      	movs	r1, #96	; 0x60
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f95c 	bl	80090dc <TIM_ITRx_SetConfig>
      break;
 8008e24:	e019      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6859      	ldr	r1, [r3, #4]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	461a      	mov	r2, r3
 8008e34:	f000 f8f2 	bl	800901c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2140      	movs	r1, #64	; 0x40
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f94c 	bl	80090dc <TIM_ITRx_SetConfig>
      break;
 8008e44:	e009      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4610      	mov	r0, r2
 8008e52:	f000 f943 	bl	80090dc <TIM_ITRx_SetConfig>
      break;
 8008e56:	e000      	b.n	8008e5a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008e58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	ffceff88 	.word	0xffceff88
 8008e78:	00100030 	.word	0x00100030
 8008e7c:	00100040 	.word	0x00100040
 8008e80:	00100020 	.word	0x00100020

08008e84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a40      	ldr	r2, [pc, #256]	; (8008ffc <TIM_Base_SetConfig+0x114>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d013      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f06:	d00f      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a3d      	ldr	r2, [pc, #244]	; (8009000 <TIM_Base_SetConfig+0x118>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00b      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a3c      	ldr	r2, [pc, #240]	; (8009004 <TIM_Base_SetConfig+0x11c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d007      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a3b      	ldr	r2, [pc, #236]	; (8009008 <TIM_Base_SetConfig+0x120>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d003      	beq.n	8008f28 <TIM_Base_SetConfig+0x40>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a3a      	ldr	r2, [pc, #232]	; (800900c <TIM_Base_SetConfig+0x124>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d108      	bne.n	8008f3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a2f      	ldr	r2, [pc, #188]	; (8008ffc <TIM_Base_SetConfig+0x114>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d01f      	beq.n	8008f82 <TIM_Base_SetConfig+0x9a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f48:	d01b      	beq.n	8008f82 <TIM_Base_SetConfig+0x9a>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a2c      	ldr	r2, [pc, #176]	; (8009000 <TIM_Base_SetConfig+0x118>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d017      	beq.n	8008f82 <TIM_Base_SetConfig+0x9a>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a2b      	ldr	r2, [pc, #172]	; (8009004 <TIM_Base_SetConfig+0x11c>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d013      	beq.n	8008f82 <TIM_Base_SetConfig+0x9a>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a2a      	ldr	r2, [pc, #168]	; (8009008 <TIM_Base_SetConfig+0x120>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00f      	beq.n	8008f82 <TIM_Base_SetConfig+0x9a>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a29      	ldr	r2, [pc, #164]	; (800900c <TIM_Base_SetConfig+0x124>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00b      	beq.n	8008f82 <TIM_Base_SetConfig+0x9a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a28      	ldr	r2, [pc, #160]	; (8009010 <TIM_Base_SetConfig+0x128>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d007      	beq.n	8008f82 <TIM_Base_SetConfig+0x9a>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a27      	ldr	r2, [pc, #156]	; (8009014 <TIM_Base_SetConfig+0x12c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d003      	beq.n	8008f82 <TIM_Base_SetConfig+0x9a>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a26      	ldr	r2, [pc, #152]	; (8009018 <TIM_Base_SetConfig+0x130>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d108      	bne.n	8008f94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a10      	ldr	r2, [pc, #64]	; (8008ffc <TIM_Base_SetConfig+0x114>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d00f      	beq.n	8008fe0 <TIM_Base_SetConfig+0xf8>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a12      	ldr	r2, [pc, #72]	; (800900c <TIM_Base_SetConfig+0x124>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d00b      	beq.n	8008fe0 <TIM_Base_SetConfig+0xf8>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a11      	ldr	r2, [pc, #68]	; (8009010 <TIM_Base_SetConfig+0x128>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d007      	beq.n	8008fe0 <TIM_Base_SetConfig+0xf8>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a10      	ldr	r2, [pc, #64]	; (8009014 <TIM_Base_SetConfig+0x12c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d003      	beq.n	8008fe0 <TIM_Base_SetConfig+0xf8>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a0f      	ldr	r2, [pc, #60]	; (8009018 <TIM_Base_SetConfig+0x130>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d103      	bne.n	8008fe8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	615a      	str	r2, [r3, #20]
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40010000 	.word	0x40010000
 8009000:	40000400 	.word	0x40000400
 8009004:	40000800 	.word	0x40000800
 8009008:	40000c00 	.word	0x40000c00
 800900c:	40010400 	.word	0x40010400
 8009010:	40014000 	.word	0x40014000
 8009014:	40014400 	.word	0x40014400
 8009018:	40014800 	.word	0x40014800

0800901c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800901c:	b480      	push	{r7}
 800901e:	b087      	sub	sp, #28
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	f023 0201 	bic.w	r2, r3, #1
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	011b      	lsls	r3, r3, #4
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	4313      	orrs	r3, r2
 8009050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f023 030a 	bic.w	r3, r3, #10
 8009058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	621a      	str	r2, [r3, #32]
}
 800906e:	bf00      	nop
 8009070:	371c      	adds	r7, #28
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800907a:	b480      	push	{r7}
 800907c:	b087      	sub	sp, #28
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	f023 0210 	bic.w	r2, r3, #16
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	031b      	lsls	r3, r3, #12
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	4313      	orrs	r3, r2
 80090c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	621a      	str	r2, [r3, #32]
}
 80090ce:	bf00      	nop
 80090d0:	371c      	adds	r7, #28
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
	...

080090dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4b09      	ldr	r3, [pc, #36]	; (8009114 <TIM_ITRx_SetConfig+0x38>)
 80090f0:	4013      	ands	r3, r2
 80090f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	f043 0307 	orr.w	r3, r3, #7
 80090fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	609a      	str	r2, [r3, #8]
}
 8009106:	bf00      	nop
 8009108:	3714      	adds	r7, #20
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	ffcfff8f 	.word	0xffcfff8f

08009118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	021a      	lsls	r2, r3, #8
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	431a      	orrs	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4313      	orrs	r3, r2
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	4313      	orrs	r3, r2
 8009144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	609a      	str	r2, [r3, #8]
}
 800914c:	bf00      	nop
 800914e:	371c      	adds	r7, #28
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009168:	2b01      	cmp	r3, #1
 800916a:	d101      	bne.n	8009170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800916c:	2302      	movs	r3, #2
 800916e:	e068      	b.n	8009242 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2202      	movs	r2, #2
 800917c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a2e      	ldr	r2, [pc, #184]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d004      	beq.n	80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a2d      	ldr	r2, [pc, #180]	; (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d108      	bne.n	80091b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a1e      	ldr	r2, [pc, #120]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d01d      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e2:	d018      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1b      	ldr	r2, [pc, #108]	; (8009258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d013      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1a      	ldr	r2, [pc, #104]	; (800925c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00e      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a18      	ldr	r2, [pc, #96]	; (8009260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d009      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a13      	ldr	r2, [pc, #76]	; (8009254 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d004      	beq.n	8009216 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a14      	ldr	r2, [pc, #80]	; (8009264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d10c      	bne.n	8009230 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800921c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	4313      	orrs	r3, r2
 8009226:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	40010000 	.word	0x40010000
 8009254:	40010400 	.word	0x40010400
 8009258:	40000400 	.word	0x40000400
 800925c:	40000800 	.word	0x40000800
 8009260:	40000c00 	.word	0x40000c00
 8009264:	40001800 	.word	0x40001800

08009268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e042      	b.n	800933c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d106      	bne.n	80092ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7f7 fff3 	bl	80012b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2224      	movs	r2, #36	; 0x24
 80092d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 0201 	bic.w	r2, r2, #1
 80092e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f8c2 	bl	8009470 <UART_SetConfig>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e022      	b.n	800933c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fe66 	bl	8009fd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689a      	ldr	r2, [r3, #8]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f042 0201 	orr.w	r2, r2, #1
 8009332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 feed 	bl	800a114 <UART_CheckIdleState>
 800933a:	4603      	mov	r3, r0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08a      	sub	sp, #40	; 0x28
 8009348:	af02      	add	r7, sp, #8
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	4613      	mov	r3, r2
 8009352:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800935a:	2b20      	cmp	r3, #32
 800935c:	f040 8083 	bne.w	8009466 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d002      	beq.n	800936c <HAL_UART_Transmit+0x28>
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e07b      	b.n	8009468 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <HAL_UART_Transmit+0x3a>
 800937a:	2302      	movs	r3, #2
 800937c:	e074      	b.n	8009468 <HAL_UART_Transmit+0x124>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2221      	movs	r2, #33	; 0x21
 8009392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009396:	f7f8 f909 	bl	80015ac <HAL_GetTick>
 800939a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	88fa      	ldrh	r2, [r7, #6]
 80093a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	88fa      	ldrh	r2, [r7, #6]
 80093a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b4:	d108      	bne.n	80093c8 <HAL_UART_Transmit+0x84>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	61bb      	str	r3, [r7, #24]
 80093c6:	e003      	b.n	80093d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80093d8:	e02c      	b.n	8009434 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2200      	movs	r2, #0
 80093e2:	2180      	movs	r1, #128	; 0x80
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 fedd 	bl	800a1a4 <UART_WaitOnFlagUntilTimeout>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d001      	beq.n	80093f4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e039      	b.n	8009468 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10b      	bne.n	8009412 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009408:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	3302      	adds	r3, #2
 800940e:	61bb      	str	r3, [r7, #24]
 8009410:	e007      	b.n	8009422 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	781a      	ldrb	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	3301      	adds	r3, #1
 8009420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800943a:	b29b      	uxth	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1cc      	bne.n	80093da <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	2200      	movs	r2, #0
 8009448:	2140      	movs	r1, #64	; 0x40
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 feaa 	bl	800a1a4 <UART_WaitOnFlagUntilTimeout>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e006      	b.n	8009468 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2220      	movs	r2, #32
 800945e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	e000      	b.n	8009468 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009466:	2302      	movs	r3, #2
  }
}
 8009468:	4618      	mov	r0, r3
 800946a:	3720      	adds	r7, #32
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009470:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009474:	b08e      	sub	sp, #56	; 0x38
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	431a      	orrs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	431a      	orrs	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	4313      	orrs	r3, r2
 8009496:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800949c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800949e:	4313      	orrs	r3, r2
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	4bc1      	ldr	r3, [pc, #772]	; (80097b0 <UART_SetConfig+0x340>)
 80094aa:	4013      	ands	r3, r2
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094b2:	430b      	orrs	r3, r1
 80094b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4ab7      	ldr	r2, [pc, #732]	; (80097b4 <UART_SetConfig+0x344>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d004      	beq.n	80094e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094e2:	4313      	orrs	r3, r2
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	4bb2      	ldr	r3, [pc, #712]	; (80097b8 <UART_SetConfig+0x348>)
 80094ee:	4013      	ands	r3, r2
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	6812      	ldr	r2, [r2, #0]
 80094f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094f6:	430b      	orrs	r3, r1
 80094f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	f023 010f 	bic.w	r1, r3, #15
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4aa9      	ldr	r2, [pc, #676]	; (80097bc <UART_SetConfig+0x34c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d177      	bne.n	800960a <UART_SetConfig+0x19a>
 800951a:	4ba9      	ldr	r3, [pc, #676]	; (80097c0 <UART_SetConfig+0x350>)
 800951c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009522:	2b28      	cmp	r3, #40	; 0x28
 8009524:	d86c      	bhi.n	8009600 <UART_SetConfig+0x190>
 8009526:	a201      	add	r2, pc, #4	; (adr r2, 800952c <UART_SetConfig+0xbc>)
 8009528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952c:	080095d1 	.word	0x080095d1
 8009530:	08009601 	.word	0x08009601
 8009534:	08009601 	.word	0x08009601
 8009538:	08009601 	.word	0x08009601
 800953c:	08009601 	.word	0x08009601
 8009540:	08009601 	.word	0x08009601
 8009544:	08009601 	.word	0x08009601
 8009548:	08009601 	.word	0x08009601
 800954c:	080095d9 	.word	0x080095d9
 8009550:	08009601 	.word	0x08009601
 8009554:	08009601 	.word	0x08009601
 8009558:	08009601 	.word	0x08009601
 800955c:	08009601 	.word	0x08009601
 8009560:	08009601 	.word	0x08009601
 8009564:	08009601 	.word	0x08009601
 8009568:	08009601 	.word	0x08009601
 800956c:	080095e1 	.word	0x080095e1
 8009570:	08009601 	.word	0x08009601
 8009574:	08009601 	.word	0x08009601
 8009578:	08009601 	.word	0x08009601
 800957c:	08009601 	.word	0x08009601
 8009580:	08009601 	.word	0x08009601
 8009584:	08009601 	.word	0x08009601
 8009588:	08009601 	.word	0x08009601
 800958c:	080095e9 	.word	0x080095e9
 8009590:	08009601 	.word	0x08009601
 8009594:	08009601 	.word	0x08009601
 8009598:	08009601 	.word	0x08009601
 800959c:	08009601 	.word	0x08009601
 80095a0:	08009601 	.word	0x08009601
 80095a4:	08009601 	.word	0x08009601
 80095a8:	08009601 	.word	0x08009601
 80095ac:	080095f1 	.word	0x080095f1
 80095b0:	08009601 	.word	0x08009601
 80095b4:	08009601 	.word	0x08009601
 80095b8:	08009601 	.word	0x08009601
 80095bc:	08009601 	.word	0x08009601
 80095c0:	08009601 	.word	0x08009601
 80095c4:	08009601 	.word	0x08009601
 80095c8:	08009601 	.word	0x08009601
 80095cc:	080095f9 	.word	0x080095f9
 80095d0:	2301      	movs	r3, #1
 80095d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095d6:	e233      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80095d8:	2304      	movs	r3, #4
 80095da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095de:	e22f      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80095e0:	2308      	movs	r3, #8
 80095e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e6:	e22b      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80095e8:	2310      	movs	r3, #16
 80095ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ee:	e227      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80095f0:	2320      	movs	r3, #32
 80095f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f6:	e223      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80095f8:	2340      	movs	r3, #64	; 0x40
 80095fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fe:	e21f      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009600:	2380      	movs	r3, #128	; 0x80
 8009602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009606:	bf00      	nop
 8009608:	e21a      	b.n	8009a40 <UART_SetConfig+0x5d0>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a6d      	ldr	r2, [pc, #436]	; (80097c4 <UART_SetConfig+0x354>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d132      	bne.n	800967a <UART_SetConfig+0x20a>
 8009614:	4b6a      	ldr	r3, [pc, #424]	; (80097c0 <UART_SetConfig+0x350>)
 8009616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	2b05      	cmp	r3, #5
 800961e:	d827      	bhi.n	8009670 <UART_SetConfig+0x200>
 8009620:	a201      	add	r2, pc, #4	; (adr r2, 8009628 <UART_SetConfig+0x1b8>)
 8009622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009626:	bf00      	nop
 8009628:	08009641 	.word	0x08009641
 800962c:	08009649 	.word	0x08009649
 8009630:	08009651 	.word	0x08009651
 8009634:	08009659 	.word	0x08009659
 8009638:	08009661 	.word	0x08009661
 800963c:	08009669 	.word	0x08009669
 8009640:	2300      	movs	r3, #0
 8009642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009646:	e1fb      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009648:	2304      	movs	r3, #4
 800964a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964e:	e1f7      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009650:	2308      	movs	r3, #8
 8009652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009656:	e1f3      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009658:	2310      	movs	r3, #16
 800965a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965e:	e1ef      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009660:	2320      	movs	r3, #32
 8009662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009666:	e1eb      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009668:	2340      	movs	r3, #64	; 0x40
 800966a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966e:	e1e7      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009670:	2380      	movs	r3, #128	; 0x80
 8009672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009676:	bf00      	nop
 8009678:	e1e2      	b.n	8009a40 <UART_SetConfig+0x5d0>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a52      	ldr	r2, [pc, #328]	; (80097c8 <UART_SetConfig+0x358>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d132      	bne.n	80096ea <UART_SetConfig+0x27a>
 8009684:	4b4e      	ldr	r3, [pc, #312]	; (80097c0 <UART_SetConfig+0x350>)
 8009686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009688:	f003 0307 	and.w	r3, r3, #7
 800968c:	2b05      	cmp	r3, #5
 800968e:	d827      	bhi.n	80096e0 <UART_SetConfig+0x270>
 8009690:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <UART_SetConfig+0x228>)
 8009692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009696:	bf00      	nop
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096b9 	.word	0x080096b9
 80096a0:	080096c1 	.word	0x080096c1
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096d1 	.word	0x080096d1
 80096ac:	080096d9 	.word	0x080096d9
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e1c3      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80096b8:	2304      	movs	r3, #4
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e1bf      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80096c0:	2308      	movs	r3, #8
 80096c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c6:	e1bb      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80096c8:	2310      	movs	r3, #16
 80096ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ce:	e1b7      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80096d0:	2320      	movs	r3, #32
 80096d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d6:	e1b3      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80096d8:	2340      	movs	r3, #64	; 0x40
 80096da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096de:	e1af      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80096e0:	2380      	movs	r3, #128	; 0x80
 80096e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e6:	bf00      	nop
 80096e8:	e1aa      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a37      	ldr	r2, [pc, #220]	; (80097cc <UART_SetConfig+0x35c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d132      	bne.n	800975a <UART_SetConfig+0x2ea>
 80096f4:	4b32      	ldr	r3, [pc, #200]	; (80097c0 <UART_SetConfig+0x350>)
 80096f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	2b05      	cmp	r3, #5
 80096fe:	d827      	bhi.n	8009750 <UART_SetConfig+0x2e0>
 8009700:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <UART_SetConfig+0x298>)
 8009702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009706:	bf00      	nop
 8009708:	08009721 	.word	0x08009721
 800970c:	08009729 	.word	0x08009729
 8009710:	08009731 	.word	0x08009731
 8009714:	08009739 	.word	0x08009739
 8009718:	08009741 	.word	0x08009741
 800971c:	08009749 	.word	0x08009749
 8009720:	2300      	movs	r3, #0
 8009722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009726:	e18b      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009728:	2304      	movs	r3, #4
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972e:	e187      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009730:	2308      	movs	r3, #8
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e183      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009738:	2310      	movs	r3, #16
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e17f      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009740:	2320      	movs	r3, #32
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	e17b      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009748:	2340      	movs	r3, #64	; 0x40
 800974a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974e:	e177      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009750:	2380      	movs	r3, #128	; 0x80
 8009752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009756:	bf00      	nop
 8009758:	e172      	b.n	8009a40 <UART_SetConfig+0x5d0>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a1c      	ldr	r2, [pc, #112]	; (80097d0 <UART_SetConfig+0x360>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d144      	bne.n	80097ee <UART_SetConfig+0x37e>
 8009764:	4b16      	ldr	r3, [pc, #88]	; (80097c0 <UART_SetConfig+0x350>)
 8009766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	2b05      	cmp	r3, #5
 800976e:	d839      	bhi.n	80097e4 <UART_SetConfig+0x374>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <UART_SetConfig+0x308>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	08009791 	.word	0x08009791
 800977c:	08009799 	.word	0x08009799
 8009780:	080097a1 	.word	0x080097a1
 8009784:	080097a9 	.word	0x080097a9
 8009788:	080097d5 	.word	0x080097d5
 800978c:	080097dd 	.word	0x080097dd
 8009790:	2300      	movs	r3, #0
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009796:	e153      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009798:	2304      	movs	r3, #4
 800979a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979e:	e14f      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80097a0:	2308      	movs	r3, #8
 80097a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a6:	e14b      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80097a8:	2310      	movs	r3, #16
 80097aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ae:	e147      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80097b0:	cfff69f3 	.word	0xcfff69f3
 80097b4:	58000c00 	.word	0x58000c00
 80097b8:	11fff4ff 	.word	0x11fff4ff
 80097bc:	40011000 	.word	0x40011000
 80097c0:	58024400 	.word	0x58024400
 80097c4:	40004400 	.word	0x40004400
 80097c8:	40004800 	.word	0x40004800
 80097cc:	40004c00 	.word	0x40004c00
 80097d0:	40005000 	.word	0x40005000
 80097d4:	2320      	movs	r3, #32
 80097d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097da:	e131      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80097dc:	2340      	movs	r3, #64	; 0x40
 80097de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e2:	e12d      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80097e4:	2380      	movs	r3, #128	; 0x80
 80097e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ea:	bf00      	nop
 80097ec:	e128      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4ab6      	ldr	r2, [pc, #728]	; (8009acc <UART_SetConfig+0x65c>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d178      	bne.n	80098ea <UART_SetConfig+0x47a>
 80097f8:	4bb5      	ldr	r3, [pc, #724]	; (8009ad0 <UART_SetConfig+0x660>)
 80097fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009800:	2b28      	cmp	r3, #40	; 0x28
 8009802:	d86d      	bhi.n	80098e0 <UART_SetConfig+0x470>
 8009804:	a201      	add	r2, pc, #4	; (adr r2, 800980c <UART_SetConfig+0x39c>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	080098b1 	.word	0x080098b1
 8009810:	080098e1 	.word	0x080098e1
 8009814:	080098e1 	.word	0x080098e1
 8009818:	080098e1 	.word	0x080098e1
 800981c:	080098e1 	.word	0x080098e1
 8009820:	080098e1 	.word	0x080098e1
 8009824:	080098e1 	.word	0x080098e1
 8009828:	080098e1 	.word	0x080098e1
 800982c:	080098b9 	.word	0x080098b9
 8009830:	080098e1 	.word	0x080098e1
 8009834:	080098e1 	.word	0x080098e1
 8009838:	080098e1 	.word	0x080098e1
 800983c:	080098e1 	.word	0x080098e1
 8009840:	080098e1 	.word	0x080098e1
 8009844:	080098e1 	.word	0x080098e1
 8009848:	080098e1 	.word	0x080098e1
 800984c:	080098c1 	.word	0x080098c1
 8009850:	080098e1 	.word	0x080098e1
 8009854:	080098e1 	.word	0x080098e1
 8009858:	080098e1 	.word	0x080098e1
 800985c:	080098e1 	.word	0x080098e1
 8009860:	080098e1 	.word	0x080098e1
 8009864:	080098e1 	.word	0x080098e1
 8009868:	080098e1 	.word	0x080098e1
 800986c:	080098c9 	.word	0x080098c9
 8009870:	080098e1 	.word	0x080098e1
 8009874:	080098e1 	.word	0x080098e1
 8009878:	080098e1 	.word	0x080098e1
 800987c:	080098e1 	.word	0x080098e1
 8009880:	080098e1 	.word	0x080098e1
 8009884:	080098e1 	.word	0x080098e1
 8009888:	080098e1 	.word	0x080098e1
 800988c:	080098d1 	.word	0x080098d1
 8009890:	080098e1 	.word	0x080098e1
 8009894:	080098e1 	.word	0x080098e1
 8009898:	080098e1 	.word	0x080098e1
 800989c:	080098e1 	.word	0x080098e1
 80098a0:	080098e1 	.word	0x080098e1
 80098a4:	080098e1 	.word	0x080098e1
 80098a8:	080098e1 	.word	0x080098e1
 80098ac:	080098d9 	.word	0x080098d9
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b6:	e0c3      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80098b8:	2304      	movs	r3, #4
 80098ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098be:	e0bf      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80098c0:	2308      	movs	r3, #8
 80098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c6:	e0bb      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80098c8:	2310      	movs	r3, #16
 80098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ce:	e0b7      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80098d0:	2320      	movs	r3, #32
 80098d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d6:	e0b3      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80098d8:	2340      	movs	r3, #64	; 0x40
 80098da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098de:	e0af      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80098e0:	2380      	movs	r3, #128	; 0x80
 80098e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e6:	bf00      	nop
 80098e8:	e0aa      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a79      	ldr	r2, [pc, #484]	; (8009ad4 <UART_SetConfig+0x664>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d132      	bne.n	800995a <UART_SetConfig+0x4ea>
 80098f4:	4b76      	ldr	r3, [pc, #472]	; (8009ad0 <UART_SetConfig+0x660>)
 80098f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	2b05      	cmp	r3, #5
 80098fe:	d827      	bhi.n	8009950 <UART_SetConfig+0x4e0>
 8009900:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <UART_SetConfig+0x498>)
 8009902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009906:	bf00      	nop
 8009908:	08009921 	.word	0x08009921
 800990c:	08009929 	.word	0x08009929
 8009910:	08009931 	.word	0x08009931
 8009914:	08009939 	.word	0x08009939
 8009918:	08009941 	.word	0x08009941
 800991c:	08009949 	.word	0x08009949
 8009920:	2300      	movs	r3, #0
 8009922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009926:	e08b      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009928:	2304      	movs	r3, #4
 800992a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992e:	e087      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009930:	2308      	movs	r3, #8
 8009932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009936:	e083      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009938:	2310      	movs	r3, #16
 800993a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993e:	e07f      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009940:	2320      	movs	r3, #32
 8009942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009946:	e07b      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009948:	2340      	movs	r3, #64	; 0x40
 800994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994e:	e077      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009950:	2380      	movs	r3, #128	; 0x80
 8009952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009956:	bf00      	nop
 8009958:	e072      	b.n	8009a40 <UART_SetConfig+0x5d0>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a5e      	ldr	r2, [pc, #376]	; (8009ad8 <UART_SetConfig+0x668>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d132      	bne.n	80099ca <UART_SetConfig+0x55a>
 8009964:	4b5a      	ldr	r3, [pc, #360]	; (8009ad0 <UART_SetConfig+0x660>)
 8009966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009968:	f003 0307 	and.w	r3, r3, #7
 800996c:	2b05      	cmp	r3, #5
 800996e:	d827      	bhi.n	80099c0 <UART_SetConfig+0x550>
 8009970:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <UART_SetConfig+0x508>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	08009991 	.word	0x08009991
 800997c:	08009999 	.word	0x08009999
 8009980:	080099a1 	.word	0x080099a1
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099b1 	.word	0x080099b1
 800998c:	080099b9 	.word	0x080099b9
 8009990:	2300      	movs	r3, #0
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e053      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009998:	2304      	movs	r3, #4
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e04f      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80099a0:	2308      	movs	r3, #8
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e04b      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80099a8:	2310      	movs	r3, #16
 80099aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ae:	e047      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80099b0:	2320      	movs	r3, #32
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b6:	e043      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80099b8:	2340      	movs	r3, #64	; 0x40
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e03f      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80099c0:	2380      	movs	r3, #128	; 0x80
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	bf00      	nop
 80099c8:	e03a      	b.n	8009a40 <UART_SetConfig+0x5d0>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a43      	ldr	r2, [pc, #268]	; (8009adc <UART_SetConfig+0x66c>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d132      	bne.n	8009a3a <UART_SetConfig+0x5ca>
 80099d4:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <UART_SetConfig+0x660>)
 80099d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099d8:	f003 0307 	and.w	r3, r3, #7
 80099dc:	2b05      	cmp	r3, #5
 80099de:	d827      	bhi.n	8009a30 <UART_SetConfig+0x5c0>
 80099e0:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <UART_SetConfig+0x578>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009a01 	.word	0x08009a01
 80099ec:	08009a09 	.word	0x08009a09
 80099f0:	08009a11 	.word	0x08009a11
 80099f4:	08009a19 	.word	0x08009a19
 80099f8:	08009a21 	.word	0x08009a21
 80099fc:	08009a29 	.word	0x08009a29
 8009a00:	2302      	movs	r3, #2
 8009a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a06:	e01b      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0e:	e017      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009a10:	2308      	movs	r3, #8
 8009a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a16:	e013      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009a18:	2310      	movs	r3, #16
 8009a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1e:	e00f      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009a20:	2320      	movs	r3, #32
 8009a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a26:	e00b      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2e:	e007      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a36:	bf00      	nop
 8009a38:	e002      	b.n	8009a40 <UART_SetConfig+0x5d0>
 8009a3a:	2380      	movs	r3, #128	; 0x80
 8009a3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a25      	ldr	r2, [pc, #148]	; (8009adc <UART_SetConfig+0x66c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	f040 80b8 	bne.w	8009bbc <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d019      	beq.n	8009a88 <UART_SetConfig+0x618>
 8009a54:	2b08      	cmp	r3, #8
 8009a56:	dc04      	bgt.n	8009a62 <UART_SetConfig+0x5f2>
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d009      	beq.n	8009a70 <UART_SetConfig+0x600>
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d00b      	beq.n	8009a78 <UART_SetConfig+0x608>
 8009a60:	e042      	b.n	8009ae8 <UART_SetConfig+0x678>
 8009a62:	2b20      	cmp	r3, #32
 8009a64:	d02b      	beq.n	8009abe <UART_SetConfig+0x64e>
 8009a66:	2b40      	cmp	r3, #64	; 0x40
 8009a68:	d02c      	beq.n	8009ac4 <UART_SetConfig+0x654>
 8009a6a:	2b10      	cmp	r3, #16
 8009a6c:	d014      	beq.n	8009a98 <UART_SetConfig+0x628>
 8009a6e:	e03b      	b.n	8009ae8 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009a70:	f7fe fa34 	bl	8007edc <HAL_RCCEx_GetD3PCLK1Freq>
 8009a74:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009a76:	e03d      	b.n	8009af4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a78:	f107 0314 	add.w	r3, r7, #20
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe fa43 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a86:	e035      	b.n	8009af4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a88:	f107 0308 	add.w	r3, r7, #8
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fb87 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a96:	e02d      	b.n	8009af4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a98:	4b0d      	ldr	r3, [pc, #52]	; (8009ad0 <UART_SetConfig+0x660>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0320 	and.w	r3, r3, #32
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d009      	beq.n	8009ab8 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <UART_SetConfig+0x660>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	08db      	lsrs	r3, r3, #3
 8009aaa:	f003 0303 	and.w	r3, r3, #3
 8009aae:	4a0c      	ldr	r2, [pc, #48]	; (8009ae0 <UART_SetConfig+0x670>)
 8009ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ab6:	e01d      	b.n	8009af4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009ab8:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <UART_SetConfig+0x670>)
 8009aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009abc:	e01a      	b.n	8009af4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009abe:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <UART_SetConfig+0x674>)
 8009ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ac2:	e017      	b.n	8009af4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ac4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aca:	e013      	b.n	8009af4 <UART_SetConfig+0x684>
 8009acc:	40011400 	.word	0x40011400
 8009ad0:	58024400 	.word	0x58024400
 8009ad4:	40007800 	.word	0x40007800
 8009ad8:	40007c00 	.word	0x40007c00
 8009adc:	58000c00 	.word	0x58000c00
 8009ae0:	03d09000 	.word	0x03d09000
 8009ae4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009af2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 824d 	beq.w	8009f96 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b00:	4aad      	ldr	r2, [pc, #692]	; (8009db8 <UART_SetConfig+0x948>)
 8009b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b06:	461a      	mov	r2, r3
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b0e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	4613      	mov	r3, r2
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	4413      	add	r3, r2
 8009b1a:	6a3a      	ldr	r2, [r7, #32]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d305      	bcc.n	8009b2c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009b26:	6a3a      	ldr	r2, [r7, #32]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d903      	bls.n	8009b34 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009b32:	e230      	b.n	8009f96 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b36:	4618      	mov	r0, r3
 8009b38:	f04f 0100 	mov.w	r1, #0
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b40:	4a9d      	ldr	r2, [pc, #628]	; (8009db8 <UART_SetConfig+0x948>)
 8009b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	f04f 0400 	mov.w	r4, #0
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	4623      	mov	r3, r4
 8009b50:	f7f6 fc16 	bl	8000380 <__aeabi_uldivmod>
 8009b54:	4603      	mov	r3, r0
 8009b56:	460c      	mov	r4, r1
 8009b58:	4619      	mov	r1, r3
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	f04f 0300 	mov.w	r3, #0
 8009b60:	f04f 0400 	mov.w	r4, #0
 8009b64:	0214      	lsls	r4, r2, #8
 8009b66:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009b6a:	020b      	lsls	r3, r1, #8
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	6852      	ldr	r2, [r2, #4]
 8009b70:	0852      	lsrs	r2, r2, #1
 8009b72:	4611      	mov	r1, r2
 8009b74:	f04f 0200 	mov.w	r2, #0
 8009b78:	eb13 0b01 	adds.w	fp, r3, r1
 8009b7c:	eb44 0c02 	adc.w	ip, r4, r2
 8009b80:	4658      	mov	r0, fp
 8009b82:	4661      	mov	r1, ip
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f04f 0400 	mov.w	r4, #0
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	4623      	mov	r3, r4
 8009b90:	f7f6 fbf6 	bl	8000380 <__aeabi_uldivmod>
 8009b94:	4603      	mov	r3, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ba0:	d308      	bcc.n	8009bb4 <UART_SetConfig+0x744>
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ba8:	d204      	bcs.n	8009bb4 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bb0:	60da      	str	r2, [r3, #12]
 8009bb2:	e1f0      	b.n	8009f96 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009bba:	e1ec      	b.n	8009f96 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bc4:	f040 8100 	bne.w	8009dc8 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bcc:	2b40      	cmp	r3, #64	; 0x40
 8009bce:	f200 80b7 	bhi.w	8009d40 <UART_SetConfig+0x8d0>
 8009bd2:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <UART_SetConfig+0x768>)
 8009bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd8:	08009cdd 	.word	0x08009cdd
 8009bdc:	08009ce5 	.word	0x08009ce5
 8009be0:	08009d41 	.word	0x08009d41
 8009be4:	08009d41 	.word	0x08009d41
 8009be8:	08009ced 	.word	0x08009ced
 8009bec:	08009d41 	.word	0x08009d41
 8009bf0:	08009d41 	.word	0x08009d41
 8009bf4:	08009d41 	.word	0x08009d41
 8009bf8:	08009cfd 	.word	0x08009cfd
 8009bfc:	08009d41 	.word	0x08009d41
 8009c00:	08009d41 	.word	0x08009d41
 8009c04:	08009d41 	.word	0x08009d41
 8009c08:	08009d41 	.word	0x08009d41
 8009c0c:	08009d41 	.word	0x08009d41
 8009c10:	08009d41 	.word	0x08009d41
 8009c14:	08009d41 	.word	0x08009d41
 8009c18:	08009d0d 	.word	0x08009d0d
 8009c1c:	08009d41 	.word	0x08009d41
 8009c20:	08009d41 	.word	0x08009d41
 8009c24:	08009d41 	.word	0x08009d41
 8009c28:	08009d41 	.word	0x08009d41
 8009c2c:	08009d41 	.word	0x08009d41
 8009c30:	08009d41 	.word	0x08009d41
 8009c34:	08009d41 	.word	0x08009d41
 8009c38:	08009d41 	.word	0x08009d41
 8009c3c:	08009d41 	.word	0x08009d41
 8009c40:	08009d41 	.word	0x08009d41
 8009c44:	08009d41 	.word	0x08009d41
 8009c48:	08009d41 	.word	0x08009d41
 8009c4c:	08009d41 	.word	0x08009d41
 8009c50:	08009d41 	.word	0x08009d41
 8009c54:	08009d41 	.word	0x08009d41
 8009c58:	08009d33 	.word	0x08009d33
 8009c5c:	08009d41 	.word	0x08009d41
 8009c60:	08009d41 	.word	0x08009d41
 8009c64:	08009d41 	.word	0x08009d41
 8009c68:	08009d41 	.word	0x08009d41
 8009c6c:	08009d41 	.word	0x08009d41
 8009c70:	08009d41 	.word	0x08009d41
 8009c74:	08009d41 	.word	0x08009d41
 8009c78:	08009d41 	.word	0x08009d41
 8009c7c:	08009d41 	.word	0x08009d41
 8009c80:	08009d41 	.word	0x08009d41
 8009c84:	08009d41 	.word	0x08009d41
 8009c88:	08009d41 	.word	0x08009d41
 8009c8c:	08009d41 	.word	0x08009d41
 8009c90:	08009d41 	.word	0x08009d41
 8009c94:	08009d41 	.word	0x08009d41
 8009c98:	08009d41 	.word	0x08009d41
 8009c9c:	08009d41 	.word	0x08009d41
 8009ca0:	08009d41 	.word	0x08009d41
 8009ca4:	08009d41 	.word	0x08009d41
 8009ca8:	08009d41 	.word	0x08009d41
 8009cac:	08009d41 	.word	0x08009d41
 8009cb0:	08009d41 	.word	0x08009d41
 8009cb4:	08009d41 	.word	0x08009d41
 8009cb8:	08009d41 	.word	0x08009d41
 8009cbc:	08009d41 	.word	0x08009d41
 8009cc0:	08009d41 	.word	0x08009d41
 8009cc4:	08009d41 	.word	0x08009d41
 8009cc8:	08009d41 	.word	0x08009d41
 8009ccc:	08009d41 	.word	0x08009d41
 8009cd0:	08009d41 	.word	0x08009d41
 8009cd4:	08009d41 	.word	0x08009d41
 8009cd8:	08009d39 	.word	0x08009d39
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cdc:	f7fc ff6c 	bl	8006bb8 <HAL_RCC_GetPCLK1Freq>
 8009ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ce2:	e033      	b.n	8009d4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ce4:	f7fc ff7e 	bl	8006be4 <HAL_RCC_GetPCLK2Freq>
 8009ce8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009cea:	e02f      	b.n	8009d4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cec:	f107 0314 	add.w	r3, r7, #20
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe f909 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cfa:	e027      	b.n	8009d4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cfc:	f107 0308 	add.w	r3, r7, #8
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fa4d 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d0a:	e01f      	b.n	8009d4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d0c:	4b2b      	ldr	r3, [pc, #172]	; (8009dbc <UART_SetConfig+0x94c>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f003 0320 	and.w	r3, r3, #32
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d009      	beq.n	8009d2c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d18:	4b28      	ldr	r3, [pc, #160]	; (8009dbc <UART_SetConfig+0x94c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	08db      	lsrs	r3, r3, #3
 8009d1e:	f003 0303 	and.w	r3, r3, #3
 8009d22:	4a27      	ldr	r2, [pc, #156]	; (8009dc0 <UART_SetConfig+0x950>)
 8009d24:	fa22 f303 	lsr.w	r3, r2, r3
 8009d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d2a:	e00f      	b.n	8009d4c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009d2c:	4b24      	ldr	r3, [pc, #144]	; (8009dc0 <UART_SetConfig+0x950>)
 8009d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d30:	e00c      	b.n	8009d4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d32:	4b24      	ldr	r3, [pc, #144]	; (8009dc4 <UART_SetConfig+0x954>)
 8009d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d36:	e009      	b.n	8009d4c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d3e:	e005      	b.n	8009d4c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 8121 	beq.w	8009f96 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d58:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <UART_SetConfig+0x948>)
 8009d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d66:	005a      	lsls	r2, r3, #1
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	085b      	lsrs	r3, r3, #1
 8009d6e:	441a      	add	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	2b0f      	cmp	r3, #15
 8009d80:	d916      	bls.n	8009db0 <UART_SetConfig+0x940>
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d88:	d212      	bcs.n	8009db0 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	f023 030f 	bic.w	r3, r3, #15
 8009d92:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	085b      	lsrs	r3, r3, #1
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	f003 0307 	and.w	r3, r3, #7
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009da2:	4313      	orrs	r3, r2
 8009da4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009dac:	60da      	str	r2, [r3, #12]
 8009dae:	e0f2      	b.n	8009f96 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009db6:	e0ee      	b.n	8009f96 <UART_SetConfig+0xb26>
 8009db8:	0800b970 	.word	0x0800b970
 8009dbc:	58024400 	.word	0x58024400
 8009dc0:	03d09000 	.word	0x03d09000
 8009dc4:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dcc:	2b40      	cmp	r3, #64	; 0x40
 8009dce:	f200 80b7 	bhi.w	8009f40 <UART_SetConfig+0xad0>
 8009dd2:	a201      	add	r2, pc, #4	; (adr r2, 8009dd8 <UART_SetConfig+0x968>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009edd 	.word	0x08009edd
 8009ddc:	08009ee5 	.word	0x08009ee5
 8009de0:	08009f41 	.word	0x08009f41
 8009de4:	08009f41 	.word	0x08009f41
 8009de8:	08009eed 	.word	0x08009eed
 8009dec:	08009f41 	.word	0x08009f41
 8009df0:	08009f41 	.word	0x08009f41
 8009df4:	08009f41 	.word	0x08009f41
 8009df8:	08009efd 	.word	0x08009efd
 8009dfc:	08009f41 	.word	0x08009f41
 8009e00:	08009f41 	.word	0x08009f41
 8009e04:	08009f41 	.word	0x08009f41
 8009e08:	08009f41 	.word	0x08009f41
 8009e0c:	08009f41 	.word	0x08009f41
 8009e10:	08009f41 	.word	0x08009f41
 8009e14:	08009f41 	.word	0x08009f41
 8009e18:	08009f0d 	.word	0x08009f0d
 8009e1c:	08009f41 	.word	0x08009f41
 8009e20:	08009f41 	.word	0x08009f41
 8009e24:	08009f41 	.word	0x08009f41
 8009e28:	08009f41 	.word	0x08009f41
 8009e2c:	08009f41 	.word	0x08009f41
 8009e30:	08009f41 	.word	0x08009f41
 8009e34:	08009f41 	.word	0x08009f41
 8009e38:	08009f41 	.word	0x08009f41
 8009e3c:	08009f41 	.word	0x08009f41
 8009e40:	08009f41 	.word	0x08009f41
 8009e44:	08009f41 	.word	0x08009f41
 8009e48:	08009f41 	.word	0x08009f41
 8009e4c:	08009f41 	.word	0x08009f41
 8009e50:	08009f41 	.word	0x08009f41
 8009e54:	08009f41 	.word	0x08009f41
 8009e58:	08009f33 	.word	0x08009f33
 8009e5c:	08009f41 	.word	0x08009f41
 8009e60:	08009f41 	.word	0x08009f41
 8009e64:	08009f41 	.word	0x08009f41
 8009e68:	08009f41 	.word	0x08009f41
 8009e6c:	08009f41 	.word	0x08009f41
 8009e70:	08009f41 	.word	0x08009f41
 8009e74:	08009f41 	.word	0x08009f41
 8009e78:	08009f41 	.word	0x08009f41
 8009e7c:	08009f41 	.word	0x08009f41
 8009e80:	08009f41 	.word	0x08009f41
 8009e84:	08009f41 	.word	0x08009f41
 8009e88:	08009f41 	.word	0x08009f41
 8009e8c:	08009f41 	.word	0x08009f41
 8009e90:	08009f41 	.word	0x08009f41
 8009e94:	08009f41 	.word	0x08009f41
 8009e98:	08009f41 	.word	0x08009f41
 8009e9c:	08009f41 	.word	0x08009f41
 8009ea0:	08009f41 	.word	0x08009f41
 8009ea4:	08009f41 	.word	0x08009f41
 8009ea8:	08009f41 	.word	0x08009f41
 8009eac:	08009f41 	.word	0x08009f41
 8009eb0:	08009f41 	.word	0x08009f41
 8009eb4:	08009f41 	.word	0x08009f41
 8009eb8:	08009f41 	.word	0x08009f41
 8009ebc:	08009f41 	.word	0x08009f41
 8009ec0:	08009f41 	.word	0x08009f41
 8009ec4:	08009f41 	.word	0x08009f41
 8009ec8:	08009f41 	.word	0x08009f41
 8009ecc:	08009f41 	.word	0x08009f41
 8009ed0:	08009f41 	.word	0x08009f41
 8009ed4:	08009f41 	.word	0x08009f41
 8009ed8:	08009f39 	.word	0x08009f39
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009edc:	f7fc fe6c 	bl	8006bb8 <HAL_RCC_GetPCLK1Freq>
 8009ee0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ee2:	e033      	b.n	8009f4c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ee4:	f7fc fe7e 	bl	8006be4 <HAL_RCC_GetPCLK2Freq>
 8009ee8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009eea:	e02f      	b.n	8009f4c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eec:	f107 0314 	add.w	r3, r7, #20
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fe f809 	bl	8007f08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009efa:	e027      	b.n	8009f4c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009efc:	f107 0308 	add.w	r3, r7, #8
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe f94d 	bl	80081a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f0a:	e01f      	b.n	8009f4c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f0c:	4b2c      	ldr	r3, [pc, #176]	; (8009fc0 <UART_SetConfig+0xb50>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0320 	and.w	r3, r3, #32
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d009      	beq.n	8009f2c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f18:	4b29      	ldr	r3, [pc, #164]	; (8009fc0 <UART_SetConfig+0xb50>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	08db      	lsrs	r3, r3, #3
 8009f1e:	f003 0303 	and.w	r3, r3, #3
 8009f22:	4a28      	ldr	r2, [pc, #160]	; (8009fc4 <UART_SetConfig+0xb54>)
 8009f24:	fa22 f303 	lsr.w	r3, r2, r3
 8009f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f2a:	e00f      	b.n	8009f4c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8009f2c:	4b25      	ldr	r3, [pc, #148]	; (8009fc4 <UART_SetConfig+0xb54>)
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f30:	e00c      	b.n	8009f4c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f32:	4b25      	ldr	r3, [pc, #148]	; (8009fc8 <UART_SetConfig+0xb58>)
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f36:	e009      	b.n	8009f4c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f3e:	e005      	b.n	8009f4c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f4a:	bf00      	nop
    }

    if (pclk != 0U)
 8009f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d021      	beq.n	8009f96 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	4a1d      	ldr	r2, [pc, #116]	; (8009fcc <UART_SetConfig+0xb5c>)
 8009f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	085b      	lsrs	r3, r3, #1
 8009f6a:	441a      	add	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	2b0f      	cmp	r3, #15
 8009f7c:	d908      	bls.n	8009f90 <UART_SetConfig+0xb20>
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f84:	d204      	bcs.n	8009f90 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f8c:	60da      	str	r2, [r3, #12]
 8009f8e:	e002      	b.n	8009f96 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009fb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3738      	adds	r7, #56	; 0x38
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009fc0:	58024400 	.word	0x58024400
 8009fc4:	03d09000 	.word	0x03d09000
 8009fc8:	003d0900 	.word	0x003d0900
 8009fcc:	0800b970 	.word	0x0800b970

08009fd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00a      	beq.n	8009ffa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffe:	f003 0302 	and.w	r3, r3, #2
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d00a      	beq.n	800a03e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	430a      	orrs	r2, r1
 800a05e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	f003 0310 	and.w	r3, r3, #16
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00a      	beq.n	800a082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	430a      	orrs	r2, r1
 800a080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00a      	beq.n	800a0a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d01a      	beq.n	800a0e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0ce:	d10a      	bne.n	800a0e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	430a      	orrs	r2, r1
 800a0e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00a      	beq.n	800a108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	605a      	str	r2, [r3, #4]
  }
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af02      	add	r7, sp, #8
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a124:	f7f7 fa42 	bl	80015ac <HAL_GetTick>
 800a128:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0308 	and.w	r3, r3, #8
 800a134:	2b08      	cmp	r3, #8
 800a136:	d10e      	bne.n	800a156 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f82c 	bl	800a1a4 <UART_WaitOnFlagUntilTimeout>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e022      	b.n	800a19c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0304 	and.w	r3, r3, #4
 800a160:	2b04      	cmp	r3, #4
 800a162:	d10e      	bne.n	800a182 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 f816 	bl	800a1a4 <UART_WaitOnFlagUntilTimeout>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e00c      	b.n	800a19c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2220      	movs	r2, #32
 800a186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2220      	movs	r2, #32
 800a18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1b4:	e062      	b.n	800a27c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1bc:	d05e      	beq.n	800a27c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1be:	f7f7 f9f5 	bl	80015ac <HAL_GetTick>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d302      	bcc.n	800a1d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d11d      	bne.n	800a210 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a1e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f022 0201 	bic.w	r2, r2, #1
 800a1f2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2220      	movs	r2, #32
 800a1f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2220      	movs	r2, #32
 800a200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e045      	b.n	800a29c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d02e      	beq.n	800a27c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a22c:	d126      	bne.n	800a27c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a236:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a246:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f022 0201 	bic.w	r2, r2, #1
 800a256:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2220      	movs	r2, #32
 800a25c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2220      	movs	r2, #32
 800a264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e00f      	b.n	800a29c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	69da      	ldr	r2, [r3, #28]
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	4013      	ands	r3, r2
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	429a      	cmp	r2, r3
 800a28a:	bf0c      	ite	eq
 800a28c:	2301      	moveq	r3, #1
 800a28e:	2300      	movne	r3, #0
 800a290:	b2db      	uxtb	r3, r3
 800a292:	461a      	mov	r2, r3
 800a294:	79fb      	ldrb	r3, [r7, #7]
 800a296:	429a      	cmp	r2, r3
 800a298:	d08d      	beq.n	800a1b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d101      	bne.n	800a2ba <HAL_UARTEx_DisableFifoMode+0x16>
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	e027      	b.n	800a30a <HAL_UARTEx_DisableFifoMode+0x66>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2224      	movs	r2, #36	; 0x24
 800a2c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f022 0201 	bic.w	r2, r2, #1
 800a2e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e02d      	b.n	800a38a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2224      	movs	r2, #36	; 0x24
 800a33a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 0201 	bic.w	r2, r2, #1
 800a354:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f850 	bl	800a410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2220      	movs	r2, #32
 800a37c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d101      	bne.n	800a3aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	e02d      	b.n	800a406 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2224      	movs	r2, #36	; 0x24
 800a3b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0201 	bic.w	r2, r2, #1
 800a3d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f812 	bl	800a410 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a410:	b480      	push	{r7}
 800a412:	b089      	sub	sp, #36	; 0x24
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a418:	4a2f      	ldr	r2, [pc, #188]	; (800a4d8 <UARTEx_SetNbDataToProcess+0xc8>)
 800a41a:	f107 0314 	add.w	r3, r7, #20
 800a41e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a422:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a426:	4a2d      	ldr	r2, [pc, #180]	; (800a4dc <UARTEx_SetNbDataToProcess+0xcc>)
 800a428:	f107 030c 	add.w	r3, r7, #12
 800a42c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a430:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d108      	bne.n	800a44e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a44c:	e03d      	b.n	800a4ca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a44e:	2310      	movs	r3, #16
 800a450:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a452:	2310      	movs	r3, #16
 800a454:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	0e5b      	lsrs	r3, r3, #25
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	f003 0307 	and.w	r3, r3, #7
 800a464:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	0f5b      	lsrs	r3, r3, #29
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a476:	7fbb      	ldrb	r3, [r7, #30]
 800a478:	7f3a      	ldrb	r2, [r7, #28]
 800a47a:	f107 0120 	add.w	r1, r7, #32
 800a47e:	440a      	add	r2, r1
 800a480:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a484:	fb02 f303 	mul.w	r3, r2, r3
 800a488:	7f3a      	ldrb	r2, [r7, #28]
 800a48a:	f107 0120 	add.w	r1, r7, #32
 800a48e:	440a      	add	r2, r1
 800a490:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a494:	fb93 f3f2 	sdiv	r3, r3, r2
 800a498:	b29a      	uxth	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a4a0:	7ffb      	ldrb	r3, [r7, #31]
 800a4a2:	7f7a      	ldrb	r2, [r7, #29]
 800a4a4:	f107 0120 	add.w	r1, r7, #32
 800a4a8:	440a      	add	r2, r1
 800a4aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a4ae:	fb02 f303 	mul.w	r3, r2, r3
 800a4b2:	7f7a      	ldrb	r2, [r7, #29]
 800a4b4:	f107 0120 	add.w	r1, r7, #32
 800a4b8:	440a      	add	r2, r1
 800a4ba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a4be:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4ca:	bf00      	nop
 800a4cc:	3724      	adds	r7, #36	; 0x24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	0800b948 	.word	0x0800b948
 800a4dc:	0800b950 	.word	0x0800b950

0800a4e0 <__errno>:
 800a4e0:	4b01      	ldr	r3, [pc, #4]	; (800a4e8 <__errno+0x8>)
 800a4e2:	6818      	ldr	r0, [r3, #0]
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	20000010 	.word	0x20000010

0800a4ec <__libc_init_array>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	4e0d      	ldr	r6, [pc, #52]	; (800a524 <__libc_init_array+0x38>)
 800a4f0:	4c0d      	ldr	r4, [pc, #52]	; (800a528 <__libc_init_array+0x3c>)
 800a4f2:	1ba4      	subs	r4, r4, r6
 800a4f4:	10a4      	asrs	r4, r4, #2
 800a4f6:	2500      	movs	r5, #0
 800a4f8:	42a5      	cmp	r5, r4
 800a4fa:	d109      	bne.n	800a510 <__libc_init_array+0x24>
 800a4fc:	4e0b      	ldr	r6, [pc, #44]	; (800a52c <__libc_init_array+0x40>)
 800a4fe:	4c0c      	ldr	r4, [pc, #48]	; (800a530 <__libc_init_array+0x44>)
 800a500:	f001 fa10 	bl	800b924 <_init>
 800a504:	1ba4      	subs	r4, r4, r6
 800a506:	10a4      	asrs	r4, r4, #2
 800a508:	2500      	movs	r5, #0
 800a50a:	42a5      	cmp	r5, r4
 800a50c:	d105      	bne.n	800a51a <__libc_init_array+0x2e>
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a514:	4798      	blx	r3
 800a516:	3501      	adds	r5, #1
 800a518:	e7ee      	b.n	800a4f8 <__libc_init_array+0xc>
 800a51a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a51e:	4798      	blx	r3
 800a520:	3501      	adds	r5, #1
 800a522:	e7f2      	b.n	800a50a <__libc_init_array+0x1e>
 800a524:	0800bba0 	.word	0x0800bba0
 800a528:	0800bba0 	.word	0x0800bba0
 800a52c:	0800bba0 	.word	0x0800bba0
 800a530:	0800bba4 	.word	0x0800bba4

0800a534 <memset>:
 800a534:	4402      	add	r2, r0
 800a536:	4603      	mov	r3, r0
 800a538:	4293      	cmp	r3, r2
 800a53a:	d100      	bne.n	800a53e <memset+0xa>
 800a53c:	4770      	bx	lr
 800a53e:	f803 1b01 	strb.w	r1, [r3], #1
 800a542:	e7f9      	b.n	800a538 <memset+0x4>

0800a544 <siprintf>:
 800a544:	b40e      	push	{r1, r2, r3}
 800a546:	b500      	push	{lr}
 800a548:	b09c      	sub	sp, #112	; 0x70
 800a54a:	ab1d      	add	r3, sp, #116	; 0x74
 800a54c:	9002      	str	r0, [sp, #8]
 800a54e:	9006      	str	r0, [sp, #24]
 800a550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a554:	4809      	ldr	r0, [pc, #36]	; (800a57c <siprintf+0x38>)
 800a556:	9107      	str	r1, [sp, #28]
 800a558:	9104      	str	r1, [sp, #16]
 800a55a:	4909      	ldr	r1, [pc, #36]	; (800a580 <siprintf+0x3c>)
 800a55c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a560:	9105      	str	r1, [sp, #20]
 800a562:	6800      	ldr	r0, [r0, #0]
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	a902      	add	r1, sp, #8
 800a568:	f000 f866 	bl	800a638 <_svfiprintf_r>
 800a56c:	9b02      	ldr	r3, [sp, #8]
 800a56e:	2200      	movs	r2, #0
 800a570:	701a      	strb	r2, [r3, #0]
 800a572:	b01c      	add	sp, #112	; 0x70
 800a574:	f85d eb04 	ldr.w	lr, [sp], #4
 800a578:	b003      	add	sp, #12
 800a57a:	4770      	bx	lr
 800a57c:	20000010 	.word	0x20000010
 800a580:	ffff0208 	.word	0xffff0208

0800a584 <__ssputs_r>:
 800a584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a588:	688e      	ldr	r6, [r1, #8]
 800a58a:	429e      	cmp	r6, r3
 800a58c:	4682      	mov	sl, r0
 800a58e:	460c      	mov	r4, r1
 800a590:	4690      	mov	r8, r2
 800a592:	4699      	mov	r9, r3
 800a594:	d837      	bhi.n	800a606 <__ssputs_r+0x82>
 800a596:	898a      	ldrh	r2, [r1, #12]
 800a598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a59c:	d031      	beq.n	800a602 <__ssputs_r+0x7e>
 800a59e:	6825      	ldr	r5, [r4, #0]
 800a5a0:	6909      	ldr	r1, [r1, #16]
 800a5a2:	1a6f      	subs	r7, r5, r1
 800a5a4:	6965      	ldr	r5, [r4, #20]
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5ac:	fb95 f5f3 	sdiv	r5, r5, r3
 800a5b0:	f109 0301 	add.w	r3, r9, #1
 800a5b4:	443b      	add	r3, r7
 800a5b6:	429d      	cmp	r5, r3
 800a5b8:	bf38      	it	cc
 800a5ba:	461d      	movcc	r5, r3
 800a5bc:	0553      	lsls	r3, r2, #21
 800a5be:	d530      	bpl.n	800a622 <__ssputs_r+0x9e>
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	f000 fb2b 	bl	800ac1c <_malloc_r>
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	b950      	cbnz	r0, 800a5e0 <__ssputs_r+0x5c>
 800a5ca:	230c      	movs	r3, #12
 800a5cc:	f8ca 3000 	str.w	r3, [sl]
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5d6:	81a3      	strh	r3, [r4, #12]
 800a5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e0:	463a      	mov	r2, r7
 800a5e2:	6921      	ldr	r1, [r4, #16]
 800a5e4:	f000 faa8 	bl	800ab38 <memcpy>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f2:	81a3      	strh	r3, [r4, #12]
 800a5f4:	6126      	str	r6, [r4, #16]
 800a5f6:	6165      	str	r5, [r4, #20]
 800a5f8:	443e      	add	r6, r7
 800a5fa:	1bed      	subs	r5, r5, r7
 800a5fc:	6026      	str	r6, [r4, #0]
 800a5fe:	60a5      	str	r5, [r4, #8]
 800a600:	464e      	mov	r6, r9
 800a602:	454e      	cmp	r6, r9
 800a604:	d900      	bls.n	800a608 <__ssputs_r+0x84>
 800a606:	464e      	mov	r6, r9
 800a608:	4632      	mov	r2, r6
 800a60a:	4641      	mov	r1, r8
 800a60c:	6820      	ldr	r0, [r4, #0]
 800a60e:	f000 fa9e 	bl	800ab4e <memmove>
 800a612:	68a3      	ldr	r3, [r4, #8]
 800a614:	1b9b      	subs	r3, r3, r6
 800a616:	60a3      	str	r3, [r4, #8]
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	441e      	add	r6, r3
 800a61c:	6026      	str	r6, [r4, #0]
 800a61e:	2000      	movs	r0, #0
 800a620:	e7dc      	b.n	800a5dc <__ssputs_r+0x58>
 800a622:	462a      	mov	r2, r5
 800a624:	f000 fb54 	bl	800acd0 <_realloc_r>
 800a628:	4606      	mov	r6, r0
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d1e2      	bne.n	800a5f4 <__ssputs_r+0x70>
 800a62e:	6921      	ldr	r1, [r4, #16]
 800a630:	4650      	mov	r0, sl
 800a632:	f000 faa5 	bl	800ab80 <_free_r>
 800a636:	e7c8      	b.n	800a5ca <__ssputs_r+0x46>

0800a638 <_svfiprintf_r>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	461d      	mov	r5, r3
 800a63e:	898b      	ldrh	r3, [r1, #12]
 800a640:	061f      	lsls	r7, r3, #24
 800a642:	b09d      	sub	sp, #116	; 0x74
 800a644:	4680      	mov	r8, r0
 800a646:	460c      	mov	r4, r1
 800a648:	4616      	mov	r6, r2
 800a64a:	d50f      	bpl.n	800a66c <_svfiprintf_r+0x34>
 800a64c:	690b      	ldr	r3, [r1, #16]
 800a64e:	b96b      	cbnz	r3, 800a66c <_svfiprintf_r+0x34>
 800a650:	2140      	movs	r1, #64	; 0x40
 800a652:	f000 fae3 	bl	800ac1c <_malloc_r>
 800a656:	6020      	str	r0, [r4, #0]
 800a658:	6120      	str	r0, [r4, #16]
 800a65a:	b928      	cbnz	r0, 800a668 <_svfiprintf_r+0x30>
 800a65c:	230c      	movs	r3, #12
 800a65e:	f8c8 3000 	str.w	r3, [r8]
 800a662:	f04f 30ff 	mov.w	r0, #4294967295
 800a666:	e0c8      	b.n	800a7fa <_svfiprintf_r+0x1c2>
 800a668:	2340      	movs	r3, #64	; 0x40
 800a66a:	6163      	str	r3, [r4, #20]
 800a66c:	2300      	movs	r3, #0
 800a66e:	9309      	str	r3, [sp, #36]	; 0x24
 800a670:	2320      	movs	r3, #32
 800a672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a676:	2330      	movs	r3, #48	; 0x30
 800a678:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a67c:	9503      	str	r5, [sp, #12]
 800a67e:	f04f 0b01 	mov.w	fp, #1
 800a682:	4637      	mov	r7, r6
 800a684:	463d      	mov	r5, r7
 800a686:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a68a:	b10b      	cbz	r3, 800a690 <_svfiprintf_r+0x58>
 800a68c:	2b25      	cmp	r3, #37	; 0x25
 800a68e:	d13e      	bne.n	800a70e <_svfiprintf_r+0xd6>
 800a690:	ebb7 0a06 	subs.w	sl, r7, r6
 800a694:	d00b      	beq.n	800a6ae <_svfiprintf_r+0x76>
 800a696:	4653      	mov	r3, sl
 800a698:	4632      	mov	r2, r6
 800a69a:	4621      	mov	r1, r4
 800a69c:	4640      	mov	r0, r8
 800a69e:	f7ff ff71 	bl	800a584 <__ssputs_r>
 800a6a2:	3001      	adds	r0, #1
 800a6a4:	f000 80a4 	beq.w	800a7f0 <_svfiprintf_r+0x1b8>
 800a6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6aa:	4453      	add	r3, sl
 800a6ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ae:	783b      	ldrb	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 809d 	beq.w	800a7f0 <_svfiprintf_r+0x1b8>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c0:	9304      	str	r3, [sp, #16]
 800a6c2:	9307      	str	r3, [sp, #28]
 800a6c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a6ca:	462f      	mov	r7, r5
 800a6cc:	2205      	movs	r2, #5
 800a6ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a6d2:	4850      	ldr	r0, [pc, #320]	; (800a814 <_svfiprintf_r+0x1dc>)
 800a6d4:	f7f5 fe04 	bl	80002e0 <memchr>
 800a6d8:	9b04      	ldr	r3, [sp, #16]
 800a6da:	b9d0      	cbnz	r0, 800a712 <_svfiprintf_r+0xda>
 800a6dc:	06d9      	lsls	r1, r3, #27
 800a6de:	bf44      	itt	mi
 800a6e0:	2220      	movmi	r2, #32
 800a6e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6e6:	071a      	lsls	r2, r3, #28
 800a6e8:	bf44      	itt	mi
 800a6ea:	222b      	movmi	r2, #43	; 0x2b
 800a6ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6f0:	782a      	ldrb	r2, [r5, #0]
 800a6f2:	2a2a      	cmp	r2, #42	; 0x2a
 800a6f4:	d015      	beq.n	800a722 <_svfiprintf_r+0xea>
 800a6f6:	9a07      	ldr	r2, [sp, #28]
 800a6f8:	462f      	mov	r7, r5
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	250a      	movs	r5, #10
 800a6fe:	4639      	mov	r1, r7
 800a700:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a704:	3b30      	subs	r3, #48	; 0x30
 800a706:	2b09      	cmp	r3, #9
 800a708:	d94d      	bls.n	800a7a6 <_svfiprintf_r+0x16e>
 800a70a:	b1b8      	cbz	r0, 800a73c <_svfiprintf_r+0x104>
 800a70c:	e00f      	b.n	800a72e <_svfiprintf_r+0xf6>
 800a70e:	462f      	mov	r7, r5
 800a710:	e7b8      	b.n	800a684 <_svfiprintf_r+0x4c>
 800a712:	4a40      	ldr	r2, [pc, #256]	; (800a814 <_svfiprintf_r+0x1dc>)
 800a714:	1a80      	subs	r0, r0, r2
 800a716:	fa0b f000 	lsl.w	r0, fp, r0
 800a71a:	4318      	orrs	r0, r3
 800a71c:	9004      	str	r0, [sp, #16]
 800a71e:	463d      	mov	r5, r7
 800a720:	e7d3      	b.n	800a6ca <_svfiprintf_r+0x92>
 800a722:	9a03      	ldr	r2, [sp, #12]
 800a724:	1d11      	adds	r1, r2, #4
 800a726:	6812      	ldr	r2, [r2, #0]
 800a728:	9103      	str	r1, [sp, #12]
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	db01      	blt.n	800a732 <_svfiprintf_r+0xfa>
 800a72e:	9207      	str	r2, [sp, #28]
 800a730:	e004      	b.n	800a73c <_svfiprintf_r+0x104>
 800a732:	4252      	negs	r2, r2
 800a734:	f043 0302 	orr.w	r3, r3, #2
 800a738:	9207      	str	r2, [sp, #28]
 800a73a:	9304      	str	r3, [sp, #16]
 800a73c:	783b      	ldrb	r3, [r7, #0]
 800a73e:	2b2e      	cmp	r3, #46	; 0x2e
 800a740:	d10c      	bne.n	800a75c <_svfiprintf_r+0x124>
 800a742:	787b      	ldrb	r3, [r7, #1]
 800a744:	2b2a      	cmp	r3, #42	; 0x2a
 800a746:	d133      	bne.n	800a7b0 <_svfiprintf_r+0x178>
 800a748:	9b03      	ldr	r3, [sp, #12]
 800a74a:	1d1a      	adds	r2, r3, #4
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	9203      	str	r2, [sp, #12]
 800a750:	2b00      	cmp	r3, #0
 800a752:	bfb8      	it	lt
 800a754:	f04f 33ff 	movlt.w	r3, #4294967295
 800a758:	3702      	adds	r7, #2
 800a75a:	9305      	str	r3, [sp, #20]
 800a75c:	4d2e      	ldr	r5, [pc, #184]	; (800a818 <_svfiprintf_r+0x1e0>)
 800a75e:	7839      	ldrb	r1, [r7, #0]
 800a760:	2203      	movs	r2, #3
 800a762:	4628      	mov	r0, r5
 800a764:	f7f5 fdbc 	bl	80002e0 <memchr>
 800a768:	b138      	cbz	r0, 800a77a <_svfiprintf_r+0x142>
 800a76a:	2340      	movs	r3, #64	; 0x40
 800a76c:	1b40      	subs	r0, r0, r5
 800a76e:	fa03 f000 	lsl.w	r0, r3, r0
 800a772:	9b04      	ldr	r3, [sp, #16]
 800a774:	4303      	orrs	r3, r0
 800a776:	3701      	adds	r7, #1
 800a778:	9304      	str	r3, [sp, #16]
 800a77a:	7839      	ldrb	r1, [r7, #0]
 800a77c:	4827      	ldr	r0, [pc, #156]	; (800a81c <_svfiprintf_r+0x1e4>)
 800a77e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a782:	2206      	movs	r2, #6
 800a784:	1c7e      	adds	r6, r7, #1
 800a786:	f7f5 fdab 	bl	80002e0 <memchr>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d038      	beq.n	800a800 <_svfiprintf_r+0x1c8>
 800a78e:	4b24      	ldr	r3, [pc, #144]	; (800a820 <_svfiprintf_r+0x1e8>)
 800a790:	bb13      	cbnz	r3, 800a7d8 <_svfiprintf_r+0x1a0>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	3307      	adds	r3, #7
 800a796:	f023 0307 	bic.w	r3, r3, #7
 800a79a:	3308      	adds	r3, #8
 800a79c:	9303      	str	r3, [sp, #12]
 800a79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a0:	444b      	add	r3, r9
 800a7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a4:	e76d      	b.n	800a682 <_svfiprintf_r+0x4a>
 800a7a6:	fb05 3202 	mla	r2, r5, r2, r3
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	460f      	mov	r7, r1
 800a7ae:	e7a6      	b.n	800a6fe <_svfiprintf_r+0xc6>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	3701      	adds	r7, #1
 800a7b4:	9305      	str	r3, [sp, #20]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	250a      	movs	r5, #10
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c0:	3a30      	subs	r2, #48	; 0x30
 800a7c2:	2a09      	cmp	r2, #9
 800a7c4:	d903      	bls.n	800a7ce <_svfiprintf_r+0x196>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d0c8      	beq.n	800a75c <_svfiprintf_r+0x124>
 800a7ca:	9105      	str	r1, [sp, #20]
 800a7cc:	e7c6      	b.n	800a75c <_svfiprintf_r+0x124>
 800a7ce:	fb05 2101 	mla	r1, r5, r1, r2
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	4607      	mov	r7, r0
 800a7d6:	e7f0      	b.n	800a7ba <_svfiprintf_r+0x182>
 800a7d8:	ab03      	add	r3, sp, #12
 800a7da:	9300      	str	r3, [sp, #0]
 800a7dc:	4622      	mov	r2, r4
 800a7de:	4b11      	ldr	r3, [pc, #68]	; (800a824 <_svfiprintf_r+0x1ec>)
 800a7e0:	a904      	add	r1, sp, #16
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	f3af 8000 	nop.w
 800a7e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a7ec:	4681      	mov	r9, r0
 800a7ee:	d1d6      	bne.n	800a79e <_svfiprintf_r+0x166>
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	065b      	lsls	r3, r3, #25
 800a7f4:	f53f af35 	bmi.w	800a662 <_svfiprintf_r+0x2a>
 800a7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7fa:	b01d      	add	sp, #116	; 0x74
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	ab03      	add	r3, sp, #12
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	4622      	mov	r2, r4
 800a806:	4b07      	ldr	r3, [pc, #28]	; (800a824 <_svfiprintf_r+0x1ec>)
 800a808:	a904      	add	r1, sp, #16
 800a80a:	4640      	mov	r0, r8
 800a80c:	f000 f882 	bl	800a914 <_printf_i>
 800a810:	e7ea      	b.n	800a7e8 <_svfiprintf_r+0x1b0>
 800a812:	bf00      	nop
 800a814:	0800b988 	.word	0x0800b988
 800a818:	0800b98e 	.word	0x0800b98e
 800a81c:	0800b992 	.word	0x0800b992
 800a820:	00000000 	.word	0x00000000
 800a824:	0800a585 	.word	0x0800a585

0800a828 <_printf_common>:
 800a828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82c:	4691      	mov	r9, r2
 800a82e:	461f      	mov	r7, r3
 800a830:	688a      	ldr	r2, [r1, #8]
 800a832:	690b      	ldr	r3, [r1, #16]
 800a834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a838:	4293      	cmp	r3, r2
 800a83a:	bfb8      	it	lt
 800a83c:	4613      	movlt	r3, r2
 800a83e:	f8c9 3000 	str.w	r3, [r9]
 800a842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a846:	4606      	mov	r6, r0
 800a848:	460c      	mov	r4, r1
 800a84a:	b112      	cbz	r2, 800a852 <_printf_common+0x2a>
 800a84c:	3301      	adds	r3, #1
 800a84e:	f8c9 3000 	str.w	r3, [r9]
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	0699      	lsls	r1, r3, #26
 800a856:	bf42      	ittt	mi
 800a858:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a85c:	3302      	addmi	r3, #2
 800a85e:	f8c9 3000 	strmi.w	r3, [r9]
 800a862:	6825      	ldr	r5, [r4, #0]
 800a864:	f015 0506 	ands.w	r5, r5, #6
 800a868:	d107      	bne.n	800a87a <_printf_common+0x52>
 800a86a:	f104 0a19 	add.w	sl, r4, #25
 800a86e:	68e3      	ldr	r3, [r4, #12]
 800a870:	f8d9 2000 	ldr.w	r2, [r9]
 800a874:	1a9b      	subs	r3, r3, r2
 800a876:	42ab      	cmp	r3, r5
 800a878:	dc28      	bgt.n	800a8cc <_printf_common+0xa4>
 800a87a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a87e:	6822      	ldr	r2, [r4, #0]
 800a880:	3300      	adds	r3, #0
 800a882:	bf18      	it	ne
 800a884:	2301      	movne	r3, #1
 800a886:	0692      	lsls	r2, r2, #26
 800a888:	d42d      	bmi.n	800a8e6 <_printf_common+0xbe>
 800a88a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a88e:	4639      	mov	r1, r7
 800a890:	4630      	mov	r0, r6
 800a892:	47c0      	blx	r8
 800a894:	3001      	adds	r0, #1
 800a896:	d020      	beq.n	800a8da <_printf_common+0xb2>
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	68e5      	ldr	r5, [r4, #12]
 800a89c:	f8d9 2000 	ldr.w	r2, [r9]
 800a8a0:	f003 0306 	and.w	r3, r3, #6
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	bf08      	it	eq
 800a8a8:	1aad      	subeq	r5, r5, r2
 800a8aa:	68a3      	ldr	r3, [r4, #8]
 800a8ac:	6922      	ldr	r2, [r4, #16]
 800a8ae:	bf0c      	ite	eq
 800a8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8b4:	2500      	movne	r5, #0
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	bfc4      	itt	gt
 800a8ba:	1a9b      	subgt	r3, r3, r2
 800a8bc:	18ed      	addgt	r5, r5, r3
 800a8be:	f04f 0900 	mov.w	r9, #0
 800a8c2:	341a      	adds	r4, #26
 800a8c4:	454d      	cmp	r5, r9
 800a8c6:	d11a      	bne.n	800a8fe <_printf_common+0xd6>
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	e008      	b.n	800a8de <_printf_common+0xb6>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	4652      	mov	r2, sl
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	47c0      	blx	r8
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	d103      	bne.n	800a8e2 <_printf_common+0xba>
 800a8da:	f04f 30ff 	mov.w	r0, #4294967295
 800a8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e2:	3501      	adds	r5, #1
 800a8e4:	e7c3      	b.n	800a86e <_printf_common+0x46>
 800a8e6:	18e1      	adds	r1, r4, r3
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	2030      	movs	r0, #48	; 0x30
 800a8ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8f0:	4422      	add	r2, r4
 800a8f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8fa:	3302      	adds	r3, #2
 800a8fc:	e7c5      	b.n	800a88a <_printf_common+0x62>
 800a8fe:	2301      	movs	r3, #1
 800a900:	4622      	mov	r2, r4
 800a902:	4639      	mov	r1, r7
 800a904:	4630      	mov	r0, r6
 800a906:	47c0      	blx	r8
 800a908:	3001      	adds	r0, #1
 800a90a:	d0e6      	beq.n	800a8da <_printf_common+0xb2>
 800a90c:	f109 0901 	add.w	r9, r9, #1
 800a910:	e7d8      	b.n	800a8c4 <_printf_common+0x9c>
	...

0800a914 <_printf_i>:
 800a914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a918:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a91c:	460c      	mov	r4, r1
 800a91e:	7e09      	ldrb	r1, [r1, #24]
 800a920:	b085      	sub	sp, #20
 800a922:	296e      	cmp	r1, #110	; 0x6e
 800a924:	4617      	mov	r7, r2
 800a926:	4606      	mov	r6, r0
 800a928:	4698      	mov	r8, r3
 800a92a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a92c:	f000 80b3 	beq.w	800aa96 <_printf_i+0x182>
 800a930:	d822      	bhi.n	800a978 <_printf_i+0x64>
 800a932:	2963      	cmp	r1, #99	; 0x63
 800a934:	d036      	beq.n	800a9a4 <_printf_i+0x90>
 800a936:	d80a      	bhi.n	800a94e <_printf_i+0x3a>
 800a938:	2900      	cmp	r1, #0
 800a93a:	f000 80b9 	beq.w	800aab0 <_printf_i+0x19c>
 800a93e:	2958      	cmp	r1, #88	; 0x58
 800a940:	f000 8083 	beq.w	800aa4a <_printf_i+0x136>
 800a944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a94c:	e032      	b.n	800a9b4 <_printf_i+0xa0>
 800a94e:	2964      	cmp	r1, #100	; 0x64
 800a950:	d001      	beq.n	800a956 <_printf_i+0x42>
 800a952:	2969      	cmp	r1, #105	; 0x69
 800a954:	d1f6      	bne.n	800a944 <_printf_i+0x30>
 800a956:	6820      	ldr	r0, [r4, #0]
 800a958:	6813      	ldr	r3, [r2, #0]
 800a95a:	0605      	lsls	r5, r0, #24
 800a95c:	f103 0104 	add.w	r1, r3, #4
 800a960:	d52a      	bpl.n	800a9b8 <_printf_i+0xa4>
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6011      	str	r1, [r2, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	da03      	bge.n	800a972 <_printf_i+0x5e>
 800a96a:	222d      	movs	r2, #45	; 0x2d
 800a96c:	425b      	negs	r3, r3
 800a96e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a972:	486f      	ldr	r0, [pc, #444]	; (800ab30 <_printf_i+0x21c>)
 800a974:	220a      	movs	r2, #10
 800a976:	e039      	b.n	800a9ec <_printf_i+0xd8>
 800a978:	2973      	cmp	r1, #115	; 0x73
 800a97a:	f000 809d 	beq.w	800aab8 <_printf_i+0x1a4>
 800a97e:	d808      	bhi.n	800a992 <_printf_i+0x7e>
 800a980:	296f      	cmp	r1, #111	; 0x6f
 800a982:	d020      	beq.n	800a9c6 <_printf_i+0xb2>
 800a984:	2970      	cmp	r1, #112	; 0x70
 800a986:	d1dd      	bne.n	800a944 <_printf_i+0x30>
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	f043 0320 	orr.w	r3, r3, #32
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	e003      	b.n	800a99a <_printf_i+0x86>
 800a992:	2975      	cmp	r1, #117	; 0x75
 800a994:	d017      	beq.n	800a9c6 <_printf_i+0xb2>
 800a996:	2978      	cmp	r1, #120	; 0x78
 800a998:	d1d4      	bne.n	800a944 <_printf_i+0x30>
 800a99a:	2378      	movs	r3, #120	; 0x78
 800a99c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9a0:	4864      	ldr	r0, [pc, #400]	; (800ab34 <_printf_i+0x220>)
 800a9a2:	e055      	b.n	800aa50 <_printf_i+0x13c>
 800a9a4:	6813      	ldr	r3, [r2, #0]
 800a9a6:	1d19      	adds	r1, r3, #4
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	6011      	str	r1, [r2, #0]
 800a9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e08c      	b.n	800aad2 <_printf_i+0x1be>
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6011      	str	r1, [r2, #0]
 800a9bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9c0:	bf18      	it	ne
 800a9c2:	b21b      	sxthne	r3, r3
 800a9c4:	e7cf      	b.n	800a966 <_printf_i+0x52>
 800a9c6:	6813      	ldr	r3, [r2, #0]
 800a9c8:	6825      	ldr	r5, [r4, #0]
 800a9ca:	1d18      	adds	r0, r3, #4
 800a9cc:	6010      	str	r0, [r2, #0]
 800a9ce:	0628      	lsls	r0, r5, #24
 800a9d0:	d501      	bpl.n	800a9d6 <_printf_i+0xc2>
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	e002      	b.n	800a9dc <_printf_i+0xc8>
 800a9d6:	0668      	lsls	r0, r5, #25
 800a9d8:	d5fb      	bpl.n	800a9d2 <_printf_i+0xbe>
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	4854      	ldr	r0, [pc, #336]	; (800ab30 <_printf_i+0x21c>)
 800a9de:	296f      	cmp	r1, #111	; 0x6f
 800a9e0:	bf14      	ite	ne
 800a9e2:	220a      	movne	r2, #10
 800a9e4:	2208      	moveq	r2, #8
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9ec:	6865      	ldr	r5, [r4, #4]
 800a9ee:	60a5      	str	r5, [r4, #8]
 800a9f0:	2d00      	cmp	r5, #0
 800a9f2:	f2c0 8095 	blt.w	800ab20 <_printf_i+0x20c>
 800a9f6:	6821      	ldr	r1, [r4, #0]
 800a9f8:	f021 0104 	bic.w	r1, r1, #4
 800a9fc:	6021      	str	r1, [r4, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d13d      	bne.n	800aa7e <_printf_i+0x16a>
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	f040 808e 	bne.w	800ab24 <_printf_i+0x210>
 800aa08:	4665      	mov	r5, ip
 800aa0a:	2a08      	cmp	r2, #8
 800aa0c:	d10b      	bne.n	800aa26 <_printf_i+0x112>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	07db      	lsls	r3, r3, #31
 800aa12:	d508      	bpl.n	800aa26 <_printf_i+0x112>
 800aa14:	6923      	ldr	r3, [r4, #16]
 800aa16:	6862      	ldr	r2, [r4, #4]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	bfde      	ittt	le
 800aa1c:	2330      	movle	r3, #48	; 0x30
 800aa1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa22:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa26:	ebac 0305 	sub.w	r3, ip, r5
 800aa2a:	6123      	str	r3, [r4, #16]
 800aa2c:	f8cd 8000 	str.w	r8, [sp]
 800aa30:	463b      	mov	r3, r7
 800aa32:	aa03      	add	r2, sp, #12
 800aa34:	4621      	mov	r1, r4
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7ff fef6 	bl	800a828 <_printf_common>
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d14d      	bne.n	800aadc <_printf_i+0x1c8>
 800aa40:	f04f 30ff 	mov.w	r0, #4294967295
 800aa44:	b005      	add	sp, #20
 800aa46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa4a:	4839      	ldr	r0, [pc, #228]	; (800ab30 <_printf_i+0x21c>)
 800aa4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aa50:	6813      	ldr	r3, [r2, #0]
 800aa52:	6821      	ldr	r1, [r4, #0]
 800aa54:	1d1d      	adds	r5, r3, #4
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6015      	str	r5, [r2, #0]
 800aa5a:	060a      	lsls	r2, r1, #24
 800aa5c:	d50b      	bpl.n	800aa76 <_printf_i+0x162>
 800aa5e:	07ca      	lsls	r2, r1, #31
 800aa60:	bf44      	itt	mi
 800aa62:	f041 0120 	orrmi.w	r1, r1, #32
 800aa66:	6021      	strmi	r1, [r4, #0]
 800aa68:	b91b      	cbnz	r3, 800aa72 <_printf_i+0x15e>
 800aa6a:	6822      	ldr	r2, [r4, #0]
 800aa6c:	f022 0220 	bic.w	r2, r2, #32
 800aa70:	6022      	str	r2, [r4, #0]
 800aa72:	2210      	movs	r2, #16
 800aa74:	e7b7      	b.n	800a9e6 <_printf_i+0xd2>
 800aa76:	064d      	lsls	r5, r1, #25
 800aa78:	bf48      	it	mi
 800aa7a:	b29b      	uxthmi	r3, r3
 800aa7c:	e7ef      	b.n	800aa5e <_printf_i+0x14a>
 800aa7e:	4665      	mov	r5, ip
 800aa80:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa84:	fb02 3311 	mls	r3, r2, r1, r3
 800aa88:	5cc3      	ldrb	r3, [r0, r3]
 800aa8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aa8e:	460b      	mov	r3, r1
 800aa90:	2900      	cmp	r1, #0
 800aa92:	d1f5      	bne.n	800aa80 <_printf_i+0x16c>
 800aa94:	e7b9      	b.n	800aa0a <_printf_i+0xf6>
 800aa96:	6813      	ldr	r3, [r2, #0]
 800aa98:	6825      	ldr	r5, [r4, #0]
 800aa9a:	6961      	ldr	r1, [r4, #20]
 800aa9c:	1d18      	adds	r0, r3, #4
 800aa9e:	6010      	str	r0, [r2, #0]
 800aaa0:	0628      	lsls	r0, r5, #24
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	d501      	bpl.n	800aaaa <_printf_i+0x196>
 800aaa6:	6019      	str	r1, [r3, #0]
 800aaa8:	e002      	b.n	800aab0 <_printf_i+0x19c>
 800aaaa:	066a      	lsls	r2, r5, #25
 800aaac:	d5fb      	bpl.n	800aaa6 <_printf_i+0x192>
 800aaae:	8019      	strh	r1, [r3, #0]
 800aab0:	2300      	movs	r3, #0
 800aab2:	6123      	str	r3, [r4, #16]
 800aab4:	4665      	mov	r5, ip
 800aab6:	e7b9      	b.n	800aa2c <_printf_i+0x118>
 800aab8:	6813      	ldr	r3, [r2, #0]
 800aaba:	1d19      	adds	r1, r3, #4
 800aabc:	6011      	str	r1, [r2, #0]
 800aabe:	681d      	ldr	r5, [r3, #0]
 800aac0:	6862      	ldr	r2, [r4, #4]
 800aac2:	2100      	movs	r1, #0
 800aac4:	4628      	mov	r0, r5
 800aac6:	f7f5 fc0b 	bl	80002e0 <memchr>
 800aaca:	b108      	cbz	r0, 800aad0 <_printf_i+0x1bc>
 800aacc:	1b40      	subs	r0, r0, r5
 800aace:	6060      	str	r0, [r4, #4]
 800aad0:	6863      	ldr	r3, [r4, #4]
 800aad2:	6123      	str	r3, [r4, #16]
 800aad4:	2300      	movs	r3, #0
 800aad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aada:	e7a7      	b.n	800aa2c <_printf_i+0x118>
 800aadc:	6923      	ldr	r3, [r4, #16]
 800aade:	462a      	mov	r2, r5
 800aae0:	4639      	mov	r1, r7
 800aae2:	4630      	mov	r0, r6
 800aae4:	47c0      	blx	r8
 800aae6:	3001      	adds	r0, #1
 800aae8:	d0aa      	beq.n	800aa40 <_printf_i+0x12c>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	079b      	lsls	r3, r3, #30
 800aaee:	d413      	bmi.n	800ab18 <_printf_i+0x204>
 800aaf0:	68e0      	ldr	r0, [r4, #12]
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	4298      	cmp	r0, r3
 800aaf6:	bfb8      	it	lt
 800aaf8:	4618      	movlt	r0, r3
 800aafa:	e7a3      	b.n	800aa44 <_printf_i+0x130>
 800aafc:	2301      	movs	r3, #1
 800aafe:	464a      	mov	r2, r9
 800ab00:	4639      	mov	r1, r7
 800ab02:	4630      	mov	r0, r6
 800ab04:	47c0      	blx	r8
 800ab06:	3001      	adds	r0, #1
 800ab08:	d09a      	beq.n	800aa40 <_printf_i+0x12c>
 800ab0a:	3501      	adds	r5, #1
 800ab0c:	68e3      	ldr	r3, [r4, #12]
 800ab0e:	9a03      	ldr	r2, [sp, #12]
 800ab10:	1a9b      	subs	r3, r3, r2
 800ab12:	42ab      	cmp	r3, r5
 800ab14:	dcf2      	bgt.n	800aafc <_printf_i+0x1e8>
 800ab16:	e7eb      	b.n	800aaf0 <_printf_i+0x1dc>
 800ab18:	2500      	movs	r5, #0
 800ab1a:	f104 0919 	add.w	r9, r4, #25
 800ab1e:	e7f5      	b.n	800ab0c <_printf_i+0x1f8>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1ac      	bne.n	800aa7e <_printf_i+0x16a>
 800ab24:	7803      	ldrb	r3, [r0, #0]
 800ab26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab2e:	e76c      	b.n	800aa0a <_printf_i+0xf6>
 800ab30:	0800b999 	.word	0x0800b999
 800ab34:	0800b9aa 	.word	0x0800b9aa

0800ab38 <memcpy>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	1e43      	subs	r3, r0, #1
 800ab3c:	440a      	add	r2, r1
 800ab3e:	4291      	cmp	r1, r2
 800ab40:	d100      	bne.n	800ab44 <memcpy+0xc>
 800ab42:	bd10      	pop	{r4, pc}
 800ab44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab4c:	e7f7      	b.n	800ab3e <memcpy+0x6>

0800ab4e <memmove>:
 800ab4e:	4288      	cmp	r0, r1
 800ab50:	b510      	push	{r4, lr}
 800ab52:	eb01 0302 	add.w	r3, r1, r2
 800ab56:	d807      	bhi.n	800ab68 <memmove+0x1a>
 800ab58:	1e42      	subs	r2, r0, #1
 800ab5a:	4299      	cmp	r1, r3
 800ab5c:	d00a      	beq.n	800ab74 <memmove+0x26>
 800ab5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab62:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ab66:	e7f8      	b.n	800ab5a <memmove+0xc>
 800ab68:	4283      	cmp	r3, r0
 800ab6a:	d9f5      	bls.n	800ab58 <memmove+0xa>
 800ab6c:	1881      	adds	r1, r0, r2
 800ab6e:	1ad2      	subs	r2, r2, r3
 800ab70:	42d3      	cmn	r3, r2
 800ab72:	d100      	bne.n	800ab76 <memmove+0x28>
 800ab74:	bd10      	pop	{r4, pc}
 800ab76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab7e:	e7f7      	b.n	800ab70 <memmove+0x22>

0800ab80 <_free_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4605      	mov	r5, r0
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d045      	beq.n	800ac14 <_free_r+0x94>
 800ab88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab8c:	1f0c      	subs	r4, r1, #4
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	bfb8      	it	lt
 800ab92:	18e4      	addlt	r4, r4, r3
 800ab94:	f000 f8d2 	bl	800ad3c <__malloc_lock>
 800ab98:	4a1f      	ldr	r2, [pc, #124]	; (800ac18 <_free_r+0x98>)
 800ab9a:	6813      	ldr	r3, [r2, #0]
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	b933      	cbnz	r3, 800abae <_free_r+0x2e>
 800aba0:	6063      	str	r3, [r4, #4]
 800aba2:	6014      	str	r4, [r2, #0]
 800aba4:	4628      	mov	r0, r5
 800aba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abaa:	f000 b8c8 	b.w	800ad3e <__malloc_unlock>
 800abae:	42a3      	cmp	r3, r4
 800abb0:	d90c      	bls.n	800abcc <_free_r+0x4c>
 800abb2:	6821      	ldr	r1, [r4, #0]
 800abb4:	1862      	adds	r2, r4, r1
 800abb6:	4293      	cmp	r3, r2
 800abb8:	bf04      	itt	eq
 800abba:	681a      	ldreq	r2, [r3, #0]
 800abbc:	685b      	ldreq	r3, [r3, #4]
 800abbe:	6063      	str	r3, [r4, #4]
 800abc0:	bf04      	itt	eq
 800abc2:	1852      	addeq	r2, r2, r1
 800abc4:	6022      	streq	r2, [r4, #0]
 800abc6:	6004      	str	r4, [r0, #0]
 800abc8:	e7ec      	b.n	800aba4 <_free_r+0x24>
 800abca:	4613      	mov	r3, r2
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	b10a      	cbz	r2, 800abd4 <_free_r+0x54>
 800abd0:	42a2      	cmp	r2, r4
 800abd2:	d9fa      	bls.n	800abca <_free_r+0x4a>
 800abd4:	6819      	ldr	r1, [r3, #0]
 800abd6:	1858      	adds	r0, r3, r1
 800abd8:	42a0      	cmp	r0, r4
 800abda:	d10b      	bne.n	800abf4 <_free_r+0x74>
 800abdc:	6820      	ldr	r0, [r4, #0]
 800abde:	4401      	add	r1, r0
 800abe0:	1858      	adds	r0, r3, r1
 800abe2:	4282      	cmp	r2, r0
 800abe4:	6019      	str	r1, [r3, #0]
 800abe6:	d1dd      	bne.n	800aba4 <_free_r+0x24>
 800abe8:	6810      	ldr	r0, [r2, #0]
 800abea:	6852      	ldr	r2, [r2, #4]
 800abec:	605a      	str	r2, [r3, #4]
 800abee:	4401      	add	r1, r0
 800abf0:	6019      	str	r1, [r3, #0]
 800abf2:	e7d7      	b.n	800aba4 <_free_r+0x24>
 800abf4:	d902      	bls.n	800abfc <_free_r+0x7c>
 800abf6:	230c      	movs	r3, #12
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	e7d3      	b.n	800aba4 <_free_r+0x24>
 800abfc:	6820      	ldr	r0, [r4, #0]
 800abfe:	1821      	adds	r1, r4, r0
 800ac00:	428a      	cmp	r2, r1
 800ac02:	bf04      	itt	eq
 800ac04:	6811      	ldreq	r1, [r2, #0]
 800ac06:	6852      	ldreq	r2, [r2, #4]
 800ac08:	6062      	str	r2, [r4, #4]
 800ac0a:	bf04      	itt	eq
 800ac0c:	1809      	addeq	r1, r1, r0
 800ac0e:	6021      	streq	r1, [r4, #0]
 800ac10:	605c      	str	r4, [r3, #4]
 800ac12:	e7c7      	b.n	800aba4 <_free_r+0x24>
 800ac14:	bd38      	pop	{r3, r4, r5, pc}
 800ac16:	bf00      	nop
 800ac18:	20000098 	.word	0x20000098

0800ac1c <_malloc_r>:
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	1ccd      	adds	r5, r1, #3
 800ac20:	f025 0503 	bic.w	r5, r5, #3
 800ac24:	3508      	adds	r5, #8
 800ac26:	2d0c      	cmp	r5, #12
 800ac28:	bf38      	it	cc
 800ac2a:	250c      	movcc	r5, #12
 800ac2c:	2d00      	cmp	r5, #0
 800ac2e:	4606      	mov	r6, r0
 800ac30:	db01      	blt.n	800ac36 <_malloc_r+0x1a>
 800ac32:	42a9      	cmp	r1, r5
 800ac34:	d903      	bls.n	800ac3e <_malloc_r+0x22>
 800ac36:	230c      	movs	r3, #12
 800ac38:	6033      	str	r3, [r6, #0]
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	bd70      	pop	{r4, r5, r6, pc}
 800ac3e:	f000 f87d 	bl	800ad3c <__malloc_lock>
 800ac42:	4a21      	ldr	r2, [pc, #132]	; (800acc8 <_malloc_r+0xac>)
 800ac44:	6814      	ldr	r4, [r2, #0]
 800ac46:	4621      	mov	r1, r4
 800ac48:	b991      	cbnz	r1, 800ac70 <_malloc_r+0x54>
 800ac4a:	4c20      	ldr	r4, [pc, #128]	; (800accc <_malloc_r+0xb0>)
 800ac4c:	6823      	ldr	r3, [r4, #0]
 800ac4e:	b91b      	cbnz	r3, 800ac58 <_malloc_r+0x3c>
 800ac50:	4630      	mov	r0, r6
 800ac52:	f000 f863 	bl	800ad1c <_sbrk_r>
 800ac56:	6020      	str	r0, [r4, #0]
 800ac58:	4629      	mov	r1, r5
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f000 f85e 	bl	800ad1c <_sbrk_r>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d124      	bne.n	800acae <_malloc_r+0x92>
 800ac64:	230c      	movs	r3, #12
 800ac66:	6033      	str	r3, [r6, #0]
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f000 f868 	bl	800ad3e <__malloc_unlock>
 800ac6e:	e7e4      	b.n	800ac3a <_malloc_r+0x1e>
 800ac70:	680b      	ldr	r3, [r1, #0]
 800ac72:	1b5b      	subs	r3, r3, r5
 800ac74:	d418      	bmi.n	800aca8 <_malloc_r+0x8c>
 800ac76:	2b0b      	cmp	r3, #11
 800ac78:	d90f      	bls.n	800ac9a <_malloc_r+0x7e>
 800ac7a:	600b      	str	r3, [r1, #0]
 800ac7c:	50cd      	str	r5, [r1, r3]
 800ac7e:	18cc      	adds	r4, r1, r3
 800ac80:	4630      	mov	r0, r6
 800ac82:	f000 f85c 	bl	800ad3e <__malloc_unlock>
 800ac86:	f104 000b 	add.w	r0, r4, #11
 800ac8a:	1d23      	adds	r3, r4, #4
 800ac8c:	f020 0007 	bic.w	r0, r0, #7
 800ac90:	1ac3      	subs	r3, r0, r3
 800ac92:	d0d3      	beq.n	800ac3c <_malloc_r+0x20>
 800ac94:	425a      	negs	r2, r3
 800ac96:	50e2      	str	r2, [r4, r3]
 800ac98:	e7d0      	b.n	800ac3c <_malloc_r+0x20>
 800ac9a:	428c      	cmp	r4, r1
 800ac9c:	684b      	ldr	r3, [r1, #4]
 800ac9e:	bf16      	itet	ne
 800aca0:	6063      	strne	r3, [r4, #4]
 800aca2:	6013      	streq	r3, [r2, #0]
 800aca4:	460c      	movne	r4, r1
 800aca6:	e7eb      	b.n	800ac80 <_malloc_r+0x64>
 800aca8:	460c      	mov	r4, r1
 800acaa:	6849      	ldr	r1, [r1, #4]
 800acac:	e7cc      	b.n	800ac48 <_malloc_r+0x2c>
 800acae:	1cc4      	adds	r4, r0, #3
 800acb0:	f024 0403 	bic.w	r4, r4, #3
 800acb4:	42a0      	cmp	r0, r4
 800acb6:	d005      	beq.n	800acc4 <_malloc_r+0xa8>
 800acb8:	1a21      	subs	r1, r4, r0
 800acba:	4630      	mov	r0, r6
 800acbc:	f000 f82e 	bl	800ad1c <_sbrk_r>
 800acc0:	3001      	adds	r0, #1
 800acc2:	d0cf      	beq.n	800ac64 <_malloc_r+0x48>
 800acc4:	6025      	str	r5, [r4, #0]
 800acc6:	e7db      	b.n	800ac80 <_malloc_r+0x64>
 800acc8:	20000098 	.word	0x20000098
 800accc:	2000009c 	.word	0x2000009c

0800acd0 <_realloc_r>:
 800acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd2:	4607      	mov	r7, r0
 800acd4:	4614      	mov	r4, r2
 800acd6:	460e      	mov	r6, r1
 800acd8:	b921      	cbnz	r1, 800ace4 <_realloc_r+0x14>
 800acda:	4611      	mov	r1, r2
 800acdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ace0:	f7ff bf9c 	b.w	800ac1c <_malloc_r>
 800ace4:	b922      	cbnz	r2, 800acf0 <_realloc_r+0x20>
 800ace6:	f7ff ff4b 	bl	800ab80 <_free_r>
 800acea:	4625      	mov	r5, r4
 800acec:	4628      	mov	r0, r5
 800acee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acf0:	f000 f826 	bl	800ad40 <_malloc_usable_size_r>
 800acf4:	42a0      	cmp	r0, r4
 800acf6:	d20f      	bcs.n	800ad18 <_realloc_r+0x48>
 800acf8:	4621      	mov	r1, r4
 800acfa:	4638      	mov	r0, r7
 800acfc:	f7ff ff8e 	bl	800ac1c <_malloc_r>
 800ad00:	4605      	mov	r5, r0
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d0f2      	beq.n	800acec <_realloc_r+0x1c>
 800ad06:	4631      	mov	r1, r6
 800ad08:	4622      	mov	r2, r4
 800ad0a:	f7ff ff15 	bl	800ab38 <memcpy>
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4638      	mov	r0, r7
 800ad12:	f7ff ff35 	bl	800ab80 <_free_r>
 800ad16:	e7e9      	b.n	800acec <_realloc_r+0x1c>
 800ad18:	4635      	mov	r5, r6
 800ad1a:	e7e7      	b.n	800acec <_realloc_r+0x1c>

0800ad1c <_sbrk_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4c06      	ldr	r4, [pc, #24]	; (800ad38 <_sbrk_r+0x1c>)
 800ad20:	2300      	movs	r3, #0
 800ad22:	4605      	mov	r5, r0
 800ad24:	4608      	mov	r0, r1
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	f7f6 fb5a 	bl	80013e0 <_sbrk>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_sbrk_r+0x1a>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_sbrk_r+0x1a>
 800ad34:	602b      	str	r3, [r5, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20000478 	.word	0x20000478

0800ad3c <__malloc_lock>:
 800ad3c:	4770      	bx	lr

0800ad3e <__malloc_unlock>:
 800ad3e:	4770      	bx	lr

0800ad40 <_malloc_usable_size_r>:
 800ad40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad44:	1f18      	subs	r0, r3, #4
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	bfbc      	itt	lt
 800ad4a:	580b      	ldrlt	r3, [r1, r0]
 800ad4c:	18c0      	addlt	r0, r0, r3
 800ad4e:	4770      	bx	lr

0800ad50 <sin>:
 800ad50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad52:	eeb0 7b40 	vmov.f64	d7, d0
 800ad56:	ee17 3a90 	vmov	r3, s15
 800ad5a:	4a19      	ldr	r2, [pc, #100]	; (800adc0 <sin+0x70>)
 800ad5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad60:	4293      	cmp	r3, r2
 800ad62:	dc05      	bgt.n	800ad70 <sin+0x20>
 800ad64:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800adb8 <sin+0x68>
 800ad68:	2000      	movs	r0, #0
 800ad6a:	f000 fc71 	bl	800b650 <__kernel_sin>
 800ad6e:	e004      	b.n	800ad7a <sin+0x2a>
 800ad70:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <sin+0x74>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	dd04      	ble.n	800ad80 <sin+0x30>
 800ad76:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ad7a:	b005      	add	sp, #20
 800ad7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad80:	4668      	mov	r0, sp
 800ad82:	f000 f821 	bl	800adc8 <__ieee754_rem_pio2>
 800ad86:	f000 0003 	and.w	r0, r0, #3
 800ad8a:	2801      	cmp	r0, #1
 800ad8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad90:	ed9d 0b00 	vldr	d0, [sp]
 800ad94:	d004      	beq.n	800ada0 <sin+0x50>
 800ad96:	2802      	cmp	r0, #2
 800ad98:	d005      	beq.n	800ada6 <sin+0x56>
 800ad9a:	b950      	cbnz	r0, 800adb2 <sin+0x62>
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	e7e4      	b.n	800ad6a <sin+0x1a>
 800ada0:	f000 f94e 	bl	800b040 <__kernel_cos>
 800ada4:	e7e9      	b.n	800ad7a <sin+0x2a>
 800ada6:	2001      	movs	r0, #1
 800ada8:	f000 fc52 	bl	800b650 <__kernel_sin>
 800adac:	eeb1 0b40 	vneg.f64	d0, d0
 800adb0:	e7e3      	b.n	800ad7a <sin+0x2a>
 800adb2:	f000 f945 	bl	800b040 <__kernel_cos>
 800adb6:	e7f9      	b.n	800adac <sin+0x5c>
	...
 800adc0:	3fe921fb 	.word	0x3fe921fb
 800adc4:	7fefffff 	.word	0x7fefffff

0800adc8 <__ieee754_rem_pio2>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	eeb0 7b40 	vmov.f64	d7, d0
 800adce:	ee17 5a90 	vmov	r5, s15
 800add2:	4b95      	ldr	r3, [pc, #596]	; (800b028 <__ieee754_rem_pio2+0x260>)
 800add4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800add8:	429e      	cmp	r6, r3
 800adda:	b088      	sub	sp, #32
 800addc:	4604      	mov	r4, r0
 800adde:	dc07      	bgt.n	800adf0 <__ieee754_rem_pio2+0x28>
 800ade0:	2200      	movs	r2, #0
 800ade2:	2300      	movs	r3, #0
 800ade4:	ed84 0b00 	vstr	d0, [r4]
 800ade8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800adec:	2000      	movs	r0, #0
 800adee:	e01b      	b.n	800ae28 <__ieee754_rem_pio2+0x60>
 800adf0:	4b8e      	ldr	r3, [pc, #568]	; (800b02c <__ieee754_rem_pio2+0x264>)
 800adf2:	429e      	cmp	r6, r3
 800adf4:	dc3b      	bgt.n	800ae6e <__ieee754_rem_pio2+0xa6>
 800adf6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800adfa:	2d00      	cmp	r5, #0
 800adfc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800afe8 <__ieee754_rem_pio2+0x220>
 800ae00:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800ae04:	dd19      	ble.n	800ae3a <__ieee754_rem_pio2+0x72>
 800ae06:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ae0a:	429e      	cmp	r6, r3
 800ae0c:	d00e      	beq.n	800ae2c <__ieee754_rem_pio2+0x64>
 800ae0e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800aff0 <__ieee754_rem_pio2+0x228>
 800ae12:	ee37 5b46 	vsub.f64	d5, d7, d6
 800ae16:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ae1a:	ed84 5b00 	vstr	d5, [r4]
 800ae1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae22:	ed84 7b02 	vstr	d7, [r4, #8]
 800ae26:	2001      	movs	r0, #1
 800ae28:	b008      	add	sp, #32
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}
 800ae2c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800aff8 <__ieee754_rem_pio2+0x230>
 800ae30:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ae34:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800b000 <__ieee754_rem_pio2+0x238>
 800ae38:	e7eb      	b.n	800ae12 <__ieee754_rem_pio2+0x4a>
 800ae3a:	429e      	cmp	r6, r3
 800ae3c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800ae40:	d00e      	beq.n	800ae60 <__ieee754_rem_pio2+0x98>
 800ae42:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800aff0 <__ieee754_rem_pio2+0x228>
 800ae46:	ee37 5b06 	vadd.f64	d5, d7, d6
 800ae4a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ae4e:	ed84 5b00 	vstr	d5, [r4]
 800ae52:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ae56:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5a:	ed84 7b02 	vstr	d7, [r4, #8]
 800ae5e:	e7e3      	b.n	800ae28 <__ieee754_rem_pio2+0x60>
 800ae60:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800aff8 <__ieee754_rem_pio2+0x230>
 800ae64:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ae68:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800b000 <__ieee754_rem_pio2+0x238>
 800ae6c:	e7eb      	b.n	800ae46 <__ieee754_rem_pio2+0x7e>
 800ae6e:	4b70      	ldr	r3, [pc, #448]	; (800b030 <__ieee754_rem_pio2+0x268>)
 800ae70:	429e      	cmp	r6, r3
 800ae72:	dc6c      	bgt.n	800af4e <__ieee754_rem_pio2+0x186>
 800ae74:	f000 fc44 	bl	800b700 <fabs>
 800ae78:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800ae7c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800b008 <__ieee754_rem_pio2+0x240>
 800ae80:	eea0 7b06 	vfma.f64	d7, d0, d6
 800ae84:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ae88:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ae8c:	ee17 0a90 	vmov	r0, s15
 800ae90:	eeb1 5b44 	vneg.f64	d5, d4
 800ae94:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800afe8 <__ieee754_rem_pio2+0x220>
 800ae98:	eea5 0b07 	vfma.f64	d0, d5, d7
 800ae9c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800aff0 <__ieee754_rem_pio2+0x228>
 800aea0:	281f      	cmp	r0, #31
 800aea2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800aea6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800aeaa:	dc08      	bgt.n	800aebe <__ieee754_rem_pio2+0xf6>
 800aeac:	1e42      	subs	r2, r0, #1
 800aeae:	4b61      	ldr	r3, [pc, #388]	; (800b034 <__ieee754_rem_pio2+0x26c>)
 800aeb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb4:	42b3      	cmp	r3, r6
 800aeb6:	d002      	beq.n	800aebe <__ieee754_rem_pio2+0xf6>
 800aeb8:	ed84 6b00 	vstr	d6, [r4]
 800aebc:	e022      	b.n	800af04 <__ieee754_rem_pio2+0x13c>
 800aebe:	ee16 3a90 	vmov	r3, s13
 800aec2:	1536      	asrs	r6, r6, #20
 800aec4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800aec8:	1af3      	subs	r3, r6, r3
 800aeca:	2b10      	cmp	r3, #16
 800aecc:	ddf4      	ble.n	800aeb8 <__ieee754_rem_pio2+0xf0>
 800aece:	eeb0 6b40 	vmov.f64	d6, d0
 800aed2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800aff8 <__ieee754_rem_pio2+0x230>
 800aed6:	eea5 6b03 	vfma.f64	d6, d5, d3
 800aeda:	ee30 7b46 	vsub.f64	d7, d0, d6
 800aede:	eea5 7b03 	vfma.f64	d7, d5, d3
 800aee2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800b000 <__ieee754_rem_pio2+0x238>
 800aee6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800aeea:	ee36 3b47 	vsub.f64	d3, d6, d7
 800aeee:	ee13 3a90 	vmov	r3, s7
 800aef2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800aef6:	1af6      	subs	r6, r6, r3
 800aef8:	2e31      	cmp	r6, #49	; 0x31
 800aefa:	dc17      	bgt.n	800af2c <__ieee754_rem_pio2+0x164>
 800aefc:	eeb0 0b46 	vmov.f64	d0, d6
 800af00:	ed84 3b00 	vstr	d3, [r4]
 800af04:	ed94 6b00 	vldr	d6, [r4]
 800af08:	2d00      	cmp	r5, #0
 800af0a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800af0e:	ee30 7b47 	vsub.f64	d7, d0, d7
 800af12:	ed84 7b02 	vstr	d7, [r4, #8]
 800af16:	da87      	bge.n	800ae28 <__ieee754_rem_pio2+0x60>
 800af18:	eeb1 6b46 	vneg.f64	d6, d6
 800af1c:	ed84 6b00 	vstr	d6, [r4]
 800af20:	eeb1 7b47 	vneg.f64	d7, d7
 800af24:	4240      	negs	r0, r0
 800af26:	ed84 7b02 	vstr	d7, [r4, #8]
 800af2a:	e77d      	b.n	800ae28 <__ieee754_rem_pio2+0x60>
 800af2c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800b010 <__ieee754_rem_pio2+0x248>
 800af30:	eeb0 0b46 	vmov.f64	d0, d6
 800af34:	eea5 0b03 	vfma.f64	d0, d5, d3
 800af38:	ee36 7b40 	vsub.f64	d7, d6, d0
 800af3c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800b018 <__ieee754_rem_pio2+0x250>
 800af40:	eea5 7b03 	vfma.f64	d7, d5, d3
 800af44:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800af48:	ee30 6b47 	vsub.f64	d6, d0, d7
 800af4c:	e7b4      	b.n	800aeb8 <__ieee754_rem_pio2+0xf0>
 800af4e:	4b3a      	ldr	r3, [pc, #232]	; (800b038 <__ieee754_rem_pio2+0x270>)
 800af50:	429e      	cmp	r6, r3
 800af52:	dd06      	ble.n	800af62 <__ieee754_rem_pio2+0x19a>
 800af54:	ee30 7b40 	vsub.f64	d7, d0, d0
 800af58:	ed80 7b02 	vstr	d7, [r0, #8]
 800af5c:	ed80 7b00 	vstr	d7, [r0]
 800af60:	e744      	b.n	800adec <__ieee754_rem_pio2+0x24>
 800af62:	1532      	asrs	r2, r6, #20
 800af64:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800af68:	ee10 0a10 	vmov	r0, s0
 800af6c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800af70:	ec41 0b17 	vmov	d7, r0, r1
 800af74:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800af78:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800b020 <__ieee754_rem_pio2+0x258>
 800af7c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800af80:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af84:	ed8d 6b02 	vstr	d6, [sp, #8]
 800af88:	ee27 7b05 	vmul.f64	d7, d7, d5
 800af8c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800af90:	a908      	add	r1, sp, #32
 800af92:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800af96:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af9a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800af9e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800afa2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800afa6:	2303      	movs	r3, #3
 800afa8:	ed31 7b02 	vldmdb	r1!, {d7}
 800afac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb4:	f103 30ff 	add.w	r0, r3, #4294967295
 800afb8:	d013      	beq.n	800afe2 <__ieee754_rem_pio2+0x21a>
 800afba:	4920      	ldr	r1, [pc, #128]	; (800b03c <__ieee754_rem_pio2+0x274>)
 800afbc:	9101      	str	r1, [sp, #4]
 800afbe:	2102      	movs	r1, #2
 800afc0:	9100      	str	r1, [sp, #0]
 800afc2:	a802      	add	r0, sp, #8
 800afc4:	4621      	mov	r1, r4
 800afc6:	f000 f8a7 	bl	800b118 <__kernel_rem_pio2>
 800afca:	2d00      	cmp	r5, #0
 800afcc:	f6bf af2c 	bge.w	800ae28 <__ieee754_rem_pio2+0x60>
 800afd0:	ed94 7b00 	vldr	d7, [r4]
 800afd4:	eeb1 7b47 	vneg.f64	d7, d7
 800afd8:	ed84 7b00 	vstr	d7, [r4]
 800afdc:	ed94 7b02 	vldr	d7, [r4, #8]
 800afe0:	e79e      	b.n	800af20 <__ieee754_rem_pio2+0x158>
 800afe2:	4603      	mov	r3, r0
 800afe4:	e7e0      	b.n	800afa8 <__ieee754_rem_pio2+0x1e0>
 800afe6:	bf00      	nop
 800afe8:	54400000 	.word	0x54400000
 800afec:	3ff921fb 	.word	0x3ff921fb
 800aff0:	1a626331 	.word	0x1a626331
 800aff4:	3dd0b461 	.word	0x3dd0b461
 800aff8:	1a600000 	.word	0x1a600000
 800affc:	3dd0b461 	.word	0x3dd0b461
 800b000:	2e037073 	.word	0x2e037073
 800b004:	3ba3198a 	.word	0x3ba3198a
 800b008:	6dc9c883 	.word	0x6dc9c883
 800b00c:	3fe45f30 	.word	0x3fe45f30
 800b010:	2e000000 	.word	0x2e000000
 800b014:	3ba3198a 	.word	0x3ba3198a
 800b018:	252049c1 	.word	0x252049c1
 800b01c:	397b839a 	.word	0x397b839a
 800b020:	00000000 	.word	0x00000000
 800b024:	41700000 	.word	0x41700000
 800b028:	3fe921fb 	.word	0x3fe921fb
 800b02c:	4002d97b 	.word	0x4002d97b
 800b030:	413921fb 	.word	0x413921fb
 800b034:	0800b9bc 	.word	0x0800b9bc
 800b038:	7fefffff 	.word	0x7fefffff
 800b03c:	0800ba3c 	.word	0x0800ba3c

0800b040 <__kernel_cos>:
 800b040:	ee10 1a90 	vmov	r1, s1
 800b044:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b048:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b04c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800b050:	da05      	bge.n	800b05e <__kernel_cos+0x1e>
 800b052:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800b056:	ee16 3a90 	vmov	r3, s13
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d03d      	beq.n	800b0da <__kernel_cos+0x9a>
 800b05e:	ee20 4b00 	vmul.f64	d4, d0, d0
 800b062:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b066:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800b0e0 <__kernel_cos+0xa0>
 800b06a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800b06e:	ee24 6b06 	vmul.f64	d6, d4, d6
 800b072:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800b0e8 <__kernel_cos+0xa8>
 800b076:	eea4 5b03 	vfma.f64	d5, d4, d3
 800b07a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800b0f0 <__kernel_cos+0xb0>
 800b07e:	eea5 3b04 	vfma.f64	d3, d5, d4
 800b082:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800b0f8 <__kernel_cos+0xb8>
 800b086:	eea3 5b04 	vfma.f64	d5, d3, d4
 800b08a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800b100 <__kernel_cos+0xc0>
 800b08e:	4b20      	ldr	r3, [pc, #128]	; (800b110 <__kernel_cos+0xd0>)
 800b090:	eea5 3b04 	vfma.f64	d3, d5, d4
 800b094:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800b108 <__kernel_cos+0xc8>
 800b098:	4299      	cmp	r1, r3
 800b09a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800b09e:	ee25 5b04 	vmul.f64	d5, d5, d4
 800b0a2:	eea4 1b05 	vfma.f64	d1, d4, d5
 800b0a6:	dc04      	bgt.n	800b0b2 <__kernel_cos+0x72>
 800b0a8:	ee36 6b41 	vsub.f64	d6, d6, d1
 800b0ac:	ee37 0b46 	vsub.f64	d0, d7, d6
 800b0b0:	4770      	bx	lr
 800b0b2:	4b18      	ldr	r3, [pc, #96]	; (800b114 <__kernel_cos+0xd4>)
 800b0b4:	4299      	cmp	r1, r3
 800b0b6:	dc0d      	bgt.n	800b0d4 <__kernel_cos+0x94>
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800b0be:	ec43 2b15 	vmov	d5, r2, r3
 800b0c2:	ee37 0b45 	vsub.f64	d0, d7, d5
 800b0c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b0ca:	ee36 6b41 	vsub.f64	d6, d6, d1
 800b0ce:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b0d2:	4770      	bx	lr
 800b0d4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800b0d8:	e7f3      	b.n	800b0c2 <__kernel_cos+0x82>
 800b0da:	eeb0 0b47 	vmov.f64	d0, d7
 800b0de:	4770      	bx	lr
 800b0e0:	be8838d4 	.word	0xbe8838d4
 800b0e4:	bda8fae9 	.word	0xbda8fae9
 800b0e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b0ec:	3e21ee9e 	.word	0x3e21ee9e
 800b0f0:	809c52ad 	.word	0x809c52ad
 800b0f4:	be927e4f 	.word	0xbe927e4f
 800b0f8:	19cb1590 	.word	0x19cb1590
 800b0fc:	3efa01a0 	.word	0x3efa01a0
 800b100:	16c15177 	.word	0x16c15177
 800b104:	bf56c16c 	.word	0xbf56c16c
 800b108:	5555554c 	.word	0x5555554c
 800b10c:	3fa55555 	.word	0x3fa55555
 800b110:	3fd33332 	.word	0x3fd33332
 800b114:	3fe90000 	.word	0x3fe90000

0800b118 <__kernel_rem_pio2>:
 800b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b11c:	ed2d 8b06 	vpush	{d8-d10}
 800b120:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800b124:	469b      	mov	fp, r3
 800b126:	460e      	mov	r6, r1
 800b128:	4bc7      	ldr	r3, [pc, #796]	; (800b448 <__kernel_rem_pio2+0x330>)
 800b12a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b12c:	9002      	str	r0, [sp, #8]
 800b12e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800b132:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800b134:	1ed1      	subs	r1, r2, #3
 800b136:	2318      	movs	r3, #24
 800b138:	f06f 0417 	mvn.w	r4, #23
 800b13c:	fb91 f1f3 	sdiv	r1, r1, r3
 800b140:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800b144:	f10b 3aff 	add.w	sl, fp, #4294967295
 800b148:	fb01 4404 	mla	r4, r1, r4, r4
 800b14c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800b430 <__kernel_rem_pio2+0x318>
 800b150:	4414      	add	r4, r2
 800b152:	eba1 050a 	sub.w	r5, r1, sl
 800b156:	aa1a      	add	r2, sp, #104	; 0x68
 800b158:	eb09 070a 	add.w	r7, r9, sl
 800b15c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800b160:	4696      	mov	lr, r2
 800b162:	2300      	movs	r3, #0
 800b164:	42bb      	cmp	r3, r7
 800b166:	dd0f      	ble.n	800b188 <__kernel_rem_pio2+0x70>
 800b168:	af6a      	add	r7, sp, #424	; 0x1a8
 800b16a:	2200      	movs	r2, #0
 800b16c:	454a      	cmp	r2, r9
 800b16e:	dc28      	bgt.n	800b1c2 <__kernel_rem_pio2+0xaa>
 800b170:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b174:	eb0b 0302 	add.w	r3, fp, r2
 800b178:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800b17c:	9d02      	ldr	r5, [sp, #8]
 800b17e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800b430 <__kernel_rem_pio2+0x318>
 800b182:	f04f 0c00 	mov.w	ip, #0
 800b186:	e016      	b.n	800b1b6 <__kernel_rem_pio2+0x9e>
 800b188:	42dd      	cmn	r5, r3
 800b18a:	d409      	bmi.n	800b1a0 <__kernel_rem_pio2+0x88>
 800b18c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800b190:	ee07 2a90 	vmov	s15, r2
 800b194:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b198:	ecae 7b02 	vstmia	lr!, {d7}
 800b19c:	3301      	adds	r3, #1
 800b19e:	e7e1      	b.n	800b164 <__kernel_rem_pio2+0x4c>
 800b1a0:	eeb0 7b46 	vmov.f64	d7, d6
 800b1a4:	e7f8      	b.n	800b198 <__kernel_rem_pio2+0x80>
 800b1a6:	ecb5 5b02 	vldmia	r5!, {d5}
 800b1aa:	ed33 6b02 	vldmdb	r3!, {d6}
 800b1ae:	f10c 0c01 	add.w	ip, ip, #1
 800b1b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b1b6:	45d4      	cmp	ip, sl
 800b1b8:	ddf5      	ble.n	800b1a6 <__kernel_rem_pio2+0x8e>
 800b1ba:	eca7 7b02 	vstmia	r7!, {d7}
 800b1be:	3201      	adds	r2, #1
 800b1c0:	e7d4      	b.n	800b16c <__kernel_rem_pio2+0x54>
 800b1c2:	ab06      	add	r3, sp, #24
 800b1c4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b1c8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800b438 <__kernel_rem_pio2+0x320>
 800b1cc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800b440 <__kernel_rem_pio2+0x328>
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b1d6:	9303      	str	r3, [sp, #12]
 800b1d8:	464d      	mov	r5, r9
 800b1da:	ab92      	add	r3, sp, #584	; 0x248
 800b1dc:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800b1e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b1e4:	3f01      	subs	r7, #1
 800b1e6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800b1ea:	00ff      	lsls	r7, r7, #3
 800b1ec:	ab92      	add	r3, sp, #584	; 0x248
 800b1ee:	19da      	adds	r2, r3, r7
 800b1f0:	3a98      	subs	r2, #152	; 0x98
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	1ae9      	subs	r1, r5, r3
 800b1f6:	2900      	cmp	r1, #0
 800b1f8:	dc4e      	bgt.n	800b298 <__kernel_rem_pio2+0x180>
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f000 fb04 	bl	800b808 <scalbn>
 800b200:	eeb0 8b40 	vmov.f64	d8, d0
 800b204:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800b208:	ee28 0b00 	vmul.f64	d0, d8, d0
 800b20c:	f000 fa84 	bl	800b718 <floor>
 800b210:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800b214:	eea0 8b47 	vfms.f64	d8, d0, d7
 800b218:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800b21c:	2c00      	cmp	r4, #0
 800b21e:	edcd 7a01 	vstr	s15, [sp, #4]
 800b222:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b226:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b22a:	dd4a      	ble.n	800b2c2 <__kernel_rem_pio2+0x1aa>
 800b22c:	1e69      	subs	r1, r5, #1
 800b22e:	ab06      	add	r3, sp, #24
 800b230:	f1c4 0018 	rsb	r0, r4, #24
 800b234:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800b238:	9a01      	ldr	r2, [sp, #4]
 800b23a:	fa4c f300 	asr.w	r3, ip, r0
 800b23e:	441a      	add	r2, r3
 800b240:	4083      	lsls	r3, r0
 800b242:	9201      	str	r2, [sp, #4]
 800b244:	ebac 0203 	sub.w	r2, ip, r3
 800b248:	ab06      	add	r3, sp, #24
 800b24a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800b24e:	f1c4 0317 	rsb	r3, r4, #23
 800b252:	fa42 f803 	asr.w	r8, r2, r3
 800b256:	f1b8 0f00 	cmp.w	r8, #0
 800b25a:	dd43      	ble.n	800b2e4 <__kernel_rem_pio2+0x1cc>
 800b25c:	9b01      	ldr	r3, [sp, #4]
 800b25e:	2000      	movs	r0, #0
 800b260:	3301      	adds	r3, #1
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	4601      	mov	r1, r0
 800b266:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800b26a:	4285      	cmp	r5, r0
 800b26c:	dc6e      	bgt.n	800b34c <__kernel_rem_pio2+0x234>
 800b26e:	2c00      	cmp	r4, #0
 800b270:	dd04      	ble.n	800b27c <__kernel_rem_pio2+0x164>
 800b272:	2c01      	cmp	r4, #1
 800b274:	d07f      	beq.n	800b376 <__kernel_rem_pio2+0x25e>
 800b276:	2c02      	cmp	r4, #2
 800b278:	f000 8087 	beq.w	800b38a <__kernel_rem_pio2+0x272>
 800b27c:	f1b8 0f02 	cmp.w	r8, #2
 800b280:	d130      	bne.n	800b2e4 <__kernel_rem_pio2+0x1cc>
 800b282:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b286:	ee30 8b48 	vsub.f64	d8, d0, d8
 800b28a:	b359      	cbz	r1, 800b2e4 <__kernel_rem_pio2+0x1cc>
 800b28c:	4620      	mov	r0, r4
 800b28e:	f000 fabb 	bl	800b808 <scalbn>
 800b292:	ee38 8b40 	vsub.f64	d8, d8, d0
 800b296:	e025      	b.n	800b2e4 <__kernel_rem_pio2+0x1cc>
 800b298:	ee20 7b09 	vmul.f64	d7, d0, d9
 800b29c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b2a0:	a806      	add	r0, sp, #24
 800b2a2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800b2a6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800b2aa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b2ae:	ee10 1a10 	vmov	r1, s0
 800b2b2:	ed32 0b02 	vldmdb	r2!, {d0}
 800b2b6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800b2ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 800b2be:	3301      	adds	r3, #1
 800b2c0:	e798      	b.n	800b1f4 <__kernel_rem_pio2+0xdc>
 800b2c2:	d106      	bne.n	800b2d2 <__kernel_rem_pio2+0x1ba>
 800b2c4:	1e6b      	subs	r3, r5, #1
 800b2c6:	aa06      	add	r2, sp, #24
 800b2c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b2cc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800b2d0:	e7c1      	b.n	800b256 <__kernel_rem_pio2+0x13e>
 800b2d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b2d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2de:	da32      	bge.n	800b346 <__kernel_rem_pio2+0x22e>
 800b2e0:	f04f 0800 	mov.w	r8, #0
 800b2e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ec:	f040 80b0 	bne.w	800b450 <__kernel_rem_pio2+0x338>
 800b2f0:	1e6b      	subs	r3, r5, #1
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4548      	cmp	r0, r9
 800b2f8:	da4e      	bge.n	800b398 <__kernel_rem_pio2+0x280>
 800b2fa:	2a00      	cmp	r2, #0
 800b2fc:	f000 8088 	beq.w	800b410 <__kernel_rem_pio2+0x2f8>
 800b300:	aa06      	add	r2, sp, #24
 800b302:	3c18      	subs	r4, #24
 800b304:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b308:	2900      	cmp	r1, #0
 800b30a:	f000 808e 	beq.w	800b42a <__kernel_rem_pio2+0x312>
 800b30e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b312:	4620      	mov	r0, r4
 800b314:	9302      	str	r3, [sp, #8]
 800b316:	f000 fa77 	bl	800b808 <scalbn>
 800b31a:	9b02      	ldr	r3, [sp, #8]
 800b31c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800b31e:	00d9      	lsls	r1, r3, #3
 800b320:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800b438 <__kernel_rem_pio2+0x320>
 800b324:	1850      	adds	r0, r2, r1
 800b326:	f100 0508 	add.w	r5, r0, #8
 800b32a:	461c      	mov	r4, r3
 800b32c:	2c00      	cmp	r4, #0
 800b32e:	f280 80bd 	bge.w	800b4ac <__kernel_rem_pio2+0x394>
 800b332:	2500      	movs	r5, #0
 800b334:	1b5c      	subs	r4, r3, r5
 800b336:	2c00      	cmp	r4, #0
 800b338:	f2c0 80dd 	blt.w	800b4f6 <__kernel_rem_pio2+0x3de>
 800b33c:	4f43      	ldr	r7, [pc, #268]	; (800b44c <__kernel_rem_pio2+0x334>)
 800b33e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800b430 <__kernel_rem_pio2+0x318>
 800b342:	2400      	movs	r4, #0
 800b344:	e0cb      	b.n	800b4de <__kernel_rem_pio2+0x3c6>
 800b346:	f04f 0802 	mov.w	r8, #2
 800b34a:	e787      	b.n	800b25c <__kernel_rem_pio2+0x144>
 800b34c:	ab06      	add	r3, sp, #24
 800b34e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b352:	b949      	cbnz	r1, 800b368 <__kernel_rem_pio2+0x250>
 800b354:	b12b      	cbz	r3, 800b362 <__kernel_rem_pio2+0x24a>
 800b356:	aa06      	add	r2, sp, #24
 800b358:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b35c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b360:	2301      	movs	r3, #1
 800b362:	3001      	adds	r0, #1
 800b364:	4619      	mov	r1, r3
 800b366:	e780      	b.n	800b26a <__kernel_rem_pio2+0x152>
 800b368:	aa06      	add	r2, sp, #24
 800b36a:	ebac 0303 	sub.w	r3, ip, r3
 800b36e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b372:	460b      	mov	r3, r1
 800b374:	e7f5      	b.n	800b362 <__kernel_rem_pio2+0x24a>
 800b376:	1e68      	subs	r0, r5, #1
 800b378:	ab06      	add	r3, sp, #24
 800b37a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b37e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b382:	aa06      	add	r2, sp, #24
 800b384:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b388:	e778      	b.n	800b27c <__kernel_rem_pio2+0x164>
 800b38a:	1e68      	subs	r0, r5, #1
 800b38c:	ab06      	add	r3, sp, #24
 800b38e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b392:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b396:	e7f4      	b.n	800b382 <__kernel_rem_pio2+0x26a>
 800b398:	a906      	add	r1, sp, #24
 800b39a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b39e:	3801      	subs	r0, #1
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	e7a8      	b.n	800b2f6 <__kernel_rem_pio2+0x1de>
 800b3a4:	f10c 0c01 	add.w	ip, ip, #1
 800b3a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b3ac:	2a00      	cmp	r2, #0
 800b3ae:	d0f9      	beq.n	800b3a4 <__kernel_rem_pio2+0x28c>
 800b3b0:	eb0b 0305 	add.w	r3, fp, r5
 800b3b4:	aa1a      	add	r2, sp, #104	; 0x68
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	1898      	adds	r0, r3, r2
 800b3ba:	3008      	adds	r0, #8
 800b3bc:	1c69      	adds	r1, r5, #1
 800b3be:	3708      	adds	r7, #8
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	4465      	add	r5, ip
 800b3c4:	9005      	str	r0, [sp, #20]
 800b3c6:	428d      	cmp	r5, r1
 800b3c8:	f6ff af07 	blt.w	800b1da <__kernel_rem_pio2+0xc2>
 800b3cc:	a81a      	add	r0, sp, #104	; 0x68
 800b3ce:	eb02 0c03 	add.w	ip, r2, r3
 800b3d2:	4484      	add	ip, r0
 800b3d4:	9803      	ldr	r0, [sp, #12]
 800b3d6:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b3da:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b3de:	9001      	str	r0, [sp, #4]
 800b3e0:	ee07 0a90 	vmov	s15, r0
 800b3e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b3e8:	9805      	ldr	r0, [sp, #20]
 800b3ea:	ed8c 7b00 	vstr	d7, [ip]
 800b3ee:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b430 <__kernel_rem_pio2+0x318>
 800b3f2:	eb00 0802 	add.w	r8, r0, r2
 800b3f6:	f04f 0c00 	mov.w	ip, #0
 800b3fa:	45d4      	cmp	ip, sl
 800b3fc:	dd0c      	ble.n	800b418 <__kernel_rem_pio2+0x300>
 800b3fe:	eb02 0c07 	add.w	ip, r2, r7
 800b402:	a86a      	add	r0, sp, #424	; 0x1a8
 800b404:	4484      	add	ip, r0
 800b406:	ed8c 7b02 	vstr	d7, [ip, #8]
 800b40a:	3101      	adds	r1, #1
 800b40c:	3208      	adds	r2, #8
 800b40e:	e7da      	b.n	800b3c6 <__kernel_rem_pio2+0x2ae>
 800b410:	9b04      	ldr	r3, [sp, #16]
 800b412:	f04f 0c01 	mov.w	ip, #1
 800b416:	e7c7      	b.n	800b3a8 <__kernel_rem_pio2+0x290>
 800b418:	ecbe 5b02 	vldmia	lr!, {d5}
 800b41c:	ed38 6b02 	vldmdb	r8!, {d6}
 800b420:	f10c 0c01 	add.w	ip, ip, #1
 800b424:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b428:	e7e7      	b.n	800b3fa <__kernel_rem_pio2+0x2e2>
 800b42a:	3b01      	subs	r3, #1
 800b42c:	e768      	b.n	800b300 <__kernel_rem_pio2+0x1e8>
 800b42e:	bf00      	nop
	...
 800b43c:	3e700000 	.word	0x3e700000
 800b440:	00000000 	.word	0x00000000
 800b444:	41700000 	.word	0x41700000
 800b448:	0800bb88 	.word	0x0800bb88
 800b44c:	0800bb48 	.word	0x0800bb48
 800b450:	4260      	negs	r0, r4
 800b452:	eeb0 0b48 	vmov.f64	d0, d8
 800b456:	f000 f9d7 	bl	800b808 <scalbn>
 800b45a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800b638 <__kernel_rem_pio2+0x520>
 800b45e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800b462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b466:	db18      	blt.n	800b49a <__kernel_rem_pio2+0x382>
 800b468:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800b640 <__kernel_rem_pio2+0x528>
 800b46c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b470:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b474:	aa06      	add	r2, sp, #24
 800b476:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800b47a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800b47e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b482:	a906      	add	r1, sp, #24
 800b484:	ee10 3a10 	vmov	r3, s0
 800b488:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b48c:	1c6b      	adds	r3, r5, #1
 800b48e:	ee17 2a10 	vmov	r2, s14
 800b492:	3418      	adds	r4, #24
 800b494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b498:	e739      	b.n	800b30e <__kernel_rem_pio2+0x1f6>
 800b49a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b49e:	aa06      	add	r2, sp, #24
 800b4a0:	ee10 3a10 	vmov	r3, s0
 800b4a4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	e730      	b.n	800b30e <__kernel_rem_pio2+0x1f6>
 800b4ac:	aa06      	add	r2, sp, #24
 800b4ae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800b4b2:	9202      	str	r2, [sp, #8]
 800b4b4:	ee07 2a90 	vmov	s15, r2
 800b4b8:	3c01      	subs	r4, #1
 800b4ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b4be:	ee27 7b00 	vmul.f64	d7, d7, d0
 800b4c2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b4c6:	ed25 7b02 	vstmdb	r5!, {d7}
 800b4ca:	e72f      	b.n	800b32c <__kernel_rem_pio2+0x214>
 800b4cc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800b4d0:	ecb7 5b02 	vldmia	r7!, {d5}
 800b4d4:	ed9c 6b00 	vldr	d6, [ip]
 800b4d8:	3401      	adds	r4, #1
 800b4da:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b4de:	454c      	cmp	r4, r9
 800b4e0:	dc01      	bgt.n	800b4e6 <__kernel_rem_pio2+0x3ce>
 800b4e2:	42a5      	cmp	r5, r4
 800b4e4:	daf2      	bge.n	800b4cc <__kernel_rem_pio2+0x3b4>
 800b4e6:	aa42      	add	r2, sp, #264	; 0x108
 800b4e8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800b4ec:	ed84 7b00 	vstr	d7, [r4]
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	3808      	subs	r0, #8
 800b4f4:	e71e      	b.n	800b334 <__kernel_rem_pio2+0x21c>
 800b4f6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800b4f8:	2a03      	cmp	r2, #3
 800b4fa:	d84e      	bhi.n	800b59a <__kernel_rem_pio2+0x482>
 800b4fc:	e8df f002 	tbb	[pc, r2]
 800b500:	021f1f3e 	.word	0x021f1f3e
 800b504:	3108      	adds	r1, #8
 800b506:	aa42      	add	r2, sp, #264	; 0x108
 800b508:	4411      	add	r1, r2
 800b50a:	4608      	mov	r0, r1
 800b50c:	461c      	mov	r4, r3
 800b50e:	2c00      	cmp	r4, #0
 800b510:	dc61      	bgt.n	800b5d6 <__kernel_rem_pio2+0x4be>
 800b512:	4608      	mov	r0, r1
 800b514:	461c      	mov	r4, r3
 800b516:	2c01      	cmp	r4, #1
 800b518:	dc6d      	bgt.n	800b5f6 <__kernel_rem_pio2+0x4de>
 800b51a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b648 <__kernel_rem_pio2+0x530>
 800b51e:	2b01      	cmp	r3, #1
 800b520:	dc79      	bgt.n	800b616 <__kernel_rem_pio2+0x4fe>
 800b522:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800b526:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800b52a:	f1b8 0f00 	cmp.w	r8, #0
 800b52e:	d178      	bne.n	800b622 <__kernel_rem_pio2+0x50a>
 800b530:	ed86 5b00 	vstr	d5, [r6]
 800b534:	ed86 6b02 	vstr	d6, [r6, #8]
 800b538:	ed86 7b04 	vstr	d7, [r6, #16]
 800b53c:	e02d      	b.n	800b59a <__kernel_rem_pio2+0x482>
 800b53e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800b648 <__kernel_rem_pio2+0x530>
 800b542:	3108      	adds	r1, #8
 800b544:	aa42      	add	r2, sp, #264	; 0x108
 800b546:	4411      	add	r1, r2
 800b548:	4618      	mov	r0, r3
 800b54a:	2800      	cmp	r0, #0
 800b54c:	da34      	bge.n	800b5b8 <__kernel_rem_pio2+0x4a0>
 800b54e:	f1b8 0f00 	cmp.w	r8, #0
 800b552:	d037      	beq.n	800b5c4 <__kernel_rem_pio2+0x4ac>
 800b554:	eeb1 7b46 	vneg.f64	d7, d6
 800b558:	ed86 7b00 	vstr	d7, [r6]
 800b55c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800b560:	a844      	add	r0, sp, #272	; 0x110
 800b562:	2101      	movs	r1, #1
 800b564:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b568:	428b      	cmp	r3, r1
 800b56a:	da2e      	bge.n	800b5ca <__kernel_rem_pio2+0x4b2>
 800b56c:	f1b8 0f00 	cmp.w	r8, #0
 800b570:	d001      	beq.n	800b576 <__kernel_rem_pio2+0x45e>
 800b572:	eeb1 7b47 	vneg.f64	d7, d7
 800b576:	ed86 7b02 	vstr	d7, [r6, #8]
 800b57a:	e00e      	b.n	800b59a <__kernel_rem_pio2+0x482>
 800b57c:	aa92      	add	r2, sp, #584	; 0x248
 800b57e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800b648 <__kernel_rem_pio2+0x530>
 800b582:	4411      	add	r1, r2
 800b584:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800b588:	2b00      	cmp	r3, #0
 800b58a:	da0f      	bge.n	800b5ac <__kernel_rem_pio2+0x494>
 800b58c:	f1b8 0f00 	cmp.w	r8, #0
 800b590:	d001      	beq.n	800b596 <__kernel_rem_pio2+0x47e>
 800b592:	eeb1 7b47 	vneg.f64	d7, d7
 800b596:	ed86 7b00 	vstr	d7, [r6]
 800b59a:	9b01      	ldr	r3, [sp, #4]
 800b59c:	f003 0007 	and.w	r0, r3, #7
 800b5a0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800b5a4:	ecbd 8b06 	vpop	{d8-d10}
 800b5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ac:	ed31 6b02 	vldmdb	r1!, {d6}
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b5b6:	e7e7      	b.n	800b588 <__kernel_rem_pio2+0x470>
 800b5b8:	ed31 7b02 	vldmdb	r1!, {d7}
 800b5bc:	3801      	subs	r0, #1
 800b5be:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b5c2:	e7c2      	b.n	800b54a <__kernel_rem_pio2+0x432>
 800b5c4:	eeb0 7b46 	vmov.f64	d7, d6
 800b5c8:	e7c6      	b.n	800b558 <__kernel_rem_pio2+0x440>
 800b5ca:	ecb0 6b02 	vldmia	r0!, {d6}
 800b5ce:	3101      	adds	r1, #1
 800b5d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b5d4:	e7c8      	b.n	800b568 <__kernel_rem_pio2+0x450>
 800b5d6:	ed10 7b04 	vldr	d7, [r0, #-16]
 800b5da:	ed30 5b02 	vldmdb	r0!, {d5}
 800b5de:	3c01      	subs	r4, #1
 800b5e0:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b5e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b5e8:	ed00 6b02 	vstr	d6, [r0, #-8]
 800b5ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b5f0:	ed80 7b00 	vstr	d7, [r0]
 800b5f4:	e78b      	b.n	800b50e <__kernel_rem_pio2+0x3f6>
 800b5f6:	ed10 7b04 	vldr	d7, [r0, #-16]
 800b5fa:	ed30 5b02 	vldmdb	r0!, {d5}
 800b5fe:	3c01      	subs	r4, #1
 800b600:	ee37 6b05 	vadd.f64	d6, d7, d5
 800b604:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b608:	ed00 6b02 	vstr	d6, [r0, #-8]
 800b60c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b610:	ed80 7b00 	vstr	d7, [r0]
 800b614:	e77f      	b.n	800b516 <__kernel_rem_pio2+0x3fe>
 800b616:	ed31 6b02 	vldmdb	r1!, {d6}
 800b61a:	3b01      	subs	r3, #1
 800b61c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b620:	e77d      	b.n	800b51e <__kernel_rem_pio2+0x406>
 800b622:	eeb1 5b45 	vneg.f64	d5, d5
 800b626:	eeb1 6b46 	vneg.f64	d6, d6
 800b62a:	ed86 5b00 	vstr	d5, [r6]
 800b62e:	eeb1 7b47 	vneg.f64	d7, d7
 800b632:	ed86 6b02 	vstr	d6, [r6, #8]
 800b636:	e77f      	b.n	800b538 <__kernel_rem_pio2+0x420>
 800b638:	00000000 	.word	0x00000000
 800b63c:	41700000 	.word	0x41700000
 800b640:	00000000 	.word	0x00000000
 800b644:	3e700000 	.word	0x3e700000
	...

0800b650 <__kernel_sin>:
 800b650:	ee10 3a90 	vmov	r3, s1
 800b654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b658:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b65c:	da04      	bge.n	800b668 <__kernel_sin+0x18>
 800b65e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800b662:	ee17 3a90 	vmov	r3, s15
 800b666:	b35b      	cbz	r3, 800b6c0 <__kernel_sin+0x70>
 800b668:	ee20 6b00 	vmul.f64	d6, d0, d0
 800b66c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800b670:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800b6c8 <__kernel_sin+0x78>
 800b674:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b6d0 <__kernel_sin+0x80>
 800b678:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b67c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b6d8 <__kernel_sin+0x88>
 800b680:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b684:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b6e0 <__kernel_sin+0x90>
 800b688:	eea7 4b06 	vfma.f64	d4, d7, d6
 800b68c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b6e8 <__kernel_sin+0x98>
 800b690:	eea4 7b06 	vfma.f64	d7, d4, d6
 800b694:	b930      	cbnz	r0, 800b6a4 <__kernel_sin+0x54>
 800b696:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800b6f0 <__kernel_sin+0xa0>
 800b69a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800b69e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800b6a2:	4770      	bx	lr
 800b6a4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800b6a8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b6ac:	eea1 7b04 	vfma.f64	d7, d1, d4
 800b6b0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800b6b4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b6f8 <__kernel_sin+0xa8>
 800b6b8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800b6bc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	f3af 8000 	nop.w
 800b6c8:	5acfd57c 	.word	0x5acfd57c
 800b6cc:	3de5d93a 	.word	0x3de5d93a
 800b6d0:	8a2b9ceb 	.word	0x8a2b9ceb
 800b6d4:	be5ae5e6 	.word	0xbe5ae5e6
 800b6d8:	57b1fe7d 	.word	0x57b1fe7d
 800b6dc:	3ec71de3 	.word	0x3ec71de3
 800b6e0:	19c161d5 	.word	0x19c161d5
 800b6e4:	bf2a01a0 	.word	0xbf2a01a0
 800b6e8:	1110f8a6 	.word	0x1110f8a6
 800b6ec:	3f811111 	.word	0x3f811111
 800b6f0:	55555549 	.word	0x55555549
 800b6f4:	bfc55555 	.word	0xbfc55555
 800b6f8:	55555549 	.word	0x55555549
 800b6fc:	3fc55555 	.word	0x3fc55555

0800b700 <fabs>:
 800b700:	ec51 0b10 	vmov	r0, r1, d0
 800b704:	ee10 2a10 	vmov	r2, s0
 800b708:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b70c:	ec43 2b10 	vmov	d0, r2, r3
 800b710:	4770      	bx	lr
 800b712:	0000      	movs	r0, r0
 800b714:	0000      	movs	r0, r0
	...

0800b718 <floor>:
 800b718:	ee10 1a90 	vmov	r1, s1
 800b71c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b720:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b724:	2b13      	cmp	r3, #19
 800b726:	b530      	push	{r4, r5, lr}
 800b728:	ee10 0a10 	vmov	r0, s0
 800b72c:	ee10 5a10 	vmov	r5, s0
 800b730:	dc33      	bgt.n	800b79a <floor+0x82>
 800b732:	2b00      	cmp	r3, #0
 800b734:	da17      	bge.n	800b766 <floor+0x4e>
 800b736:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800b7f8 <floor+0xe0>
 800b73a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b73e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b746:	dd09      	ble.n	800b75c <floor+0x44>
 800b748:	2900      	cmp	r1, #0
 800b74a:	da50      	bge.n	800b7ee <floor+0xd6>
 800b74c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b750:	4a2b      	ldr	r2, [pc, #172]	; (800b800 <floor+0xe8>)
 800b752:	4303      	orrs	r3, r0
 800b754:	2000      	movs	r0, #0
 800b756:	4283      	cmp	r3, r0
 800b758:	bf18      	it	ne
 800b75a:	4611      	movne	r1, r2
 800b75c:	460b      	mov	r3, r1
 800b75e:	4602      	mov	r2, r0
 800b760:	ec43 2b10 	vmov	d0, r2, r3
 800b764:	e020      	b.n	800b7a8 <floor+0x90>
 800b766:	4a27      	ldr	r2, [pc, #156]	; (800b804 <floor+0xec>)
 800b768:	411a      	asrs	r2, r3
 800b76a:	ea01 0402 	and.w	r4, r1, r2
 800b76e:	4304      	orrs	r4, r0
 800b770:	d01a      	beq.n	800b7a8 <floor+0x90>
 800b772:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b7f8 <floor+0xe0>
 800b776:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b77a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b782:	ddeb      	ble.n	800b75c <floor+0x44>
 800b784:	2900      	cmp	r1, #0
 800b786:	bfbe      	ittt	lt
 800b788:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800b78c:	fa40 f303 	asrlt.w	r3, r0, r3
 800b790:	18c9      	addlt	r1, r1, r3
 800b792:	ea21 0102 	bic.w	r1, r1, r2
 800b796:	2000      	movs	r0, #0
 800b798:	e7e0      	b.n	800b75c <floor+0x44>
 800b79a:	2b33      	cmp	r3, #51	; 0x33
 800b79c:	dd05      	ble.n	800b7aa <floor+0x92>
 800b79e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7a2:	d101      	bne.n	800b7a8 <floor+0x90>
 800b7a4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b7a8:	bd30      	pop	{r4, r5, pc}
 800b7aa:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800b7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b2:	40e2      	lsrs	r2, r4
 800b7b4:	4202      	tst	r2, r0
 800b7b6:	d0f7      	beq.n	800b7a8 <floor+0x90>
 800b7b8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800b7f8 <floor+0xe0>
 800b7bc:	ee30 0b07 	vadd.f64	d0, d0, d7
 800b7c0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c8:	ddc8      	ble.n	800b75c <floor+0x44>
 800b7ca:	2900      	cmp	r1, #0
 800b7cc:	da02      	bge.n	800b7d4 <floor+0xbc>
 800b7ce:	2b14      	cmp	r3, #20
 800b7d0:	d103      	bne.n	800b7da <floor+0xc2>
 800b7d2:	3101      	adds	r1, #1
 800b7d4:	ea20 0002 	bic.w	r0, r0, r2
 800b7d8:	e7c0      	b.n	800b75c <floor+0x44>
 800b7da:	2401      	movs	r4, #1
 800b7dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b7e0:	fa04 f303 	lsl.w	r3, r4, r3
 800b7e4:	4418      	add	r0, r3
 800b7e6:	42a8      	cmp	r0, r5
 800b7e8:	bf38      	it	cc
 800b7ea:	1909      	addcc	r1, r1, r4
 800b7ec:	e7f2      	b.n	800b7d4 <floor+0xbc>
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	4601      	mov	r1, r0
 800b7f2:	e7b3      	b.n	800b75c <floor+0x44>
 800b7f4:	f3af 8000 	nop.w
 800b7f8:	8800759c 	.word	0x8800759c
 800b7fc:	7e37e43c 	.word	0x7e37e43c
 800b800:	bff00000 	.word	0xbff00000
 800b804:	000fffff 	.word	0x000fffff

0800b808 <scalbn>:
 800b808:	b500      	push	{lr}
 800b80a:	ed2d 8b02 	vpush	{d8}
 800b80e:	b083      	sub	sp, #12
 800b810:	ed8d 0b00 	vstr	d0, [sp]
 800b814:	9b01      	ldr	r3, [sp, #4]
 800b816:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b81a:	b9a2      	cbnz	r2, 800b846 <scalbn+0x3e>
 800b81c:	9a00      	ldr	r2, [sp, #0]
 800b81e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b822:	4313      	orrs	r3, r2
 800b824:	d03a      	beq.n	800b89c <scalbn+0x94>
 800b826:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800b8e0 <scalbn+0xd8>
 800b82a:	4b35      	ldr	r3, [pc, #212]	; (800b900 <scalbn+0xf8>)
 800b82c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b830:	4298      	cmp	r0, r3
 800b832:	ed8d 7b00 	vstr	d7, [sp]
 800b836:	da11      	bge.n	800b85c <scalbn+0x54>
 800b838:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800b8e8 <scalbn+0xe0>
 800b83c:	ed9d 6b00 	vldr	d6, [sp]
 800b840:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b844:	e007      	b.n	800b856 <scalbn+0x4e>
 800b846:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b84a:	428a      	cmp	r2, r1
 800b84c:	d10a      	bne.n	800b864 <scalbn+0x5c>
 800b84e:	ed9d 7b00 	vldr	d7, [sp]
 800b852:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b856:	ed8d 7b00 	vstr	d7, [sp]
 800b85a:	e01f      	b.n	800b89c <scalbn+0x94>
 800b85c:	9b01      	ldr	r3, [sp, #4]
 800b85e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b862:	3a36      	subs	r2, #54	; 0x36
 800b864:	4402      	add	r2, r0
 800b866:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b86a:	428a      	cmp	r2, r1
 800b86c:	dd0a      	ble.n	800b884 <scalbn+0x7c>
 800b86e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800b8f0 <scalbn+0xe8>
 800b872:	eeb0 0b48 	vmov.f64	d0, d8
 800b876:	ed9d 1b00 	vldr	d1, [sp]
 800b87a:	f000 f843 	bl	800b904 <copysign>
 800b87e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800b882:	e7e8      	b.n	800b856 <scalbn+0x4e>
 800b884:	2a00      	cmp	r2, #0
 800b886:	dd10      	ble.n	800b8aa <scalbn+0xa2>
 800b888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b88c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b890:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b894:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b898:	e9cd 0100 	strd	r0, r1, [sp]
 800b89c:	ed9d 0b00 	vldr	d0, [sp]
 800b8a0:	b003      	add	sp, #12
 800b8a2:	ecbd 8b02 	vpop	{d8}
 800b8a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8aa:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b8ae:	da06      	bge.n	800b8be <scalbn+0xb6>
 800b8b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b8b4:	4298      	cmp	r0, r3
 800b8b6:	dcda      	bgt.n	800b86e <scalbn+0x66>
 800b8b8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800b8e8 <scalbn+0xe0>
 800b8bc:	e7d9      	b.n	800b872 <scalbn+0x6a>
 800b8be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8c6:	3236      	adds	r2, #54	; 0x36
 800b8c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8cc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b8d0:	ec41 0b17 	vmov	d7, r0, r1
 800b8d4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800b8f8 <scalbn+0xf0>
 800b8d8:	e7b2      	b.n	800b840 <scalbn+0x38>
 800b8da:	bf00      	nop
 800b8dc:	f3af 8000 	nop.w
 800b8e0:	00000000 	.word	0x00000000
 800b8e4:	43500000 	.word	0x43500000
 800b8e8:	c2f8f359 	.word	0xc2f8f359
 800b8ec:	01a56e1f 	.word	0x01a56e1f
 800b8f0:	8800759c 	.word	0x8800759c
 800b8f4:	7e37e43c 	.word	0x7e37e43c
 800b8f8:	00000000 	.word	0x00000000
 800b8fc:	3c900000 	.word	0x3c900000
 800b900:	ffff3cb0 	.word	0xffff3cb0

0800b904 <copysign>:
 800b904:	ec51 0b10 	vmov	r0, r1, d0
 800b908:	ee11 0a90 	vmov	r0, s3
 800b90c:	ee10 2a10 	vmov	r2, s0
 800b910:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b914:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b918:	ea41 0300 	orr.w	r3, r1, r0
 800b91c:	ec43 2b10 	vmov	d0, r2, r3
 800b920:	4770      	bx	lr
	...

0800b924 <_init>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	bf00      	nop
 800b928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92a:	bc08      	pop	{r3}
 800b92c:	469e      	mov	lr, r3
 800b92e:	4770      	bx	lr

0800b930 <_fini>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	bf00      	nop
 800b934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b936:	bc08      	pop	{r3}
 800b938:	469e      	mov	lr, r3
 800b93a:	4770      	bx	lr
